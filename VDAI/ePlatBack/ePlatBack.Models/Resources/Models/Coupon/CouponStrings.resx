<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Activity Name" xml:space="preserve">
    <value>Activity Name</value>
  </data>
  <data name="Activity Time" xml:space="preserve">
    <value>Activity Time</value>
  </data>
  <data name="Activity_Service" xml:space="preserve">
    <value>Activity/Service</value>
  </data>
  <data name="Activity_Service_Date" xml:space="preserve">
    <value>Activity/Service Date</value>
  </data>
  <data name="Agent" xml:space="preserve">
    <value>Agent</value>
  </data>
  <data name="Airline" xml:space="preserve">
    <value>Airline:</value>
  </data>
  <data name="Airport" xml:space="preserve">
    <value>Airport:</value>
  </data>
  <data name="Confirmation Number" xml:space="preserve">
    <value>Confirmation Number</value>
  </data>
  <data name="Coupon Note" xml:space="preserve">
    <value>&lt;ul&gt;&lt;li&gt;Valid only for specified date and time.&lt;/li&gt;
&lt;li&gt;Please note this coupon validates your reservation so make sure you keep it in a safe place and don't forget to bring it with you.&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="Coupon Number" xml:space="preserve">
    <value>Coupon Number</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Delivery Location" xml:space="preserve">
    <value>Delivery Location</value>
  </data>
  <data name="Delivery Time" xml:space="preserve">
    <value>Delivery Time</value>
  </data>
  <data name="Destination" xml:space="preserve">
    <value>Destination</value>
  </data>
  <data name="Exchange Rate" xml:space="preserve">
    <value>Exchange Rate</value>
  </data>
  <data name="Flight" xml:space="preserve">
    <value>Flight:</value>
  </data>
  <data name="Flight Time" xml:space="preserve">
    <value>Flight Time:</value>
  </data>
  <data name="Good for" xml:space="preserve">
    <value>Good for</value>
  </data>
  <data name="Guest Name" xml:space="preserve">
    <value>Guest Name</value>
  </data>
  <data name="Hotel" xml:space="preserve">
    <value>Hotel:</value>
  </data>
  <data name="Important" xml:space="preserve">
    <value>IMPORTANT</value>
  </data>
  <data name="Is operated by" xml:space="preserve">
    <value>Operated by</value>
  </data>
  <data name="Meeting Point" xml:space="preserve">
    <value>Meeting Point</value>
  </data>
  <data name="Meeting Time" xml:space="preserve">
    <value>Meeting Time</value>
  </data>
  <data name="Modality" xml:space="preserve">
    <value>Modality of operation: Retail Agency</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>NOTES</value>
  </data>
  <data name="PrintedBy" xml:space="preserve">
    <value>Printed By</value>
  </data>
  <data name="PrintedOn" xml:space="preserve">
    <value>on</value>
  </data>
  <data name="Privacy Policy" xml:space="preserve">
    <value>Privacy Policy</value>
  </data>
  <data name="Provider" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="Provider_Phone" xml:space="preserve">
    <value>Provider Phone</value>
  </data>
  <data name="Purchase Date" xml:space="preserve">
    <value>Purchase Date (internal use)</value>
  </data>
  <data name="Recommendations" xml:space="preserve">
    <value>Recommendations</value>
  </data>
  <data name="Security String" xml:space="preserve">
    <value>Security String</value>
  </data>
  <data name="Service" xml:space="preserve">
    <value>Service</value>
  </data>
  <data name="Service Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Solicited Vehicle" xml:space="preserve">
    <value>Solicited Vehicle</value>
  </data>
  <data name="Terms and Conditions" xml:space="preserve">
    <value>Terms and Conditions</value>
  </data>
  <data name="To be confirmed" xml:space="preserve">
    <value>To be confirmed</value>
  </data>
  <data name="Toll Free" xml:space="preserve">
    <value>Need assistance?</value>
  </data>
  <data name="Transaction ID" xml:space="preserve">
    <value>Transaction ID</value>
  </data>
  <data name="Transportation Note" xml:space="preserve">
    <value>Dear guest, for a better reference at the time of your arrival our drivers wear a blue polo shirt with the "Cabo Seasons" logo and beige color pants.</value>
  </data>
  <data name="Travel Info" xml:space="preserve">
    <value>Travel Info</value>
  </data>
  <data name="Valid for" xml:space="preserve">
    <value>Valid for</value>
  </data>
</root>