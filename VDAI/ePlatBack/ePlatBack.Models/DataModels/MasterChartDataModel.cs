
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data.Entity;
using System.Linq.Expressions;
using System.Web;
using System.Web.UI;
using System.Web.Mvc;
using System.Web.Security;
using ePlatBack.Models.ViewModels;
using ePlatBack.Models.Utils;
using System.IO;
using System.Web.Script.Serialization;
using Newtonsoft.Json.Linq;
using System.Linq.Dynamic;
using ePlatBack.Models;
using System.Data.Objects;
using ePlatBack.Models.Utils.Custom.Attributes;
using ePlatBack.Models.Utils.Custom;
using System.Globalization;
using System.Data.Objects.DataClasses;
using System.Data.Objects.SqlClient;
using System.Text.RegularExpressions;
using System.Transactions;




namespace ePlatBack.Models.DataModels
{

    public class MasterChartDataModel
    {
        public static UserSession session = new UserSession();

        public class LeadsCatalogs
        {
            /// <summary>
            /// Fill list of sections based on view models
            /// Format of Values: "precedencyOrder_table1_table2_tablen"
            /// </summary>
            /// <returns>list of (value, text)pairs to fill Selects</returns>
            public static List<SelectListItem> FillDrpSections()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "0", Text = "--Select One--", Selected = false });
                list.Add(new SelectListItem() { Value = "1-tblLeads", Text = "General Information" });
                list.Add(new SelectListItem() { Value = "2-tblPhones,3-tblLeadEmails", Text = "Contact Information" });
                list.Add(new SelectListItem() { Value = "4-tblMemberInfo", Text = "Member Information" });
                list.Add(new SelectListItem() { Value = "5-tblInteractions", Text = "Interaction Information" });
                list.Add(new SelectListItem() { Value = "6-tblReservations", Text = "Reservation Information" });
                list.Add(new SelectListItem() { Value = "7-tblPresentations", Text = "Presentation Information" });
                list.Add(new SelectListItem() { Value = "8-tblContractsHistory", Text = "Contract History Information" });
                list.Add(new SelectListItem() { Value = "9-tblLastContractInfo", Text = "Last Contract Information" });
                return list;
            }

            public static List<SelectListItem> FillDrpTableFields(int[] sysWorkGroup, string[] tableName)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "noMap_", Text = "--Do Not Map--", Selected = false });

                foreach (var table in tableName)
                {
                    switch (table)
                    {
                        case "tblPhones":
                            {
                                list.Add(new SelectListItem()
                                {
                                    Value = table + "-" + "phone_int,main_bit,doNotCall_bit,phoneTypeID_int",
                                    Text = "Phone"
                                });
                                break;
                            }
                        case "tblLeadEmails":
                            {
                                list.Add(new SelectListItem()
                                {
                                    Value = table + "-" + "email_string,main_bit",
                                    Text = "Email"
                                });
                                break;
                            }
                        case "tblInteractions":
                            {
                                list.Add(new SelectListItem()
                                {
                                    Value = table + "-" + "interactionTypeID_int,relatedColID_int",
                                    Text = "Interaction Type"
                                });
                                list.Add(new SelectListItem()
                                {
                                    Value = table + "-" + "interactionComments_string",
                                    Text = "Interaction Comments"
                                });
                                break;
                            }
                        default:
                            {
                                int sysWorkGroupId = sysWorkGroup[0];

                                Type type = Type.GetType("ePlatBack.Models." + table);
                                var tableFields = from p in type.GetProperties()
                                                  join component in db.tblSysComponents on p.Name equals component.fieldName
                                                  where (from a in p.GetCustomAttributes(false)
                                                         where a is System.Data.Objects.DataClasses.EdmScalarPropertyAttribute
                                                         select true).FirstOrDefault()
                                                         && component.tblSysComponentAliases.Any(m => m.sysWorkGroupID == sysWorkGroup[0])
                                                         && component.tableName == table
                                                  select new
                                                  {
                                                      FieldName = p.Name,
                                                      FieldAlias = component.tblSysComponentAliases.Single(m => m.sysWorkGroupID == sysWorkGroup[0]).alias,
                                                      FieldType = p.PropertyType
                                                  };
                                foreach (var i in tableFields)
                                {
                                    var fieldType = "string";
                                    if (i.FieldType.ToString().IndexOf("Int") > 0)
                                        fieldType = "int";
                                    if (i.FieldType.ToString().IndexOf("Guid") > 0)
                                        fieldType = "Guid";
                                    if (i.FieldType.ToString().IndexOf("Boolean") > 0)
                                        fieldType = "bit";
                                    if (i.FieldType.ToString().IndexOf("DateTime") > 0)
                                        fieldType = "date";
                                    if (i.FieldType.ToString().IndexOf("TimeSpan") > 0)
                                        fieldType = "time";
                                    list.Add(new SelectListItem()
                                    {
                                        Value = table + '-' + i.FieldName.ToString() + "_" + fieldType,
                                        Text = i.FieldAlias.ToString()
                                    });
                                }
                                break;
                            }
                    }

                }
                return list;
            }

            public static List<SelectListItem> FillDrpCountries()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblCountries)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.countryID.ToString(),
                        Text = i.country
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpCountriesDefaultNull()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblCountries)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.countryID.ToString(),
                        Text = i.country
                    });
                }
                list.Insert(0, ListItems.Default("--Select One--", ""));
                return list;
            }

            public static List<SelectListItem> FillDrpCallsClasification()
            {
                ePlatEntities db = new ePlatEntities();

                List<SelectListItem> list = new List<SelectListItem>();
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                //var query = db.tblTerminals_CallClasifications;
                var query = db.tblTerminals_CallClasifications.Where(m => terminals.Contains(m.terminalID)).Select(m => new { m.callClasificationID, m.tblCallClasifications.callClasification }).Distinct();

                if (query.Count() > 0)
                {
                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.callClasificationID.ToString(),
                            Text = i.callClasification
                        });
                    }
                }
                else
                {
                    foreach (var i in db.tblCallClasifications)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.callClasificationID.ToString(),
                            Text = i.callClasification
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpLeadTypes()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblLeadTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.leadTypeID.ToString(),
                        Text = i.leadType
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpBookingStatus(bool firstLine)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblBookingStatus)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.bookingStatusID.ToString(),
                        Text = i.bookingStatus
                    });
                }
                if (firstLine)
                {
                    list.Insert(0, Utils.ListItems.Default());
                }
                return list;
            }

            public static List<SelectListItem> FillDrpTourStatus()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblTourStatus)
                    list.Add(new SelectListItem() { Value = i.tourStatusID.ToString(), Text = i.tourStatus });
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpGuestTypes()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                long terminalID = terminals[0];
                var Types = from n in db.tblArrivalsGuestTypes
                            where n.terminalID == terminalID
                            orderby n.arrivalGuestType
                            select new
                            {
                                n.arrivalGuestType,
                                n.arrivalsGuestTypeID
                            };

                foreach (var type in Types)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = type.arrivalsGuestTypeID.ToString(),
                        Text = type.arrivalGuestType
                    });
                }


                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpSalesRoomsParties()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                long terminalID = terminals[0];

                var SalesRooms = from n in db.tblSalesRoomsParties
                                 where n.terminalID == terminalID
                                 && n.partyDateTime > DateTime.Today
                                 orderby n.tblSalesRooms.salesRoom, n.partyDateTime
                                 select new
                                 {
                                     n.tblSalesRooms.salesRoom,
                                     n.partyDateTime,
                                     n.salesRoomPartyID
                                 };

                foreach (var party in SalesRooms)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = party.salesRoomPartyID.ToString(),
                        Text = party.salesRoom + " - " + party.partyDateTime.ToString("MM-dd hh:mm")
                    });
                }


                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpPrograms(string defaultValue = "--Select One--", bool avoidDefault = false)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                long terminalID = terminals[0];
                var TerminalInfo = (from t in db.tblTerminals
                                    where t.terminalID == terminalID
                                    select t.companiesGroupID).FirstOrDefault();

                if (TerminalInfo != null)
                {
                    var Programs = from n in db.tblProspectationPrograms
                                   where n.companiesGroupID == TerminalInfo
                                   orderby n.program
                                   select new
                                   {
                                       n.programID,
                                       n.program
                                   };

                    foreach (var program in Programs)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = program.programID.ToString(),
                            Text = program.program
                        });
                    }
                }

                if (avoidDefault == false)
                {
                    list.Insert(0, ListItems.Default(defaultValue));
                }
                return list;
            }

            public static List<SelectListItem> FillDrpProgramsDefaultNull()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                long terminalID = terminals[0];
                var TerminalInfo = (from t in db.tblTerminals
                                    where t.terminalID == terminalID
                                    select t.companiesGroupID).FirstOrDefault();

                if (TerminalInfo != null)
                {
                    var Programs = from n in db.tblProspectationPrograms
                                   where n.companiesGroupID == TerminalInfo
                                   orderby n.program
                                   select new
                                   {
                                       n.programID,
                                       n.program
                                   };

                    foreach (var program in Programs)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = program.programID.ToString(),
                            Text = program.program
                        });
                    }
                }

                list.Insert(0, ListItems.Default("--Select One--", ""));

                return list;
            }

            public static List<SelectListItem> FillDrpNQReasons()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                long terminalID = terminals[0];
                var TerminalInfo = (from t in db.tblTerminals
                                    where t.terminalID == terminalID
                                    select new
                                    {
                                        t.tblTerminals_Destinations.FirstOrDefault().destinationID,
                                        t.companiesGroupID
                                    }).FirstOrDefault();

                if (TerminalInfo != null)
                {
                    var NQReasons = from n in db.tblNqReasons
                                    where n.destinationID == TerminalInfo.destinationID
                                    && n.companiesGroupID == TerminalInfo.companiesGroupID
                                    && (n.permanent_ == true && n.fromDate <= DateTime.Now || n.toDate > DateTime.Now)
                                    orderby n.nqReason
                                    select new
                                    {
                                        n.nqReasonID,
                                        n.nqReason
                                    };

                    foreach (var reason in NQReasons)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = reason.nqReasonID.ToString(),
                            Text = reason.nqReason
                        });
                    }
                }

                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpQualificationStatus()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblQualificationStatus)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.qualificationStatusID.ToString(),
                        Text = i.qualificationStatus
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpLeadSources(bool firstLine)
            {
                ePlatEntities db = new ePlatEntities();

                List<SelectListItem> list = new List<SelectListItem>();
                list = LeadSourceDataModel.GetLeadSourcesByWorkGroup();

                //foreach (var i in db.tblLeadSources)
                //{
                //    list.Add(new SelectListItem()
                //    {
                //        Value = i.leadSourceID.ToString(),
                //        Text = i.leadSource
                //    });
                //}
                if (firstLine)
                {
                    list.Insert(0, Utils.ListItems.Default());
                }
                return list;
            }

            public static List<SelectListItem> FillDrpOffers()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblOffers)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.offerID.ToString(),
                        Text = i.offer
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpInputMethods()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblInputMethods)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.inputMethodID.ToString(),
                        Text = i.inputMethod
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpMembers()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblMemberInfo)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.memberInfoID.ToString(),
                        Text = i.memberNumber
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpLeadStatus(bool firstLine = false)
            {
                ePlatEntities db = new ePlatEntities();

                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var leadStatus = db.tblTerminals_LeadStatus.Where(m => terminals.Contains(m.terminalID)).Select(m => new { m.leadStatusID, m.tblLeadStatus.leadStatus });
                //foreach (var i in db.tblLeadStatus)
                foreach (var i in leadStatus)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.leadStatusID.ToString(),
                        Text = i.leadStatus
                    });
                }
                if (firstLine)
                {
                    list.Insert(0, Utils.ListItems.Default());
                }
                return list;
            }

            public static List<SelectListItem> FillDrpTimeZones()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblTimeZones)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.timeZoneID.ToString(),
                        Text = i.timeZone
                    });
                }
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpPhoneTypes()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "0", Text = "--Select Type--", Selected = false });
                foreach (var i in db.tblPhoneTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.phoneTypeID.ToString(),
                        Text = i.phoneType
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpSalesAgents()
            {
                return FillDrpSalesAgents(null);
            }

            public static List<SelectListItem> FillDrpSalesAgents(long? terminalID, bool currentUser = false)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var roles = from r in db.aspnet_Roles
                            where r.RoleName.Contains("Reservations Agent")
                            || r.RoleName.Contains("Operation Manager")
                            || r.RoleName.Contains("Operation Supervisor")
                            || r.RoleName.Contains("Reservations Supervisor")
                            select r.RoleId;

                var terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }


                var TUIDs = from t in db.tblUsers_Terminals
                            where terminals.Contains(t.terminalID)
                            select t.userID;

                var UIDs = (from s in db.tblUsers_SysWorkGroups
                            where roles.Contains(s.roleID)
                            && s.aspnet_Users1.aspnet_Membership.IsApproved
                            && TUIDs.Contains(s.userID)
                            select s.userID).ToList();

                if (currentUser)
                {
                    UIDs.Add(session.UserID);
                }

                var profiles = from p in db.tblUserProfiles
                               where UIDs.Contains(p.userID)
                               orderby p.firstName
                               select new
                               {
                                   p.userID,
                                   p.firstName,
                                   p.lastName
                               };

                foreach (var profile in profiles)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = profile.userID.ToString(),
                        Text = profile.firstName + " " + profile.lastName
                    });
                }

                return list;
            }

            public static List<SelectListItem> FillDrpHotels()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                long terminalID = Utils.GeneralFunctions.GetTerminalID();
                list.Add(new SelectListItem() { Value = "0", Text = "Select One", Selected = false });
                var query = (from a in db.tblPlaces_Terminals
                             where a.terminalID == terminalID
                             && a.tblPlaces.placeTypeID == 1
                             select new
                             {
                                 placeID = a.placeID,
                                 place = a.tblPlaces.place,
                                 destination = a.tblPlaces.tblDestinations.destination
                             }).Distinct();
                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.placeID.ToString(),
                        Text = i.place
                    });
                }

                list.Add(new SelectListItem() { Value = "0", Text = "Other", Selected = false });
                return list;
            }

            public static List<SelectListItem> FillDrpPlaces()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                list.Add(new SelectListItem() { Value = "0", Text = "--Select One--", Selected = false });
                //foreach (var i in db.tblPlaces.Where(m => m.placeTypeID == 1))//1 for Hotels
                var terminals = new List<long>();
                foreach (var i in session.Terminals.Split(','))
                    terminals.Add(Int64.Parse(i));
                var query = (from a in db.tblPlaces_Terminals
                             where terminals.Contains(a.terminalID)
                             && a.tblPlaces.placeTypeID == 1
                             select new
                             {
                                 placeID = a.placeID,
                                 place = a.tblPlaces.place,
                                 destination = a.tblPlaces.tblDestinations.destination
                             }).Distinct();
                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.placeID.ToString(),
                        Text = i.place + " " + i.destination
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpRoomTypes()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "0", Text = "--Select Type--", Selected = false });
                foreach (var i in db.tblRoomTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.roomTypeID.ToString(),
                        Text = i.roomType + " " + i.tblPlaces.tblDestinations.destination
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpInteractionTypes()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "0", Text = "--Select Type--", Selected = false });
                foreach (var i in db.tblInteractionTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.interactionTypeID.ToString(),
                        Text = i.interactionType
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpTerminals()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                list.Add(new SelectListItem() { Value = "0", Text = "--Select One--", Selected = false });
                foreach (var i in TerminalDataModel.GetCurrentUserTerminals())
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.Value,
                        Text = i.Text
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpSelectedTerminals()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> terminals = new List<SelectListItem>();
                UserSession us = new UserSession();
                List<long> terminalsArr = new List<long>();
                foreach (var i in us.Terminals.Split(','))
                {
                    terminalsArr.Add(Int64.Parse(i));
                }
                var terminalsQ = from t in db.tblTerminals
                                 where terminalsArr.Contains(t.terminalID)
                                 select t;

                foreach (var terminal in terminalsQ)
                {
                    terminals.Add(new SelectListItem()
                    {
                        Text = terminal.terminal,
                        Value = terminal.terminalID.ToString(),
                    });
                }

                return terminals;
            }

            //public static List<SelectListItem> FillMassUpdateUsers(string terminals)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    List<SelectListItem> list = new List<SelectListItem>();
            //    var array = terminals.Split(',').Select(m => long.Parse(
            //    if (terminalID != 0)
            //    {
            //        list = UserDataModel.GetUsersBySupervisor(Guid.Parse(currentUser.ToString()), true);
            //        list.Insert(0, ListItems.Default());
            //    }
            //    else
            //        list.Add(new SelectListItem() { Value = "", Text = "--Select Terminal--", Selected = false });
            //    return list;
            //}

            public static List<SelectListItem> FillDrpGreetingReps()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblGreetingReps)
                    list.Add(new SelectListItem() { Value = i.greetingRepID.ToString(), Text = i.greetingRep });
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpOPC()
            {
                return FillDrpOPC(null, null);
                //return FillDrpOPC(null, null, null);
            }

            //public static List<SelectListItem> FillDrpOPC(int? promotionTeamID)
            //{
            //    return FillDrpOPC(null, null, promotionTeamID);
            //}

            public static List<SelectListItem> FillDrpOPC(long? terminalID, int? companyID)
            //public static List<SelectListItem> FillDrpOPC(long? terminalID, int? companyID, int? promotionTeamID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                long[] currentTerminals = (terminalID == null ? (from m in session.Terminals.Split(',').Select(m => long.Parse(m)) select m).ToArray() : new long[1] { (long)terminalID });
                int?[] companies = (companyID == null ? db.tblTerminals_Companies.Where(x => currentTerminals.Contains(x.terminalID)).Select(x => (int?)x.companyID).ToArray() : new int?[1] { (int?)companyID });

                var opcsQ = (from o in db.tblOPCS
                                 //where o.tblOPC_PromotionTeams.Count(x => x.deleted != true && x.terminateDate == null) > 0
                             where o.tblOPC_PromotionTeams.Count(x => x.deleted != true) > 0
                             && companies.Contains(o.companyID)
                             select new
                             {
                                 o.opcID,
                                 o.firstName,
                                 o.lastName,
                                 o.secondSurname,
                                 o.middleName,
                                 o.legacyKey
                             }).Distinct().OrderBy(m => m.lastName).ThenBy(m => m.secondSurname).ThenBy(m => m.firstName).ThenBy(m => m.middleName);

                foreach (var i in opcsQ)
                {
                    //
                    var k = i.legacyKey.ToCharArray();
                    var key = "";
                    foreach(var x in k)
                    {
                        int r;
                        if(int.TryParse(x.ToString(), out r))
                        {
                            key += x;
                        }
                    }
                    //

                    var opc =key + " - " + i.lastName + " " + i.secondSurname + " " + i.firstName + " " + i.middleName;
                    list.Add(new SelectListItem() { Value = i.opcID.ToString(), Text = opc });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpAllOPCs(long? terminalID, int? companyID)
            //public static List<SelectListItem> FillDrpOPC(long? terminalID, int? companyID, int? promotionTeamID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                long[] currentTerminals = (terminalID == null ? (from m in session.Terminals.Split(',').Select(m => long.Parse(m)) select m).ToArray() : new long[1] { (long)terminalID });
                int?[] companies = (companyID == null ? db.tblTerminals_Companies.Where(x => currentTerminals.Contains(x.terminalID)).Select(x => (int?)x.companyID).ToArray() : new int?[1] { (int?)companyID });

                var opcsQ = (from o in db.tblOPCS
                             where companies.Contains(o.companyID)
                             select new
                             {
                                 o.opcID,
                                 o.firstName,
                                 o.lastName,
                                 o.secondSurname,
                                 o.middleName,
                                 activeTeams = o.tblOPC_PromotionTeams.Count(x => x.deleted != true && x.terminateDate == null)
                             }).Distinct();

                foreach (var i in opcsQ)
                {
                    var opc = (i.activeTeams == 0 ? " INACTIVE - " : "") + i.lastName + " " + i.secondSurname + ", " + i.firstName + " " + i.middleName;
                    list.Add(new SelectListItem() { Value = i.opcID.ToString(), Text = opc });
                }

                list = list.OrderBy(m => m.Text).ToList();

                List<SelectListItem> orderedList = new List<SelectListItem>();
                List<SelectListItem> inactiveList = new List<SelectListItem>();
                foreach (var l in list)
                {
                    if (l.Text.IndexOf("INACTIV") >= 0)
                    {
                        inactiveList.Add(l);
                    }
                    else
                    {
                        orderedList.Add(l);
                    }

                }

                var newList = orderedList.Union(inactiveList);

                return newList.ToList();
            }

            public static List<SelectListItem> FillDrpCallClasifications()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblCallClasifications)
                    list.Add(new SelectListItem() { Value = i.callClasificationID.ToString(), Text = i.callClasification });
                list.Insert(0, ListItems.Default());
                return list;
            }

            public static List<SelectListItem> FillDrpCultures()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblLanguages)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.culture,
                        Text = i.language
                        //Selected = (i.culture == "en-US")
                    });
                }
                return list;
            }

            //public static List<SelectListItem> FillDrpPromos()
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var list = new List<SelectListItem>();

            //    foreach (var i in db.tblPromos)
            //    {
            //        list.Add(new SelectListItem()
            //        {
            //            Value = i.promoID.ToString(),
            //            Text = i.promo
            //        });
            //    }
            //    return list;
            //}

            public static List<SelectListItem> FillDrpCurrenciesIntID()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblCurrencies)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.currencyID.ToString(),
                        Text = i.currency
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCurrenciesNoCAD()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblCurrencies.Where(x => x.currencyCode != "CAD"))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.currencyID.ToString(),
                        Text = i.currency
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCurrencies()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var session = new UserSession();
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

                var _strCurrencies = db.tblTimeshareSettings.Where(m => terminals.Contains(m.terminalID)).Select(m => m.allowedCurrencies);
                var _currencies = new List<long>();
                foreach (var i in _strCurrencies)
                {
                    foreach (var a in i.Split(','))
                    {
                        _currencies.Add(long.Parse(a));
                    }
                }

                var _allowedCurrencies = _currencies.Count() == 0 ? db.tblCurrencies : db.tblCurrencies.Where(m => _currencies.Distinct().Contains(m.currencyID));

                foreach (var i in _allowedCurrencies)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.currencyCode,
                        Text = i.currency
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpPurchaseStatus()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblPurchaseStatus)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.purchaseStatusID.ToString(),
                        Text = i.purchaseStatus
                        //Selected = (i.purchaseStatusID == 1)
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCurrentWorkGroupAgents(bool includeCurrentUser = true, bool showOnlycurrentUserIfAgent = false)
            {
                ePlatEntities db = new ePlatEntities();

                List<SelectListItem> list = new List<SelectListItem>();

                var _currentWorkGroup = (int)session.WorkGroupID;
                var _currentRole = (Guid)session.RoleID;
                var _currentUser = session.UserID;
                var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var _usersPerTerminals = db.tblUsers_Terminals.Where(m => _terminals.Contains(m.terminalID)).Select(m => m.userID).ToArray();

                var query = (from a in db.tblUsers_SysWorkGroups
                             where a.sysWorkGroupID == _currentWorkGroup
                             && a.aspnet_Users1.aspnet_Membership.IsApproved == true
                             && (a.aspnet_Roles.RoleName == "Online Reservations Agent" || a.aspnet_Roles.RoleName.Contains("Onsite Reservations Agent"))
                             select new
                             {
                                 a.userID,
                                 a.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName,
                                 a.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName
                             }).Distinct();

                query = query.Where(m => _usersPerTerminals.Contains(m.userID));

                foreach (var i in query.OrderBy(m => m.firstName))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.userID.ToString(),
                        Text = i.firstName + " " + i.lastName,
                        Selected = (i.userID == _currentUser)
                    });
                }

                if (includeCurrentUser)
                {
                    if (!db.aspnet_Roles.Single(m => m.RoleId == _currentRole).RoleName.Contains("Agent"))
                    {
                        var _user = db.tblUserProfiles.Single(m => m.userID == _currentUser);
                        list.Add(new SelectListItem()
                        {
                            Value = _currentUser.ToString(),
                            Text = _user.firstName + " " + _user.lastName
                        });
                    }
                }
                if (showOnlycurrentUserIfAgent)
                {
                    if (db.aspnet_Roles.Single(m => m.RoleId == _currentRole).RoleName.Contains("Agent"))
                    {
                        var _currentUserID = _currentUser.ToString();
                        list = list.Where(m => m.Value == _currentUserID).ToList();
                    }
                }

                return list;
            }

            /// <summary>
            /// 
            /// </summary>
            /// <returns>
            /// List of workgroup online and onsite agents plus current user
            /// </returns>
            public static List<SelectListItem> ListWorkGroupUsers()
            {
                ePlatEntities db = new ePlatEntities();

                var list = new List<SelectListItem>();
                var currentWG = (int)session.WorkGroupID;
                var currentUser = session.UserID;
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

                var query = (from m in db.tblUsers_SysWorkGroups
                             where m.sysWorkGroupID == currentWG
                             && m.aspnet_Users1.aspnet_Membership.IsApproved == true
                             && (m.aspnet_Roles.RoleName == "Online Reservations Agent"
                             || m.aspnet_Roles.RoleName.Contains("Onsite Reservations Agent")
                             || m.aspnet_Roles.RoleName.Contains("Operation Supervisor")
                             //|| m.aspnet_Roles.RoleName == "Onsite Reservations Agent"
                             //|| m.aspnet_Roles.RoleName == "Operation Manager VEX"//sustituida por currentUser para que funcione con otras terminales
                             )
                             select new
                             {
                                 m.userID,
                                 m.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName,
                                 m.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                                 m.aspnet_Users1.aspnet_Membership.IsApproved
                             }).Distinct();

                var usersInTerminals = db.tblUsers_Terminals.Where(m => terminals.Contains(m.terminalID)).Select(m => m.userID).ToArray();
                query = query.Where(m => usersInTerminals.Contains(m.userID));

                foreach (var i in query.OrderBy(m => m.firstName))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.userID.ToString(),
                        Text = i.firstName + " " + i.lastName,
                        //Text = (i.IsApproved ? "" : "Inactive - ") + i.firstName + " " + i.lastName,
                        Selected = (i.userID == currentUser)
                    });
                }
                var _currentUser = currentUser.ToString();
                //this condition will be true only if currentUser is not agent because query conditions, if false then will contain only currentUser info.
                if (list.Where(m => m.Value == _currentUser).Count() == 0)
                {

                    var _user = db.aspnet_Users.Single(m => m.UserId == currentUser).tblUserProfiles.Select(m => new { m.firstName, m.lastName });
                    list.Add(new SelectListItem()
                    {
                        Value = _currentUser,
                        Text = _user.FirstOrDefault().firstName + " " + _user.FirstOrDefault().lastName,
                        Selected = true
                    });
                }

                return list;
            }

            //public static List<SelectListItem> FillDrpAgentsByCurrentUser()
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var list = new List<SelectListItem>();
            //    Guid currentUser = 
            //    foreach (var i in db.sp_getSubordinatedUsers(currentUser))
            //    {
            //        list.Add(new SelectListItem()
            //        {
            //            Value = i.userID.ToString(),
            //            Text = i.userName
            //        });
            //    }
            //    return list;
            //}

            public static List<SelectListItem> FillDrpPointsOfSale(bool onlyWithFund)
            {
                return FillDrpPointsOfSale(null, onlyWithFund);
            }

            //public static List<SelectListItem> FillDrpPointsOfSale()
            //{
            //    return FillDrpPointsOfSale(null);
            //}

            public static List<SelectListItem> FillDrpPointsOfSale(long? terminalID = null, bool? onlyWithFund = null, bool? concatenatePlaceInfo = null, bool? excludeTestPoS = false)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                List<long> terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var query = db.tblPointsOfSale.Where(m => terminals.Contains(m.terminalID));
                if (excludeTestPoS == true)
                {
                    query = query.Where(x => !x.pointOfSale.Contains("test") && !x.pointOfSale.Contains("prueba"));
                }

                if (onlyWithFund != null && (bool)onlyWithFund)
                {
                    var _terminal = terminals.Count() == 1 ? terminals.First() : (long?)null;
                    var _fundsPerTerminals = FillDrpFundsPerSelectedTerminals(_terminal).Select(x => (int?)int.Parse(x.Value)).ToArray();
                    var _pointsOfSale = db.tblFunds_PointsOfSale.Where(m => _fundsPerTerminals.Contains(m.fundID)).Select(m => m.pointOfSaleID).ToArray();
                    //adecuar la lista para buscar la relación del fondo y el PoS en la tabla correspondiente
                    query = query.Where(m => _pointsOfSale.Contains(m.pointOfSaleID));// && _fundsPerTerminals.Contains(m.fundID));
                    //query = query.Where(m => m.fundID != null && _fundsPerTerminals.Contains(m.fundID));
                }

                foreach (var i in query.OrderBy(x => x.shortName))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.pointOfSaleID.ToString() + (concatenatePlaceInfo != null && concatenatePlaceInfo == true ? "|" + i.placeID.ToString() + "|" + i.tblPlaces.placeTypeID.ToString() : ""),
                        Text = i.shortName + " - " + i.pointOfSale
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCategories()
            {
                return FillDrpCategories(null);
            }

            public static List<SelectListItem> FillDrpCategories(long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var catalogs = (from t in db.tblCatalogs_Terminals where terminals.Contains(t.terminalID) select new { t.catalogID, t.tblTerminals.prefix }).Distinct();
                foreach (var i in catalogs)
                {
                    var categories = (from c in db.tblCategories
                                      where c.active == true
                                      && c.parentCategoryID != null
                                      && c.catalogID == i.catalogID
                                      select new
                                      {
                                          CategoryID = c.categoryID,
                                          Category = c.category,
                                          CategoryParent = c.tblCategories2.category
                                      }).Distinct();
                    foreach (var c in categories)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = c.CategoryID.ToString(),
                            Text = i.prefix + " > " + c.CategoryParent + " > " + c.Category
                        });
                    }
                }
                return list.OrderBy(x => x.Text).ToList();
            }

            public static List<SelectListItem> FillDrpProvidersPerDestinationInTerminals()
            {
                return FillDrpProvidersPerDestinationInTerminals(null);
            }

            public static List<SelectListItem> FillDrpProvidersPerDestinationInTerminals(long? terminalID)
            {
                return FillDrpProvidersPerDestinationInTerminals(terminalID, null);
            }

            public static List<SelectListItem> FillDrpProvidersPerDestinationInTerminals(long? terminalID, int? providerTypeID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                var terminals = new List<long>();
                if (terminalID == null || terminalID == 0)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }
                //var _providerTypeID = providerTypeID != null ? (int)providerTypeID : 2;//2 == activities Provider
                var _providerTypeID = providerTypeID != null ? (int)providerTypeID : 0;//2 == activities Provider
                var destinations = Array.ConvertAll(db.tblTerminals_Destinations.Where(m => terminals.Contains(m.terminalID)).Select(m => m.destinationID).Distinct().ToArray(), GeneralFunctions.ParseToNullableLong);
                var query = db.tblProviders.Where(m => destinations.Contains(m.destinationID) && terminals.Contains((long)m.terminalID) && (_providerTypeID == 0 || m.providerTypeID == _providerTypeID)).OrderByDescending(m => m.isActive).ThenBy(m => m.comercialName);

                //foreach (var i in query)
                foreach (var i in query.Where(m => m.isActive))//line used to show only active providers in coupon info
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.providerID.ToString(),
                        Text = (i.isActive ? "" : "INACTIVE - ") + i.comercialName + " - " + i.taxesName
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpServicesWithProvider(long terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                var query = from s in db.tblServices
                            where s.originalTerminalID == terminalID
                            && s.tblProviders.isActive == true
                            && (s.deleted == null || s.deleted == false)
                            select new
                            {
                                Provider = s.tblProviders.comercialName,
                                Service = s.service,
                                ServiceID = s.serviceID
                            };

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.ServiceID.ToString(),
                        Text = i.Provider + " > " + i.Service
                    });
                }

                return list.OrderBy(x => x.Text).ToList();
            }

            public static List<SelectListItem> FillDrpServices(int? providerID)
            {
                return FillDrpServices(providerID, null);
            }

            public static List<SelectListItem> FillDrpServicesIncludingDeleted(int? providerID)
            {
                return FillDrpServicesIncludingDeleted(providerID, null);
            }

            public static List<SelectListItem> FillDrpServicesIncludingDeleted(int? providerID, long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                if (providerID != null && providerID != 0)
                {
                    //provider seleccionado
                    var query = db.tblServices.Where(m => m.providerID == providerID).Distinct().OrderBy(m => m.service);

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.serviceID.ToString(),
                            Text = i.serviceID.ToString().PadLeft(5, '0') + " - " + (i.deleted ? "DELETED - " : "") + i.service
                        });
                    }
                }
                else
                {
                    var query = (from s in db.tblServices
                                 where terminals.Contains(s.originalTerminalID)
                                 && s.tblProviders.isActive//line added to show only services with active provider
                                 select new
                                 {
                                     s.serviceID,
                                     s.service,
                                     s.deleted
                                 }).Distinct().OrderBy(m => m.service);
                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.serviceID.ToString(),
                            Text = i.serviceID.ToString().PadLeft(5, '0') + " - " + (i.deleted ? "DELETED - " : "") + i.service
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpServicesPerProvider(int[] providerID)
            {
                return FillDrpServicesPerProvider(providerID, null);
            }

            public static List<SelectListItem> FillDrpServicesPerProvider(int[] providerID, long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var query = (from s in db.tblServices
                             where terminals.Contains(s.originalTerminalID)
                             && (s.deleted == null || s.deleted == false)
                             && providerID.Contains(s.providerID)
                             && s.tblProviders.isActive//line added to show only services with active provider
                             select new
                             {
                                 s.serviceID,
                                 s.service
                             }).Distinct().OrderBy(m => m.service);
                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.serviceID.ToString(),
                        Text = i.serviceID.ToString().PadLeft(5, '0') + " - " + i.service
                    });
                }

                return list;
            }

            public static List<SelectListItem> FillDrpServices(int? providerID, long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                if (providerID != null && providerID != 0)
                {
                    //provider seleccionado
                    var query = db.tblServices.Where(m => m.providerID == providerID && (m.deleted == null || m.deleted == false)).Distinct().OrderBy(m => m.service);

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.serviceID.ToString(),
                            Text = i.serviceID.ToString().PadLeft(5, '0') + " - " + i.service
                        });
                    }
                }
                else
                {
                    var query = (from s in db.tblServices
                                 where terminals.Contains(s.originalTerminalID)
                                 && (s.deleted == null || s.deleted == false)
                                 && s.tblProviders.isActive//line added to show only services with active provider
                                 select new
                                 {
                                     s.serviceID,
                                     s.service
                                 }).Distinct().OrderBy(m => m.service);
                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.serviceID.ToString(),
                            Text = i.serviceID.ToString().PadLeft(5, '0') + " - " + i.service
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpDestinations()
            {
                var list = new List<SelectListItem>();
                list = PlaceDataModel.GetDestinationsByCurrentTerminals();
                return list;
            }

            public static List<SelectListItem> FillDrpServicesByCategory(long? categoryID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var terminals = new List<long>();


                terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();

                if (categoryID == null)
                {
                    var Services = from s in db.tblServices
                                   where (s.deleted == null || s.deleted == false)
                                   && terminals.Contains(s.originalTerminalID)
                                   && s.tblProviders.isActive == true
                                   select new
                                   {
                                       Provider = s.tblProviders.comercialName,
                                       Service = s.service,
                                       ServiceID = s.serviceID
                                   };
                    foreach (var i in Services)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.ServiceID.ToString(),
                            Text = i.Provider + " > " + i.Service
                        });
                    }
                }
                else
                {
                    var Services = (from s in db.tblCategories_Services
                                    where s.categoryID == categoryID
                                    && s.tblServices.deleted != true
                                    && terminals.Contains(s.tblServices.originalTerminalID)
                                    select new
                                    {
                                        Provider = s.tblServices.tblProviders.comercialName,
                                        Service = s.tblServices.service,
                                        ServiceID = s.serviceID
                                    }).Distinct();

                    foreach (var i in Services)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.ServiceID.ToString(),
                            Text = i.Provider + " > " + i.Service
                        });
                    }
                }
                return list.OrderBy(x => x.Text).ToList();
            }

            public static List<SelectListItem> FillDrpTransportationZonesByTerminal(long? terminalid)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                if (terminalid == null)
                {
                    terminalid = Utils.GeneralFunctions.GetTerminalID();
                }
                var destinationIDs = from d in db.tblTerminals_Destinations
                                     where d.terminalID == (long)terminalid
                                     select d.destinationID;
                var query = db.tblTransportationZones.Where(m => destinationIDs.Contains(m.destinationID));

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.transportationZoneID.ToString(),
                        Text = i.transportationZone
                    });
                }

                list.Insert(0, ePlatBack.Models.Utils.ListItems.Default(ePlatBack.Models.Resources.Models.Shared.SharedStrings.Select_one));

                return list;
            }

            public static List<SelectListItem> FillDrpTransportationZones(int destinationID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (destinationID != 0)
                {
                    var query = db.tblTransportationZones.Where(m => m.destinationID == destinationID);

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.transportationZoneID.ToString(),
                            Text = i.transportationZone
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpWeeklyAvailability(long serviceID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (serviceID != 0)
                {
                    var query = db.tblWeeklyAvailability.Where(m => m.serviceID == serviceID);
                    foreach (var i in query.OrderBy(m => m.hour))
                    {
                        //var weekDays = "";
                        //if (i.monday)
                        //    weekDays += DayOfWeek.Monday + ", ";
                        //if (i.tuesday)
                        //    weekDays += DayOfWeek.Tuesday + ", ";
                        //if (i.wednesday)
                        //    weekDays += DayOfWeek.Wednesday + ", ";
                        //if (i.thursday)
                        //    weekDays += DayOfWeek.Thursday + ", ";
                        //if (i.friday)
                        //    weekDays += DayOfWeek.Friday + ", ";
                        //if (i.saturday)
                        //    weekDays += DayOfWeek.Saturday + ", ";
                        //if (i.sunday)
                        //    weekDays += DayOfWeek.Sunday + ", ";
                        //weekDays = weekDays.TrimEnd(',');

                        list.Add(new SelectListItem()
                        {
                            Value = i.weeklyAvailabilityID.ToString(),
                            Text = Utils.GeneralFunctions.DateFormat.ToMeridianHour(i.hour.ToString())
                            //Text = i.hour + " " + weekDays
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpMeetingPoints(long weeklyAvailabilityID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (weeklyAvailabilityID != 0)
                {
                    var query = db.tblMeetingPoints.Where(m => m.weeklyAvailabilityID == weeklyAvailabilityID && m.active == true);
                    foreach (var i in query.OrderBy(m => m.hour))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.meetingPointID.ToString(),
                            Text = i.hour + " - " + (i.atYourHotel ? "At your Hotel" : i.tblPlaces.place)
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpPromosPerService(string service_ServiceDate)
            {
                ePlatEntities db = new ePlatEntities();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var list = new List<SelectListItem>();

                if (service_ServiceDate != null && service_ServiceDate.Split('|')[0] != "0" && service_ServiceDate.Split('|')[1] != "")
                {
                    var serviceID = long.Parse(service_ServiceDate.Split('|')[0]);
                    var serviceDate = DateTime.Parse(service_ServiceDate.Split('|')[1], CultureInfo.InvariantCulture);
                    var dayOfWeek = serviceDate.DayOfWeek;

                    var query = db.tblPromos_RelatedItems.Where(m => m.sysItemTypeID == 1 && m.itemID == serviceID && terminals.Contains(m.tblPromos.terminalID)
                        && (m.tblPromos.toDateBW == null || m.tblPromos.toDateBW >= DateTime.Today)
                        && (m.tblPromos.fromDateBW <= DateTime.Today)
                        && (m.tblPromos.fromDateTW <= serviceDate && m.tblPromos.toDateTW >= serviceDate)
                        && (!m.tblPromos.wholeStay ? (!m.tblPromos.sunday ? !(DayOfWeek.Sunday == dayOfWeek) : true) && (!m.tblPromos.monday ? !(DayOfWeek.Monday == dayOfWeek) : true) && (!m.tblPromos.tuesday ? !(DayOfWeek.Tuesday == dayOfWeek) : true) && (!m.tblPromos.wednesday ? !(DayOfWeek.Wednesday == dayOfWeek) : true) && (!m.tblPromos.thursday ? !(DayOfWeek.Thursday == dayOfWeek) : true) && (!m.tblPromos.friday ? !(DayOfWeek.Friday == dayOfWeek) : true) && (!m.tblPromos.saturday ? !(DayOfWeek.Saturday == dayOfWeek) : true) : true)
                        );

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.promoID.ToString(),
                            Text = (i.tblPromos.promoCode != "" && i.tblPromos.promoCode != null ? i.tblPromos.promoCode + " - " : "") + i.tblPromos.promo
                        });
                    }
                }
                //if (serviceID != 0)
                //{
                //    var query = db.tblPromos_RelatedItems.Where(m => m.sysItemTypeID == 1 && m.itemID == serviceID && terminals.Contains(m.tblPromos.terminalID) 
                //        && (m.tblPromos.toDateBW == null || m.tblPromos.toDateBW > DateTime.Today)
                //        && (m.tblPromos.fromDateBW <= DateTime.Today)
                //        //&& (m.tblPromos.fromDateTW <= db.tblServices.Single(x => x.serviceID == serviceID).)
                //        );
                //    foreach (var i in query)
                //    {
                //        list.Add(new SelectListItem()
                //        {
                //            Value = i.promoID.ToString(),
                //            Text = i.tblPromos.promoCode + " - " + i.tblPromos.promo
                //        });
                //    }
                //}
                return list;
            }

            public static List<SelectListItem> FillDrpPromosPerPurchase(long terminalID = 0)
            {
                ePlatEntities db = new ePlatEntities();

                var list = new List<SelectListItem>();
                var terminals = terminalID == 0 ? session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray() : new long[] { terminalID };

                var query = db.tblPromos.Where(m => (m.promoCode != null && m.promoCode != "") && terminals.Contains(m.terminalID));

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.promoID.ToString(),
                        Text = i.promo + " - " + i.promoCode
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpServiceStatus()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblPurchaseServiceStatus.Where(m => m.isActive == true))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.purchaseServiceStatusID.ToString(),
                        Text = i.purchaseServiceStatus
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpPriceTypes()
            {
                var list = PriceDataModel.PricesCatalogs.FillDrpPriceTypes();
                list.Remove(list.Single(m => m.Value == "3"));//Remove Cost Price from list,

                return list;
            }

            public static List<SelectListItem> FillDrpPriceTypesForTerminal(long terminalID)
            {
                List<SelectListItem> types = new List<SelectListItem>();
                ePlatEntities db = new ePlatEntities();
                var TerminalRules = from r in db.tblServices_PriceTypes
                                    where r.terminalID == terminalID
                                    && r.providerID == null
                                    && r.serviceID == null
                                    && (r.permanent_ == true || (r.fromDate <= DateTime.Today && r.toDate >= DateTime.Today))
                                    orderby r.@base descending, r.moreOrLess ascending
                                    select r;

                foreach (var rule in TerminalRules)
                {
                    types.Add(new SelectListItem()
                    {
                        Value = rule.priceTypeID.ToString(),
                        Text = rule.tblPriceTypes.priceType
                    });
                }

                return types;
            }

            public static List<SelectListItem> GetMinimalPrice(Guid purchaseID, int priceID, int promoID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                var service = db.tblServices.Single(x => x.serviceID == db.tblPrices.FirstOrDefault(m => m.priceID == priceID).itemID);

                var _now = DateTime.Now;
                var _allowedPriceTypes = db.tblPointsOfSale_PriceTypes.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.fromDate <= _now && (m.toDate >= _now || m.toDate == null));
                var allowedPriceTypes = _allowedPriceTypes.Count() > 0 ? _allowedPriceTypes.Select(m => m.priceTypeID).ToArray() : new int[] { };

                var rules = PriceDataModel.GetRules(service.serviceID, purchase.terminalID, null).Where(m => !m.IsCost);

                if (promoID != 0)
                {
                    if (rules.Where(m => m.PromoID == promoID).Count() != 0)
                    {
                        rules = rules.Where(m => m.PromoID == promoID);
                    }
                    else
                    {
                        rules = rules.Where(m => m.PromoID == null);
                    }
                }
                else
                {
                    rules = rules.Where(m => m.PromoID == null);
                }
                rules = allowedPriceTypes.Count() > 0 ? rules.Where(m => allowedPriceTypes.Contains(m.PriceTypeID)) : rules;
                rules = rules.Where(m => m.IsMinimal).Count() > 0 ? rules.Where(m => m.IsMinimal) : null;
                if (rules != null)
                {
                    var units = FillDrpPricesUnits(rules.FirstOrDefault().PriceTypeID, service.serviceID, _now, purchase.terminalID, purchase.tblCurrencies.currencyCode, purchase.pointOfSaleID, purchase.culture);
                    list = units.Where(m => m.Value.Split('|')[0] == priceID.ToString()).ToList();
                }
                return list;
            }

            public static List<SelectListItem> GetMinimalPrice(long purchaseServiceID, int priceID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == purchaseServiceID);
                var purchase = purchase_service.tblPurchases;
                var _now = DateTime.Now;
                var _allowedPriceTypes = db.tblPointsOfSale_PriceTypes.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.fromDate <= _now && (m.toDate >= _now || m.toDate == null));
                var allowedPriceTypes = _allowedPriceTypes.Count() > 0 ? _allowedPriceTypes.Select(m => m.priceTypeID).ToArray() : new int[] { };

                var rules = PriceDataModel.GetRules(purchase_service.serviceID, purchase.terminalID, null).Where(m => !m.IsCost);

                if (purchase_service.promoID != 0)
                {
                    if (rules.Where(m => m.PromoID == purchase_service.promoID).Count() != 0)
                    {
                        rules = rules.Where(m => m.PromoID == purchase_service.promoID);
                    }
                    else
                    {
                        rules = rules.Where(m => m.PromoID == null);
                    }
                }
                else
                {
                    rules = rules.Where(m => m.PromoID == null);
                }
                rules = allowedPriceTypes.Count() > 0 ? rules.Where(m => allowedPriceTypes.Contains(m.PriceTypeID)) : rules;
                rules = rules.Where(m => m.IsMinimal).Count() > 0 ? rules.Where(m => m.IsMinimal) : null;
                if (rules != null)
                {
                    var units = FillDrpPricesUnits(rules.FirstOrDefault().PriceTypeID, purchase_service.serviceID, _now, purchase.terminalID, purchase.tblCurrencies.currencyCode, purchase.pointOfSaleID, purchase.culture);
                    list = units.Where(m => m.Value.Split('|')[0] == priceID.ToString()).ToList();
                }
                //foreach (var i in rules.OrderBy(m => m.PriceTypeOrder))
                //{
                //    var priceTypeID = i.PriceTypeID.ToString();
                //    if (list.Where(m => m.Value == priceTypeID).Count() == 0)
                //    {
                //        list.Add(new SelectListItem()
                //        {
                //            Value = i.PriceTypeID.ToString(),
                //            Text = i.RuleFor
                //        });
                //    }
                //}  
                //return list.Distinct().ToList();
                return list;
            }
            public static List<SelectListItem> FillDrpPriceTypeRules(long serviceID, long terminalID, long promoID, int pointOfSaleID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var _now = DateTime.Now;
                var _allowedPriceTypes = db.tblPointsOfSale_PriceTypes.Where(m => m.pointOfSaleID == pointOfSaleID && m.fromDate <= _now && (m.toDate >= _now || m.toDate == null));
                var allowedPriceTypes = _allowedPriceTypes.Count() > 0 ? _allowedPriceTypes.Select(m => m.priceTypeID).ToArray() : new int[] { };

                if (serviceID != 0)
                {
                    var rules = PriceDataModel.GetRules(serviceID, terminalID, null).Where(m => !m.IsCost);

                    if (promoID != 0)
                    {
                        if (rules.Where(m => m.PromoID == promoID).Count() != 0)
                        {
                            rules = rules.Where(m => m.PromoID == promoID);
                        }
                        else
                        {
                            rules = rules.Where(m => m.PromoID == null);
                        }
                    }
                    else
                    {
                        rules = rules.Where(m => m.PromoID == null);
                    }
                    rules = allowedPriceTypes.Count() > 0 ? rules.Where(m => allowedPriceTypes.Contains(m.PriceTypeID)) : rules;
                    foreach (var i in rules.OrderBy(m => m.PriceTypeOrder))
                    {
                        var priceTypeID = i.PriceTypeID.ToString();
                        if (list.Where(m => m.Value == priceTypeID).Count() == 0)
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = i.PriceTypeID.ToString(),
                                Text = i.RuleFor
                            });
                        }
                    }
                }
                return list.Distinct().ToList();
            }

            public static List<SelectListItem> FillDrpPrices(int priceTypeID, long serviceID, string currency)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (priceTypeID != 0)
                {
                    var currencyID = db.tblCurrencies.Single(m => m.currencyCode == currency).currencyID;
                    var query = db.tblPrices.Where(m => m.priceTypeID == priceTypeID && m.sysItemTypeID == 1 && m.itemID == serviceID && m.currencyID == currencyID && (m.permanent_ == true || m.toDate >= DateTime.Today));

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.priceID.ToString(),
                            Text = i.price.ToString() + "," + db.tblPriceUnits.Single(m => m.priceID == i.priceID).unit
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpPriceUnits(int priceID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (priceID != 0)
                {
                    foreach (var i in db.tblPriceUnits.Where(m => m.priceID == priceID))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.priceUnitID.ToString(),
                            Text = i.unit
                        });
                    }
                }
                return list;
            }

            //public static List<SelectListItem> FillDrpPricesUnits(int priceTypeID, long serviceID, string currency)
            public static List<SelectListItem> FillDrpPricesUnits(int priceTypeID, long serviceID, DateTime? date, long? terminalID, string currencyCode, int pointOfSaleID, string culture)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (priceTypeID != 0)
                {
                    var currencyID = db.tblCurrencies.Single(m => m.currencyCode == currencyCode).currencyID;
                    var _online = db.tblPointsOfSale.Single(m => m.pointOfSaleID == pointOfSaleID).online;
                    //var computedPrices = culture != null ? PriceDataModel.GetComputedPrices(serviceID, date, terminalID, _online, DateTime.Now, culture) : PriceDataModel.GetComputedPrices(serviceID, date, terminalID, _online, DateTime.Now);
                    var computedPrices = culture != null ? PriceDataModel.GetComputedPrices(serviceID, date, pointOfSaleID, terminalID, DateTime.Now, culture) : PriceDataModel.GetComputedPrices(serviceID, date, pointOfSaleID, terminalID, DateTime.Now);
                    var query = computedPrices.Where(m => m.CurrencyID == currencyID && m.PriceTypeID == priceTypeID).Select(m => new { m.PriceID, m.Price, m.FullUnit, m.MinMax, m.ExchangeRateID });

                    foreach (var i in query.OrderByDescending(m => m.Price))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.PriceID.ToString() + "|" + decimal.Round(i.Price, 2) + "|" + i.ExchangeRateID,
                            Text = i.FullUnit + "  " + i.MinMax
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpPaymentTypes(int pointOfSaleID)
            {
                ePlatEntities db = new ePlatEntities();
                var _now = DateTime.Now;
                var list = new List<SelectListItem>();
                var paymentTypes = GeneralFunctions.PaymentTypes.ToList();
                if (pointOfSaleID != 0)
                {
                    var _paymentTypeIDs = db.tblPointsOfSale_PaymentTypes.Where(m => m.pointOfSaleID == pointOfSaleID && m.fromDate <= _now && (m.toDate == null || m.toDate >= _now)).Select(m => m.paymentTypeID).ToArray();
                    if (_paymentTypeIDs.Count() > 0)
                    {
                        paymentTypes = paymentTypes.Where(m => _paymentTypeIDs.Contains(int.Parse(m.Key))).ToList();
                    }
                }

                foreach (var i in paymentTypes)
                {
                    list.Add(new SelectListItem
                    {
                        Value = i.Key,
                        Text = i.Value
                    });
                }
                list.Insert(0, ListItems.Default("--Select One--", ""));
                return list;
            }

            public static List<SelectListItem> FillDrpCompaniesPerOPC(string opcID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (opcID != "null")
                {
                    var terminal = long.Parse(opcID.Split('|')[0]);
                    long? _opcID = opcID.Split('|')[1] != "" ? opcID.Split('|')[1] != "null" ? long.Parse(opcID.Split('|')[1]) : 0 : (long?)null;

                    if (_opcID == 0)
                    {
                        var query = db.tblTerminals_Companies.Where(m => m.terminalID == terminal && m.tblCompanies.companyTypeID == 2).Select(m => new { m.companyID, m.tblCompanies.company });
                        foreach (var i in query)
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = i.companyID.ToString(),
                                Text = i.company
                            });
                        }
                        list.Insert(0, ListItems.NotSet("General Public"));
                        return list;
                    }
                    else if (_opcID != null)
                    {
                        var query = db.tblOPCS.Single(m => m.opcID == _opcID);
                        if (query.companyID != null)
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = query.companyID.ToString(),
                                Text = query.tblCompanies.company
                            });
                        }
                        list.Insert(0, ListItems.NotSet("General Public"));
                        return list;
                    }
                }
                list.Insert(0, ListItems.NotSet("General Public"));
                return list;
            }

            public static List<SelectListItem> FillDrpPromotionTeamsPerOPC(string opcID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (opcID != "null" && opcID != "")
                {
                    var _opcID = int.Parse(opcID);
                    //var query = db.tblOPC_PromotionTeams.Where(m => m.opcID == _opcID).OrderBy(m => m.tblPromotionTeams.promotionTeam);
                    var query = db.tblOPC_PromotionTeams.Where(m => m.opcID == _opcID && m.deleted != true && m.terminateDate == null).OrderBy(m => m.tblPromotionTeams.promotionTeam);

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.promotionTeamID.ToString(),
                            Text = i.tblPromotionTeams.promotionTeam
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> GetOPCPhone(long opcID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (opcID != 0)
                {
                    var phone = db.tblOPCS.Single(m => m.opcID == opcID);
                    list.Add(new SelectListItem()
                    {
                        Value = opcID.ToString(),
                        Text = phone.phone1 ?? phone.phone2 ?? "--Not Set--"
                    });
                }
                else
                {
                    list.Add(new SelectListItem()
                    {
                        Value = "",
                        Text = ""
                    });
                }
                return list;
            }

            public static List<SelectListItem> GetPayingCompaniesPerTerminal(long terminalID, bool cxcCompany, long? opcID = null)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (terminalID != 0 && !db.tblTerminals.Single(m => m.terminalID == terminalID).invoiceChargeBacksToMarketingCompany)
                {
                    dynamic query;
                    if (opcID == null)
                    {
                        //get terminal's type 3 and 4 companies
                        //query = db.tblTerminals_Companies.Where(m => m.tblCompanies.companyTypeID == (cxcCompany ? 4 : 3) && m.terminalID == terminalID).Select(m => new { m.companyID, m.tblCompanies.company });
                        query = db.tblTerminals_Companies.Where(m => (m.tblCompanies.companyTypeID == 3 || m.tblCompanies.companyTypeID == 4) && m.terminalID == terminalID).Select(m => new { m.companyID, m.tblCompanies.company, m.tblCompanies.companyTypeID });
                    }
                    else
                    {
                        //get opc's paying company
                        query = db.tblOPCS.Where(m => m.opcID == opcID).Select(m => new { companyID = m.payingCompanyIDX, m.tblCompanies1.company, m.tblCompanies1.companyTypeID });
                    }
                    foreach (var i in query)
                    {
                        if (list.Where(m => int.Parse(m.Value.Split('|')[0]) == i.companyID).Count() == 0)
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = i.companyID.ToString() + "|" + i.companyTypeID.ToString(),
                                Text = i.company
                            });
                        }
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCompaniesPerPromotionTeams(string opcID, long terminalID, bool cxcCompany = false)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var companyTypes = new List<int?>() { 2 };//mktCompanies

                if (opcID != "null" && opcID != "")
                {
                    //opc is defined
                    var _opcTeams = FillDrpPromotionTeamsPerOPC(opcID).Select(m => int.Parse(m.Value)).ToArray();
                    var _opcTeamsCompanies = db.tblPromotionTeams.Where(m => _opcTeams.Contains(m.promotionTeamID)).Select(m => new { m.companyID, m.tblCompanies.company, m.tblCompanies.companyTypeID });

                    if (_opcTeamsCompanies.FirstOrDefault().companyID != null)
                    {
                        //if promotionTeams have companies, use these companies
                        foreach (var i in _opcTeamsCompanies)
                        {
                            if (i.companyID != null)
                            {
                                if (list.Where(m => int.Parse(m.Value.Split('|')[0]) == i.companyID).Count() == 0)
                                {
                                    list.Add(new SelectListItem()
                                    {
                                        Value = i.companyID.ToString() + "|" + i.companyTypeID.ToString(),
                                        Text = i.company
                                    });
                                }
                            }
                        }
                    }
                    else
                    {
                        //if promotionTeams haven't companies, use companies related with terminal
                        var _terminalMKTCompanies = db.tblTerminals_Companies.Where(m => companyTypes.Contains(m.tblCompanies.companyTypeID) && terminalID == m.terminalID).Select(m => new { m.companyID, m.tblCompanies.company, m.default_, m.tblCompanies.companyTypeID });
                        var _opc = long.Parse(opcID);
                        var opcCompany = db.tblOPCS.Single(m => m.opcID == _opc).companyID;

                        foreach (var i in _terminalMKTCompanies)
                        {
                            if (list.Where(m => int.Parse(m.Value.Split('|')[0]) == i.companyID).Count() == 0)
                            {
                                list.Add(new SelectListItem()
                                {
                                    Value = i.companyID.ToString() + "|" + i.companyTypeID.ToString(),
                                    Text = i.company,
                                    Selected = (i.companyID == opcCompany ? true : false)
                                });
                            }
                        }
                    }
                    list.AddRange(GetPayingCompaniesPerTerminal(terminalID, cxcCompany, long.Parse(opcID)));
                }
                else
                {
                    //opc is not defined
                    var _terminalMKTCompanies = db.tblTerminals_Companies.Where(m => companyTypes.Contains(m.tblCompanies.companyTypeID) && terminalID == m.terminalID).Select(m => new { m.companyID, m.tblCompanies.company, m.default_, m.tblCompanies.companyTypeID });
                    foreach (var i in _terminalMKTCompanies)
                    {
                        if (list.Where(m => int.Parse(m.Value.Split('|')[0]) == i.companyID).Count() == 0)
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = i.companyID.ToString() + "|" + i.companyTypeID.ToString(),
                                Text = i.company,
                                Selected = i.default_ ?? false
                            });
                        }
                    }
                    list.AddRange(GetPayingCompaniesPerTerminal(terminalID, cxcCompany));
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCompaniesPerTypeAndTerminal(long terminalID, int companyType)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                var _companies = db.tblTerminals_Companies.Where(m => m.terminalID == terminalID && m.tblCompanies.companyTypeID == companyType).Select(m => new { m.companyID, m.tblCompanies.company }); ;

                foreach (var i in _companies)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.companyID.ToString() + "|" + companyType,
                        Text = i.company
                    });
                }
                return list;
            }

            //public static List<SelectListItem> FillDrpCompaniesPerPromotionTeams(string opcID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var list = new List<SelectListItem>();
            //    var terminals = new UserSession().Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //    var allowedTypes = new List<int?>() { 2 };//mktCompany, payingCompany
            //    if (db.tblTerminals.Where(m => terminals.Contains(m.terminalID) && m.invoiceChargeBacksToMarketingCompany == false).Count() > 0)
            //    {
            //        allowedTypes.Add(3);
            //    }
            //    if (opcID != "null" && opcID != "")
            //    {
            //        //var _opcID = int.Parse(opcID);
            //        var _promotionTeams = FillDrpPromotionTeamsPerOPC(opcID).Select(m => int.Parse(m.Value)).ToArray();
            //        var query = db.tblPromotionTeams.Where(m => _promotionTeams.Contains(m.promotionTeamID)).Select(m => new { m.companyID, m.tblCompanies.company });
            //        foreach (var i in query)
            //        {
            //            if (i.companyID != null)
            //            {
            //                list.Add(new SelectListItem()
            //                {
            //                    Value = i.companyID.ToString(),
            //                    Text = i.company
            //                });
            //            }
            //        }
            //        if (list.Count() == 0)
            //        {
            //            //var terminals = new UserSession().Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //            var _query = db.tblTerminals_Companies.Where(m => allowedTypes.Contains(m.tblCompanies.companyTypeID) && terminals.Contains(m.terminalID)).Select(m => new { m.companyID, m.tblCompanies.company, m.default_ });
            //            var _opc = long.Parse(opcID);
            //            var opcCompany = db.tblOPCS.Single(m => m.opcID == _opc).companyID;
            //            //list.Add(new SelectListItem()
            //            //{
            //            //    Value = opc.companyID.ToString(),
            //            //    Text = opc.tblCompanies.company,
            //            //    Selected = true
            //            //});
            //            foreach (var i in _query)
            //            {
            //                if (list.Where(m => int.Parse(m.Value) == i.companyID).Count() == 0)
            //                {
            //                    list.Add(new SelectListItem()
            //                    {
            //                        Value = i.companyID.ToString(),
            //                        Text = i.company,
            //                        Selected = (i.companyID == opcCompany ? true : false)
            //                    });
            //                }
            //            }
            //        }
            //        else
            //        {
            //            if (db.tblTerminals.Where(m => terminals.Contains(m.terminalID) && m.invoiceChargeBacksToMarketingCompany == false).Count() > 0)
            //            {
            //                var _query = db.tblTerminals_Companies.Where(m => m.tblCompanies.companyTypeID == 3 && terminals.Contains(m.terminalID)).Select(m => new { m.companyID, m.tblCompanies.company });
            //                foreach (var i in _query)
            //                {
            //                    if (list.Where(m => int.Parse(m.Value) == i.companyID).Count() == 0)
            //                    {
            //                        list.Add(new SelectListItem()
            //                        {
            //                            Value = i.companyID.ToString(),
            //                            Text = i.company
            //                        });
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    else
            //    {
            //        //var terminals = new UserSession().Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //        var query = db.tblTerminals_Companies.Where(m => allowedTypes.Contains(m.tblCompanies.companyTypeID) && terminals.Contains(m.terminalID)).Select(m => new { m.companyID, m.tblCompanies.company, m.default_ });
            //        foreach (var i in query)
            //        {
            //            if (list.Where(m => int.Parse(m.Value) == i.companyID).Count() == 0)
            //            {
            //                list.Add(new SelectListItem()
            //                {
            //                    Value = i.companyID.ToString(),
            //                    Text = i.company,
            //                    Selected = i.default_ ?? false
            //                });
            //            }
            //        }
            //    }
            //    //list.Insert(list.Count(), ListItems.NotSet("General Public"));
            //    return list;
            //}

            public static List<SelectListItem> TeamHasBudget(string promotionTeamID)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                if (promotionTeamID != "null" && promotionTeamID != null)
                {
                    var _team = int.Parse(promotionTeamID);
                    var promotionTeam = db.tblPromotionTeams.Single(m => m.promotionTeamID == _team);
                    list.Add(new SelectListItem()
                    {
                        //Value = ((promotionTeam.giftingBudget != null && promotionTeam.giftingBudget > 0) ? "true" : "false") + "|" + promotionTeam.giftingBudget + "_" + promotionTeam.tblCurrencies.currencyCode,
                        Value = ((promotionTeam.giftingBudget != null && promotionTeam.giftingBudget > 0) ? "true" + "|" + promotionTeam.giftingBudget + "_" + promotionTeam.tblCurrencies.currencyCode : "false"),
                        Text = promotionTeam.companyID.ToString()
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpMarketingCompaniesPerTerminals(string terminalOpc)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (terminalOpc != null)
                {
                    var terminal = long.Parse(terminalOpc.Split('|')[0]);
                    var opc = terminalOpc.Split('|')[1] != "null" ? long.Parse(terminalOpc.Split('|')[1]) : 0;
                    var company = opc != 0 ? db.tblOPCS.Single(m => m.opcID == opc).companyID : 0;

                    var query = db.tblTerminals_Companies.Where(m => terminal == m.terminalID && m.companyID == company && m.tblCompanies.companyTypeID == 2).Select(m => new { m.companyID, m.tblCompanies.company }).Distinct();

                    foreach (var i in query.OrderBy(m => m.company))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.companyID.ToString(),
                            Text = i.company
                        });
                    }
                }
                list.Insert(0, ListItems.NotSet("General Public"));
                return list;
            }

            public static List<SelectListItem> FillDrpBillingInfo(string leadID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (leadID != "")
                {
                    Guid _leadID = Guid.Parse(leadID);
                    var query = db.tblBillingInfo.Where(m => m.leadID == _leadID);

                    foreach (var i in query)
                    {
                        var cc = Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(i.cardNumber));
                        list.Add(new SelectListItem()
                        {
                            Value = i.billingInfoID.ToString(),
                            Text = i.tblCardTypes.cardType + " - " + cc.Substring(cc.Length-4)
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpTransactionTypes()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblMoneyTransactionTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.moneyTransactionTypeID.ToString(),
                        Text = i.moneyTransactionType
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpCouponsByPurchase(string purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (purchaseID != "")
                {
                    Guid purchase = Guid.Parse(purchaseID.ToString());
                    foreach (var i in db.tblPurchases_Services.Where(m => m.purchaseID == purchase))
                    {

                        list.Add(new SelectListItem()
                        {
                            Value = i.purchase_ServiceID.ToString(),
                            Text = (i.tblPurchaseServiceDetails.FirstOrDefault().coupon != null ? i.tblPurchaseServiceDetails.FirstOrDefault().coupon.Split('-')[0] + " - " : "") + i.tblServices.service + " $" + i.total + i.tblCurrencies.currencyCode + " | " + i.tblPurchaseServiceStatus.purchaseServiceStatus
                            //Text = i.tblServices.service + (i.cancelationDateTime != null ? " | Canceled" : "")
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> GetServiceProviderInfo(long serviceID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                if (serviceID != 0)
                {
                    var query = db.tblServices.Where(m => m.serviceID == serviceID).Select(m => new { m.providerID, m.tblProviders.comercialName, m.tblProviders.phone1, m.tblProviders.ext1, m.tblProviders.contactEmail });
                    list.Add(new SelectListItem()
                    {
                        Value = query.FirstOrDefault().providerID + "|" + query.FirstOrDefault().comercialName,
                        Text = query.FirstOrDefault().phone1 + (query.FirstOrDefault().ext1 != null ? " ext:" + query.FirstOrDefault().ext1 : "") + "|" + query.FirstOrDefault().contactEmail
                    });
                }
                return list;
            }

            //public static List<SelectListItem> FillDrpLocations(long terminalID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var list = new List<SelectListItem>();

            //    if (terminalID != 0)
            //    {
            //        var destinations = db.tblTerminals_Destinations.Where(m => m.terminalID == terminalID).Select(m => m.destinationID).ToArray();
            //        foreach (var i in db.tblLocations.Where(m => destinations.Contains(m.destinationID)).OrderBy(m => m.location))
            //        {
            //            list.Add(new SelectListItem()
            //            {
            //                Value = i.locationID.ToString(),
            //                Text = i.location
            //            });
            //        }
            //    }
            //    return list;
            //}

            public static decimal GetExchangeRateOfPurchase(int currencyID, DateTime purchaseDate, long terminalID, int pointOfSaleID, ePlatEntities dbContext = null)
            {
                ePlatEntities db = dbContext ?? new ePlatEntities();
                List<KeyValuePair<string, decimal>> exchangeRates = new List<KeyValuePair<string, decimal>>();
                decimal exchangeRate;
                
                var _exchangeRates = db.tblExchangeRates.Where(m => m.exchangeRateTypeID == 1 && m.tblCurrencies1.currencyCode == "MXN" && m.providerID == null
                    && m.fromDate <= purchaseDate && (m.permanent_ || m.toDate >= purchaseDate) && m.terminalID == terminalID && m.tblExchangeRates_PointsOfSales.Count() == 0);

                var exchangeRatesPos = _exchangeRates.Where(x =>
                    x.tblExchangeRates_PointsOfSales.Count(p =>
                        p.pointOfSaleID == pointOfSaleID
                        && p.dateAdded <= purchaseDate
                        && (p.dateDeleted == null || p.dateDeleted > purchaseDate)
                    ) > 0
                    && (x.toDate == null || x.toDate > purchaseDate));


                if (exchangeRatesPos.Count() > 0)
                {
                    foreach (var i in exchangeRatesPos)
                    {
                        _exchangeRates = _exchangeRates.Where(m => m.fromCurrencyID != i.fromCurrencyID);
                    }
                    _exchangeRates = _exchangeRates.Concat(exchangeRatesPos);
                }

                exchangeRate = currencyID != 2 ? _exchangeRates.Where(m => m.fromCurrencyID == currencyID).OrderByDescending(m => m.fromDate).ThenByDescending(m => m.dateSaved).FirstOrDefault().exchangeRate : 1;

                return exchangeRate;
            }

            public static object GetExchangeRateOfPurchase(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                return new { exchangeRate = GetExchangeRateOfPurchase(purchase.currencyID, purchase.purchaseDateTime, purchase.terminalID, purchase.pointOfSaleID), commission = Purchases.GetBankCommission(purchase.terminalID, purchase.purchaseDateTime) };
            }

            public static List<SelectListItem> FillDrpEgressTypes(long terminalID)
            {
                var list = new List<SelectListItem>();
                //foreach (var i in GeneralFunctions.EgressTypes.OrderBy(m => m.Value))
                foreach (var i in GeneralFunctions.EgressTypes.Where(m => m.Terminals.Contains(terminalID)).OrderBy(m => m.Key))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.Key,
                        Text = i.Value
                    });
                }
                //list.Insert(0, ListItems.Default());
                return list;
            }

            //public static List<SelectListItem> FillDrpEgressConcepts()
            //{
            //    return FillDrpEgressConcepts(null);
            //}
            public static List<EgressConceptModel> FillDrpEgressConcepts()
            {
                return FillDrpEgressConcepts(null);
            }

            public static List<EgressConceptModel> FillDrpEgressConcepts(long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();

                List<EgressConceptModel> list = new List<EgressConceptModel>();

                var _terminals = terminalID != null ? new long?[] { terminalID } : session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
                var _companies = db.tblTerminals.Where(m => _terminals.Contains(m.terminalID)).Select(m => m.companyID);

                foreach (var i in db.tblEgressConcepts.Where(m => _companies.Contains(m.companyID)).OrderBy(m => m.egressConcept))
                {
                    list.Add(new EgressConceptModel()
                    {
                        Value = i.egressConceptID.ToString(),
                        Text = i.egressConcept,
                        Gifting = i.egressTypeID.ToString()
                    });
                }
                return list;
            }

            //public static List<SelectListItem> FillDrpEgressConcepts(long? terminalID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var list = new List<SelectListItem>();

            //    List<long> terminals = new List<long>();
            //    if (terminalID == null)
            //    {
            //        UserSession session = new UserSession();
            //        terminals = session.Terminals != "" ?
            //            session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
            //            session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
            //    }
            //    else
            //    {
            //        terminals.Add((long)terminalID);
            //    }

            //    var companies = from t in db.tblTerminals
            //                    where terminals.Contains(t.terminalID)
            //                    select t.companyID;

            //    foreach (var i in db.tblEgressConcepts.Where(x => companies.Contains(x.companyID)).OrderBy(m => m.egressConcept))
            //    {
            //        list.Add(new SelectListItem()
            //        {
            //            Value = i.egressConceptID.ToString(),
            //            Text = i.egressConcept
            //        });
            //    }
            //    return list;
            //}

            public static List<SelectListItem> FillDrpEgressConcepts(long? terminalID, int egressType)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                List<long> terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var companies = from t in db.tblTerminals
                                where terminals.Contains(t.terminalID)
                                select t.companyID;

                foreach (var i in db.tblEgressConcepts.Where(x => companies.Contains(x.companyID) && x.egressTypeID == egressType).OrderBy(m => m.egressConcept))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.egressConceptID.ToString(),
                        Text = i.egressConcept
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpEgressConceptsWithType(long? terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                List<long> terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var companies = from t in db.tblTerminals
                                where terminals.Contains(t.terminalID)
                                select t.companyID;

                foreach (var i in db.tblEgressConcepts.Where(x => companies.Contains(x.companyID)).OrderBy(m => m.egressTypeID).ThenBy(m => m.egressConcept))
                {
                    if (i.egressTypeID == 1)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.egressConceptID.ToString(),
                            Text = "Customer's Deposit > " + i.egressConcept
                        });
                    }
                    else if (i.egressTypeID == 2)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.egressConceptID.ToString(),
                            Text = "Charge Back > " + i.egressConcept
                        });
                    }
                    else if (i.egressTypeID == 3)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.egressConceptID.ToString(),
                            Text = "Coupons CxC > " + i.egressConcept
                        });
                    }
                }
                return list;
            }

            public static List<SelectListItem> FillDrpLocationsForCompaniesGroup()
            {
                ePlatEntities db = new ePlatEntities();

                long[] terminals = session.Terminals.Split(',').Select(x => long.Parse(x)).ToArray();
                var destinations = (from t in db.tblTerminals_Destinations
                                    where terminals.Contains(t.terminalID)
                                    select t.destinationID).Distinct();

                var companyGroupID = (from c in db.tblTerminals
                                      where terminals.Contains(c.terminalID)
                                      select c.companiesGroupID).Distinct();

                List<SelectListItem> list = new List<SelectListItem>();

                var Locations = from l in db.tblLocations
                                where destinations.Contains(l.destinationID)
                                && companyGroupID.Contains(l.companiesGroupID)
                                select l;

                foreach (var location in Locations)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = location.locationID.ToString(),
                        Text = location.location
                    });
                }
                list = list.OrderBy(m => m.Text).ToList();
                return list;
            }

            public static List<SelectListItem> FillDrpLocationsPerCurrentTerminals(long terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                //var destinations = PlaceDataModel.GetDestinationsByCurrentTerminals(terminalID).Select(m => long.Parse(m.Value)).ToArray();
                //foreach (var i in db.tblLocations.Where(m => destinations.Contains(m.destinationID)).OrderBy(m => m.location))

                if (terminalID != 0)
                {
                    foreach (var i in db.tblLocations.Where(m => m.terminalID == terminalID).OrderBy(m => m.location))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.locationID.ToString(),
                            Text = i.location
                        });
                    }
                }
                else
                {
                    var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                    foreach (var i in db.tblLocations.Where(m => terminals.Contains(m.terminalID)).OrderBy(m => m.location))
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.locationID.ToString(),
                            Text = i.location
                        });
                    }
                }
                
                return list;
            }

            public static List<SelectListItem> FillDrpCompaniesPerSelectedTerminals()
            {
                ePlatEntities db = new ePlatEntities();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var list = new List<SelectListItem>();

                //foreach (var i in terminals)
                //{
                //    var companies = db.tblTerminals.Where(m => m.terminalID == i && m.tblCompanies != null).Select(m => new { m.tblCompanies.companyID, m.tblCompanies.company }).Distinct();
                //    foreach (var a in companies)
                //    {
                //        list.Add(new SelectListItem()
                //        {
                //            Value = a.companyID.ToString(),
                //            Text = a.company
                //        });
                //    }
                //}
                var query = db.tblTerminals.Where(m => terminals.Contains(m.terminalID) && m.tblCompanies != null).Select(m => new { m.tblCompanies.companyID, m.tblCompanies.company }).Distinct();

                foreach (var i in query.OrderBy(m => m.company))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.companyID.ToString(),
                        Text = i.company
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpFundsPerSelectedTerminals()
            {
                return FillDrpFundsPerSelectedTerminals(null);
            }

            public static List<SelectListItem> FillDrpFundsPerSelectedTerminals(long? terminalID, bool concatenateCurrency = false)
            {
                ePlatEntities db = new ePlatEntities();
                List<long> terminals = new List<long>();
                if (terminalID == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                //var companies = FillDrpCompaniesPerSelectedTerminals().Select(m => long.Parse(m.Value)).ToArray();
                var companies = from c in db.tblTerminals
                                where terminals.Contains(c.terminalID)
                                select c.companyID;

                List<SelectListItem> list = new List<SelectListItem>();

                var query = db.tblFunds.Where(m => companies.Contains(m.companyID)).OrderBy(m => m.fundName);

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.fundID.ToString(),
                        Text = i.fundName + (concatenateCurrency ? " - " + i.tblCurrencies.currencyCode : "")
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpIncomeConcepts()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                //foreach (var i in GeneralFunctions.IncomeTypes.OrderByDescending(m => m.Value))
                foreach (var i in GeneralFunctions.IncomeTypes.OrderBy(m => m.Value))//sugerido por gustavo 15/11/18
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.Key,
                        Text = i.Value
                    });
                }

                return list;
            }

            public static List<SelectListItem> FillDrpSiblingsCoupons(string purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (purchaseID != "null")
                {
                    var purchase = Guid.Parse(purchaseID);
                    foreach (var i in db.tblPurchases_Services.Where(m => m.purchaseID == purchase && db.tblCloseOuts_Purchases.Where(x => x.purchase_ServiceID == m.purchase_ServiceID && x.paid).Count() > 0 && m.serviceStatusID == 4))
                    {
                        if (i.tblPurchaseServiceDetails.Any())
                        {
                            list.Add(new SelectListItem()
                            {
                                Value = i.purchase_ServiceID.ToString(),
                                Text = (i.tblPurchaseServiceDetails.FirstOrDefault().coupon != null ? i.tblPurchaseServiceDetails.FirstOrDefault().coupon.Split('-')[0] + " " : "") + i.tblServices.service
                            });
                        }
                    }
                }
                return list;
            }

            public static List<SelectListItem> DoesPointAcceptCharges(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var query = db.tblPurchases.Where(m => m.purchaseID == purchaseID).FirstOrDefault();
                list.Add(new SelectListItem()
                {
                    Value = query.tblPointsOfSale.acceptCharges.ToString(),
                    Text = query.tblPointsOfSale.online.ToString()
                });
                return list;
            }

            public static string IsPurchasePaid(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                //var payments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase.purchaseID);
                var payments = new Purchases().GetPurchasePayments(purchaseID.ToString()).Where(m => m.PurchasePaymentInfo_Deleted != true);
                if (payments != null && payments.Count() > 0)
                {
                    var isSameCurrency = (payments.Where(m => m.PurchasePayment_Currency == purchase.tblCurrencies.currencyCode && m.PurchasePayment_ErrorCode == "Approved").Count() == payments.Where(m => m.PurchasePayment_ErrorCode == "Approved").Count());

                    var total = isSameCurrency ? purchase.total : purchase.total * GetExchangeRateOfPurchase(purchase.currencyID, purchase.purchaseDateTime, purchase.terminalID, purchase.pointOfSaleID);
                    foreach (var p in payments)
                    {
                        if (p.PurchasePayment_ErrorCode == "Approved")
                        {
                            total -= p.PurchasePayment_Amount * (isSameCurrency ? 1 : p.PurchasePayment_ExchangeRate);
                        }
                    }

                    return (total <= (decimal)0.1 ? "Paid" : "Unpaid");
                }
                else
                {
                    return "Unpaid";
                }
            }

            public static List<SelectListItem> FillDrpFlightTypes()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblFlightTypes)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.flightTypeID.ToString(),
                        Text = i.flightType
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpAirlines()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                foreach (var i in db.tblAirLines)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.airLineID.ToString(),
                        Text = i.airLine
                    });
                }
                return list.OrderBy(m => m.Text).ToList<SelectListItem>();
            }

            //public static List<SelectListItem> FillDrpOptionCategories()
            public static List<SelectListItem> FillDrpOptionCategories(bool showAll = false)
            {
                ePlatEntities db = new ePlatEntities();
                var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
                //var isAdmin = GeneralFunctions.IsUserInRole("Administrator");
                var list = new List<SelectListItem>();

                //var query = db.tblOptionTypes.Where(m => terminals.Contains(m.terminalID) || isAdmin);
                var query = db.tblOptionTypes.Where(m => terminals.Contains(m.terminalID) || showAll);
                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.optionTypeID.ToString(),
                        //Text = i.optionType + (i.terminalID != null ? " - " + i.tblTerminals.prefix : "")
                        Text = i.optionType + (i.terminalID != null && showAll? " - " + i.tblTerminals.prefix : "")
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpOptionTypes(int optionType = 0, int placeID = 0)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (placeID != 0 && optionType != 0)
                {
                    var query = db.tblOptions_Places.Where(m => m.placeID == placeID && m.tblOptions.optionTypeID == optionType && m.tblOptions.terminateDate == null).Select(m => new { m.tblOptions.optionID, m.tblOptions.optionName, m.tblOptions.optionTypeID });

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.optionID.ToString(),
                            Text = i.optionName
                        });
                    }
                }
                else
                {
                    var query = db.tblOptions.Where(m => m.terminateDate == null).Select(m => new { m.optionID, m.optionName, m.optionTypeID });

                    foreach (var i in query)
                    {
                        list.Add(new SelectListItem()
                        {
                            Value = i.optionID.ToString(),
                            Text = i.optionName
                        });
                    }
                }

                return list;
            }

            public static List<SelectListItem> FillDrpOptionPrice(int optionID = 0)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                if (optionID != 0)
                {
                    var query = db.tblOptions.Single(m => m.optionID == optionID);
                    list.Add(new SelectListItem()
                    {
                        Value = query.goldCardPrice.ToString(),
                        Text = query.goldCardPrice.ToString()
                    });
                }
                return list;
            }

            public static decimal GetOptionCreditAmount(int optionID)
            {
                ePlatEntities db = new ePlatEntities();
                if (optionID != 0)
                {
                    return db.tblOptions.Single(m => m.optionID == optionID).resortCredit ?? 0;
                }
                else
                {
                    return 0;
                }
            }

            public static List<SelectListItem> GetOptionCategories()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();

                var query = db.tblOptionTypes.Select(m => new { m.optionTypeID, m.optionType });

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.optionTypeID.ToString(),
                        Text = i.optionType
                    });
                }
                return list;
            }

            public static bool IsPoSOnline(int pointOfSaleID)
            {
                ePlatEntities db = new ePlatEntities();
                return db.tblPointsOfSale.Where(m => m.pointOfSaleID == pointOfSaleID).FirstOrDefault().online;
            }

            public static bool LimitRefundsPerType(long terminalID)
            {
                ePlatEntities db = new ePlatEntities();
                return db.tblTerminals.Single(m => m.terminalID == terminalID).refundsByType ?? false;
            }

            public static List<SelectListItem> FillDrpEmailNotifications()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                var terminals = new UserSession().Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();

                var query = from notif in db.tblEmailNotifications
                            where notif.active == true
                            && terminals.Contains(notif.terminalID)
                            select new
                            {
                                notif.emailNotificationID,
                                notif.description
                            };

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.emailNotificationID.ToString(),
                        Text = i.description
                    });
                }

                return list;
            }

            public static List<SelectListItem> FillDrpPersonalTitles(string culture = null)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                var query = culture != null ? db.tblPersonalTitles.Where(m => m.culture == culture) : db.tblPersonalTitles;

                foreach (var i in query.OrderBy(m => m.personalTitle))
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.personalTitleID.ToString(),
                        Text = i.personalTitle
                    });
                }

                return list;
            }

            public static DependantFields QuickSaleDependantLists()
            {
                ePlatEntities db = new ePlatEntities();
                DependantFields df = new DependantFields();

                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                df.Fields = new List<DependantFields.DependantField>();

                //PointsOfSale
                //DependantFields.DependantField pointsOfSale = new DependantFields.DependantField();
                //pointsOfSale.Field = "FastSaleInfo_PointOfSale";
                //pointsOfSale.ParentField = null;
                //pointsOfSale.Values = new List<DependantFields.FieldValue>();

                //var pos = CatalogsDataModel.PointsOfSale.PoinsOfSaleCatalogs.FillDrpPointsOfSale();

                //foreach (var i in terminals)
                //{
                //    foreach(var p in pos){
                //    DependantFields.FieldValue val = new DependantFields.FieldValue();
                //    val.ParentValue = i;
                //    val.Value = p.Value;
                //        val.Text = p.Text;
                //        pointsOfSale.Values.Add(val);
                //    }
                //}

                DependantFields.DependantField locations = new DependantFields.DependantField();
                locations.Field = "FastSaleInfo_Location";
                locations.ParentField = "FastSaleInfo_Terminal";
                locations.Values = new List<DependantFields.FieldValue>();

                var queryLocations = db.tblLocations.Where(m => terminals.Contains(m.terminalID)).OrderBy(m => m.location);

                foreach (var i in terminals)
                {
                    foreach (var l in queryLocations)
                    {
                        DependantFields.FieldValue val = new DependantFields.FieldValue();
                        val.ParentValue = i;
                        val.Value = l.locationID.ToString();
                        val.Text = l.location;
                        locations.Values.Add(val);
                    }
                }

                DependantFields.FieldValue defaultLocation = new DependantFields.FieldValue();
                defaultLocation.ParentValue = null;
                defaultLocation.Value = "";
                defaultLocation.Text = "--Select One--";
                locations.Values.Insert(0, defaultLocation);

                df.Fields.Add(locations);

                return df;
            }
        }

        private static bool _messageFlag;
        public static bool messageFlag
        {
            get
            {
                return _messageFlag;
            }
            set
            {
                _messageFlag = value;
            }
        }

        public class Lead
        {
            ePlatEntities db = new ePlatEntities();

            public bool View()
            {
                ePlatEntities db = new ePlatEntities();

                var currentUser = session.UserID;
                var userRole = (Guid)session.RoleID;
                var currentProfile = db.tblUsers_SysWorkGroups.Single(m => m.userID == currentUser && m.roleID == userRole && m.sysWorkGroupID == session.WorkGroupID);
                if ((bool)currentProfile.manageReservations)
                {
                    return true;
                }
                else
                {
                    return false;
                    //return true;//for test
                }
            }

            //-// Database reading actions
            /// <summary>
            /// Finds a lead given its LeadID
            /// </summary>
            /// <param name="LeadID"></param>
            /// <returns></returns>
            /// 
            public LeadModel.Fields.LeadGeneralInformation Find(Guid LeadID)
            {
                long[] filteredTerminals = null;
                var currentUser = session.UserID;
                List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
                long[] currentTerminals = _currentTerminals.Select(m => long.Parse(m.Value)).ToArray();

                var isAgent = db.tblUsers_SysWorkGroups.Count(m => m.userID == currentUser && m.sysWorkGroupTeamID == null && m.aspnet_Roles.RoleName == "Agent") > 0;
                //var isAgent = Utils.GeneralFunctions.IsUserInRole("Agent", currentUser);

                if (session.Terminals != "")
                {
                    var sessionTerminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                    List<long> verifiedSelectedTerminals = new List<long>();
                    foreach (long x in sessionTerminals)
                    {
                        if (currentTerminals.Contains(x))
                        {
                            verifiedSelectedTerminals.Add(x);
                        }
                    }
                    filteredTerminals = verifiedSelectedTerminals.ToArray();
                }
                else
                {
                    filteredTerminals = filteredTerminals.Concat(currentTerminals).ToArray();
                }

                IQueryable<tblLeads> leadQuery = from x in db.tblLeads
                                                 where x.leadID == LeadID
                                                 && filteredTerminals.Contains(x.terminalID)
                                                 && (!isAgent || x.assignedToUserID == currentUser)
                                                 select x;

                LeadModel.Fields.LeadGeneralInformation gim = new LeadModel.Fields.LeadGeneralInformation();
                if (leadQuery.Count() > 0)
                {
                    gim.FillWith(leadQuery.First());
                }
                return gim;
            }

            public LeadModel.Fields.LeadGeneralInformation _Find(Guid LeadID)
            {

                IQueryable<tblLeads> leadQuery = from x in db.tblLeads where x.leadID == LeadID select x;

                var currentUser = session.UserID;
                if (Utils.GeneralFunctions.IsUserInRole("Agent", currentUser))
                {
                    leadQuery = leadQuery.Where(x => x.assignedToUserID == currentUser);
                }

                ///////
                long[] filteringTerminals = null;
                List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
                long[] currentTerminals = (from x in _currentTerminals.Select(x => long.Parse(x.Value)) select x).ToArray();
                UserSession currentUserSession = new UserSession();
                if (currentUserSession.Terminals != "")
                {
                    string[] _selectedTerminals = currentUserSession.Terminals.Split(',');
                    long[] selectedTerminals = (from x in _selectedTerminals.Select(x => long.Parse(x)) select x).ToArray();
                    //make sure the terminals comming in the URL are permited terminals for the current user
                    List<long> verifiedSelectedTerminals = new List<long>();
                    foreach (long x in selectedTerminals)
                    {
                        if (currentTerminals.Contains(x))
                        {
                            verifiedSelectedTerminals.Add(x);
                        }
                    }    //filteringTerminals = (from x in selectedTerminals  select x).ToArray();
                    filteringTerminals = verifiedSelectedTerminals.ToArray();
                }
                else
                {
                    filteringTerminals = (from x in currentTerminals select x).ToArray();
                }
                leadQuery = leadQuery.Where(x => filteringTerminals.Contains(x.terminalID));
                ///////



                //var lead = from x in leadQuery where x.leadID == LeadID select x;
                LeadModel.Fields.LeadGeneralInformation gim = new LeadModel.Fields.LeadGeneralInformation();
                if (leadQuery.Count() > 0)
                {
                    gim.FillWith(leadQuery.First());
                }
                //if (lead.Count() > 0)
                //{
                //    gim.FillWith(lead.First());
                //}
                return gim;
            }

            public List<LeadModel.Items.SearchResults> SearchReferrals(Guid LeadID)
            {
                IQueryable<tblLeads> leadQuery = from x in db.tblLeads select x;

                // // //uncommenting next block will prevent current user to see lead referrals not assigned to the current user

                //if (Utils.GeneralFunctions.IsUserInRol("Agent", currentUser))
                //{
                //    leadQuery = leadQuery.Where(x => x.assignedToUserID == currentUser);
                //}

                // // //uncommenting the next block will prevent the current user to see lead referrals out of terminals assigned to the current user

                /////////
                //long[] filteringTerminals = null;
                //List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
                //long[] currentTerminals = (from x in _currentTerminals.Select(x => long.Parse(x.Value)) select x).ToArray();
                //UserSession currentUserSession = new UserSession();
                //if (currentUserSession.Terminals != "")
                //{
                //    string[] _selectedTerminals = currentUserSession.Terminals.Split(',');
                //    long[] selectedTerminals = (from x in _selectedTerminals.Select(x => long.Parse(x)) select x).ToArray();
                //    //make sure the terminals comming in the URL are permited terminals for the current user
                //    List<long> verifiedSelectedTerminals = new List<long>();
                //    foreach (long x in selectedTerminals)
                //    {
                //        if (currentTerminals.Contains(x))
                //        {
                //            verifiedSelectedTerminals.Add(x);
                //        }
                //    }    //filteringTerminals = (from x in selectedTerminals  select x).ToArray();
                //    filteringTerminals = verifiedSelectedTerminals.ToArray();
                //}
                //else
                //{
                //    filteringTerminals = (from x in currentTerminals select x).ToArray();
                //}
                //leadQuery = leadQuery.Where(x => filteringTerminals.Contains(x.terminalID));
                /////////


                List<LeadModel.Items.SearchResults> list = (from x in leadQuery
                                                            where x.referredByID == LeadID
                                                            select new LeadModel.Items.SearchResults()
                                                            {
                                                                LeadID = x.leadID,
                                                                FirstName = x.firstName,
                                                                LastName = x.lastName,
                                                                Email = x.tblLeadEmails.FirstOrDefault(e => e.main == true).email,
                                                                Phone = x.tblPhones.FirstOrDefault(m => m.main == true).phone,
                                                                BookingStatus = x.tblBookingStatus.bookingStatus,
                                                                LeadStatus = x.tblLeadStatus.leadStatus,
                                                                LeadSource = x.tblLeadSources.leadSource,
                                                                ArrivalDate = x.tblReservations.FirstOrDefault().arrivalDate
                                                            }).ToList();

                return list;
            }

            public List<LeadModel.Items.SearchResults> SearchReferringLead(Guid LeadID)
            {
                IQueryable<tblLeads> leadQuery = from x in db.tblLeads select x;

                // Agents are able to see referring lead on the lead details, but 
                // if they try to open the referring lead in a separate window
                // 

                //if (Utils.GeneralFunctions.IsUserInRol("Agent", currentUser))
                //{
                //    leadQuery = leadQuery.Where(x => x.assignedToUserID == currentUser);
                //}

                /////////
                //long[] filteringTerminals = null;
                //List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
                //long[] currentTerminals = (from x in _currentTerminals.Select(x => long.Parse(x.Value)) select x).ToArray();
                //UserSession currentUserSession = new UserSession();
                //if (currentUserSession.Terminals != "")
                //{
                //    string[] _selectedTerminals = currentUserSession.Terminals.Split(',');
                //    long[] selectedTerminals = (from x in _selectedTerminals.Select(x => long.Parse(x)) select x).ToArray();
                //    //make sure the terminals comming in the URL are permited terminals for the current user
                //    List<long> verifiedSelectedTerminals = new List<long>();
                //    foreach (long x in selectedTerminals)
                //    {
                //        if (currentTerminals.Contains(x))
                //        {
                //            verifiedSelectedTerminals.Add(x);
                //        }
                //    }    //filteringTerminals = (from x in selectedTerminals  select x).ToArray();
                //    filteringTerminals = verifiedSelectedTerminals.ToArray();
                //}
                //else
                //{
                //    filteringTerminals = (from x in currentTerminals select x).ToArray();
                //}
                //leadQuery = leadQuery.Where(x => filteringTerminals.Contains(x.terminalID));
                /////////


                List<LeadModel.Items.SearchResults> list = (from x in leadQuery
                                                            where x.leadID == LeadID
                                                            select new LeadModel.Items.SearchResults()
                                                            {
                                                                LeadID = x.leadID,
                                                                FirstName = x.firstName,
                                                                LastName = x.lastName,
                                                                Email = x.tblLeadEmails.FirstOrDefault(e => e.main == true).email,
                                                                Phone = x.tblPhones.FirstOrDefault(m => m.main == true).phone,
                                                                BookingStatus = x.tblBookingStatus.bookingStatus,
                                                                LeadStatus = x.tblLeadStatus.leadStatus,
                                                                LeadSource = x.tblLeadSources.leadSource,
                                                                ArrivalDate = x.tblReservations.FirstOrDefault().arrivalDate
                                                            }).ToList();

                return list;
            }

            public List<LeadModel.Items.ReservationPendingCharges> SearchPendingCharges(Guid LeadID)
            {

                var pendingCharges = (from x in db.tblPaymentDetails
                                      where x.tblReservations.tblLeads.leadID == LeadID
                                      && (x.deleted == null || x.deleted == false)
                                          && (x.moneyTransactionID == null || x.tblMoneyTransactions.authCode == "")
                                      select new LeadModel.Items.ReservationPendingCharges()
                                      {
                                          Amount = x.amount,
                                          CertificateNumber = x.tblReservations.certificateNumber,
                                          ChargeDescription = x.tblChargeDescriptions.chargeDescription,
                                          ChargeType = x.tblChargeTypes.chargeType,
                                          DateSaved = x.dateSaved,
                                          NetCenterCharge = x.netCenterCharge,
                                          NetCenterCost = x.netCenterCost,
                                          PaymentComments = x.paymentComments,
                                          ReservationPaymentDetailsID = x.paymentDetailsID,
                                          ErrorCode = x.tblMoneyTransactions.errorCode,
                                          AttemptDate = x.tblMoneyTransactions.transactionDate,
                                          AuthDate = x.tblMoneyTransactions.authDate,
                                          AuthCode = x.tblMoneyTransactions.authCode,
                                          HotelConfirmationNumber = x.tblReservations.hotelConfirmationNumber
                                      }).ToList();


                //List<LeadModel.Items.PendingCharges> pendingChargesList = new List<LeadModel.Items.PendingCharges>();

                //foreach (var p in pendingCharges)
                //{
                //    LeadModel.Items.PendingCharges pendingCharge = new LeadModel.Items.PendingCharges();
                //    pendingCharge.FillWith(p);
                //    pendingChargesList.Add(pendingCharge);
                //}
                //return pendingChargesList;


                foreach (var p in pendingCharges)
                {
                    MerchantAccountDataModel.MerchantAccountInfo MA = MerchantAccountDataModel.GetMerchantAccount(p.ReservationPaymentDetailsID);
                    if (MA != null)
                    {
                        p.ToBeBilledBy = MA.MerchantAccountBillingName;
                        p.ToBeBilledByID = MA.MerchantAccountID;
                    }
                }

                return pendingCharges;

            }

            /// <summary>
            /// Search against the database for a matching lead.
            /// </summary>
            /// <param name="lsm">The lead search model as criteria for the search.</param>
            /// <returns>A list of leads</returns>
            /// 

            public LeadModel.Items.Search Search(LeadModel.Views.Search lsm)
            {
                ePlatEntities db = new ePlatEntities();
                var _list = new List<LeadModel.Items.SearchResults>();
                LeadModel.Items.Search result = new LeadModel.Items.Search();
                var currentUser = session.UserID;
                var viewPurchases = new Purchases().View();
                IQueryable<tblLeads> query;

                #region "search parameters"
                var emptyModelFlag = true;
                var bookingStatusLength = 0;
                var bookingStatusArray = new int?[] { };
                if (lsm.Search_BookingStatus != null)
                {
                    bookingStatusArray = lsm.Search_BookingStatus.Select(m => (int?)m).ToArray();
                    bookingStatusLength = lsm.Search_BookingStatus.Length;
                    emptyModelFlag = false;
                }
                var interactionBookingStatusLength = 0;
                var interactionBookingStatusArray = new int?[] { };
                if (lsm.Search_InteractionBookingStatus != null)
                {
                    interactionBookingStatusArray = lsm.Search_InteractionBookingStatus.Select(m => (int?)m).ToArray();
                    interactionBookingStatusLength = lsm.Search_InteractionBookingStatus.Length;
                    emptyModelFlag = false;
                }
                List<Guid?> interactedWithUsers = new List<Guid?>() { ((Guid?)currentUser) };
                var interactedWithUsersLength = 0;
                if (lsm.Search_InteractedWithUser != null)
                {
                    interactedWithUsers = lsm.Search_InteractedWithUser.Select(m => (Guid?)m).ToList();
                    interactedWithUsersLength = lsm.Search_InteractedWithUser.Count();
                    emptyModelFlag = false;
                }
                var leadStatusLength = 0;
                var leadStatusArray = new int?[] { };
                if (lsm.Search_LeadStatus != null)
                {
                    leadStatusArray = lsm.Search_LeadStatus.Select(m => (int?)m).ToArray();
                    leadStatusLength = lsm.Search_LeadStatus.Length;
                    emptyModelFlag = false;
                }
                var leadSourcesLength = 0;
                var leadSourcesArray = new long?[] { };
                if (lsm.Search_LeadSource != null)
                {
                    leadSourcesArray = lsm.Search_LeadSource.Select(m => (long?)m).ToArray();
                    leadSourcesLength = lsm.Search_LeadSource.Length;
                    emptyModelFlag = false;
                }
                else
                {
                    leadSourcesArray = Array.ConvertAll(LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => m.Value).ToArray(), GeneralFunctions.ParseToNullableLong);
                    leadSourcesLength = leadSourcesArray.Length;
                    //leadSourcesLength = Array.ConvertAll(LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => m.Value).ToArray(), GeneralFunctions.ParseToNullableLong).Length;

                    //leadSourcesArray = Array.ConvertAll(LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => m.Value).ToArray(), GeneralFunctions.ParseToNullableLong);
                    //leadSourcesLength = Array.ConvertAll(LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => m.Value).ToArray(), GeneralFunctions.ParseToNullableLong).Length;
                }
                var callClasificationLength = 0;
                var callClasificationArray = new int?[] { };
                if (lsm.Search_CallClasification != null)
                {
                    callClasificationArray = lsm.Search_CallClasification.Select(m => (int?)m).ToArray();
                    callClasificationLength = lsm.Search_CallClasification.Length;
                    emptyModelFlag = false;
                }
                var startArrivalDate = DateTime.MinValue;
                if (lsm.Search_I_ArrivalDate != null)
                {
                    startArrivalDate = DateTime.Parse(lsm.Search_I_ArrivalDate);
                    emptyModelFlag = false;
                }
                var endArrivalDate = DateTime.MaxValue;
                if (lsm.Search_F_ArrivalDate != null)
                {
                    endArrivalDate = DateTime.Parse(lsm.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                List<long?> allowedResorts = PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToList();
                if (lsm.Search_Resort != null)
                {
                    allowedResorts = lsm.Search_Resort.Select(m => (long?)m).ToList();
                    emptyModelFlag = false;
                }
                List<Guid?> assignedToUsers;
                var assignedToUsersLength = 0;
                //var assignedToUsersLength = assignedToUsers.Count();
                if (lsm.Search_AssignedTo != null)
                {
                    assignedToUsers = lsm.Search_AssignedTo.Select(m => (Guid?)m).ToList();
                    assignedToUsersLength = lsm.Search_AssignedTo.Count();
                    emptyModelFlag = false;
                }
                else
                {
                    //assignedToUsers = UserDataModel.GetUsersBySupervisor((Guid)currentUser, true, false, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToList();
                    assignedToUsers = UserDataModel.GetUsersBySupervisor((Guid)currentUser, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToList();
                }
                var startTourDate = DateTime.MinValue;
                if (lsm.Search_I_TourDate != null)
                {
                    startTourDate = DateTime.Parse(lsm.Search_I_TourDate.ToString());
                    emptyModelFlag = false;
                }
                var endTourDate = DateTime.MaxValue;
                if (lsm.Search_F_TourDate != null)
                {
                    endTourDate = DateTime.Parse(lsm.Search_F_TourDate.ToString()).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                var lastInteractionLength = 0;
                var lastInteractionArray = new int?[] { };
                var includeNoInteractions = false;
                if (lsm.Search_LastInteractionType != null)
                {
                    lastInteractionArray = lsm.Search_LastInteractionType.Select(m => (int?)m).ToArray();
                    includeNoInteractions = lastInteractionArray.Contains(0);
                    lastInteractionLength = lsm.Search_LastInteractionType.Length;
                    emptyModelFlag = false;
                }
                var isVIPLength = 0;
                var isVIPArray = new bool?[] { };
                if (lsm.Search_IsVip != null)
                {
                    isVIPArray = lsm.Search_IsVip.Select(m => (bool?)m).ToArray();
                    isVIPLength = lsm.Search_IsVip.Length;
                    emptyModelFlag = false;
                }
                var preCheckInLength = 0;
                var preCheckInArray = new bool?[] { };
                if (lsm.Search_PreCheckIn != null)
                {
                    preCheckInArray = lsm.Search_PreCheckIn.Select(m => (bool?)m).ToArray();
                    preCheckInLength = lsm.Search_PreCheckIn.Length;
                    emptyModelFlag = false;
                }
                var submissionForms = new List<bool?>();
                if (lsm.Search_SubmissionForm != null)
                {
                    foreach (string i in lsm.Search_SubmissionForm)
                    {
                        bool? _value;
                        try
                        {
                            _value = bool.Parse(i);
                            submissionForms.Add(_value);
                            emptyModelFlag = false;
                        }
                        catch
                        {
                            submissionForms.Add(null);
                        }
                    }
                }
                var isConfirmed = new List<bool?>();
                if (lsm.Search_IsConfirmed != null)
                {
                    foreach (string i in lsm.Search_IsConfirmed)
                    {
                        bool? _value;
                        try
                        {
                            _value = Boolean.Parse(i);
                            isConfirmed.Add(_value);
                            emptyModelFlag = false;
                        }
                        catch
                        {
                            isConfirmed.Add(null);
                        }
                    }
                }
                var activityCert = new List<bool?>();
                if (lsm.Search_ActivityCert != null)
                {
                    foreach (string i in lsm.Search_ActivityCert)
                    {
                        bool? _value;
                        try
                        {
                            _value = Boolean.Parse(i);
                            activityCert.Add(_value);
                            emptyModelFlag = false;
                        }
                        catch
                        {
                            activityCert.Add(null);
                        }
                    }
                }
                var timeZonesLength = 0;
                var timeZonesArray = new int?[] { };
                if (lsm.Search_TimeZone != null)
                {
                    timeZonesArray = lsm.Search_TimeZone.Select(m => (int?)m).ToArray();
                    timeZonesLength = lsm.Search_TimeZone.Length;
                    emptyModelFlag = false;
                }
                var startRealTourDate = DateTime.MinValue;
                if (lsm.Search_I_RealTourDate != null)
                {
                    startTourDate = DateTime.Parse(lsm.Search_I_RealTourDate.ToString());
                    emptyModelFlag = false;
                }
                var endRealTourDate = DateTime.MaxValue;
                if (lsm.Search_F_RealTourDate != null)
                {
                    endRealTourDate = DateTime.Parse(lsm.Search_F_RealTourDate.ToString()).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                var tourStatusLength = 0;
                var tourStatusArray = new int?[] { };
                if (lsm.Search_TourStatus != null)
                {
                    tourStatusArray = lsm.Search_TourStatus.Select(m => (int?)m).ToArray();
                    tourStatusLength = lsm.Search_TourStatus.Length;
                    emptyModelFlag = false;
                }
                var finalBookingStatusLength = 0;
                var finalBookingStatusArray = new int?[] { };
                if (lsm.Search_FinalBookingStatus != null)
                {
                    finalBookingStatusArray = lsm.Search_FinalBookingStatus.Select(m => (int?)m).ToArray();
                    finalBookingStatusLength = lsm.Search_FinalBookingStatus.Length;
                    emptyModelFlag = false;
                }
                var inputByUserLength = 0;
                var inputByUserArray = new Guid[] { };
                if (lsm.Search_InputBy != null)
                {
                    inputByUserArray = lsm.Search_InputBy;
                    inputByUserLength = lsm.Search_InputBy.Length;
                    emptyModelFlag = false;
                }
                var startInputDate = DateTime.MinValue;
                if (lsm.Search_I_InputDate != null)
                {
                    startInputDate = DateTime.Parse(lsm.Search_I_InputDate.ToString());
                    emptyModelFlag = false;
                }
                //else
                //{
                //    startInputDate = DateTime.Today.AddMonths(-3);
                //}
                var endInputDate = DateTime.MaxValue;
                if (lsm.Search_F_InputDate != null)
                {
                    endInputDate = DateTime.Parse(lsm.Search_F_InputDate.ToString()).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                //else
                //{
                //    endInputDate = DateTime.Today.AddMonths(3).AddSeconds(-1);
                //}
                var startModificationDate = DateTime.MinValue;
                if (lsm.Search_I_ModificationDate != null)
                {
                    startModificationDate = DateTime.Parse(lsm.Search_I_ModificationDate.ToString());
                    emptyModelFlag = false;
                }
                var endModificationDate = DateTime.MaxValue;
                if (lsm.Search_F_ModificationDate != null)
                {
                    endModificationDate = DateTime.Parse(lsm.Search_F_ModificationDate.ToString()).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                var greetingRepsLength = 0;
                var greetingRepsArray = new long?[] { };
                if (lsm.Search_GreetingRep != null)
                {
                    greetingRepsArray = lsm.Search_GreetingRep.Select(m => (long?)m).ToArray();
                    greetingRepsLength = lsm.Search_GreetingRep.Length;
                    emptyModelFlag = false;
                }
                var opcsLength = 0;
                var opcsArray = new long?[] { };
                if (lsm.Search_OPC != null)
                {
                    opcsArray = lsm.Search_OPC.Select(m => (long?)m).ToArray();
                    opcsLength = lsm.Search_OPC.Length;
                    emptyModelFlag = false;
                }
                long[] terminals = session.Terminals != "" ? session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray() : TerminalDataModel.GetCurrentUserTerminals().Select(m => long.Parse(m.Value)).ToArray();
                var purchaseStatusLength = 0;
                var purchaseStatusArray = new int[] { };
                if (lsm.Search_PurchaseStatus != null)
                {
                    purchaseStatusArray = lsm.Search_PurchaseStatus;
                    purchaseStatusLength = lsm.Search_PurchaseStatus.Length;
                    emptyModelFlag = false;
                }
                else if (viewPurchases)
                {
                    purchaseStatusArray = new int[] { 1, 2, 3, 4 };
                    purchaseStatusLength = 4;
                }
                var pointsOfSaleLength = 0;
                var pointsOfSaleArray = new long[] { };
                if (lsm.Search_PointOfSale != null)
                {
                    //pointsOfSaleArray = lsm.Search_PointOfSale.Select(m => long.Parse(m.Split('|')[0])).ToArray();
                    pointsOfSaleArray = lsm.Search_PointOfSale.Select(m => long.Parse(m)).ToArray();
                    pointsOfSaleLength = lsm.Search_PointOfSale.Length;
                    emptyModelFlag = false;
                }
                else if (viewPurchases)
                {
                    pointsOfSaleArray = LeadsCatalogs.FillDrpPointsOfSale().Select(m => long.Parse(m.Value)).ToArray();
                    pointsOfSaleLength = pointsOfSaleArray.Length;
                }
                var reservationAgentsLength = 0;
                var reservationAgentsArray = new Guid?[] { };
                if (lsm.Search_ReservationsAgent != null)
                {
                    reservationAgentsArray = lsm.Search_ReservationsAgent;
                    reservationAgentsLength = lsm.Search_ReservationsAgent.Length;
                    emptyModelFlag = false;
                }
                var salesAgentLength = 0;
                var salesAgentArray = new Guid?[] { };
                if (lsm.Search_SalesAgent != null)
                {
                    salesAgentArray = lsm.Search_SalesAgent;
                    salesAgentLength = lsm.Search_SalesAgent.Length;
                    emptyModelFlag = false;
                }
                var startPurchaseDate = DateTime.MinValue;
                if (lsm.Search_I_PurchaseDate != null)
                {
                    startPurchaseDate = DateTime.Parse(lsm.Search_I_PurchaseDate);
                    emptyModelFlag = false;
                }
                var endPurchaseDate = DateTime.MaxValue;
                if (lsm.Search_F_PurchaseDate != null)
                {
                    endPurchaseDate = DateTime.Parse(lsm.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);
                    emptyModelFlag = false;
                }
                var isOnsite = GeneralFunctions.IsUserInRole("On Site", currentUser, true) || Utils.GeneralFunctions.IsUserInRole("Concierge", currentUser, true);
                var isAgent = GeneralFunctions.IsUserInRole("Agent", currentUser);
                var isOnlineAgent = GeneralFunctions.IsUserInRole("Online Reservations Agent", currentUser);
                var isOnsiteAgent = GeneralFunctions.IsUserInRole("Onsite Reservations Agent", currentUser, true);
                var fmt1 = lsm.Search_CouponNumber != null ? lsm.Search_CouponNumber.Substring(0, 1) + int.Parse(lsm.Search_CouponNumber.Substring(1)).ToString("00000.##") : "";
                var fmt2 = lsm.Search_CouponNumber != null ? lsm.Search_CouponNumber.Substring(0, 1) + int.Parse(lsm.Search_CouponNumber.Substring(1)).ToString("0000000.##") : "";

                if (!isOnsite)
                {
                    allowedResorts.Add(null);
                }
                if (isOnlineAgent)
                {
                    assignedToUsers.Add(null);
                }
                #endregion

                //var _leads = "";

                if (viewPurchases)
                {
                    using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                    }))
                    {
                        #region "purchases"
                        query = (from leads in db.tblLeads
                                 join p in db.tblPurchases on leads.leadID equals p.leadID into lead_p
                                 from p in lead_p.DefaultIfEmpty()
                                 join mails in db.tblLeadEmails on leads.leadID equals mails.leadID into lead_email
                                 from mails in lead_email.DefaultIfEmpty()
                                 join phones in db.tblPhones on leads.leadID equals phones.leadID into lead_phone
                                 from phones in lead_phone.DefaultIfEmpty()
                                 join ps in db.tblPurchases_Services on p.purchaseID equals ps.purchaseID into p_ps
                                 from ps in p_ps.DefaultIfEmpty()
                                 join psd in db.tblPurchaseServiceDetails on ps.purchase_ServiceID equals psd.purchase_ServiceID into ps_psd
                                 from psd in ps_psd.DefaultIfEmpty()
                                 join pd in db.tblPaymentDetails on p.purchaseID equals pd.purchaseID into p_pd
                                 from pd in p_pd.DefaultIfEmpty()
                                 join trn in db.tblMoneyTransactions on pd.moneyTransactionID equals trn.moneyTransactionID into pd_trn
                                 from trn in pd_trn.DefaultIfEmpty()
                                 where terminals.Contains(leads.terminalID)
                                 && ((!isOnlineAgent && !isOnsiteAgent && (assignedToUsersLength == 0 || assignedToUsers.Contains(leads.assignedToUserID))) || (isOnlineAgent && (leads.assignedToUserID == null || leads.assignedToUserID == currentUser)) || (isOnsiteAgent && ((lsm.Search_CouponNumber == null && leads.assignedToUserID == currentUser) || lsm.Search_CouponNumber != null || lsm.Search_LeadID != null)))
                                 && (lsm.Search_FirstName == null || leads.firstName.Contains(lsm.Search_FirstName))
                                 && (lsm.Search_LastName == null || leads.lastName.Contains(lsm.Search_LastName))
                                 && (lsm.Search_Email == null || mails.email.Contains(lsm.Search_Email))
                                 && (lsm.Search_Phone == null || phones.phone.Contains(lsm.Search_Phone))
                                 && (leadStatusLength == 0 || leadStatusArray.Contains(leads.leadStatusID))
                                 && (lsm.Search_LeadStatusDescription == null || leads.leadStatusDescription.Contains(lsm.Search_LeadStatusDescription))
                                 && (leadSourcesLength == 0 || leadSourcesArray.Contains(leads.leadSourceID))
                                 && (inputByUserLength == 0 || inputByUserArray.Contains(leads.inputByUserID))
                                 && (lsm.Search_I_InputDate == null || (lsm.Search_I_InputDate != null && leads.inputDateTime >= startInputDate && leads.inputDateTime <= endInputDate))
                                 && (lsm.Search_I_ModificationDate == null || (lsm.Search_I_ModificationDate != null && leads.modificationDate >= startModificationDate && leads.modificationDate <= endModificationDate))
                                 && (lsm.Search_I_PurchaseDate == null || (lsm.Search_I_PurchaseDate != null && p != null && p.purchaseDateTime >= startPurchaseDate && p.purchaseDateTime <= endPurchaseDate))
                                 && (lsm.Search_CouponNumber == null || (lsm.Search_CouponNumber != null && psd != null && (psd.coupon.Contains(fmt1) || psd.coupon.Contains(fmt2))))
                                 && (lsm.Search_AuthCode == null || (lsm.Search_AuthCode != null && trn != null && trn.authCode.Contains(lsm.Search_AuthCode)))
                                 && (p != null && purchaseStatusArray.Contains(p.purchaseStatusID))//this never comes empty
                                 && (pointsOfSaleLength == 0 || (p != null && pointsOfSaleArray.Contains(p.pointOfSaleID)))
                                 && (reservationAgentsLength == 0 || (p != null && reservationAgentsArray.Contains(p.agentID)))
                                 && (salesAgentLength == 0 || (p != null && salesAgentArray.Contains(p.userID)))
                                 && p.isTest != true
                                 && (lsm.Search_LeadID == null || leads.leadID == (Guid)lsm.Search_LeadID.Value)
                                 //&& (pd.deleted == null || pd.deleted == false)//paymentDetails 
                                 //select leads).Distinct().OrderBy(m => m.tblPurchases.FirstOrDefault().purchaseStatusID).ThenByDescending(m => m.inputDateTime);
                                 select leads).Distinct().OrderByDescending(m => m.inputDateTime).Take((lsm.Search_Top != "null" ? int.Parse(lsm.Search_Top) : 300));

                        //if (lsm.Search_LeadID != null)
                        //{
                        //    //hash
                        //    query = query.Where(m => m.leadID == (Guid)lsm.Search_LeadID);
                        //}
                        //else if (emptyModelFlag)
                        if (emptyModelFlag && lsm.Search_LeadID == null)
                        {
                            query = query.Where(m => m.tblPurchases.Count() > 0);
                            var nonCompleted = query.Where(m => m.tblPurchases.FirstOrDefault().purchaseStatusID < 2);
                            var nonCompletedCount = nonCompleted.Count();
                            var completed = query.Where(m => m.tblPurchases.FirstOrDefault().purchaseStatusID == 2);
                            var pendingTake = nonCompletedCount > 100 ? 0 : (100 - nonCompletedCount);
                            query = pendingTake > 0 ? nonCompleted.Concat(completed.Take(pendingTake)) : nonCompleted;//this will define 100 as the max result when search form is empty

                            //when there is no filter in search, only leads with purchases related will be returned
                            //query = query.Where(m => m.tblPurchases.Any());
                            //var nonCompleted = query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseStatusID < 2).purchaseID != null);
                            //var nonCompletedCount = nonCompleted.Count();
                            //var completed = query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseStatusID == 2).purchaseID != null);
                            //var pendingTake = ((lsm.Search_Top != "null" ? int.Parse(lsm.Search_Top) : 100) - nonCompletedCount) > 0 ? ((lsm.Search_Top != "null" ? int.Parse(lsm.Search_Top) : 100) - nonCompletedCount) : 0;

                            ////query = pendingTake != 0 ? nonCompleted.Concat(completed.Take(pendingTake)).OrderByDescending(m => m.inputDateTime) : nonCompleted.OrderByDescending(m => m.inputDateTime);
                            //query = pendingTake != 0 ? nonCompleted.Concat(completed.Take(pendingTake)) : nonCompleted;
                        }
                        //if (lsm.Search_Top != "null" && lsm.Search_LeadID == null)
                        //{
                        //    query = query.Take(int.Parse(lsm.Search_Top));
                        //}
                        foreach (var i in query)
                        {
                            var purchase = i.tblPurchases.Count() > 0 ? i.tblPurchases.OrderByDescending(m => m.purchaseDateTime).FirstOrDefault() : null;
                            var _purchase = purchase != null;
                            var payments = _purchase ? purchase.tblPaymentDetails.Any() ? purchase.tblPaymentDetails.Where(m => (m.deleted == null || !(bool)m.deleted)) : null : null;
                            var total = _purchase ? (purchase.total * LeadsCatalogs.GetExchangeRateOfPurchase(purchase.currencyID, purchase.purchaseDateTime, purchase.terminalID, purchase.pointOfSaleID, db)) : (decimal?)null;

                            if (payments != null)
                            {
                                foreach (var p in payments)
                                {
                                    if (GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(p.tblMoneyTransactions.errorCode)).Value == "Approved")
                                    {
                                        total -= p.amount * LeadsCatalogs.GetExchangeRateOfPurchase(purchase.currencyID, p.dateSaved, purchase.terminalID, purchase.pointOfSaleID, db);
                                    }
                                }
                            }

                            if (purchase != null || lsm.Search_CouponNumber != null)
                            {
                                _list.Add(new LeadModel.Items.SearchResults()
                                {
                                    LeadID = i.leadID,
                                    FirstName = i.firstName != null ? i.firstName : "",
                                    LastName = i.lastName != null ? i.lastName : "",
                                    Email = "",
                                    Phone = "",
                                    BookingStatus = i.bookingStatusID != null ? i.tblBookingStatus.bookingStatus : "",
                                    LeadStatus = i.leadStatusID != null ? i.tblLeadStatus.leadStatus : "",
                                    LeadSource = i.leadSourceID != null ? i.tblLeadSources.leadSource : "",
                                    //ArrivalDate = i.tblReservations.Any() ? i.tblReservations.FirstOrDefault().arrivalDate : (DateTime?)null,
                                    AssignedTo = i.assignedToUserID != null ? i.aspnet_Users1.UserName : "",
                                    Resort = _purchase ? purchase.stayingAtPlaceID != null ? purchase.tblPlaces.place + " " + purchase.tblPlaces.tblDestinations.destination : purchase.stayingAt : "",
                                    LastModificationDate = i.modificationDate != null ? i.modificationDate : (DateTime?)null,
                                    LeadComments = i.leadComments,
                                    //TotalPaid = i.tblReservations.Any() ? i.tblReservations.FirstOrDefault().totalPaid : (decimal?)null,
                                    PurchaseInfo_PurchaseStatusString = _purchase ? purchase.tblPurchaseStatus.purchaseStatus : "",
                                    PurchaseInfo_PurchaseDateTime = _purchase ? purchase.purchaseDateTime.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture) : "",
                                    PurchaseInfo_Total = _purchase ? (purchase.total != null ? purchase.total.ToString() : "0") + " " + purchase.tblCurrencies.currencyCode : "",
                                    PurchaseInfo_Paid = payments != null ? total <= (decimal)0.1 ? "Paid" : "Unpaid" : "Unpaid",
                                    PurchaseInfo_Agent = _purchase ? purchase.agentID != null ? purchase.aspnet_Users2.UserName : "" : "",
                                    PurchaseInfo_PointOfSaleString = _purchase ? purchase.pointOfSaleID != 0 ? purchase.tblPointsOfSale.shortName : "" : "",
                                    PurchaseInfo_TerminalString = _purchase ? purchase.terminalID != 0 ? purchase.tblTerminals.terminal : "" : "",
                                    //Purchase_CountDownString = _purchase ? purchase.tblPurchases_Services.Count() > 0 && purchase.tblPurchases_Services.Where(m => m.serviceStatusID == 3).Any() ? ((DateTime)purchase.tblPurchases_Services.Where(m => m.serviceStatusID == 3).OrderBy(m => m.serviceDateTime).FirstOrDefault().serviceDateTime - DateTime.Today).Days.ToString() : "" : "",
                                    Purchase_CountDownString = _purchase ? purchase.tblPurchases_Services.Count() > 0 ? purchase.tblPurchases_Services.Where(m => m.serviceStatusID == 3).Any() ? ((DateTime)purchase.tblPurchases_Services.Where(m => m.serviceStatusID == 3).OrderBy(m => m.serviceDateTime).FirstOrDefault().serviceDateTime - DateTime.Today).Days.ToString() : "" : "" : "",
                                    Purchase_CustomerRequests = _purchase ? purchase.customerRequests : "",
                                    InputDateTime = i.inputDateTime
                                });
                            }
                        }
                        #endregion
                        scope.Complete();
                    }
                }
                else
                {
                    using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                    {
                        IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                    }))
                    {
                        #region "reservations search query"
                        var _query = new List<Guid>();
                        if (lsm.Search_LeadID != null)
                        {
                            _query.Add((Guid)lsm.Search_LeadID);
                        }
                        else
                        {
                            _query = (from leads in db.tblLeads
                                      join rsv in db.tblReservations on leads.leadID equals rsv.leadID into lead_rsv
                                      from rsv in lead_rsv.DefaultIfEmpty()
                                      join mails in db.tblLeadEmails on leads.leadID equals mails.leadID into lead_email
                                      from mails in lead_email.DefaultIfEmpty()
                                      join phones in db.tblPhones on leads.leadID equals phones.leadID into lead_phone
                                      from phones in lead_phone.DefaultIfEmpty()
                                      join members in db.tblMemberInfo on leads.leadID equals members.leadID into lead_member
                                      from members in lead_member.DefaultIfEmpty()
                                      join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                                      from pst in rsv_pst.DefaultIfEmpty()
                                      join interactions in db.tblInteractions on leads.leadID equals interactions.leadID into lead_interaction
                                      from interactions in lead_interaction.DefaultIfEmpty()
                                      where terminals.Contains(leads.terminalID)
                                      && leads.isTest != true
                                      //&& ((!isAgent && (assignedToUsersLength == 0 || assignedToUsers.Contains(leads.assignedToUserID))) || (isAgent && assignedToUsers.Contains(leads.assignedToUserID)))
                                      && assignedToUsers.Contains(leads.assignedToUserID)
                                      && (lsm.Search_FirstName == null || leads.firstName.Contains(lsm.Search_FirstName))
                                      && (lsm.Search_LastName == null || leads.lastName.Contains(lsm.Search_LastName))
                                      && (lsm.Search_Email == null || mails.email.Contains(lsm.Search_Email))
                                      && (lsm.Search_Phone == null || phones.phone.Contains(lsm.Search_Phone))
                                               && (bookingStatusLength == 0 || bookingStatusArray.Contains(leads.bookingStatusID))
                                               && (interactedWithUsersLength == 0 || ((interactionBookingStatusArray.Contains(interactions.bookingStatusID) || interactionBookingStatusLength == 0) && (interactedWithUsers.Contains(interactions.interactedWithUserID) || interactedWithUsersLength == 0) && interactions != null))
                                               && (leadStatusLength == 0 || leadStatusArray.Contains(leads.leadStatusID))
                                               && (lsm.Search_LeadStatusDescription == null || leads.leadStatusDescription.Contains(lsm.Search_LeadStatusDescription))
                                               //&& (leadSourcesLength == 0 || leadSourcesArray.Contains(leads.leadSourceID))
                                               && leadSourcesArray.Contains(leads.leadSourceID)
                                               && (callClasificationLength == 0 || callClasificationArray.Contains(leads.callClasificationID))
                                               && (lsm.Search_I_ArrivalDate == null || (rsv.arrivalDate >= startArrivalDate && rsv.arrivalDate <= endArrivalDate))
                                               && (lsm.Search_ConfirmationNumber == null || rsv.hotelConfirmationNumber.Contains(lsm.Search_ConfirmationNumber))
                                          && (allowedResorts.Contains(rsv.placeID) || (!isOnsite && ((allowedResorts.Contains(rsv.placeID) || rsv == null))))
                                               && (lsm.Search_ClubType == null || members.clubType.Contains(lsm.Search_ClubType))
                                               && (lsm.Search_MemberNumber == null || members.memberNumber.Contains(lsm.Search_MemberNumber))
                                               && (lsm.Search_I_TourDate == null || (lsm.Search_I_TourDate != null && pst != null && pst.datePresentation >= startTourDate && pst.datePresentation <= endTourDate))
                                               && (isVIPLength == 0 || isVIPArray.Contains(members.isVIP))
                                               && (preCheckInLength == 0 || preCheckInArray.Contains(rsv.preCheckIn))
                                               && (lastInteractionLength == 0 || lastInteractionArray.Contains(leads.lastInteractionTypeID) || (includeNoInteractions && interactions == null))
                                               && (submissionForms.Count() == 0 || submissionForms.Contains(leads.submissionForm))
                                               && (isConfirmed.Count() == 0 || isConfirmed.Contains(leads.confirmed))
                                               && (activityCert.Count() == 0 || activityCert.Contains(leads.activityCert))
                                               && (timeZonesLength == 0 || timeZonesArray.Contains(leads.timeZoneID))
                                               && (lsm.Search_I_RealTourDate == null || (lsm.Search_I_RealTourDate != null && pst != null && pst.realTourDate >= startRealTourDate && pst.realTourDate <= endRealTourDate))
                                               && (tourStatusLength == 0 || (tourStatusArray.Contains(pst.tourStatusID) && pst != null))
                                               && (finalBookingStatusLength == 0 || (finalBookingStatusArray.Contains(pst.finalBookingStatusID) && pst != null))
                                               && (inputByUserLength == 0 || inputByUserArray.Contains(leads.inputByUserID))
                                               && (lsm.Search_I_InputDate == null || (lsm.Search_I_InputDate != null && leads.inputDateTime >= startInputDate && leads.inputDateTime <= endInputDate))
                                               && (lsm.Search_I_ModificationDate == null || (lsm.Search_I_ModificationDate != null && leads.modificationDate >= startModificationDate && leads.modificationDate <= endModificationDate))
                                               && (greetingRepsLength == 0 || greetingRepsArray.Contains(rsv.greetingRepID))
                                               && (opcsLength == 0 || opcsArray.Contains(rsv.opcID))
                                      select leads.leadID).ToList();
                            //select leads.leadID).Distinct().ToList();
                        }

                        var query_ = (from leads in db.tblLeads
                                      join rsv in db.tblReservations on leads.leadID equals rsv.leadID into lead_rsv
                                      from rsv in lead_rsv.DefaultIfEmpty()
                                      join bs in db.tblBookingStatus on leads.bookingStatusID equals bs.bookingStatusID into lead_bs
                                      from bs in lead_bs.DefaultIfEmpty()
                                      join ls in db.tblLeadSources on leads.leadSourceID equals ls.leadSourceID into lead_ls
                                      from ls in lead_ls.DefaultIfEmpty()
                                      join lss in db.tblLeadStatus on leads.leadStatusID equals lss.leadStatusID into lead_lss
                                      from lss in lead_lss.DefaultIfEmpty()
                                      join user in db.tblUserProfiles on leads.assignedToUserID equals user.userID into lead_user
                                      from user in lead_user.DefaultIfEmpty()
                                      join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                                      from pst in rsv_pst.DefaultIfEmpty()
                                      join profile in db.tblUserProfiles on leads.inputByUserID equals profile.userID into lead_profile
                                      from profile in lead_profile.DefaultIfEmpty()
                                      join place in db.tblPlaces on rsv.placeID equals place.placeID into rsv_place
                                      from place in rsv_place.DefaultIfEmpty()
                                      join dest in db.tblDestinations on place.destinationID equals dest.destinationID into place_dest
                                      from dest in place_dest.DefaultIfEmpty()
                                      join member in db.tblMemberInfo on leads.leadID equals member.leadID into lead_member
                                      from member in lead_member.DefaultIfEmpty()
                                      where _query.Contains(leads.leadID)
                                      select new
                                      {
                                          LeadID = leads.leadID,
                                          FirstName = leads.firstName ?? "",
                                          LastName = leads.lastName ?? "",
                                          Email = "",
                                          Phone = "",
                                          BookingStatus = bs.bookingStatus ?? "",
                                          LeadStatus = lss.leadStatus ?? "",
                                          LeadSource = ls.leadSource ?? "",
                                          ArrivalDate = rsv.arrivalDate ?? (DateTime?)null,
                                          AssignedTo = user.firstName + " " + user.lastName,
                                          Resort = (place.place ?? "") + " " + (dest.destination ?? ""),
                                          LastModificationDate = leads.modificationDate,
                                          LeadComments = leads.leadComments,
                                          TotalPaid = rsv.totalPaid ?? (decimal?)null,
                                          MemberAccount = member.memberNumber ?? "",
                                          PresentationDate = pst.datePresentation ?? (DateTime?)null,
                                          PresentationTime = pst.timePresentation ?? (TimeSpan?)null,
                                          InputDateTime = leads.inputDateTime,
                                          InputByUser = profile.firstName + " " + profile.lastName,
                                          AssignationDate = leads.assignationDate
                                      }).Distinct();

                        if (lsm.Search_Top != "null" && lsm.Search_LeadID == null)
                        {
                            query_ = query_.Take(int.Parse(lsm.Search_Top));
                        }
                        foreach (var i in query_)
                        {
                            _list.Add(new LeadModel.Items.SearchResults()
                            {
                                LeadID = i.LeadID,
                                FirstName = i.FirstName,
                                LastName = i.LastName,
                                Email = i.Email,
                                Phone = i.Phone,
                                BookingStatus = i.BookingStatus,
                                LeadStatus = i.LeadStatus,
                                LeadSource = i.LeadSource,
                                ArrivalDate = i.ArrivalDate,
                                AssignedTo = i.AssignedTo,
                                Resort = i.Resort,
                                LastModificationDate = i.LastModificationDate,
                                LeadComments = i.LeadComments,
                                TotalPaid = i.TotalPaid,
                                MemberAccount = i.MemberAccount,
                                PresentationDateTime = (i.PresentationDate != null ? i.PresentationDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "") + " " + (i.PresentationTime != null ? i.PresentationTime.Value.ToString("c") : ""),
                                InputDateTime = i.InputDateTime,
                                InputByUser = i.InputByUser,
                                AssignationDate = i.AssignationDate
                            });
                        }
                        #endregion
                        var _leadIDs = query_.Select(m => m.LeadID).ToArray();
                        result.Coincidences = string.Join(",", (_leadIDs.Select(m => m).ToArray()));
                        scope.Complete();
                    }
                }
                //result.Coincidences = _leads.TrimEnd(',');
                result.SearchResults = _list;

                return result;
            }



            //public IEnumerable<LeadModel.Items.Search> Search(LeadModel.Views.Search lsm)
            //public LeadModel.Items.Search __Search(LeadModel.Views.Search lsm)
            //{
            //    LeadModel.Items.Search result = new LeadModel.Items.Search();
            //    var emptyModelFlag = true;

            //    #region "Terminals filter"
            //    //add terminals restriction
            //    long[] filteringTerminals = null;
            //    //List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
            //    //long[] currentTerminals = (from x in _currentTerminals.Select(x => long.Parse(x.Value)) select x).ToArray();
            //    long[] currentTerminals = TerminalDataModel.GetCurrentUserTerminals().Select(m => long.Parse(m.Value)).ToArray();
            //    UserSession currentUserSession = new UserSession();

            //    if (currentUserSession.Terminals != "")
            //    {
            //        //string[] _selectedTerminals = currentUserSession.Terminals.Split(',');
            //        //long[] selectedTerminals = (from x in _selectedTerminals.Select(x => long.Parse(x)) select x).ToArray();
            //        long[] selectedTerminals = currentUserSession.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //        //make sure the terminals comming in the URL are permited terminals for the current user
            //        List<long> verifiedSelectedTerminals = new List<long>();
            //        foreach (long x in selectedTerminals)
            //        {
            //            if (currentTerminals.Contains(x))
            //            {
            //                verifiedSelectedTerminals.Add(x);
            //            }
            //        }    //filteringTerminals = (from x in selectedTerminals  select x).ToArray();
            //        filteringTerminals = verifiedSelectedTerminals.ToArray();
            //    }
            //    else
            //    {
            //        filteringTerminals = (from x in currentTerminals select x).ToArray();
            //    }
            //    //query = query.Where(x => filteringTerminals.Contains(x.terminalID));
            //    #endregion

            //    IQueryable<tblLeads> query = db.tblLeads.Where(m => filteringTerminals.Contains(m.terminalID));
            //    if (lsm.Search_LeadID == null)
            //    {
            //        #region
            //        #region "FirstName filter"
            //        if (lsm.Search_FirstName != null)
            //        {
            //            query = query.Where(x => x.firstName.Contains(lsm.Search_FirstName));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "LastName filter"
            //        if (lsm.Search_LastName != null)
            //        {
            //            query = query.Where(x => x.lastName.Contains(lsm.Search_LastName));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Email filter"
            //        if (lsm.Search_Email != null)
            //        {
            //            query = query.Where(x => x.tblLeadEmails.FirstOrDefault(y => y.email.Contains(lsm.Search_Email)).emailID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Phone filter"
            //        if (lsm.Search_Phone != null)
            //        {
            //            query = query.Where(x => x.tblPhones.FirstOrDefault(y => y.phone.Contains(lsm.Search_Phone)).phoneID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Booking Status filter"
            //        if (lsm.Search_BookingStatus != null && lsm.Search_BookingStatus.Length > 0)
            //        {
            //            //                    if (lsm.Search_BookingStatus > 0)
            //            // query = query.Where(x => lsm.Search_BookingStatus.Contains(x.bookingStatusID));
            //            query = query.Where(x => lsm.Search_BookingStatus.Contains(x.bookingStatusID.Value));
            //            emptyModelFlag = false;

            //            //if (lsm.Search_BookingStatus == -1)
            //            // query = query.Where(x => x.bookingStatusID == null);

            //        }
            //        else
            //        {
            //            string[] _allowedBookingStatus = BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => m.Value).ToArray();
            //            int?[] allowedBookingStatus = Array.ConvertAll(_allowedBookingStatus, GeneralFunctions.ParseStringToNullableInt);
            //            //int?[] allowedBookingStatus = Array.ConvertAll(_allowedBookingStatus, m => { int value; if (!int.TryParse(m, out value))return default(int?); return (int?)value; });
            //            query = query.Where(m => m.bookingStatusID == null || allowedBookingStatus.Contains(m.bookingStatusID.Value));
            //        }
            //        #endregion
            //        #region "Lead Status filter"
            //        if (lsm.Search_LeadStatus != null && lsm.Search_LeadStatus.Length > 0)
            //        {
            //            query = query.Where(x => lsm.Search_LeadStatus.Contains(x.leadStatusID.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Lead Source filter"
            //        if (lsm.Search_LeadSource != null && lsm.Search_LeadSource.Length > 0)
            //        {
            //            query = query.Where(x => lsm.Search_LeadSource.Contains(x.leadSourceID.Value));
            //            emptyModelFlag = false;
            //        }
            //        else
            //        {
            //            string[] _allowedLeadSources = LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => m.Value).ToArray();
            //            long?[] allowedLeadSources = Array.ConvertAll(_allowedLeadSources, GeneralFunctions.ParseToNullableLong);
            //            query = query.Where(m => m.leadSourceID == null || allowedLeadSources.Contains(m.leadSourceID.Value));
            //        }
            //        #endregion
            //        #region "Call Clasification filter"
            //        if (lsm.Search_CallClasification != null && lsm.Search_CallClasification.Length > 0)
            //        {
            //            query = query.Where(m => lsm.Search_CallClasification.Contains(m.callClasificationID.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Arrival Date filter"
            //        if (lsm.Search_I_ArrivalDate != null && DateTime.Parse(lsm.Search_I_ArrivalDate) > DateTime.MinValue)
            //        {
            //            var arrivalDateStart = DateTime.Parse(lsm.Search_I_ArrivalDate);
            //            if (lsm.Search_F_ArrivalDate != null && DateTime.Parse(lsm.Search_F_ArrivalDate) > DateTime.MinValue)
            //            {
            //                var arrivalDateEnd = DateTime.Parse(lsm.Search_F_ArrivalDate.ToString()).AddDays(1).AddSeconds(-1);

            //                query = query.Where(m => m.tblReservations
            //                    .FirstOrDefault(x => x.arrivalDate >= arrivalDateStart && x.arrivalDate <= arrivalDateEnd).reservationID != null);
            //                //query = query.Where(x => x.tblReservations.FirstOrDefault(y => y.arrivalDate >= lsm.Search_ArrivalDateStart && y.arrivalDate <= arrivalDateEnd).reservationID != null);
            //                //query = query.Where(x => x.tblReservations.FirstOrDefault(y => y.arrivalDate >= lsm.Search_ArrivalDateStart && y.arrivalDate <= lsm.Search_ArrivalDateEnd).reservationID != null);
            //            }
            //            else
            //            {
            //                query = query.Where(x => x.tblReservations.FirstOrDefault(y => y.arrivalDate == arrivalDateStart).reservationID != null);
            //            }
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Confirmation Number filter"
            //        if (lsm.Search_ConfirmationNumber != null)
            //        {
            //            query = query.Where(x => x.tblReservations.FirstOrDefault(y => y.hotelConfirmationNumber.Contains(lsm.Search_ConfirmationNumber)).reservationID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion

            //        #region "Resorts filter"
            //        if (lsm.Search_Resort != null && lsm.Search_Resort.Length > 0)
            //        {
            //            query = query.Where(x => x.tblReservations.FirstOrDefault(y => lsm.Search_Resort.Contains(y.placeID.Value)).reservationID != null);
            //            emptyModelFlag = false;
            //        }
            //        else
            //        {
            //            //On Site Vallarta
            //            //On Site Cabo
            //            List<SelectListItem> Resorts = PlaceDataModel.GetResortsByProfile();
            //            //long[] allowedResorts = (from x in Resorts.Cast<SelectListItem>() select long.Parse(x.Value)).ToArray();
            //            long[] allowedResorts = Resorts.Select(m => long.Parse(m.Value)).ToArray();

            //            if (Utils.GeneralFunctions.IsUserInRole("On Site", currentUser, true) || Utils.GeneralFunctions.IsUserInRole("Concierge", currentUser, true))
            //            {
            //                query = query.Where(x => x.tblReservations.FirstOrDefault(y => allowedResorts.Contains(y.placeID.Value)).reservationID != null);
            //            }
            //            else
            //            {
            //                //List<SelectListItem> Resorts = PlaceDataModel.GetResortsByProfile();
            //                //long[] allowedResorts = (from x in Resorts.Cast<SelectListItem>() select long.Parse(x.Value)).ToArray();
            //                //show leads that have reservations on allowedResorts, or have reservations without resort, or have no reservations
            //                query = query.Where(x => x.tblReservations.FirstOrDefault(y => allowedResorts.Contains(y.placeID.Value) || y.placeID == null).reservationID != null || x.tblReservations.Count() == 0);
            //            }
            //        }
            //        #endregion
            //        //string[] assignetTo = lsm.Search_AssignedTo;
            //        #region "Assigned To filter"
            //        if (lsm.Search_AssignedTo != null && lsm.Search_AssignedTo.Length > 0)
            //        {
            //            query = query.Where(x => lsm.Search_AssignedTo.Contains(x.assignedToUserID.Value));
            //            emptyModelFlag = false;
            //        }
            //        else
            //        {
            //            //users on this role are able to see leads only assigned to themselves
            //            if (Utils.GeneralFunctions.IsUserInRole("Agent", currentUser))
            //            {
            //                query = query.Where(x => x.assignedToUserID == currentUser);
            //            }
            //            //users on this role are able to see leads assigned to themselves and those who are not assigned
            //            if (Utils.GeneralFunctions.IsUserInRole("Online Reservations Agent", currentUser))
            //            {
            //                query = query.Where(m => m.assignedToUserID == null | m.assignedToUserID == currentUser);
            //            }
            //            if (Utils.GeneralFunctions.IsUserInRole("Onsite Reservations Agent", currentUser, true))
            //            {
            //                //if (lsm.Search_Email == null)
            //                if (lsm.Search_CouponNumber == null)
            //                {
            //                    query = query.Where(x => x.assignedToUserID == currentUser);
            //                }
            //            }
            //        }
            //        #endregion
            //        #region "Club Type filter"
            //        if (lsm.Search_ClubType != null)
            //        {
            //            query = query.Where(x => x.tblMemberInfo.FirstOrDefault(y => y.clubType.Contains(lsm.Search_ClubType)).memberInfoID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Member Number filter"
            //        if (lsm.Search_MemberNumber != null)
            //        {
            //            query = query.Where(x => x.tblMemberInfo.FirstOrDefault(y => y.memberNumber.Contains(lsm.Search_MemberNumber)).memberInfoID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Tour Date filter"
            //        if (lsm.Search_I_TourDate > DateTime.MinValue)
            //        {
            //            if (lsm.Search_F_TourDate > DateTime.MinValue)
            //            {
            //                query = query.Where(x => x.tblPresentations.FirstOrDefault(y => y.datePresentation >= lsm.Search_I_TourDate && y.datePresentation <= lsm.Search_F_TourDate).presentationID != null);
            //            }
            //            else
            //            {
            //                query = query.Where(x => x.tblPresentations.FirstOrDefault(y => y.datePresentation == lsm.Search_I_TourDate).presentationID != null);
            //            }
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Is VIP filter"
            //        //string[] isVip = (string[])lsm.Search_IsVip;
            //        if (lsm.Search_IsVip != null && lsm.Search_IsVip.Length > 0)
            //        {    //bool _isVip = Boolean.Parse(isVip[0]);                    
            //            query = query.Where(x => x.tblMemberInfo.FirstOrDefault(y => lsm.Search_IsVip.Contains(y.isVIP)).memberInfoID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Last Interaction Type filter"
            //        if (lsm.Search_LastInteractionType != null && lsm.Search_LastInteractionType.Length > 0)
            //        {
            //            query = query.Where(x => lsm.Search_LastInteractionType.Contains(x.lastInteractionTypeID.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Submission Form filter"
            //        // string[] submissionForm = (string[])lsm.Search_SubmissionForm;
            //        if (lsm.Search_SubmissionForm != null && lsm.Search_SubmissionForm.Length > 0)
            //        {                     //     query = query.Where(x => x.submissionForm == null);
            //            List<bool?> _submissionForm = new List<bool?>();
            //            foreach (string s in lsm.Search_SubmissionForm)
            //            {
            //                try
            //                {
            //                    bool boolValue = Boolean.Parse(s);
            //                    _submissionForm.Add(boolValue);
            //                }
            //                catch (Exception)
            //                {
            //                    _submissionForm.Add(null);
            //                }
            //            }
            //            query = query.Where(x => _submissionForm.Contains(x.submissionForm.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Is Confirmed filter"
            //        if (lsm.Search_IsConfirmed != null && lsm.Search_IsConfirmed.Length > 0)
            //        {                     //     query = query.Where(x => x.submissionForm == null);
            //            List<bool?> _isConfirmed = new List<bool?>();
            //            foreach (string s in lsm.Search_IsConfirmed)
            //            {
            //                try
            //                {
            //                    bool boolValue = Boolean.Parse(s);
            //                    _isConfirmed.Add(boolValue);
            //                }
            //                catch (Exception)
            //                {
            //                    _isConfirmed.Add(null);
            //                }
            //            }
            //            query = query.Where(x => _isConfirmed.Contains(x.confirmed.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Activity Cert filter"
            //        if (lsm.Search_ActivityCert != null && lsm.Search_ActivityCert.Length > 0)
            //        {                     //     query = query.Where(x => x.submissionForm == null);
            //            List<bool?> _activityCert = new List<bool?>();
            //            foreach (string s in lsm.Search_ActivityCert)
            //            {
            //                try
            //                {
            //                    bool boolValue = Boolean.Parse(s);
            //                    _activityCert.Add(boolValue);
            //                }
            //                catch (Exception)
            //                {
            //                    _activityCert.Add(null);
            //                }
            //            }
            //            query = query.Where(x => _activityCert.Contains(x.activityCert.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Time Zone filter"
            //        if (lsm.Search_TimeZone != null && lsm.Search_TimeZone.Length > 0)
            //        {
            //            query = query.Where(x => lsm.Search_TimeZone.Contains(x.timeZoneID.Value));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Real Tour Date filter"
            //        if (lsm.Search_I_RealTourDate > DateTime.MinValue)
            //        {
            //            if (lsm.Search_F_RealTourDate > DateTime.MinValue)
            //            {
            //                query = query.Where(x => x.tblPresentations.FirstOrDefault(y => y.realTourDate >= lsm.Search_I_RealTourDate && y.realTourDate <= lsm.Search_F_RealTourDate).presentationID != null);
            //            }
            //            else
            //            {
            //                query = query.Where(x => x.tblPresentations.FirstOrDefault(y => y.realTourDate == lsm.Search_I_RealTourDate).presentationID != null);
            //            }
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Tour Status filter"
            //        if (lsm.Search_TourStatus != null && lsm.Search_TourStatus.Length > 0)
            //        {
            //            query = query.Where(x => x.tblPresentations.FirstOrDefault(y => lsm.Search_TourStatus.Contains(y.tourStatusID.Value)).presentationID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region #Final Booking Status filter"
            //        if (lsm.Search_FinalBookingStatus != null && lsm.Search_FinalBookingStatus.Length > 0)
            //        {
            //            query = query.Where(x => x.tblPresentations.FirstOrDefault(y => lsm.Search_FinalBookingStatus.Contains(y.finalBookingStatusID.Value)).presentationID != null);
            //            emptyModelFlag = false;
            //        }
            //        else
            //        {
            //            string[] _allowedBookingStatus = BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => m.Value).ToArray();
            //            int?[] allowedBookingStatus = Array.ConvertAll(_allowedBookingStatus, GeneralFunctions.ParseStringToNullableInt);
            //            //int?[] allowedBookingStatus = Array.ConvertAll(_allowedBookingStatus, m => { int value; if (!int.TryParse(m, out value))return default(int?); return (int?)value; });
            //            query = query.Where(m => m.tblPresentations.FirstOrDefault(x => allowedBookingStatus.Contains(x.finalBookingStatusID.Value) || x.finalBookingStatusID == null).presentationID != null || m.tblPresentations.Count() == 0);
            //        }
            //        #endregion
            //        //pendiente
            //        //if (lsm.Search_FinalBookingStatus == -1)
            //        //    query = query.Where(x => x.tblPresentations.FirstOrDefault(y => y.finalBookingStatusID == null).presentationID != null);

            //        //string[] inputBy = (string[])lsm.Search_InputBy;
            //        #region "Input By filter"
            //        if (lsm.Search_InputBy != null && lsm.Search_InputBy.Length > 0)
            //        {   //Guid _inputBy = new Guid(inputBy[0]);
            //            query = query.Where(x => lsm.Search_InputBy.Contains(x.inputByUserID));
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Input Date filter"
            //        //pendiente verificar si aqui afecta la hora
            //        if (lsm.Search_I_InputDate > DateTime.MinValue)
            //        {
            //            if (lsm.Search_F_InputDate > DateTime.MinValue)
            //            {
            //                DateTime dateEnd = lsm.Search_F_InputDate.Value;
            //                dateEnd = dateEnd.AddDays(1);
            //                query = query.Where(x => x.inputDateTime >= lsm.Search_I_InputDate && x.inputDateTime <= dateEnd);
            //            }
            //            else
            //            {
            //                DateTime dateEnd = lsm.Search_I_InputDate.Value;
            //                dateEnd = dateEnd.AddDays(1);
            //                query = query.Where(x => x.inputDateTime >= lsm.Search_I_InputDate && x.inputDateTime <= dateEnd);
            //            }
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "Modification Date filter"
            //        //pendiente verificar si aqui afecta la hora
            //        if (lsm.Search_I_ModificationDate > DateTime.MinValue)
            //        {
            //            if (lsm.Search_F_ModificationDate > DateTime.MinValue)
            //            {
            //                DateTime dateEnd = lsm.Search_F_ModificationDate.Value;
            //                dateEnd = dateEnd.AddDays(1);
            //                query = query.Where(x => x.modificationDate >= lsm.Search_I_ModificationDate && x.modificationDate <= dateEnd);
            //            }
            //            else
            //            {
            //                DateTime dateEnd = lsm.Search_I_ModificationDate.Value;
            //                dateEnd = dateEnd.AddDays(1);
            //                query = query.Where(x => x.modificationDate >= lsm.Search_I_ModificationDate && x.modificationDate <= dateEnd);
            //            }
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region Greeting Rep filter"
            //        if (lsm.Search_GreetingRep != null && lsm.Search_GreetingRep.Length > 0)
            //        {
            //            query = query.Where(x => x.tblReservations.FirstOrDefault(y => lsm.Search_GreetingRep.Contains(y.greetingRepID.Value)).reservationID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion
            //        #region "OPC"
            //        if (lsm.Search_OPC != null && lsm.Search_OPC.Length > 0)
            //        {
            //            query = query.Where(x => x.tblReservations.FirstOrDefault(y => lsm.Search_OPC.Contains(y.opcID.Value)).reservationID != null);
            //            emptyModelFlag = false;
            //        }
            //        #endregion

            //        #region "Terminals filter mike"

            //        #endregion

            //        //#region "Terminals filter"
            //        ////add terminals restriction
            //        //long[] filteringTerminals = null;
            //        ////List<SelectListItem> _currentTerminals = TerminalDataModel.GetCurrentUserTerminals();
            //        ////long[] currentTerminals = (from x in _currentTerminals.Select(x => long.Parse(x.Value)) select x).ToArray();
            //        //long[] currentTerminals = TerminalDataModel.GetCurrentUserTerminals().Select(m => long.Parse(m.Value)).ToArray();
            //        //UserSession currentUserSession = new UserSession();

            //        //if (currentUserSession.Terminals != "")
            //        //{
            //        //    //string[] _selectedTerminals = currentUserSession.Terminals.Split(',');
            //        //    //long[] selectedTerminals = (from x in _selectedTerminals.Select(x => long.Parse(x)) select x).ToArray();
            //        //    long[] selectedTerminals = currentUserSession.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //        //    //make sure the terminals comming in the URL are permited terminals for the current user
            //        //    List<long> verifiedSelectedTerminals = new List<long>();
            //        //    foreach (long x in selectedTerminals)
            //        //    {
            //        //        if (currentTerminals.Contains(x))
            //        //        {
            //        //            verifiedSelectedTerminals.Add(x);
            //        //        }
            //        //    }    //filteringTerminals = (from x in selectedTerminals  select x).ToArray();
            //        //    filteringTerminals = verifiedSelectedTerminals.ToArray();
            //        //}
            //        //else
            //        //{
            //        //    filteringTerminals = (from x in currentTerminals select x).ToArray();
            //        //}
            //        //query = query.Where(x => filteringTerminals.Contains(x.terminalID));
            //        //#endregion
            //        #endregion
            //    }

            //    //result limit for purchases
            //    var leads = "";
            //    IQueryable<LeadModel.Items.SearchResults> searchResult;
            //    var _list = new List<LeadModel.Items.SearchResults>();
            //    if (new Purchases().View())
            //    {
            //        #region "Purchases query"
            //        if (lsm.Search_LeadID == null)
            //        {
            //            #region "Coupon Number filter"
            //            if (lsm.Search_CouponNumber != null)
            //            {
            //                var fmt1 = lsm.Search_CouponNumber.Substring(0, 1) + int.Parse(lsm.Search_CouponNumber.Substring(1)).ToString("00000.##");
            //                var fmt2 = lsm.Search_CouponNumber.Substring(0, 1) + int.Parse(lsm.Search_CouponNumber.Substring(1)).ToString("0000000.##");
            //                //var _purchase_services = db.tblPurchaseServiceDetails.Where(m => m.coupon.Contains(lsm.Search_CouponNumber)).Select(m => m.purchase_ServiceID).ToArray();
            //                var _purchase_services = db.tblPurchaseServiceDetails.Where(m => m.coupon.Contains(fmt1) || m.coupon.Contains(fmt2)).Select(m => m.purchase_ServiceID).ToArray();
            //                var _purchases = db.tblPurchases_Services.Where(m => _purchase_services.Contains(m.purchase_ServiceID)).Select(m => m.purchaseID).ToArray();
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => _purchases.Contains(x.purchaseID)).purchaseID != null);
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //            #region "AuthCode filter"
            //            if (lsm.Search_AuthCode != null)
            //            {
            //                var _purchases = db.tblPaymentDetails.Where(m => m.tblMoneyTransactions.authCode.Contains(lsm.Search_AuthCode)).Select(m => m.tblPurchases.leadID).ToArray();
            //                query = query.Where(m => _purchases.Contains(m.leadID));
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //            #region "Purchase Status filter"
            //            if (lsm.Search_PurchaseStatus != null && lsm.Search_PurchaseStatus.Length > 0)
            //            {
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => lsm.Search_PurchaseStatus.Contains(x.purchaseStatusID)).purchaseID != null);
            //                emptyModelFlag = false;
            //            }
            //            else
            //            {
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseStatusID != 5).purchaseID != null);
            //            }
            //            #endregion
            //            #region "Points Of Sale"
            //            if (lsm.Search_PointOfSale != null && lsm.Search_PointOfSale.Length > 0)
            //            {
            //                var _pointsOfSale = lsm.Search_PointOfSale.Select(m => m.Split('|')[0]).Select(m => long.Parse(m)).ToArray();
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => _pointsOfSale.Contains(x.pointOfSaleID)).purchaseID != null);
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //            #region "Reservations Agent"
            //            if (lsm.Search_ReservationsAgent != null && lsm.Search_ReservationsAgent.Length > 0)
            //            {
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => lsm.Search_ReservationsAgent.Contains(x.agentID)).purchaseID != null);
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //            #region "Sales Agent"
            //            if (lsm.Search_SalesAgent != null && lsm.Search_SalesAgent.Length > 0)
            //            {
            //                query = query.Where(m => m.tblPurchases.FirstOrDefault(x => lsm.Search_SalesAgent.Contains(x.userID)).purchaseID != null);
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //            #region "Purchase Date filter"
            //            if (lsm.Search_I_PurchaseDate != null && DateTime.Parse(lsm.Search_I_PurchaseDate) > DateTime.MinValue)
            //            {
            //                var purchaseDateStart = DateTime.Parse(lsm.Search_I_PurchaseDate);
            //                if (lsm.Search_F_PurchaseDate != null && DateTime.Parse(lsm.Search_F_PurchaseDate) > DateTime.MinValue)
            //                {
            //                    var purchaseDateEnd = DateTime.Parse(lsm.Search_F_PurchaseDate.ToString()).AddDays(1).AddSeconds(-1);

            //                    query = query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseDateTime >= purchaseDateStart && x.purchaseDateTime <= purchaseDateEnd).purchaseID != null);
            //                }
            //                else
            //                {
            //                    query = query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseDateTime == purchaseDateStart).purchaseID != null);
            //                }
            //                emptyModelFlag = false;
            //            }
            //            #endregion
            //        }

            //        IQueryable<tblLeads> _query;

            //        if (emptyModelFlag)
            //        {
            //            if (lsm.Search_LeadID != null)
            //            {
            //                #region "Búsqueda con hash en url"
            //                _query = query.Where(m => m.leadID == (Guid)lsm.Search_LeadID);
            //                #endregion
            //            }
            //            else
            //            {
            //                #region "Búsqueda Inicial en la carga del módulo"
            //                _query = query.Where(m => m.tblPurchases.Any());
            //                var nonCompleted = _query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseStatusID < 2 && x.isTest != true).purchaseID != null).OrderByDescending(m => m.inputDateTime);
            //                var nonCompletedCount = nonCompleted.Count();
            //                var completed = _query.Where(m => m.tblPurchases.FirstOrDefault(x => x.purchaseStatusID == 2 && x.isTest != true).purchaseID != null).OrderByDescending(m => m.inputDateTime);
            //                var pendingTake = (10 - nonCompletedCount) > 0 ? (10 - nonCompletedCount) : 0;

            //                _query = nonCompleted.Concat(completed.Take(pendingTake)).OrderByDescending(m => m.inputDateTime);
            //                #endregion
            //            }
            //        }
            //        else
            //        {
            //            #region "Búsqueda con parámetros"
            //            _query = query;
            //            #endregion
            //        }

            //        foreach (var i in _query)
            //        {
            //            var purchases = db.tblPurchases.Where(m => m.leadID == i.leadID && m.isTest != true).OrderByDescending(m => m.purchaseDateTime).FirstOrDefault();
            //            var payments = purchases != null ? new Purchases().GetPurchasePayments(purchases.purchaseID.ToString()) : null;

            //            var total = purchases != null ? (purchases.total * LeadsCatalogs.GetExchangeRateOfPurchase(purchases.currencyID, purchases.purchaseDateTime, purchases.terminalID, purchases.pointOfSaleID)) : (decimal?)null;
            //            if (payments != null)
            //            {
            //                foreach (var p in payments)
            //                {
            //                    if (p.PurchasePayment_ErrorCode == "Approved")
            //                    {
            //                        total -= p.PurchasePayment_Amount * p.PurchasePayment_ExchangeRate;
            //                    }
            //                }
            //            }

            //            //this condition allows leads with valid purchases(not test) based on filter in line 1988
            //            //if (purchases != null || lsm.Search_Email != null)
            //            if (purchases != null || lsm.Search_CouponNumber != null)
            //            {
            //                _list.Add(new LeadModel.Items.SearchResults()
            //                {
            //                    LeadID = i.leadID,
            //                    FirstName = i.firstName != null ? i.firstName : "",
            //                    LastName = i.lastName != null ? i.lastName : "",
            //                    Email = i.tblLeadEmails.Count() > 0 ? i.tblLeadEmails.Count() > 1 ? i.tblLeadEmails.FirstOrDefault(m => m.main == true).email : i.tblLeadEmails.FirstOrDefault().email : "",
            //                    Phone = i.tblPhones.Count() > 0 ? i.tblPhones.Count() > 1 ? i.tblPhones.FirstOrDefault(m => m.main == true).phone : i.tblPhones.FirstOrDefault().phone : "",
            //                    BookingStatus = i.bookingStatusID != null ? i.tblBookingStatus.bookingStatus : "",
            //                    LeadStatus = i.leadStatusID != null ? i.tblLeadStatus.leadStatus : "",
            //                    LeadSource = i.leadSourceID != null ? i.tblLeadSources.leadSource : "",
            //                    ArrivalDate = i.tblReservations.Count() > 0 ? i.tblReservations.FirstOrDefault().arrivalDate : (DateTime?)null,
            //                    AssignedTo = i.assignedToUserID != null ? i.aspnet_Users1.UserName : "",
            //                    Resort = purchases != null ? purchases.stayingAtPlaceID != null ? purchases.tblPlaces.place + " " + purchases.tblPlaces.tblDestinations.destination : purchases.stayingAt : "",
            //                    LastModificationDate = i.modificationDate != null ? i.modificationDate : (DateTime?)null,
            //                    LeadComments = i.leadComments,
            //                    TotalPaid = i.tblReservations.Count() > 0 ? i.tblReservations.FirstOrDefault().totalPaid : (decimal?)null,
            //                    PurchaseInfo_PurchaseStatusString = purchases != null ? purchases.tblPurchaseStatus.purchaseStatus : "",
            //                    PurchaseInfo_PurchaseDateTime = purchases != null ? purchases.purchaseDateTime.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture) : "",
            //                    PurchaseInfo_Total = purchases != null ? (purchases.total != null ? purchases.total.ToString() : "0") + " " + purchases.tblCurrencies.currencyCode : "",
            //                    //PurchaseInfo_Paid = total != null ? ((decimal)-0.1 <= total & total <= (decimal)0.1) ? "Paid" : "Unpaid" : "Unpaid",
            //                    //PurchaseInfo_Paid = purchases != null ? total != null ? (total <= (decimal)0.1) ? "Paid" : "Unpaid" : "Unpaid" : "Unpaid",
            //                    PurchaseInfo_Paid = purchases != null ? LeadsCatalogs.IsPurchasePaid(purchases.purchaseID) : "Unpaid",
            //                    PurchaseInfo_Agent = purchases != null ? purchases.agentID != null ? purchases.aspnet_Users2.UserName : "" : "",
            //                    PurchaseInfo_PointOfSaleString = purchases != null ? purchases.pointOfSaleID != null ? purchases.tblPointsOfSale.shortName : "" : "",
            //                    PurchaseInfo_TerminalString = purchases != null ? purchases.terminalID != null ? purchases.tblTerminals.terminal : "" : "",
            //                    Purchase_CountDownString = purchases != null ? purchases.tblPurchases_Services.Count() > 0 && purchases.tblPurchases_Services.Where(m => m.serviceStatusID == 3).Count() > 0 ? ((DateTime)purchases.tblPurchases_Services.Where(m => m.serviceStatusID == 3).OrderBy(m => m.serviceDateTime).FirstOrDefault().serviceDateTime - DateTime.Today).Days.ToString() : "" : "",
            //                    Purchase_CustomerRequests = purchases != null ? purchases.customerRequests : "",
            //                    InputDateTime = i.inputDateTime
            //                });
            //            }
            //        }
            //        #endregion
            //    }
            //    else
            //    {
            //        //searchResult = from x in query
            //        //                   select new LeadModel.Items.SearchResults()
            //        //            {
            //        //                LeadID = x.leadID,
            //        //                FirstName = x.firstName,
            //        //                LastName = x.lastName,
            //        //                Email = x.tblLeadEmails.FirstOrDefault(e => e.main == true).email,
            //        //                Phone = x.tblPhones.FirstOrDefault(m => m.main == true).phone,
            //        //                BookingStatus = x.tblBookingStatus.bookingStatus,
            //        //                LeadStatus = x.tblLeadStatus.leadStatus,
            //        //                LeadSource = x.tblLeadSources.leadSource,
            //        //                ArrivalDate = x.tblReservations.FirstOrDefault().arrivalDate,
            //        //                AssignedTo = x.aspnet_Users1.UserName,
            //        //                Resort = x.tblReservations.FirstOrDefault().tblPlaces.place + " " + x.tblReservations.FirstOrDefault().tblPlaces.tblDestinations.destination,
            //        //                LastModificationDate = x.modificationDate,
            //        //                LeadComments = x.leadComments,
            //        //                TotalPaid = x.tblReservations.FirstOrDefault().totalPaid
            //        //            };
            //        //_list = searchResult.ToList<LeadModel.Items.SearchResults>();
            //        #region "query for reservations only"
            //        var count = query.Count();
            //        //var counter = 1;
            //        var _query = emptyModelFlag ? query.Take(300) : query;


            //        foreach (var i in _query)
            //        {
            //            leads = leads + i.leadID + ",";

            //            _list.Add(new LeadModel.Items.SearchResults()
            //            {
            //                TotalCoincidences = count,
            //                LeadID = i.leadID,
            //                FirstName = i.firstName != null ? i.firstName : "",
            //                LastName = i.lastName != null ? i.lastName : "",
            //                Email = i.tblLeadEmails.Any() ? i.tblLeadEmails.Any(m => m.main) ? i.tblLeadEmails.FirstOrDefault(m => m.main == true).email : i.tblLeadEmails.FirstOrDefault().email : "",
            //                Phone = i.tblPhones.Any() ? i.tblPhones.Any(m => m.main) ? i.tblPhones.FirstOrDefault(m => m.main == true).phone : i.tblPhones.FirstOrDefault().phone : "",
            //                BookingStatus = i.bookingStatusID != null ? i.tblBookingStatus.bookingStatus : "",
            //                LeadStatus = i.leadStatusID != null ? i.tblLeadStatus.leadStatus : "",
            //                LeadSource = i.leadSourceID != null ? i.tblLeadSources.leadSource : "",
            //                ArrivalDate = i.tblReservations.Any() ? i.tblReservations.FirstOrDefault().arrivalDate : (DateTime?)null,
            //                AssignedTo = i.assignedToUserID != null ? i.aspnet_Users1.UserName : "",
            //                Resort = i.tblReservations.Any() ? i.tblReservations.FirstOrDefault().placeID != null ? i.tblReservations.FirstOrDefault().tblPlaces.place + " " + i.tblReservations.FirstOrDefault().tblPlaces.tblDestinations.destination : "" : "",
            //                LastModificationDate = i.modificationDate != null ? i.modificationDate : (DateTime?)null,
            //                LeadComments = i.leadComments,
            //                TotalPaid = i.tblReservations.Any() ? i.tblReservations.FirstOrDefault().totalPaid : (decimal?)null,
            //                MemberAccount = i.tblMemberInfo.Any() ? i.tblMemberInfo.FirstOrDefault().memberNumber : "",
            //                PresentationDateTime = i.tblPresentations.Any() ? (i.tblPresentations.FirstOrDefault().datePresentation != null ? ((DateTime)i.tblPresentations.FirstOrDefault().datePresentation).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "") + " " + (i.tblPresentations.FirstOrDefault().timePresentation != null ? ((TimeSpan)i.tblPresentations.FirstOrDefault().timePresentation).ToString("c") : "") : ""
            //            });
            //        }
            //        #endregion
            //    }

            //    //parece que esta línea no está en uso
            //    //string queryStr = query.ToString();

            //    //*//*//*
            //    //*//*//*
            //    #region "commented query"
            //    //var searchResult = from x in query
            //    //                   select new LeadModel.Items.SearchResults()
            //    //            {
            //    //                LeadID = x.leadID,
            //    //                FirstName = x.firstName,
            //    //                LastName = x.lastName,
            //    //                Email = x.tblLeadEmails.FirstOrDefault(e => e.main == true).email,
            //    //                Phone = x.tblPhones.FirstOrDefault(m => m.main == true).phone,
            //    //                BookingStatus = x.tblBookingStatus.bookingStatus,
            //    //                LeadStatus = x.tblLeadStatus.leadStatus,
            //    //                LeadSource = x.tblLeadSources.leadSource,
            //    //                ArrivalDate = x.tblReservations.FirstOrDefault().arrivalDate,
            //    //                AssignedTo = x.aspnet_Users1.UserName,
            //    //                Resort = x.tblReservations.FirstOrDefault().tblPlaces.place + " " + x.tblReservations.FirstOrDefault().tblPlaces.tblDestinations.destination,
            //    //                LastModificationDate = x.modificationDate,
            //    //                LeadComments = x.leadComments,
            //    //                TotalPaid = x.tblReservations.FirstOrDefault().totalPaid
            //    //            };
            //    #endregion
            //    //var results = query.Count() > searchResult.Count() ? query.Count() : searchResult.Count();
            //    //var results = query.Count() > _list.Count() ? query.Count() : _list.Count();

            //    //List<LeadModel.Items.SearchResults> list = new List<LeadModel.Items.SearchResults>();

            //    //var leads = "";
            //    //foreach (var i in _list)
            //    //{
            //    //    leads = leads + i.LeadID + ",";
            //    //}
            //    //foreach (var i in searchResult)
            //    //{
            //    //    leads = leads + i.LeadID + ",";
            //    //}

            //    //foreach (var i in searchResult)
            //    //{
            //    //    list.Add(new LeadModel.Items.SearchResults()
            //    //    {
            //    //        LeadID = i.LeadID,
            //    //        FirstName = i.FirstName,
            //    //        LastName = i.LastName,
            //    //        Email = i.Email,
            //    //        Phone = i.Phone,
            //    //        BookingStatus = i.BookingStatus,
            //    //        LeadSource = i.LeadSource,
            //    //        LeadStatus = i.LeadStatus,
            //    //        ArrivalDate = i.ArrivalDate,
            //    //        AssignedTo = i.AssignedTo,
            //    //        Resort = i.Resort,
            //    //        LastModificationDate = i.LastModificationDate,
            //    //        LeadComments = i.LeadComments,
            //    //        TotalPaid = i.TotalPaid,
            //    //        TotalCoincidences = results,//
            //    //        PurchaseInfo_PurchaseStatusString = i.PurchaseInfo_PurchaseStatusString,
            //    //        PurchaseInfo_PurchaseDateTime = i.Purchase_PurchaseDateTime != null ? i.Purchase_PurchaseDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture) : "",
            //    //        PurchaseInfo_Total = i.Purchase_Total.ToString(),//
            //    //        PurchaseInfo_Currency = i.PurchaseInfo_Currency,
            //    //        PurchaseInfo_Agent = i.PurchaseInfo_Agent,
            //    //        PurchaseInfo_PointOfSaleString = i.PurchaseInfo_PointOfSaleString,
            //    //        PurchaseInfo_TerminalString = i.PurchaseInfo_TerminalString,
            //    //        //Purchase_CountDownString = i.Purchase_CountDown != 0 ? i.Purchase_CountDown.ToString() : "",
            //    //        Purchase_CountDownString = ((DateTime)i.Purchase_ServiceDateTime - DateTime.Today).Days.ToString(),
            //    //        Purchase_CustomerRequests = i.Purchase_CustomerRequests
            //    //    });
            //    //}

            //    //foreach (var i in _list)
            //    //{
            //    //    i.TotalCoincidences = results;
            //    //}

            //    //leads = leads != "" ? leads.Substring(0, leads.Length - 1) : "";
            //    result.Coincidences = leads.TrimEnd(',');
            //    result.SearchResults = _list;
            //    return result;
            //}

            public AttemptResponse MassUpdate(LeadModel.Views.MassUpdate lvm)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
                List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();
                List<KeyValuePair<string, string>> listPropertiesValues = new List<KeyValuePair<string, string>>();
                var model = typeof(LeadModel.Views.MassUpdate).GetProperties();
                var listTables = new List<string>();
                var changedFields = "";

                foreach (var i in model)
                {
                    var _a = i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false);
                    if (i.GetCustomAttributes(true).Count() != 0 && i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false).Count() == 0)
                    {
                        var property = Reflection.GetPropertyByName(lvm, i.Name);
                        var propertyValue = property.GetValue(lvm, null) != null && property.GetValue(lvm, null).ToString() != "0" ? property.GetValue(lvm, null) : null;
                        var propertyDbFieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
                        var propertyDbTableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name;
                        if (propertyValue != null)
                        {
                            listPropertiesValues.Add(new KeyValuePair<string, string>(propertyDbTableName + "." + propertyDbFieldName, propertyValue.ToString()));
                            changedFields += propertyDbFieldName + ",";
                            if (listTables.Where(m => m == propertyDbTableName).Count() == 0)
                            {
                                listTables.Add(propertyDbTableName);
                            }
                        }
                    }
                }
                changedFields = changedFields.Substring(0, changedFields.Length - 1);

                if (lvm.MassUpdate_Coincidences != null)
                {
                    try
                    {
                        var _coindidences = lvm.MassUpdate_Coincidences;
                        var str = lvm.MassUpdate_Coincidences.Replace("'", "");
                        var leads = "(";
                        leads += _coindidences;
                        leads += ")";
                        var whereString = " WHERE tblLeads.leadID IN";
                        foreach (var i in listTables)//involve distinct tables 
                        {
                            var setString = "UPDATE " + i + " SET ";
                            foreach (var a in listPropertiesValues.Where(m => m.Key.Substring(0, m.Key.IndexOf('.')) == i))
                            {
                                #region "create change log"
                                foreach (var coincidence in str.Split(','))
                                {
                                    Guid leadID = Guid.Parse(coincidence);
                                    var lead = db.tblLeads.Single(m => m.leadID == leadID);
                                    var currentPrimaryKey = Import.GetPrimaryKeyName(a.Key.Substring(0, a.Key.IndexOf('.')));
                                    var currentPrimaryKeyValue = lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null) != null ? lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null).ToString() : null;
                                    var field = a.Key.Substring((a.Key.IndexOf('.') + 1), (a.Key.Length - (a.Key.IndexOf('.') + 1)));
                                    var previousValue = lead.GetType().GetProperty(field).GetValue(lead, null) != null ? lead.GetType().GetProperty(field).GetValue(lead, null).ToString() : null;
                                    //string previousValue = lead.GetType().GetProperty(field).GetValue(lead, null).ToString() ?? "";
                                    if (a.Value != "")
                                    {
                                        listChanges.Add(new ChangesTracking.ChangeItem()
                                        {
                                            SysComponentID = ChangesTracking.GetSysComponentIDs(i).Single(m => m.Key == field).Value,
                                            PreviousValue = previousValue,
                                            CurrentValue = a.Value,
                                            FullReferenceText = lead.firstName + " " + lead.lastName,
                                            ReferenceID = currentPrimaryKeyValue
                                            //ReferenceID = i
                                        });
                                    }
                                }
                                #endregion
                                setString += a.Key + "='" + a.Value + "', ";
                            }
                            setString = setString.Substring(0, setString.Length - 2);//remove last comma
                            var sqlString = setString + whereString + leads;
                            db.ExecuteStoreCommand(sqlString);
                        }
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Lead(s) Updated";
                        response.ObjectID = 0;
                        ChangesTracking.LogChanges(listChanges);
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Lead(s) NOT Updated";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                }
                return response;
            }

            //public AttemptResponse SendMassConfirmationLetter(LeadModel.Views.MassUpdate lvm)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    AttemptResponse response = new AttemptResponse();
            //    ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
            //    List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();

            //    if (lvm.MassUpdate_Coincidences != null)
            //    {
            //        try
            //        {
            //            var _leads = lvm.MassUpdate_Coincidences.Replace("'", "");
            //            var leads = _leads.Split(',').Select(m => Guid.Parse(m)).ToArray();

            //            foreach (var lead in leads)
            //            {

            //            }
            //        }
            //    }
            //}

            public AttemptResponse MassInsert(LeadModel.Views.MassUpdate lvm)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
                List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();
                List<KeyValuePair<string, string>> listPropertiesValues = new List<KeyValuePair<string, string>>();
                var model = typeof(LeadModel.Views.MassUpdate).GetProperties();
                var listTables = new List<string>();

                foreach (var i in model)
                {
                    var _a = i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false);
                    if (i.GetCustomAttributes(true).Count() != 0 && i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false).Count() > 0)
                    {
                        var property = Reflection.GetPropertyByName(lvm, i.Name);
                        var propertyValue = property.GetValue(lvm, null) != null && property.GetValue(lvm, null).ToString() != "0" ? property.GetValue(lvm, null) : null;
                        var propertyDbFieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
                        var propertyDbTableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name;
                        if (propertyValue != null)
                        {
                            //key = tableName.fieldName
                            //value = propertyValue
                            listPropertiesValues.Add(new KeyValuePair<string, string>(propertyDbTableName + "." + propertyDbFieldName, propertyValue.ToString()));
                            if (listTables.Where(m => m == propertyDbTableName).Count() == 0)
                            {
                                listTables.Add(propertyDbTableName);
                            }
                        }
                    }
                }

                if (lvm.MassUpdate_Coincidences != null)
                {
                    try
                    {
                        var str = lvm.MassUpdate_Coincidences.Replace("'", "");
                        foreach (var _table in listTables)//involve distinct tables 
                        {
                            foreach (var _coincidence in str.Split(','))
                            {
                                var _sqlInsert = "INSERT INTO " + _table;
                                var _leadID = Guid.Parse(_coincidence);
                                var lead = db.tblLeads.Single(m => m.leadID == _leadID);
                                var _fields = "";
                                var _values = "";
                                foreach (var item in listPropertiesValues.Where(m => m.Key.Substring(0, m.Key.IndexOf('.')) == _table))
                                {
                                    var _field = item.Key.Substring((item.Key.IndexOf('.') + 1), (item.Key.Length - (item.Key.IndexOf('.') + 1)));
                                    var _value = item.Value;
                                    if (_value != null)
                                    {
                                        DateTime isDateTime;
                                        if (DateTime.TryParse(_value, out isDateTime))
                                        {
                                            _value = "'" + DateTime.Parse(_value).ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture) + "'";
                                        }
                                        else
                                        {
                                            _value = "'" + item.Value + "'";
                                        }
                                    }
                                    _fields += (_fields == "" ? "" : ",") + _field;
                                    _values += (_values == "" ? "" : ",") + _value;

                                    var currentPrimaryKey = Import.GetPrimaryKeyName(item.Key.Substring(0, item.Key.IndexOf('.')));
                                    //var currentPrimaryKeyValue = lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null) != null ? lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null).ToString() : null;
                                    listChanges.Add(new ChangesTracking.ChangeItem()
                                    {
                                        SysComponentID = ChangesTracking.GetSysComponentIDs(_table).Single(m => m.Key == _field).Value,
                                        PreviousValue = "",
                                        CurrentValue = item.Value,
                                        FullReferenceText = lead.firstName + " " + lead.lastName,
                                        ReferenceID = ""
                                        //ReferenceID = currentPrimaryKeyValue
                                    });
                                }
                                _fields += (_fields == "" ? "" : ",") + "leadID";
                                _values += (_values == "" ? "" : ",") + "'" + _coincidence + "'";
                                _sqlInsert += " (" + _fields + ") VALUES(" + _values + ")";
                                db.ExecuteStoreCommand(_sqlInsert);
                            }
                        }
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Lead(s) info Saved";
                        response.ObjectID = 0;
                        ChangesTracking.LogChanges(listChanges);
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Lead(s) info NOT Saved";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                }
                return response;
            }

            public AttemptResponse MassSending(LeadModel.Views.MassUpdate lvm)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();

                var emailsNotSent = "";
                var leads = lvm.MassUpdate_Coincidences.Replace("'", "");

                foreach (var lead in leads.Split(','))
                {
                    var _leadID = Guid.Parse(lead);
                    var _lead = db.tblLeads.Single(m => m.leadID == _leadID);
                    var reservation = _lead.tblReservations;
                    if (reservation != null)
                    {
                        var rsv = reservation.OrderBy(m => m.arrivalDate).FirstOrDefault();
                        var _response = new HotelReservation().SendLetter(rsv.reservationID, lvm.MassUpdate_SendingEvent);
                        emailsNotSent += (_response.Type == Attempt_ResponseTypes.Error ? _lead.firstName + " " + _lead.lastName + ", " : "");
                    }
                    else
                    {
                        emailsNotSent += _lead.firstName + " " + _lead.lastName + ", ";
                    }
                }
                emailsNotSent = emailsNotSent.TrimEnd(',');
                response.Type = Attempt_ResponseTypes.Ok;
                response.ObjectID = 0;
                response.Message = "Emails sent.<br />" + (emailsNotSent != "" ? "There were errors on these leads<br />" + emailsNotSent : "");
                return response;
            }

            //public AttemptResponse DuplicateLeads(LeadModel.Views.MassUpdate lvm)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    AttemptResponse response = new AttemptResponse();
            //    ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
            //    List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();
            //    List<KeyValuePair<string, string>> listPropertiesValues = new List<KeyValuePair<string, string>>();
            //    var model = typeof(LeadModel.Views.MassUpdate).GetProperties();
            //    var listTables = new List<string>();

            //    //foreach (var i in model)
            //    //{
            //    //    var _a = i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false);
            //    //    if (i.GetCustomAttributes(true).Count() != 0 && i.GetCustomAttributes(typeof(DoNotUpdateAttribute), false).Count() > 0)
            //    //    {
            //    //        var property = Reflection.GetPropertyByName(lvm, i.Name);
            //    //        var propertyValue = property.GetValue(lvm, null) != null && property.GetValue(lvm, null).ToString() != "0" ? property.GetValue(lvm, null) : null;
            //    //        var propertyDbFieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
            //    //        var propertyDbTableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name;
            //    //        if (propertyValue != null)
            //    //        {
            //    //            //key = tableName.fieldName
            //    //            //value = propertyValue
            //    //            listPropertiesValues.Add(new KeyValuePair<string, string>(propertyDbTableName + "." + propertyDbFieldName, propertyValue.ToString()));
            //    //            if (listTables.Where(m => m == propertyDbTableName).Count() == 0)
            //    //            {
            //    //                listTables.Add(propertyDbTableName);
            //    //            }
            //    //        }
            //    //    }
            //    //}

            //    if (lvm.MassUpdate_Coincidences != null)
            //    {
            //        var _coincidences = lvm.MassUpdate_Coincidences.Replace("'", "");
            //        var _now = DateTime.Now;
            //        foreach (var i in _coincidences.Split(','))
            //        {
            //            var _leadID = Guid.Parse(i);
            //            var lead = db.tblLeads.Single(m => m.leadID == _leadID);

            //            tblLeads newLead = Reflection.CloneObject(lead) as tblLeads;

            //            newLead.leadStatusID = lvm.DuplicateLeadsModel.DuplicateLeads_LeadStatus;
            //            newLead.assignedToUserID = lvm.DuplicateLeadsModel.DuplicateLeads_AssignToUser;
            //            newLead.inputDateTime = _now;

            //        }
            //        //db.SaveChanges();
            //    }
            //    return response;
            //}

            public AttemptResponse MassUpdates(LeadModel.Views.MassUpdate lvm)
            {
                #region
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
                List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();
                List<KeyValuePair<string, string>> listPropertyValue = new List<KeyValuePair<string, string>>();
                var components = ChangesTracking.GetSysComponentIDs("tblLeads");
                var model = typeof(LeadModel.Views.MassUpdate).GetProperties();
                string changedFields = "";

                foreach (var i in model)
                {
                    if (i.GetCustomAttributes(true).Count() != 0)
                    {
                        var property = Reflection.GetPropertyByName(lvm, i.Name);
                        var propertyValue = property.GetValue(lvm, null) ?? "";
                        var propertyDbName = Reflection.GetDbNameOrDefault(i);
                        listPropertyValue.Add(new KeyValuePair<string, string>(propertyDbName, propertyValue.ToString()));
                        changedFields += propertyDbName + ",";
                    }
                }
                changedFields = changedFields.Substring(0, changedFields.Length - 1);
                #endregion

                if (lvm.MassUpdate_Coincidences != null)
                {
                    try
                    {
                        var str = lvm.MassUpdate_Coincidences.Replace("'", "");
                        //collection format adaptation
                        string leads = "(";
                        leads += lvm.MassUpdate_Coincidences;
                        leads += ")";
                        var sqlStr = "UPDATE tblLeads SET ";
                        //change log
                        foreach (var field in changedFields.Split(','))
                        {
                            var currentValue = listPropertyValue.Single(m => m.Key == field).Value;
                            foreach (string i in str.Split(','))
                            {
                                Guid leadID = Guid.Parse(i);
                                var lead = db.tblLeads.Single(m => m.leadID == leadID);
                                string previousValue = lead.GetType().GetProperty(field).GetValue(lead, null).ToString() ?? "";
                                if (currentValue != "")
                                {
                                    listChanges.Add(new ChangesTracking.ChangeItem()
                                    {
                                        SysComponentID = components.Single(m => m.Key == field).Value,
                                        PreviousValue = previousValue,
                                        CurrentValue = currentValue,
                                        FullReferenceText = lead.firstName.ToString() + " " + lead.lastName.ToString(),
                                        ReferenceID = i
                                    });
                                }
                            }
                            sqlStr += "tblLeads." + field + " = '" + currentValue + "',";
                        }
                        sqlStr = sqlStr.Substring(0, sqlStr.Length - 1);
                        //final sentence
                        db.ExecuteStoreCommand(sqlStr + " WHERE tblLeads.leadID IN " + leads);
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Lead(s) Updated";
                        response.ObjectID = 0;
                        ChangesTracking.LogChanges(listChanges);
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Lead(s) NOT Updated";
                        response.Exception = ex;
                        response.ObjectID = 0;
                        return response;
                    }
                }
                return response;
            }

            public AttemptResponse TryToDuplicate(LeadModel.Fields.LeadGeneralInformation lgim)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                var _leadID = lgim.GeneralInformation_LeadID;
                var model = lgim;//Find((Guid)lgim.GeneralInformation_LeadID);

                model.GeneralInformation_AssignedToUserID = lgim.GeneralInformation_AssignedToUserID;
                if (model.GeneralInformation_EmailsList != null)
                {
                    foreach (var email in model.GeneralInformation_EmailsList as List<LeadModel.Items.Emails>)
                    {
                        email.emailID = 0;
                    }
                }
                if (model.GeneralInformation_PhonesList != null)
                {
                    foreach (var phone in model.GeneralInformation_PhonesList as List<LeadModel.Items.Phones>)
                    {
                        phone.phoneID = 0;
                    }
                }
                if (model.GeneralInformation_InteractionsList != null)
                {
                    foreach (var interaction in model.GeneralInformation_InteractionsList as List<LeadModel.Items.Interactions>)
                    {
                        interaction.InteractionID = 0;
                        var userName = interaction.SavedByUserID.ToString();
                        interaction.SavedByUserID = db.aspnet_Users.Single(m => m.UserName == userName).UserId;//el modelo regresa el username. necesito asignar su id al campo para poder guardarlo con el mismo método de trytocreate
                                                                                                               //interaction.SavedByUserID = (Guid)Membership.GetUser(interaction.SavedByUserID.ToString()).ProviderUserKey;//el modelo regresa el username. necesito asignar su id al campo para poder guardarlo con el mismo método de trytocreate
                                                                                                               //interaction.SavedByUserID = Guid.Parse(interaction.SavedByUserID.ToString());

                    }
                }

                model.GeneralInformation_MemberInformation.MemberInformationID = 0;

                response = TryToCreate(model);

                if (response.Type == Attempt_ResponseTypes.Ok)
                {
                    var billingInfo = db.tblBillingInfo.Where(m => m.leadID == _leadID);
                    var newLead = db.tblLeads.Single(m => m.leadID == (Guid)response.ObjectID);

                    if (billingInfo.Count() > 0)
                    {
                        foreach (var i in billingInfo)
                        {
                            var billing = new tblBillingInfo();
                            billing.firstName = i.firstName;
                            billing.lastName = i.lastName;
                            billing.address = i.address;
                            billing.city = i.city;
                            billing.state = i.state;
                            billing.countryID = i.countryID;
                            billing.zipcode = i.zipcode;
                            billing.cardHolderName = i.cardHolderName;
                            billing.cardNumber = i.cardNumber;
                            billing.cardTypeID = i.cardTypeID;
                            billing.cardExpiry = i.cardExpiry;
                            billing.cardCVV = i.cardCVV;
                            billing.dateSaved = i.dateSaved;
                            billing.billingComments = i.billingComments;
                            newLead.tblBillingInfo.Add(billing);
                        }
                    }

                    var reservations = db.tblReservations.Where(m => m.leadID == (Guid)_leadID).Select(m => m.reservationID);
                    var newReservations = new List<Guid>();
                    foreach (var i in reservations)
                    {
                        var reservation = new HotelReservation().Find(i);
                        reservation.LeadID = newLead.leadID;
                        if (reservation.GeneralInformation_OptionsSoldList != null)
                        {
                            foreach (var option in reservation.GeneralInformation_OptionsSoldList as List<HotelReservationModel.Items.OptionsSoldInformation>)
                            {
                                option.OptionSoldID = 0;
                            }
                        }
                        reservation.GeneralInformation_PresentationInformation.LeadID = newLead.leadID;
                        reservation.GeneralInformation_PresentationInformation.Presentations_PresentationID = 0;
                        if (reservation.GeneralInformation_ReservationPaymentsList != null)
                        {
                            foreach (var payment in reservation.GeneralInformation_ReservationPaymentsList as List<HotelReservationModel.Items.ReservationPaymentDetails>)
                            {
                                payment.ReservationPaymentDetailsID = 0;
                            }
                        }
                        if (reservation.GeneralInformation_EmailNotificationLogsList != null)
                        {
                            foreach (var notif in reservation.GeneralInformation_EmailNotificationLogsList as List<HotelReservationModel.Items.EmailNotificationLogs>)
                            {
                                notif.EmailNotificationLogID = 0;
                            }
                        }
                        if (reservation.GeneralInformation_FlightInformationList != null)
                        {
                            foreach (var flight in reservation.GeneralInformation_FlightInformationList as List<HotelReservationModel.Items.FlightInformation>)
                            {
                                flight.FlightID = 0;
                            }
                        }
                        if (reservation.GeneralInformation_PresentationInformation.Presentations_ContractsHistoryList != null)
                        {
                            foreach (var contract in reservation.GeneralInformation_PresentationInformation.Presentations_ContractsHistoryList as List<HotelReservationModel.Items.ContractsHistory>)
                            {
                                contract.ContractHistoryID = 0;
                            }
                        }
                        var success = new HotelReservation().TryToCreate(reservation);
                        if (success.Type == Attempt_ResponseTypes.Ok)
                        {
                            var newReservationID = (Guid)success.ObjectID.GetType().GetProperty("ReservationID").GetValue(success.ObjectID, null);
                            newReservations.Add(newReservationID);
                        }
                        else
                        {
                            foreach (var r in newReservations)
                            {
                                var rsv = db.tblReservations.Single(m => m.reservationID == r);
                                db.DeleteObject(rsv);
                            }
                            db.DeleteObject(newLead);
                            db.SaveChanges();
                            response.Message = "There was a problem duplicating Reservation Info.<br />All duplicated info was deleted";
                            return response;
                        }
                    }
                    db.SaveChanges();
                    response.Message += "<br />Lead succesfully duplicated and assigned";
                    return response;
                }
                else
                {
                    return response;
                }
            }

            /// <summary>
            /// Returns the properties matching the dataAttribute specified in T.
            /// </summary>
            /// <typeparam name="T">The DataAttribute to filter with.</typeparam>
            /// <param name="obj">The object to search in.</param>
            /// <param name="exclusvie">When true the function Returns the properties not matching the dataAttribute specified in T.</param>
            /// <returns></returns>
            //public static void setUpRelationShipProperty<T>(object sourceObject, PropertyInfo p, ref T returnObject, ref List<ChangesTracking.ChangeItem> changesList, ref string path, string logReferencePath)
            //{
            //    /*Changes Tracking:BEGIN*/
            //    string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p).RelationShipType.Name;
            //    path += "." + tableName;
            //    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //    var sysComponentsIds = ChangesTracking.GetSysComponentIDs(tableName);
            //    /*Changes Tracking:END*/


            //    DataBaseInfoAttribute dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p);
            //    ListTypeAttribute ListAttributes = Reflection.GetCustomAttribute<ListTypeAttribute>(p);
            //    Type relationShipType = dbInfo.RelationShipType; // v.g. tblLeadEmails                        
            //    // the list from UI
            //    IEnumerable<object> listItems = p.GetValue(sourceObject, null) as IEnumerable<object>;
            //    //The list from db     
            //    PropertyInfo returnProperty = Reflection.GetPropertyByName(returnObject, relationShipType.Name);
            //    //find out the PK's name so we can match by that name.
            //    var relationShipPkName = dbInfo.PrimaryKeyName;

            //    #region "Updates"
            //    /////UPDATES/////////////////////////////////////////////////////////////////////////
            //    foreach (var iDbItem in returnProperty.GetValue(returnObject, null) as IEnumerable)
            //    {
            //        //get list of Log Reference Names so we can know where to get the reference values from.
            //        object dbPkValue = Reflection.GetPropertyValueByPath(iDbItem, relationShipPkName);
            //        //if (dbPkValue.GetType() == typeof(long) || dbPkValue.GetType() == typeof(long?))
            //        //{// if is long convert it to int so can compare objects of the same type otherwise  Long == int : false;  and won't be any element in the query
            //        //    dbPkValue = Convert.ToInt32(dbPkValue);
            //        //}
            //        //por cada item de la db, buscar su correspondiene en los uiItems matching by primaryKey value
            //        var iUiItem = listItems.Where(xy => Reflection.GetPropertyValueByPath(xy, relationShipPkName).Equals(dbPkValue)).First();
            //        PropertyInfo[] liProperties = Reflection.GetPropertiesWithoutAtribute<DoNotUpdateAttribute>(iUiItem);


            //        ChangesTracking.LogReferenceObject LogReference = ChangesTracking.GetLogReference(iUiItem);
            //        string FullReferenceText = logReferencePath;

            //        foreach (var uiItemProperty in liProperties)
            //        {
            //            var _returnObject = iDbItem;
            //            var _sourceObject = iUiItem;
            //            // setUpSimpleProperty(_sourceObject, uiItemProperty, ref _returnObject, ref  changesList,LogReference);

            //            if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(uiItemProperty))
            //            {
            //                DataBaseInfoAttribute uiItemProperty_dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(uiItemProperty);
            //                if (uiItemProperty_dbInfo.IsRelationShip && Attribute.IsDefined(uiItemProperty, typeof(ListTypeAttribute)))
            //                {
            //                    setUpRelationShipProperty(_sourceObject, uiItemProperty, ref _returnObject, ref changesList, ref path, logReferencePath);
            //                }                        
            //            }
            //            else
            //            {
            //                setUpSimpleProperty(_sourceObject, uiItemProperty, ref _returnObject, ref  changesList, LogReference.Text, sysComponentsIds, ref path, logReferencePath, LogReference.FieldDbNames);
            //            }
            //        }

            //    }
            //    #endregion

            //    #region "Inserts"
            //    /////INSERTS////////////////////////////////////////////////////////////////////////////////
            //    //PropertyInfo[] inserts= p.GetValue(sourceObject, null).GetType().GetProperties().Where(x => !HasDbIdentity(x)) as PropertyInfo[];
            //    var inserts = listItems.Where(li => Reflection.GetPropertyValueByPath(li, relationShipPkName) == null);

            //    if (inserts != null && inserts.Count() > 0)
            //    {
            //        foreach (var ins in inserts)
            //        {
            //            ChangesTracking.LogReferenceObject LogReferenceObj = ChangesTracking.GetLogReference(ins);

            //            string LogReference = LogReferenceObj.Text;
            //            var newItem = Activator.CreateInstance(dbInfo.RelationShipType);
            //            //var newItemProperties = dbInfo.RelationShipType.GetProperties().Where(x => !Attribute.IsDefined(x, typeof(isPrimaryKey)));
            //            var newItemProperties = ins.GetType().GetProperties().Where(x => !Attribute.IsDefined(x, typeof(IsPrimaryKey)));
            //            //PropertyInfo[] referenceProperties = Reflection.GetPropertiesByAtribute<LogReferenceAttribute>(sourceObject);
            //            // string LogReference = ChangesTracking.GetLogReference(ins);
            //            foreach (var nip in newItemProperties)
            //            {
            //                var _returnObject = newItem;
            //                var _sourceObject = ins;
            //                // setUpSimpleProperty(_sourceObject, nip, ref _returnObject, ref  changesList,LogReference);

            //                DataBaseInfoAttribute nip_dbInfo = null;
            //                if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(nip))
            //                {
            //                    nip_dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(nip);
            //                }

            //                if (nip_dbInfo != null && nip_dbInfo.IsRelationShip && Attribute.IsDefined(nip, typeof(ListTypeAttribute)))
            //                {
            //                    setUpRelationShipProperty(_sourceObject, nip, ref _returnObject, ref changesList, ref path, logReferencePath);
            //                }
            //                else
            //                {
            //                    //string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(_sourceObject).Name;
            //                    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //                    //var sysComponentsIds = ChangesTracking.GetSysComponentIDs(tableName);

            //                    setUpSimpleProperty(_sourceObject, nip, ref _returnObject, ref  changesList, LogReference, sysComponentsIds, ref path, logReferencePath, LogReferenceObj.FieldDbNames);
            //                }

            //                //var uiValue = Reflection.GetPropertyValueByPath(ins, nip.Name);
            //                //newItem.GetType().GetProperty(nip.Name).SetValue(newItem, uiValue, null);                
            //            }
            //            //Make sure we get the overload that takes 1 parameter and the parameter has the same type as our newItem
            //            MethodInfo Add = returnProperty.PropertyType.GetMethods().Where(x => x.Name == "Add" && x.GetParameters()[0].ParameterType == relationShipType).FirstOrDefault();
            //            Add.Invoke(returnProperty.GetValue(returnObject, null), new object[] { newItem });
            //        }
            //    }
            //    #endregion

            //    //shorten the path
            //    path = path.Replace("." + tableName, "");

            //}

            //public static void setUpOneToManyRelationShipProperty<T>(object sourceObject, PropertyInfo p, ref T returnObject, ref List<ChangesTracking.ChangeItem> changesList, ref string path, string logReferencePath)
            //{
            //    /*Changes Tracking:BEGIN*/
            //    string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p).RelationShipType.Name;
            //    path += "." + tableName;
            //    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //    var sysComponentsIds = ChangesTracking.GetSysComponentIDs(tableName);
            //    /*Changes Tracking:END*/


            //    DataBaseInfoAttribute dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p);
            //    ListTypeAttribute ListAttributes = Reflection.GetCustomAttribute<ListTypeAttribute>(p);
            //    Type relationShipType = dbInfo.RelationShipType; // v.g. tblLeadEmails                        
            //    // the list from UI
            //    IEnumerable<object> listItems = p.GetValue(sourceObject, null) as IEnumerable<object>;
            //    //The list from db     
            //    PropertyInfo returnProperty = Reflection.GetPropertyByName(returnObject, relationShipType.Name);
            //    //find out the PK's name so we can match by that name.
            //    var relationShipPkName = dbInfo.PrimaryKeyName;

            //    #region "Updates"
            //    /////UPDATES/////////////////////////////////////////////////////////////////////////
            //    foreach (var iDbItem in returnProperty.GetValue(returnObject, null) as IEnumerable)
            //    {
            //        //get list of Log Reference Names so we can know where to get the reference values from.
            //        object dbPkValue = Reflection.GetPropertyValueByPath(iDbItem, relationShipPkName);
            //        //if (dbPkValue.GetType() == typeof(long) || dbPkValue.GetType() == typeof(long?))
            //        //{// if is long convert it to int so can compare objects of the same type otherwise  Long == int : false;  and won't be any element in the query
            //        //    dbPkValue = Convert.ToInt32(dbPkValue);
            //        //}
            //        //por cada item de la db, buscar su correspondiene en los uiItems matching by primaryKey value
            //        var iUiItem = listItems.Where(xy => Reflection.GetPropertyValueByPath(xy, relationShipPkName).Equals(dbPkValue)).First();
            //        PropertyInfo[] liProperties = Reflection.GetPropertiesWithoutAtribute<DoNotUpdateAttribute>(iUiItem);


            //        ChangesTracking.LogReferenceObject LogReference = ChangesTracking.GetLogReference(iUiItem);
            //        string FullReferenceText = logReferencePath;

            //        foreach (var uiItemProperty in liProperties)
            //        {
            //            var _returnObject = iDbItem;
            //            var _sourceObject = iUiItem;
            //            // setUpSimpleProperty(_sourceObject, uiItemProperty, ref _returnObject, ref  changesList,LogReference);

            //            if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(uiItemProperty))
            //            {
            //                DataBaseInfoAttribute uiItemProperty_dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(uiItemProperty);
            //                if (uiItemProperty_dbInfo.IsRelationShip && Attribute.IsDefined(uiItemProperty, typeof(ListTypeAttribute)))
            //                {
            //                    setUpRelationShipProperty(_sourceObject, uiItemProperty, ref _returnObject, ref changesList, ref path, logReferencePath);
            //                }
            //            }
            //            else
            //            {
            //                setUpSimpleProperty(_sourceObject, uiItemProperty, ref _returnObject, ref  changesList, LogReference.Text, sysComponentsIds, ref path, logReferencePath, LogReference.FieldDbNames);
            //            }
            //        }

            //    }
            //    #endregion

            //    #region "Inserts"
            //    /////INSERTS////////////////////////////////////////////////////////////////////////////////
            //    //PropertyInfo[] inserts= p.GetValue(sourceObject, null).GetType().GetProperties().Where(x => !HasDbIdentity(x)) as PropertyInfo[];
            //    var inserts = listItems.Where(li => Reflection.GetPropertyValueByPath(li, relationShipPkName) == null);

            //    if (inserts != null && inserts.Count() > 0)
            //    {
            //        foreach (var ins in inserts)
            //        {
            //            ChangesTracking.LogReferenceObject LogReferenceObj = ChangesTracking.GetLogReference(ins);

            //            string LogReference = LogReferenceObj.Text;
            //            var newItem = Activator.CreateInstance(dbInfo.RelationShipType);
            //            //var newItemProperties = dbInfo.RelationShipType.GetProperties().Where(x => !Attribute.IsDefined(x, typeof(isPrimaryKey)));
            //            var newItemProperties = ins.GetType().GetProperties().Where(x => !Attribute.IsDefined(x, typeof(IsPrimaryKey)));
            //            //PropertyInfo[] referenceProperties = Reflection.GetPropertiesByAtribute<LogReferenceAttribute>(sourceObject);
            //            // string LogReference = ChangesTracking.GetLogReference(ins);
            //            foreach (var nip in newItemProperties)
            //            {
            //                var _returnObject = newItem;
            //                var _sourceObject = ins;
            //                // setUpSimpleProperty(_sourceObject, nip, ref _returnObject, ref  changesList,LogReference);

            //                DataBaseInfoAttribute nip_dbInfo = null;
            //                if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(nip))
            //                {
            //                    nip_dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(nip);
            //                }

            //                if (nip_dbInfo != null && nip_dbInfo.IsRelationShip && Attribute.IsDefined(nip, typeof(ListTypeAttribute)))
            //                {
            //                    setUpRelationShipProperty(_sourceObject, nip, ref _returnObject, ref changesList, ref path, logReferencePath);
            //                }
            //                else
            //                {
            //                    //string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(_sourceObject).Name;
            //                    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //                    //var sysComponentsIds = ChangesTracking.GetSysComponentIDs(tableName);

            //                    setUpSimpleProperty(_sourceObject, nip, ref _returnObject, ref  changesList, LogReference, sysComponentsIds, ref path, logReferencePath, LogReferenceObj.FieldDbNames);
            //                }

            //                //var uiValue = Reflection.GetPropertyValueByPath(ins, nip.Name);
            //                //newItem.GetType().GetProperty(nip.Name).SetValue(newItem, uiValue, null);                
            //            }
            //            //Make sure we get the overload that takes 1 parameter and the parameter has the same type as our newItem
            //            MethodInfo Add = returnProperty.PropertyType.GetMethods().Where(x => x.Name == "Add" && x.GetParameters()[0].ParameterType == relationShipType).FirstOrDefault();
            //            Add.Invoke(returnProperty.GetValue(returnObject, null), new object[] { newItem });
            //        }
            //    }
            //    #endregion

            //    //shorten the path
            //    path = path.Replace("." + tableName, "");

            //}             

            //public static void setUpOneToOneRelationShipProperty<T>(object sourceObject, PropertyInfo p, ref T returnObject, ref List<ChangesTracking.ChangeItem> changesList, ref string path, string logReferencePath)
            //{
            //    /*Changes Tracking:BEGIN*/
            //    string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p).RelationShipType.Name;
            //    path += "." + tableName;
            //    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //    var sysComponentsIds = ChangesTracking.GetSysComponentIDs(tableName);
            //    /*Changes Tracking:END*/


            //    DataBaseInfoAttribute dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p);
            //    Type relationShipType = dbInfo.RelationShipType; // v.g. tblLeadEmails

            //    PropertyInfo returnProperty = Reflection.GetPropertyByName(returnObject, relationShipType.Name);
            //    IEnumerable returnPropertyValue = (IEnumerable)returnProperty.GetValue(returnObject, null);

            //    //find out the PK's name so we can match by that name.

            //    var relationShipPkName = dbInfo.PrimaryKeyName;

            //    object sourcePropertyValue = p.GetValue(sourceObject, null);
            //    object first = returnPropertyValue.Cast<object>().FirstOrDefault();

            //    if (returnPropertyValue.Cast<object>().Count() <= 0)
            //    {         
            //        first = Activator.CreateInstance(dbInfo.RelationShipType);
            //    }
            //    ChangesTracking.LogReferenceObject LogReferenceObj = ChangesTracking.GetLogReference(sourceObject);
            //    string LogReference = "";
            //    LogReference = LogReferenceObj.Text;

            //    foreach(var sp in Reflection.GetPropertiesWithoutAtribute<IsPrimaryKey>(sourcePropertyValue)){                
            //        //setUpRelationShipProperty(sourcePropertyValue, sp, ref first, ref changesList, ref path, logReferencePath);
            //        setUpSimpleProperty(sourcePropertyValue, sp, ref first, ref  changesList, LogReference, sysComponentsIds, ref path, logReferencePath, LogReferenceObj.FieldDbNames);
            //    }

            //    if (returnPropertyValue.Cast<object>().Count() <= 0)
            //    {
            //        MethodInfo Add = returnProperty.PropertyType.GetMethods().Where(x => x.Name == "Add" && x.GetParameters()[0].ParameterType == relationShipType).FirstOrDefault();
            //        Add.Invoke(returnProperty.GetValue(returnObject, null), new object[] { first });

            //    }

            //    //shorten the path
            //    path = path.Replace("." + tableName, "");

            //}


            //public static void setUpSimpleProperty<T>(object sourceObject, PropertyInfo p, ref T returnObject, ref List<Utils.ChangesTracking.ChangeItem> changesList, string LogReference, IDictionary<string, int> sysComponentIds, ref string path, string logReferencePath, List<string> LogReferenceDbFieldNames)
            //{

            //    string dbFieldName = Reflection.GetDbNameOrDefault(p);
            //    string uiFieldName = p.Name;

            //    //object dbValue = returnObject.GetType().GetProperty(dbFieldName).GetValue(returnObject, null);
            //    object dbValue = Reflection.GetPropertyValueByPath(returnObject, dbFieldName);
            //    //object uiValue = sourceObject.GetType().GetProperty(uiFieldName).GetValue(sourceObject, null);
            //    object uiValue = Reflection.GetPropertyValueByPath(sourceObject, uiFieldName);

            //    if(uiValue != null)
            //    {
            //        if (uiValue.GetType() == typeof(Guid) && !Reflection.HasDbIdentity((Guid)uiValue)) {
            //         uiValue = null;
            //        }
            //        else if (uiValue.GetType() == typeof(int) && !Reflection.HasDbIdentity((int)uiValue))
            //        {
            //            uiValue = null;
            //        }
            //    }
            //    //prevent foreign key errors because 0 is not a valid db value for a keyField
            //    //if (!Reflection.HasDbIdentity(p)){

            //    //}

            //    bool valuesAreDiferent = ChangesTracking.ValuesAreDifferent(dbValue, uiValue);

            //    //if (dbValue == null && uiValue == null)
            //    //{
            //    //    valuesAreDiferent = false;
            //    //}             
            //    //else if ((dbValue == null && uiValue != null) || (dbValue != null && uiValue == null)) {
            //    //    valuesAreDiferent = true;
            //    //}
            //    //else if (dbValue.ToString() == uiValue.ToString())
            //    //{
            //    //    valuesAreDiferent = false;
            //    //}
            //    //else if (!dbValue.Equals(uiValue))
            //    //{
            //    //    valuesAreDiferent = true;
            //    //}
            //    //else if (dbValue.Equals(uiValue))
            //    //{
            //    //    valuesAreDiferent = false;
            //    //}            
            //    //else { valuesAreDiferent = true; }

            //    if (valuesAreDiferent)
            //    {
            //        if (!Reflection.HasCustomAttribute<DoNotTrackChangesAttribute>(p))
            //        {
            //            PropertyInfo pk = Reflection.GetPropertyByAtribute<IsPrimaryKey>(sourceObject);

            //            object dbPkValue = Reflection.GetPropertyValueByPath(sourceObject, pk.Name);

            //            ChangesTracking.ChangeItem change = new ChangesTracking.ChangeItem();

            //            change.CurrentValue = (uiValue != null) ? uiValue.ToString() : "";
            //            //change.CurrentValueObj = (uiValue != null) ? uiValue : null;
            //            change.PreviousValue = (dbValue != null) ? dbValue.ToString() : "";
            //            change.ReferenceID = (dbPkValue != null) ? dbPkValue.ToString() : "";
            //            change.ReferenceText = LogReference;
            //            change.SysComponent = dbFieldName;
            //            change.SysComponentID = sysComponentIds[dbFieldName];
            //            change.Path = path;
            //            change.PkName = Reflection.GetDbNameOrDefault(pk);

            //            if (logReferencePath != LogReference)
            //            {
            //                change.FullReferenceText = logReferencePath + ">" + LogReference;
            //            }
            //            else { change.FullReferenceText = logReferencePath; }
            //            //change.FullReferenceText = logReferencePath + ">" + LogReference;
            //            change.LogReferenceDbFieldNames = LogReferenceDbFieldNames;
            //            changesList.Add(change);
            //        }
            //        returnObject.GetType().GetProperty(dbFieldName).SetValue(returnObject, uiValue, null);
            //    }
            //}            

            ////public static void fillUiObject<T>(ref T uiObject, object sourceObject) {
            ////    foreach (var p in uiObject.GetType().GetProperties())
            ////    {
            ////        if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(p))
            ////        {
            ////            DataBaseInfoAttribute dbi = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p);
            ////            if (dbi.IsRelationShip == true)
            ////            {
            ////                var dbName = dbi.RelationShipType.Name;
            ////                IEnumerable<object> dbValue = Reflection.GetPropertyValueByPath(sourceObject, dbName) as IEnumerable<object>;
            ////                ListTypeAttribute uiListType = Reflection.GetCustomAttribute<ListTypeAttribute>(p);
            ////                IList list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(uiListType.SingleItemType));

            ////                foreach (var li in dbValue)
            ////                {
            ////                    var newLi = Activator.CreateInstance(uiListType.SingleItemType);
            ////                    foreach (var q in newLi.GetType().GetProperties())
            ////                    {
            ////                        var _dbName = Reflection.GetDbNameOrDefault(q);
            ////                        var _dbValue = li.GetType().GetProperty(_dbName).GetValue(li, null);
            ////                        q.SetValue(newLi, _dbValue, null);
            ////                    }
            ////                    list.Add(newLi);
            ////                }

            ////                if (list.Count > 0)
            ////                {
            ////                    p.SetValue(uiObject, list, null);
            ////                }
            ////            }
            ////            else
            ////            {
            ////                var dbName = dbi.Name;
            ////                var dbValue = sourceObject.GetType().GetProperty(dbName).GetValue(sourceObject, null);
            ////                p.SetValue(uiObject, dbValue, null);
            ////            }
            ////        }


            ////    }

            ////}



            //public static void dataSetUp<T>(object sourceObject, ref T destinationObject, ref List<ChangesTracking.ChangeItem> changesList)
            //{
            //    string path = "";

            //    ChangesTracking.LogReferenceObject LogReferenceObj = ChangesTracking.GetLogReference(sourceObject);

            //    string LogReference = "";
            //    LogReference = LogReferenceObj.Text;

            //    Type dbInfoAttr = typeof(DataBaseInfoAttribute);
            //    //var props = sourceObject.GetType().GetProperties().Where(prop => Attribute.IsDefined(prop, dbInfoAttr));
            //    var props = Reflection.GetPropertiesByAtribute<DataBaseInfoAttribute>(sourceObject);
            //    //get the syscomponents names base on simple propertyNames

            //    //get table name for syscomponents
            //    Type sourceObjType = sourceObject.GetType();
            //    //para el siguiente c
            //    DataBaseInfoAttribute sourceObjectDbInfo = (DataBaseInfoAttribute)Attribute.GetCustomAttribute(sourceObjType, typeof(DataBaseInfoAttribute));

            //    //string tableName = sourceObjectDbInfo.Name;
            //    string tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(sourceObject).Name;

            //    // path =  tableName;
            //    //IDictionary<string, int> sysComponents = ChangesTracking.GetSysComponentIDs(tableName);
            //    var sysComponentsId = ChangesTracking.GetSysComponentIDs(tableName);

            //    foreach (var p in props)
            //    {
            //        DataBaseInfoAttribute dbInfo = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(p);
            //        if (dbInfo.IsRelationShip)
            //        {
            //            if (dbInfo.Cardinality == DataBaseRelationShipCardinality.OneToMany && Attribute.IsDefined(p, typeof(ListTypeAttribute)))
            //            {
            //                setUpOneToManyRelationShipProperty<T>(sourceObject, p, ref destinationObject, ref changesList, ref path, LogReference);
            //            }
            //            else if (dbInfo.Cardinality == DataBaseRelationShipCardinality.OneToOne)
            //            {
            //                setUpOneToOneRelationShipProperty<T>(sourceObject, p, ref destinationObject, ref changesList, ref path, LogReference);
            //            }
            //        }
            //        else
            //        {
            //            setUpSimpleProperty(sourceObject, p, ref destinationObject, ref changesList, LogReference, sysComponentsId, ref path, LogReference, LogReferenceObj.FieldDbNames);
            //        }
            //    }
            //}
            public AttemptResponse TryToCreate(List<KeyValuePair<string, object>> instancesCollection)
            {
                AttemptResponse response = new AttemptResponse();
                try
                {
                    List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                    List<ChangesTracking.OnValueChangedItem> onValueChanged_updates = new List<ChangesTracking.OnValueChangedItem>();
                    LeadModel.Fields.LeadGeneralInformation lgim = new LeadModel.Fields.LeadGeneralInformation();

                    var currentUser = session.UserID;
                    //var lead = instancesCollection.Single(m => m.Key == "tblLeads").Value;
                    var lead = (tblLeads)instancesCollection.Single(m => m.Key == "tblLeads").Value;
                    lead.GetType().GetProperty("leadID").SetValue(lead, Guid.NewGuid(), null);
                    lead.GetType().GetProperty("inputByUserID").SetValue(lead, currentUser, null);
                    lead.GetType().GetProperty("inputDateTime").SetValue(lead, DateTime.Now, null);
                    lead.GetType().GetProperty("deleted").SetValue(lead, false, null);
                    lead.GetType().GetProperty("isTest").SetValue(lead, false, null);
                    lead.GetType().GetProperty("inputMethodID").SetValue(lead, 2, null);
                    object reservation = new object();
                    object presentation = new object();

                    var lead1 = new tblLeads
                    {
                        leadID = lead.leadID,
                        inputByUserID = lead.inputByUserID,
                        inputDateTime = lead.inputDateTime,
                        deleted = lead.deleted,
                        isTest = lead.isTest,
                        inputMethodID = lead.inputMethodID
                    };

                    foreach (var instance in instancesCollection)
                    {
                        //object fo;
                        if (instance.Key != "tblLeads")
                        {
                            switch (instance.Key)
                            {
                                case "tblInteractions":
                                    {
                                        instance.Value.GetType().GetProperty("savedByUserID").SetValue(instance.Value, currentUser, null);
                                        instance.Value.GetType().GetProperty("dateSaved").SetValue(instance.Value, DateTime.Now, null);
                                        //Utils.Custom.Reflection.FillWith(lgim, instance.Value);
                                        //fo = (object)new tblInteractions();
                                        break;
                                    }
                                case "tblReservations":
                                    {
                                        instance.Value.GetType().GetProperty("reservationID").SetValue(instance.Value, Guid.NewGuid(), null);
                                        instance.Value.GetType().GetProperty("deleted").SetValue(instance.Value, false, null);
                                        instance.Value.GetType().GetProperty("isTest").SetValue(instance.Value, false, null);
                                        instance.Value.GetType().GetProperty("dateSaved").SetValue(instance.Value, DateTime.Now, null);
                                        reservation = instance.Value;
                                        //Utils.Custom.Reflection.FillWith(lgim, reservation);
                                        //fo = (object)new tblReservations();
                                        break;
                                    }
                                case "tblPresentations":
                                    {
                                        instance.Value.GetType().GetProperty("dateSaved").SetValue(instance.Value, DateTime.Now, null);
                                        PropertyInfo reservationProperty = reservation.GetType().GetProperty(instance.Key);
                                        MethodInfo reservationMethod = reservationProperty.PropertyType.GetMethod("Add");
                                        reservationMethod.Invoke(reservationProperty.GetValue(reservation, null), new object[] { instance.Value });
                                        presentation = instance.Value;
                                        //Utils.Custom.Reflection.FillWith(lgim, presentation);
                                        //fo = (object)new tblPresentations();
                                        break;
                                    }
                                case "tblContractsHistory":
                                    {
                                        instance.Value.GetType().GetProperty("dateSaved").SetValue(instance.Value, DateTime.Now, null);
                                        PropertyInfo presentationProperty = presentation.GetType().GetProperty(instance.Key);
                                        MethodInfo presentationMethod = presentationProperty.PropertyType.GetMethod("Add");
                                        presentationMethod.Invoke(presentationProperty.GetValue(presentation, null), new object[] { instance.Value });
                                        //Utils.Custom.Reflection.FillWith(lgim, instance.Value);
                                        //fo = (object)new tblContractsHistory();
                                        break;
                                    }
                            }
                            //object value = property.GetValue(lead, null);
                            //validar que la instancia actual esté relacionada con leads.

                            //ListLogs.Add(new LeadModel.Import.TrackLogsImportModel()
                            //{
                            //    ReturnObject = instance.Value,
                            //    ListChanges = changes
                            //});
                            try
                            {
                                PropertyInfo property = lead.GetType().GetProperty(instance.Key);
                                MethodInfo method = property.PropertyType.GetMethod("Add");
                                method.Invoke(property.GetValue(lead, null), new object[] { instance.Value });
                            }
                            catch { }
                        }
                    }

                    Utils.Custom.Reflection.FillWith(lgim, lead);
                    //object fo = (object)new tblLeads();
                    object fo = (object)lead1;//because of this line, dataSetUp does not detect changes because lead instance is not empty
                    Utils.Custom.Reflection.dataSetUp(lgim, ref fo, ref changes, ref onValueChanged_updates);
                    //lead = (tblLeads)fo;

                    db.tblLeads.AddObject(lead);
                    db.SaveChanges();
                    ChangesTracking.GetMissingReferenceIDs(lead, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.ObjectID = 0;
                    response.Message = "Lead(s) Saved";
                    return response;
                    //tblLeads leadp = new tblLeads()
                    //{

                    #region "Required Fields(Commented Code)"
                    //// set fields required for internal control and to avoid SQL errors due to "No Null" restrictions.
                    //// this information needs to be populated only in the "Create" since in the "Update" method 
                    ////only the modified info gets updated 
                    //#region "Internal Control"
                    //#region "predefined values"
                    ////initialTerminalID = lgim.GeneralInformation_TerminalID,
                    ////leadStatusID = lgim.GeneralInformation_LeadStatusID,
                    //#endregion
                    ////terminalID = lgim.GeneralInformation_TerminalID,
                    //inputByUserID = (Guid)Membership.GetUser().ProviderUserKey,
                    //inputDateTime = DateTime.Now,
                    ////inputMethodID = lgim.GeneralInformation_InputMethodID,
                    //deleted = false,
                    //isTest = false,
                    //leadID = Guid.NewGuid(),
                    //#endregion
                    //#region "Lead General Information"
                    ////firstName = lgim.GeneralInformation_FirstName,
                    ////lastName = lgim.GeneralInformation_LastName,
                    //#endregion

                    //#endregion
                    //#region "Non-required Fields"
                    //#region "Internal Control"

                    //#endregion
                    //#region "Lead General Information"
                    ////email = lgim.GeneralInformation_Email
                    //#endregion
                    //#endregion
                    //};

                    //dummy response:
                    //response.Type = Attempt_ResponseTypes.Ok;
                    //response.ObjectID = lead.leadID;
                    //response.Message = "Lead Saved";
                    ////response.Exception = null;
                    //return response;

                    //db.tblLeads.Add(lead);
                    //this.Save();
                    #endregion

                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    response.Exception = ex;
                    messageFlag = false;
                    response.Message = "Lead(s) NOT Saved";
                    return response;
                }
            }

            //-// Database manipulation actions
            /// <summary>
            /// Tries to create a lead.
            /// </summary>
            /// <param name="lgim">The lead general information model with the information needed to create the new lead.</param>
            /// <returns>The leadID or error message</returns>
            public AttemptResponse TryToCreate(LeadModel.Fields.LeadGeneralInformation lgim)
            {
                AttemptResponse response = new AttemptResponse();
                var now = DateTime.Now;
                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChanged_updates = new List<ChangesTracking.OnValueChangedItem>();
                var currentUser = session.UserID;

                //inject the new lead ID onthe source model so the setUp can have it.
                // this is only needed in the "Create" method, because the update already have this value on the lgim
                lgim.GeneralInformation_LeadID = Guid.NewGuid();

                tblLeads lead = new tblLeads()
                {
                    #region "Required Fields"
                    // set fields required for internal control and to avoid SQL errors due to "No Null" restrictions.
                    // this information needs to be populated only in the "Create" since in the "Update" method 
                    //only the modified info gets updated 
                    #region "Internal Control"
                    #region "predefined values"
                    initialTerminalID = lgim.GeneralInformation_TerminalID, //
                    terminalID = lgim.GeneralInformation_TerminalID,
                    //leadStatusID = lgim.GeneralInformation_LeadStatusID,
                    #endregion
                    //inputByUserID = (Guid)Membership.GetUser().ProviderUserKey,
                    inputByUserID = currentUser,
                    inputDateTime = now,
                    inputMethodID = lgim.GeneralInformation_InputMethodID,
                    deleted = false,
                    isTest = false,
                    leadID = (Guid)lgim.GeneralInformation_LeadID // It was just generated and injected on the model
                    #endregion
                    #endregion
                };

                //if (Utils.GeneralFunctions.IsUserInRole("Agent", currentUser))

                //if (lgim.GeneralInformation_AssignedToUserID != Guid.Empty)
                //{
                //    lead.assignedToUserID = lgim.GeneralInformation_AssignedToUserID;
                //}
                //else if (Utils.GeneralFunctions.IsUserInRole("Agent", currentUser, true))
                //{ //if it is an agent who is entering the lead, make sure 
                //    //that lead gets assigned to that user, so that user can still see that lead.
                //    lead.assignedToUserID = currentUser;
                //}

                if (Utils.GeneralFunctions.IsUserInRole("Agent", currentUser, true))
                { //if it is an agent who is entering the lead, make sure 
                    //that lead gets assigned to that user, so that user can still see that lead.
                    lead.assignedToUserID = currentUser;
                    lgim.GeneralInformation_AssignedToUserID = currentUser;
                    lead.assignationDate = now;
                    lgim.GeneralInformation_AssignationDate = now;
                }

                tblMemberInfo cosa = new tblMemberInfo();
                // Deal with the rest of the fields
                //Utils.Custom.Reflection.dataSetUp<tblLeads>(lgim, ref lead, ref changes);

                //Utils.Custom.Reflection.dataSetUp(lgim, ref x, ref changes);
                object fo = (object)lead;
                Utils.Custom.Reflection.dataSetUp(lgim, ref fo, ref changes, ref onValueChanged_updates);
                lead = (tblLeads)fo;



                try
                {
                    db.tblLeads.AddObject(lead);
                    //db.AddTotblLeads
                    //db.AddObject()
                    this.Save();
                    ChangesTracking.GetMissingReferenceIDs(lead, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.ObjectID = lead.leadID;
                    response.Message = "Lead Saved";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Lead NOT Saved";
                    return response;
                }
            }

            /// <summary>
            /// Tries to update a lead.
            /// </summary>
            /// <param name="lgim">The lead general information model with the information needed to update a lead.</param>
            /// <returns>The leadID or error message</returns>
            public AttemptResponse TryToUpdate(LeadModel.Fields.LeadGeneralInformation lgim)
            {
                AttemptResponse response = new AttemptResponse();
                tblLeads lead = db.tblLeads.Single(l => l.leadID == lgim.GeneralInformation_LeadID);
                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChangedList = new List<ChangesTracking.OnValueChangedItem>();
                DateTime now = DateTime.Now;

                object fo = (object)lead;
                Utils.Custom.Reflection.dataSetUp(lgim, ref fo, ref changes, ref onValueChangedList);
                lead = (tblLeads)fo;

                //make sure we save the modification date/time and who.
                lead.modificationDate = DateTime.Now;
                lead.modifiedByUserID = session.UserID;

                //next block of code was moved at the end of the "Utils.Custom.Reflection.dataSetUp" method.
                //if(onValueChangedList.Count > 0){
                //    foreach (ChangesTracking.OnValueChangedItem changedValue in onValueChangedList)
                //    {
                //        Utils.Custom.Reflection.SetPropertyValueByPath(lead, changedValue.Target,changedValue.Value);
                //    }

                //}

                try
                {
                    var arrivalDate = lead.tblReservations != null && lead.tblReservations.Count() > 0 ? lead.tblReservations.FirstOrDefault().arrivalDate : null;
                    //if (lead.bookingStatusID == 1 && arrivalDate != null && ((arrivalDate.Value - now).TotalHours > 0) && ((arrivalDate.Value - now).TotalHours <= 24))
                    if (lead.bookingStatusID == 1 && arrivalDate != null && ((arrivalDate.Value - now).TotalHours > 0) && ((arrivalDate.Value - now).TotalHours <= 24) && !GeneralFunctions.IsUserInRole("Administrator", null, true) && !GeneralFunctions.IsUserInRole("Supervisor"))
                    {
                        throw new Exception("Cannot set as Pre-Booked a lead within 24 hrs prior its arrival date");
                    }
                    this.Save();
                    // la siguiente linea no estaba, pero segun yo, sí se estaban guardando las modificaciones, verificar.
                    ChangesTracking.GetMissingReferenceIDs(lead, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.ObjectID = lead.leadID;
                    response.Message = "Lead Updated";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = lgim.GeneralInformation_LeadID;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Lead NOT Updated";
                    return response;
                }
            }
            //- Methods "TryToCreate" and "TryToUpdate" are separated because when it is an IMPORT we dont't 
            //- want to know wheather it is a new or updated lead, in the import is always a new lead so we dont't
            //- want the exetucion stop in the if condicion.            

            public AttemptResponse TryToDelete(Guid LeadID)
            {
                AttemptResponse response = new AttemptResponse();
                tblLeads lead = db.tblLeads.Single(l => l.leadID == LeadID);
                lead.deleted = true;
                lead.dateDeleted = DateTime.Now;
                lead.deletedByUserID = session.UserID;

                var osm = db.ObjectStateManager;

                var news = osm.GetObjectStateEntries(System.Data.EntityState.Added);
                var updates = osm.GetObjectStateEntries(System.Data.EntityState.Added);

                try
                {
                    this.Save();


                    response.Type = Attempt_ResponseTypes.Ok;
                    response.ObjectID = lead.leadID;
                    response.Message = "Lead Deleted";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Lead NOT Deleted.";
                    return response;
                }
            }

            public void Save()
            {


                db.SaveChanges();
            }

            public List<LeadModel.Views.ItemLogsModel> GetItemLogs(string referenceID, string referenceText)
            {
                ePlatEntities db = new ePlatEntities();
                List<LeadModel.Views.ItemLogsModel> list = Utils.GeneralFunctions.GetItemLogs(null, referenceID, referenceText);
                return list;
            }
        }

        public class HotelReservation
        {
            ePlatEntities db = new ePlatEntities();

            public HotelReservationModel.Fields.ReservationGeneralInformation Find(Guid ReservationID)
            {
                var reservation = (from x in db.tblReservations where x.reservationID == ReservationID select x).Single();
                HotelReservationModel.Fields.ReservationGeneralInformation rgim = new HotelReservationModel.Fields.ReservationGeneralInformation();
                rgim.FillWith(reservation);
                return rgim;
            }

            public List<HotelReservationModel.Items.ReservationSearchResults> SearchReservations(Guid LeadID)
            {
                var reservations = from x in db.tblReservations where x.leadID == LeadID select x;
                //LeadModel.Fields.LeadGeneralInformation gim = new LeadModel.Fields.LeadGeneralInformation();

                List<HotelReservationModel.Items.ReservationSearchResults> reservationsList = new List<HotelReservationModel.Items.ReservationSearchResults>();

                foreach (var r in reservations)
                {
                    HotelReservationModel.Items.ReservationSearchResults reservation = new HotelReservationModel.Items.ReservationSearchResults();
                    r.hotelConfirmationNumber = r.hotelConfirmationNumber ?? "Not Set";//to prevent non-visible tableRows
                    reservation.FillWith(r);
                    reservationsList.Add(reservation);
                }
                //gim.FillWith(lead);
                return reservationsList;
            }

            public AttemptResponse TryToCreate(HotelReservationModel.Fields.ReservationGeneralInformation rgi)
            {
                AttemptResponse response = new AttemptResponse();

                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChangedList = new List<ChangesTracking.OnValueChangedItem>();

                rgi.ReservationID = Guid.NewGuid();

                tblReservations reservation = new tblReservations();

                // Deal with the rest of the fields
                object fo = (object)reservation;
                Utils.Custom.Reflection.dataSetUp(rgi, ref fo, ref changes, ref onValueChangedList);
                reservation = (tblReservations)fo;
                try
                {
                    db.tblReservations.AddObject(reservation);
                    this.Save();
                    ChangesTracking.GetMissingReferenceIDs(reservation, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    var objectIDs = new { LeadID = reservation.leadID, ReservationID = reservation.reservationID };
                    response.ObjectID = objectIDs;
                    //response.ObjectID = reservation.leadID;
                    response.Message = "Reservation Saved";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Reservation NOT Saved";
                    return response;
                }
            }

            public AttemptResponse TryToUpdate(HotelReservationModel.Fields.ReservationGeneralInformation rgi)
            {
                AttemptResponse response = new AttemptResponse();
                tblReservations reservation = db.tblReservations.Single(r => r.reservationID == rgi.ReservationID);
                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChangedList = new List<ChangesTracking.OnValueChangedItem>();

                //Utils.Custom.Reflection.dataSetUp<tblReservations>(rgi, ref  reservation, ref changes);
                object fo = (object)reservation;
                Utils.Custom.Reflection.dataSetUp(rgi, ref fo, ref changes, ref onValueChangedList);
                reservation = (tblReservations)fo;
                try
                {
                    this.Save();
                    // la siguiente linea no estaba, pero segun yo, sí se estaban guardando las modificaciones, verificar.
                    ChangesTracking.GetMissingReferenceIDs(reservation, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    //response.ObjectID = reservation.reservationID;

                    //dynamic objectIDs = new System.Dynamic.ExpandoObject();
                    //objectIDs.LeadID=reservation.leadID;
                    //objectIDs.ReservationID = reservation.reservationID;

                    var objectIDs = new { LeadID = reservation.leadID, ReservationID = reservation.reservationID };

                    response.ObjectID = objectIDs;

                    response.Message = "Reservation Updated";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Reservation NOT Updated";
                    return response;
                }
            }

            public void Save()
            {
                db.SaveChanges();
            }

            public AttemptResponse SendLetter(object targetID, int eventID)
            {
                ePlatEntities db = new ePlatEntities();

                tblEmailNotifications _notification = new tblEmailNotifications();
                tblEmailNotificationLogs log = new tblEmailNotificationLogs();
                AttemptResponse response = new AttemptResponse();

                try
                {
                    var _requiredFields = "";
                    var _event = db.tblSysEvents.Single(m => m.eventID == eventID);
                    System.Net.Mail.MailMessage email = new System.Net.Mail.MailMessage();
                    //email.Body = email.Body;

                    var _clientName = "";
                    var _resort = "";
                    var _location = "";
                    var _destination = "";
                    var _arrivalDate = "";
                    var _presentationDateTime = "";
                    var _hotelConfirmation = "";
                    var _leadEmails = "";
                    var _sentByUser = "";
                    var _assignedToUser = "";
                    var _sentByUserEmail = "";

                    switch (_event.queryTarget)
                    {
                        case "reservation"://default culture en-US
                            {
                                #region "reservation"
                                var rsvID = Guid.Parse(targetID.ToString());
                                var query = db.tblReservations.Single(m => m.reservationID == rsvID);
                                log.reservationID = rsvID;

                                var emailNotifications = from notif in db.tblEmailNotifications
                                                         join dest in db.tblEmailNotifications_Destinations on notif.emailNotificationID equals dest.emailNotificationID into notif_dest
                                                         from dest in notif_dest.DefaultIfEmpty()
                                                         join place in db.tblEmailNotifications_Places on notif.emailNotificationID equals place.emailNotificationID into notif_place
                                                         from place in notif_place.DefaultIfEmpty()
                                                         join source in db.tblEmailNotifications_LeadSources on notif.emailNotificationID equals source.emailNotificationID into notif_source
                                                         from source in notif_source.DefaultIfEmpty()
                                                         join status in db.tblEmailNotifications_LeadStatus on notif.emailNotificationID equals status.emailNotificationID into notif_status
                                                         from status in notif_status.DefaultIfEmpty()
                                                         join bstatus in db.tblEmailNotifications_BookingStatus on notif.emailNotificationID equals bstatus.emailNotificationID into notif_bstatus
                                                         from bstatus in notif_bstatus.DefaultIfEmpty()
                                                         where notif.eventID == _event.eventID
                                                         && notif.active == true
                                                         && notif.terminalID == query.tblLeads.terminalID
                                                         && (dest.destinationID == query.destinationID || dest == null)
                                                         && (place.placeID == query.placeID || place == null)
                                                         && (source.leadSourceID == query.tblLeads.leadSourceID || source == null)
                                                         && (status.leadStatusID == query.tblLeads.leadStatusID || status == null)
                                                         && (bstatus.bookingStatusID == query.tblLeads.bookingStatusID || bstatus == null)
                                                         select notif;
                                _notification = emailNotifications.Count() > 1 ? emailNotifications.FirstOrDefault(m => m.tblEmails.culture == "en-US") : emailNotifications.Count() > 0 ? emailNotifications.FirstOrDefault() : null;
                                if (_notification == null)
                                {
                                    throw new Exception("There is NONE active notification rule for this reservation");
                                }
                                var requiredFields = _notification.requiredFields != null ? GeneralFunctions.RequiredFields.Where(m => _notification.requiredFields.Split(',').ToArray().Contains(m.Key)).Select(m => m.Value) : null;

                                if (requiredFields != null)
                                {
                                    foreach (var field in requiredFields)
                                    {
                                        #region "required fields"
                                        switch (field)
                                        {
                                            case "First Name":
                                                {
                                                    if (query.tblLeads.firstName == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Last Name":
                                                {
                                                    if (query.tblLeads.lastName == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Email":
                                                {
                                                    if (query.tblLeads.tblLeadEmails == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Hotel Confirmation Number":
                                                {
                                                    if (query.hotelConfirmationNumber == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Arrival Date":
                                                {
                                                    if (query.arrivalDate == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Destination":
                                                {
                                                    if (query.destinationID == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Resort":
                                                {
                                                    if (query.placeID == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Presentation Date":
                                                {
                                                    if (query.tblPresentations != null)
                                                    {
                                                        if (query.tblPresentations.FirstOrDefault().datePresentation == null)
                                                        {
                                                            _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Presentation Time":
                                                {
                                                    if (query.tblPresentations != null)
                                                    {
                                                        if (query.tblPresentations.FirstOrDefault().timePresentation == null)
                                                        {
                                                            _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                        }
                                        #endregion
                                    }
                                }

                                _leadEmails = _notification.copyLead != null && (bool)_notification.copyLead ? string.Join(",", query.tblLeads.tblLeadEmails.Select(m => m.email)) : "";

                                if (_requiredFields != "")
                                {
                                    throw new Exception("These fields cannot be empty:<br />" + _requiredFields);
                                }

                                #region "words to replace"
                                _clientName = query.tblLeads.firstName + " " + query.tblLeads.lastName;
                                _resort = query.placeID != null ? query.tblPlaces.place : "";
                                _location = query.arrivalDate > DateTime.Parse("2018-04-30", CultureInfo.InvariantCulture) && (_notification.emailNotificationID == 71 || _notification.emailNotificationID == 72) ? "Villa La Valencia" : "Villa del Arco";
                                _arrivalDate = query.arrivalDate != null ? ((DateTime)query.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                                _presentationDateTime = query.tblPresentations != null ? ((DateTime)query.tblPresentations.FirstOrDefault().datePresentation).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) + " " + ((TimeSpan)query.tblPresentations.FirstOrDefault().timePresentation).ToString(@"hh\:mm") : "";
                                _hotelConfirmation = query.hotelConfirmationNumber ?? "";
                                #endregion

                                email = Utils.EmailNotifications.GetEmailByNotification(_notification.emailNotificationID);
                                email.From = new System.Net.Mail.MailAddress(session.Email, session.User);
                                email.Subject = _resort + " Confirmation (" + _clientName + ") " + _arrivalDate;
                                break;
                                #endregion
                            }
                        case "diamante":
                            {
                                #region "diamante email"
                                var rsvID = Guid.Parse(targetID.ToString());
                                var query = db.tblReservations.Single(m => m.reservationID == rsvID);
                                log.reservationID = rsvID;

                                var emailNotifications = from notif in db.tblEmailNotifications
                                                         join dest in db.tblEmailNotifications_Destinations on notif.emailNotificationID equals dest.emailNotificationID into notif_dest
                                                         from dest in notif_dest.DefaultIfEmpty()
                                                         join place in db.tblEmailNotifications_Places on notif.emailNotificationID equals place.emailNotificationID into notif_place
                                                         from place in notif_place.DefaultIfEmpty()
                                                         join source in db.tblEmailNotifications_LeadSources on notif.emailNotificationID equals source.emailNotificationID into notif_source
                                                         from source in notif_source.DefaultIfEmpty()
                                                         join status in db.tblEmailNotifications_LeadStatus on notif.emailNotificationID equals status.emailNotificationID into notif_status
                                                         from status in notif_status.DefaultIfEmpty()
                                                         join bstatus in db.tblEmailNotifications_BookingStatus on notif.emailNotificationID equals bstatus.emailNotificationID into notif_bstatus
                                                         from bstatus in notif_bstatus.DefaultIfEmpty()
                                                         where notif.eventID == _event.eventID
                                                         && notif.active == true
                                                         && notif.terminalID == query.tblLeads.terminalID
                                                         && (dest.destinationID == query.destinationID || dest == null)
                                                         && (place.placeID == query.placeID || place == null)
                                                         && (source.leadSourceID == query.tblLeads.leadSourceID || source == null)
                                                         && (status.leadStatusID == query.tblLeads.leadStatusID || status == null)
                                                         && (bstatus.bookingStatusID == query.tblLeads.bookingStatusID || bstatus == null)
                                                         select notif;

                                _notification = emailNotifications.Count() > 1 ? emailNotifications.FirstOrDefault(m => m.tblEmails.culture == "en-US") : emailNotifications.Count() > 0 ? emailNotifications.FirstOrDefault() : null;

                                if (_notification == null)
                                {
                                    throw new Exception("There is NONE active notification rule for this reservation");
                                }

                                var requiredFields = _notification.requiredFields != null ? GeneralFunctions.RequiredFields.Where(m => _notification.requiredFields.Split(',').ToArray().Contains(m.Key)).Select(m => m.Value) : null;

                                if (requiredFields != null)
                                {
                                    foreach (var field in requiredFields)
                                    {
                                        #region "required fields"
                                        switch (field)
                                        {
                                            case "First Name":
                                                {
                                                    if (query.tblLeads.firstName == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Last Name":
                                                {
                                                    if (query.tblLeads.lastName == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Email":
                                                {
                                                    if (query.tblLeads.tblLeadEmails == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Hotel Confirmation Number":
                                                {
                                                    if (query.hotelConfirmationNumber == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Arrival Date":
                                                {
                                                    if (query.arrivalDate == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Destination":
                                                {
                                                    if (query.destinationID == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Resort":
                                                {
                                                    if (query.placeID == null)
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Presentation Date":
                                                {
                                                    if (query.tblPresentations != null)
                                                    {
                                                        if (query.tblPresentations.FirstOrDefault().datePresentation == null)
                                                        {
                                                            _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                            case "Presentation Time":
                                                {
                                                    if (query.tblPresentations != null)
                                                    {
                                                        if (query.tblPresentations.FirstOrDefault().timePresentation == null)
                                                        {
                                                            _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        _requiredFields += (_requiredFields != "" ? ", " : "") + field;
                                                    }
                                                    break;
                                                }
                                        }
                                        #endregion
                                    }
                                }

                                _leadEmails = _notification.copyLead != null && (bool)_notification.copyLead ? string.Join(",", query.tblLeads.tblLeadEmails.Select(m => m.email)) : "";

                                if (_requiredFields != "")
                                {
                                    //break;
                                    throw new Exception("These fields cannot be empty:<br />" + _requiredFields);
                                }

                                #region "words to replace"
                                var _lead = query.tblLeads;
                                var _profile = _lead.aspnet_Users1.tblUserProfiles.FirstOrDefault();
                                //var _profile1 = db.tblUserProfiles.Single(m => m.userID == session.UserID);

                                _clientName = _lead.firstName + " " + _lead.lastName;
                                _assignedToUser = _profile.firstName + " " + _profile.lastName;
                                //_sentByUser = _profile1.firstName + " " + _profile1.lastName;
                                _sentByUser = session.User;

                                _resort = query.placeID != null ? query.tblPlaces.place : "";
                                _destination = query.placeID != null ? query.tblPlaces.tblDestinations.destination : "";
                                _arrivalDate = query.arrivalDate != null ? ((DateTime)query.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                                _hotelConfirmation = query.hotelConfirmationNumber ?? "";
                                _sentByUserEmail = session.Email;
                                //var _sentByExtension = _profile1.phoneEXT;
                                var _sentByExtension = session.Extension;
                                #endregion

                                email = Utils.EmailNotifications.GetEmailByNotification(_notification.emailNotificationID);
                                email.From = new System.Net.Mail.MailAddress(session.Email, session.User);
                                email.Subject = _resort + " - " + _lead.lastName + " (" + _arrivalDate + ")";

                                #region "replace of target specific fields"
                                email.Body = email.Body
                                    .Replace("$Destination", _destination)
                                    .Replace("$SentByUser", _sentByUser)
                                    .Replace("$AssignedToUser", _assignedToUser)
                                    .Replace("$SentByPhoneExt", _sentByExtension)
                                    .Replace("$SentByEmail", _sentByUserEmail);
                                #endregion

                                break;
                                #endregion
                            }
                    }

                    if (_requiredFields != "")
                    {
                        throw new Exception("These fields cannot be empty:<br />" + _requiredFields);
                    }

                    email.Body = email.Body
                                    .Replace("$ClientName", _clientName)
                                    .Replace("$Resort", _resort)
                                    .Replace("$Location", _location)
                                    .Replace("$ArrivalDate", _arrivalDate)
                                    .Replace("$PresentationDateTime", _presentationDateTime)
                                    .Replace("$HotelConfirmation", _hotelConfirmation)
                                    .Replace("$SentByEmail", session.Email);

                    if (_notification.copyLead != null && (bool)_notification.copyLead)
                    {
                        email.To.Add(_leadEmails);
                        //email.To.Add("ing.edgar.f@gmail.com");//for testing
                    }
                    if (_notification.copySender != null && (bool)_notification.copySender)
                    {
                        email.Bcc.Add(session.Email);//bcc to sender
                    }

                    #region "log creation"
                    log.emailNotificationID = _notification.emailNotificationID;
                    log.dateSent = DateTime.Now;
                    log.sentByUserID = session.UserID;
                    db.tblEmailNotificationLogs.AddObject(log);
                    db.SaveChanges();
                    #endregion

                    //insert the tracker code
                    //email.Body = EmailNotifications.InsertTracker(email.Body, log.emailNotificationLogID);

                    //EmailNotifications.Send(email);
                    EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });

                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Confirmation Letter Sent";
                    response.ObjectID = new { to = string.Join(", ", email.To.Select(m => m.Address)) };
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Email NOT sent";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            //unused method
            public AttemptResponse SendConfirmationLetter(Guid reservationID)
            {
                ePlatEntities db = new ePlatEntities();

                AttemptResponse response = new AttemptResponse();

                try
                {
                    var _pendingInfo = "";
                    var _reservation = db.tblReservations.Single(m => m.reservationID == reservationID);
                    var _lead = _reservation.tblLeads;
                    var _leadEmails = string.Join(",", _lead.tblLeadEmails.Select(m => m.email));

                    #region "validation"
                    if (_lead.firstName == null)
                    {
                        _pendingInfo += "No First Name Assigned";
                    }
                    if (_lead.lastName == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Last Name Assigned";
                    }
                    if (_lead.leadStatusID != 2 && _lead.leadStatusID != 15)//assigned or diamante
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "Lead Status MUST be Assigned or Diamante";
                    }
                    if (_lead.tblLeadEmails.Count() == 0)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Email Assigned";
                    }
                    if (_lead.tblInteractions.Count() == 0 || _lead.tblInteractions.OrderByDescending(m => m.dateSaved).FirstOrDefault().bookingStatusID != 1)//pre booked
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Interactions Assigned / Most Recent Interaction booking status MUST be Pre-Booked";
                    }
                    if (_reservation.hotelConfirmationNumber == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Hotel Confirmation Number Assigned";
                    }
                    if (_reservation.arrivalDate == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Arrival Date Assigned";
                    }
                    if (_reservation.destinationID == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Destination is Assigned";
                    }
                    if (_reservation.placeID == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Resort is Assigned";
                    }
                    if (_reservation.tblPresentations.Count() == 0 || _reservation.tblPresentations.FirstOrDefault(m => m.reservationID == reservationID).datePresentation == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Presentation Date is Assigned";
                    }
                    if (_reservation.tblPresentations.Count() == 0 || _reservation.tblPresentations.FirstOrDefault(m => m.reservationID == reservationID).timePresentation == null)
                    {
                        _pendingInfo += (_pendingInfo == "" ? "" : ", ") + "No Presentation Time is Assigned";
                    }
                    #endregion

                    if (_pendingInfo == "")
                    {
                        var _eventID = 0;
                        var _clientName = (_lead.firstName != null ? _lead.firstName : "") + " " + (_lead.lastName != null ? _lead.lastName : "");
                        var _arrivalDate = ((DateTime)_reservation.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                        var _resort = _reservation.tblPlaces.place;
                        var _resortID = _reservation.placeID;
                        var _resortConfirmation = _reservation.hotelConfirmationNumber;
                        var _presentationDateTime = ((DateTime)_reservation.tblPresentations.FirstOrDefault().datePresentation).ToString("yyyy-MM-dd") + " " + ((TimeSpan)_reservation.tblPresentations.FirstOrDefault().timePresentation).ToString(@"hh\:mm");
                        var _location = "";
                        var _notes = "";
                        var _drink = "";
                        var _breakfast = "";
                        var _checkingInfo = "";
                        var _credit = "";
                        var _bcc = "";
                        //var _optPercentage = "50";
                        var _optPercentage = "up to 50% off";

                        #region "definition of location"
                        switch (_reservation.destinationID)
                        {
                            case 2:
                                {
                                    _location = _resortID == 9 ? "Villa del Palmar Cabo" : "Villa del Arco";
                                    break;
                                }
                            case 5:
                                {
                                    _location = "Villa del Palmar Cancun";
                                    break;
                                }
                            case 3:
                                {
                                    _location = "Villa del Palmar Loreto";
                                    break;
                                }
                            case 1:
                                {
                                    _location = "Villa del Palmar Flamingos";
                                    break;
                                }
                            case 4:
                                {
                                    _location = "Villa del Palmar Flamingos";
                                    break;
                                }
                        }
                        #endregion

                        if (_lead.leadSourceID == 1 || _lead.leadSourceID == 2 || _lead.leadSourceID == 24 || _lead.leadSourceID == 28)//Member, Gold Week, Elite Member, Premier Member
                        {
                            _eventID = 13;
                            if (_reservation.destinationID == 1)//Vallarta
                            {
                                if (_resortID == 8)//Villa del Palmar
                                {
                                    _notes = "ask for ana roman or gloria martinez directly after check-in";
                                }
                            }
                            if (_reservation.destinationID == 2)//Cabo
                            {
                                if (_resortID == 9)//Villa del Palmar
                                {
                                    _notes = "ask for anel santillan directly after check-in";
                                    //if (_lead.leadSourceID != 2)//gold week. Removed for Chelsea's request
                                    //{
                                    //    _bcc = "membersvdp@hotmail.com";
                                    //}
                                }
                                else
                                {
                                    _notes = "ask for member concierge directly after check-in";
                                }
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><strong>complimentary drink voucher</strong></span>"
                                        + "<p style=\"text-align: center;\">Complimentary Drink vouchers can be redeemed at the concierge desk after check in. You must have this letter present in order to receive your voucher. Drink vouchers&nbsp;<span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br />"
                                        + "<strong>Limit:</strong> One per person.</p>"
                                        + "<br /></center></div>";
                            }
                            if (_reservation.destinationID == 3)//Loreto
                            {
                                _bcc = "ceciliaarias091@gmail.com";
                                if (_resortID == 9)//Villa del Palmar
                                {
                                    _notes = "ask for cecilia arias directly after check-in";
                                }
                                else
                                {
                                    _notes = "ask for member concierge directly after check-in";
                                }
                                _credit = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>resort credit</b></span>"
                                    + "<p style=\"text-align: center;\">Resort Credit can be redeemed at the concierge desk after check in. You must qualify and attend your scheduled owners update meeting or timeshare presentation to receive your resort credit."
                                    + "Resort credit <span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash. Resort credit only available to those who pre-purchased specific items with the Pre-Arrival department.<br />"
                                    //+ "<b>Limit:</b> One per person.</p>"
                                    + "Contact your Personal Concierge for more information on the amount of resort credit you should be receiving.</p>"
                                    + "<br /></center></div>";
                                _optPercentage = "up to 25% off";
                            }
                            if (_reservation.destinationID == 5)//cancun
                            {
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>complimentary drink</b></span>"
                                    + "<p style=\"text-align: center;\">Complimentary Drink will be given at the time of arrival. You must have this letter present in order to receive your free drink. Drinks <span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br />"
                                    + "<b>Limit:</b> One per person.</p>"
                                    + "<br /></center></div>";
                                _optPercentage = "on";
                            }
                            _checkingInfo = "<div style=\"margin: 20px 60px;\"><table style=\"width:100%\" width=\"100%\"><tr style=\"color: #b40404;\"><td>Check In: 4:00PM (MDT)</td><td style=\"float: right;\" align=\"right\">Check Out: 11:00AM (MDT)</td></tr></table></div>";
                        }
                        if (_lead.leadSourceID == 5 || _lead.leadSourceID == 22 || _lead.leadSourceID == 3)//Guest of Member, Trial Member, Rental
                        {
                            _eventID = 14;
                            if (_reservation.destinationID == 1)//Vallarta
                            {
                                if (_resortID == 8)
                                {
                                    _notes = "ask for diego romero directly after check-in";
                                }
                            }
                            if (_reservation.destinationID == 2)//Cabo
                            {
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><strong>complimentary drink voucher</strong></span>"
                                        + "<p style=\"text-align: center;\">Complimentary Drink vouchers can be redeemed at the concierge desk after check in. You must have this letter present in order to receive your voucher. Drink vouchers&nbsp;<span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br />"
                                        + "<strong>Limit:</strong> One per person.</p>"
                                        + "<br /></center></div>";
                                if (_resortID == 9)//Villa del Palmar
                                {
                                    //if (_lead.leadSourceID != 3)//rental. Removed for Chelsea's request
                                    //{
                                    //    _bcc = "membersvdp@hotmail.com";
                                    //}
                                }
                            }
                            if (_reservation.destinationID == 3)//Loreto
                            {
                                _bcc = "ceciliaarias091@gmail.com";
                                _credit = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>resort credit</b></span>"
                                    + "<p style=\"text-align: center;\">Resort Credit can be redeemed at the concierge desk after check in. You must qualify and attend your scheduled owners update meeting or timeshare presentation to receive your resort credit."
                                    + "Resort credit <span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash. Resort credit only available to those who pre-purchased specific items with the Pre-Arrival department.<br />"
                                    //+ "<b>Limit:</b> One per person.</p>"
                                    + "Contact your Personal Concierge for more information on the amount of resort credit you should be receiving.</p>"
                                    + "<br /></center></div>";
                                _optPercentage = "up to 25% off";
                            }
                            if (_reservation.destinationID == 5)//Cancun
                            {
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>complimentary drink</b></span>"
                                    + "<p style=\"text-align: center;\">Complimentary Drink will be given at the time of arrival. You must have this letter present in order to receive your free drink. Drinks <span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br /><b>Limit:</b> One per person.</p>"
                                    + "<br /></center></div>";
                                _optPercentage = "on";
                            }
                            _checkingInfo = "<div style=\"margin: 20px 60px;\"><table style=\"width:100%\" width=\"100%\"><tr style=\"color: #b40404;\"><td>Check In: 4:00PM (MDT)</td><td style=\"float: right;\" align=\"right\">Check Out: 11:00AM (MDT)</td></tr></table></div>";
                        }
                        if (_lead.leadSourceID == 4 || _lead.leadSourceID == 27)//Exchanger, Exchanger Getaway
                        {
                            _eventID = 15;
                            if (_reservation.destinationID == 1)//Vallarta
                            {
                                if (_resortID == 8)
                                {
                                    _notes = "ask for diego romero directly after check-in";
                                }
                            }
                            if (_reservation.destinationID == 2)//Cabo
                            {
                                _notes = "ask for griselda gomez directly after check-in";
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><strong>complimentary drink voucher</strong></span>"
                                        + "<p style=\"text-align: center;\">Complimentary Drink vouchers can be redeemed at the concierge desk after check in. You must have this letter present in order to receive your voucher. Drink vouchers&nbsp;<span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br />"
                                        + "<strong>Limit:</strong> One per person.</p>"
                                        + "<br /></center></div>";

                                _breakfast = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center>"
                                     + "<br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>complimentary breakfast</b></span>"
                                + "<p style=\"text-align: center;\">Your welcome presentation will include free breakfast. Free breakfast&nbsp;<span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.</p>"
                                     + "<br /></center></div>";
                            }
                            if (_reservation.destinationID == 5)//cancun
                            {
                                _drink = "<div style=\"border: 1pt solid; margin: 10px 50px;\"><center><br /><span style=\"display: block; text-align: center; text-transform: uppercase;\"><b>complimentary drink</b></span>"
                                    + "<p style=\"text-align: center;\">Complimentary Drink will be given at the time of arrival. You must have this letter present in order to receive your free drink. Drinks <span style=\"text-decoration: underline;\">cannot</span> be exchanged for cash.<br /><b>Limit:</b> One per person.</p>"
                                    + "<br /></center></div>";

                                _checkingInfo = "<div style=\"margin: 20px 60px;\"><table style=\"width:100%\" width=\"100%\"><tr style=\"color: #b40404;\"><td>Check In: 4:00PM (MDT)</td><td style=\"float: right;\" align=\"right\">Check Out: 11:00AM (MDT)</td></tr></table></div>";
                                _optPercentage = "on";
                            }
                            if (_reservation.destinationID == 3)//Loreto
                            {
                                _bcc = "ceciliaarias091@gmail.com";
                                _optPercentage = "up to 25% off";
                            }
                        }
                        System.Net.Mail.MailMessage email = Utils.EmailNotifications.GetEmail(_eventID, _lead.terminalID, "en-US");

                        email.From = new System.Net.Mail.MailAddress(session.Email, session.User);
                        email.Subject = _resort + " Confirmation (" + _clientName + ") " + _arrivalDate;
                        email.Body = email.Body
                            .Replace("$ClientName", _clientName)
                            .Replace("$Resort", _resort)
                            .Replace("$ArrivalDate", _arrivalDate)
                            .Replace("$PresentationDateTime", _presentationDateTime)
                            .Replace("$HotelConfirmation", _resortConfirmation)
                            .Replace("$Location", _location)
                            .Replace("$Notes", _notes)
                            .Replace("$ComplimentaryDrink", _drink)
                            .Replace("$ComplimentaryBreakfast", _breakfast)
                            .Replace("$ComplimentaryCredit", _credit)
                            .Replace("$CheckingInfo", _checkingInfo)
                            .Replace("$OptPercentage", _optPercentage);

                        email.To.Add(_leadEmails);
                        //email.To.Add("ing.edgar.f@gmail.com,efalcon@villagroup.com,mike3423@hotmail.com");//for testing
                        email.Bcc.Add(session.Email);//bcc to sender
                        if (_bcc != "")//add extra bcc requested 
                        {
                            email.Bcc.Add(_bcc);
                        }
                        //email.Body = EmailNotifications.InsertTracker(email.Body);
                        //EmailNotifications.Send(email);
                        EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });

                        #region "create change log"
                        //var listChanges = new List<ChangesTracking.ChangeItem>();
                        //Guid leadID = _lead.leadID;
                        //var lead = db.tblLeads.Single(m => m.leadID == leadID);
                        //var currentPrimaryKey = Import.GetPrimaryKeyName(a.Key.Substring(0, a.Key.IndexOf('.')));
                        //var currentPrimaryKeyValue = lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null) != null ? lead.GetType().GetProperty(currentPrimaryKey).GetValue(lead, null).ToString() : null;
                        //var field = a.Key.Substring((a.Key.IndexOf('.') + 1), (a.Key.Length - (a.Key.IndexOf('.') + 1)));
                        //var previousValue = lead.GetType().GetProperty(field).GetValue(lead, null) != null ? lead.GetType().GetProperty(field).GetValue(lead, null).ToString() : null;
                        ////string previousValue = lead.GetType().GetProperty(field).GetValue(lead, null).ToString() ?? "";
                        //if (a.Value != "")
                        //{
                        //    listChanges.Add(new ChangesTracking.ChangeItem()
                        //    {
                        //        SysComponentID = ChangesTracking.GetSysComponentIDs(i).Single(m => m.Key == field).Value,
                        //        PreviousValue = previousValue,
                        //        CurrentValue = a.Value,
                        //        FullReferenceText = lead.firstName + " " + lead.lastName,
                        //        ReferenceID = currentPrimaryKeyValue
                        //        //ReferenceID = i
                        //    });
                        //}
                        //ChangesTracking.LogChanges(listChanges);
                        #endregion
                    }
                    else
                    {
                        _pendingInfo = _pendingInfo.Replace(",", "<br />");
                        throw new Exception("These issues must be solved in order to be able to send Confirmation:<br />" + _pendingInfo);
                    }

                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Confirmation Letter Sent";
                    response.ObjectID = new { to = _leadEmails };
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Confirmation Letter NOT Sent";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            //public AttemptResponse SendMassConfirmationLetter(LeadModel.Views.MassUpdate lvm)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    AttemptResponse response = new AttemptResponse();
            //    ChangesTracking.ChangeItem changeItem = new ChangesTracking.ChangeItem();
            //    List<ChangesTracking.ChangeItem> listChanges = new List<ChangesTracking.ChangeItem>();
            //    List<AttemptResponse> list = new List<AttemptResponse>();

            //    if (lvm.MassUpdate_Coincidences != null)
            //    {
            //        try
            //        {
            //            var _leads = lvm.MassUpdate_Coincidences.Replace("'", "");
            //            var leads = _leads.Split(',').Select(m => Guid.Parse(m)).ToArray();

            //            foreach (var lead in leads)
            //            {
            //                var reservations = db.tblLeads.Single(m => m.leadID == lead).tblReservations;
            //                if (reservations.Count() > 0)
            //                {
            //                    var rsv = reservations.OrderBy(m => m.arrivalDate).FirstOrDefault();
            //                    var _response = SendConfirmationLetter(rsv.reservationID);
            //                    list.Add(new AttemptResponse()
            //                    {
            //                        Type = _response.Type,
            //                        Message = _response.Message,
            //                        ObjectID = _response.ObjectID,
            //                        Exception = _response.Exception
            //                    });
            //                }
            //            }
            //        }
            //    }
            //}
        }

        public class BillingInfo
        {
            ePlatEntities db = new ePlatEntities();

            public BillingInfoModel.Fields.BillingInfo Find(long BillingInfoID)
            {
                var billingInfo = (from x in db.tblBillingInfo where x.billingInfoID == BillingInfoID select x).Single();
                BillingInfoModel.Fields.BillingInfo bi = new BillingInfoModel.Fields.BillingInfo();
                bi.FillWith(billingInfo);
                bi.CardNumber = Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(bi.CardNumber));
                return bi;
            }

            public List<BillingInfoModel.Items.BillingInfoSearchResults> SearchBillingInfo(Guid LeadID)
            {
                var billingInfo = from x in db.tblBillingInfo where x.leadID == LeadID select x;
                //LeadModel.Fields.LeadGeneralInformation gim = new LeadModel.Fields.LeadGeneralInformation();

                List<BillingInfoModel.Items.BillingInfoSearchResults> billingInfoList = new List<BillingInfoModel.Items.BillingInfoSearchResults>();

                foreach (var b in billingInfo)
                {
                    BillingInfoModel.Items.BillingInfoSearchResults info = new BillingInfoModel.Items.BillingInfoSearchResults();
                    info.FillWith(b);
                    // make sure we use encrypt/decrypt functions for the card number
                    //info.CardNumber = Encrypt(info.CardNumber);
                    info.CardNumber = Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(info.CardNumber));
                    billingInfoList.Add(info);
                }
                //gim.FillWith(lead);
                return billingInfoList;
            }

            public AttemptResponse TryToCreate(BillingInfoModel.Fields.BillingInfo bi)
            {
                AttemptResponse response = new AttemptResponse();

                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChangedList = new List<ChangesTracking.OnValueChangedItem>();

                //rgi.ReservationID = Guid.NewGuid();

                tblBillingInfo billingInfo = new tblBillingInfo();

                // Deal with the rest of the fields
                object fo = (object)billingInfo;
                Utils.Custom.Reflection.dataSetUp(bi, ref fo, ref changes, ref onValueChangedList);
                billingInfo = (tblBillingInfo)fo;
                try
                {
                    db.tblBillingInfo.AddObject(billingInfo);
                    this.Save();
                    ChangesTracking.GetMissingReferenceIDs(billingInfo, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    var objectIDs = new { LeadID = billingInfo.leadID, BillingInfoID = billingInfo.billingInfoID };
                    response.ObjectID = objectIDs;
                    //response.ObjectID = reservation.leadID;
                    response.Message = "Billing Info Saved";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Billing Info NOT Saved";
                    return response;
                }
            }



            public AttemptResponse TryToUpdate(BillingInfoModel.Fields.BillingInfo bi)
            {
                AttemptResponse response = new AttemptResponse();
                tblBillingInfo billingInfo = db.tblBillingInfo.Single(r => r.billingInfoID == bi.billingInfoID);
                List<ChangesTracking.ChangeItem> changes = new List<ChangesTracking.ChangeItem>();
                List<ChangesTracking.OnValueChangedItem> onValueChangedList = new List<ChangesTracking.OnValueChangedItem>();

                //Utils.Custom.Reflection.dataSetUp<tblReservations>(rgi, ref  reservation, ref changes);
                object fo = (object)billingInfo;
                Utils.Custom.Reflection.dataSetUp(bi, ref fo, ref changes, ref onValueChangedList);
                billingInfo = (tblBillingInfo)fo;
                try
                {
                    this.Save();
                    // la siguiente linea no estaba, pero segun yo, sí se estaban guardando las modificaciones, verificar.
                    ChangesTracking.GetMissingReferenceIDs(billingInfo, ref changes);
                    ChangesTracking.LogChanges(changes);
                    response.Type = Attempt_ResponseTypes.Ok;
                    //response.ObjectID = reservation.reservationID;

                    //dynamic objectIDs = new System.Dynamic.ExpandoObject();
                    //objectIDs.LeadID=reservation.leadID;
                    //objectIDs.ReservationID = reservation.reservationID;

                    var objectIDs = new { LeadID = billingInfo.leadID, BillingInfoID = billingInfo.billingInfoID };

                    response.ObjectID = objectIDs;

                    response.Message = "Billing Info Updated";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.ObjectID = 0;
                    //response.ErrorMessage = ex.Message;
                    response.Exception = ex;
                    response.Message = "Billing Info NOT Updated";
                    return response;
                }
            }

            public void Save()
            {
                db.SaveChanges();
            }
        }

        public class Purchases
        {
            /// <summary>
            /// Converts received amount to target currency based on given rates.
            /// Returns key value pair with decimal amount and decimal rate used.
            /// </summary>
            /// <param name="exchangeRates">List of exchange rates</param>
            /// <param name="amount">amount to covert</param>
            /// <param name="amountCurrencyCode">amount currency code</param>
            /// <param name="targetCurrencyCode">target currency code</param>
            /// <returns>KeyValuePair(amount, rate)</returns>
            public KeyValuePair<decimal, decimal> ConvertAmountToRate(List<string> exchangeRates, decimal amount, string amountCurrencyCode, string targetCurrencyCode)
            {
                if (exchangeRates.Count(m => m.Split('=')[0] == amountCurrencyCode) > 0 && exchangeRates.Count(m => m.Split('=')[0] == targetCurrencyCode) > 0)
                {
                    var _amount = amount * decimal.Parse(exchangeRates.Single(m => m.Split('=')[0] == amountCurrencyCode).Split('=')[1]);
                    var _rate = decimal.Parse(exchangeRates.Single(m => m.Split('=')[0] == targetCurrencyCode).Split('=')[1]);
                    _amount = _amount / _rate;
                    return new KeyValuePair<decimal, decimal>(_amount, _rate);
                }
                else
                {
                    return new KeyValuePair<decimal, decimal>(amount, 1);
                }
            }

            public decimal GetTotalOfPurchase(Guid purchaseID, decimal amount = 0)
            {
                ePlatEntities db = new ePlatEntities();
                var query = db.tblPurchases_Services.Where(m => m.purchaseID == purchaseID);
                decimal _total = 0;

                foreach (var i in query)
                {
                    _total += i.total;
                }
                return _total + amount;
            }
            public int GetNewStatusOfPurchase(Guid purchaseID, int? _status = null)
            {
                ePlatEntities db = new ePlatEntities();
                var servicesStatus = db.tblPurchases_Services.Where(m => m.purchaseID == purchaseID).Select(m => m.serviceStatusID).ToList();
                if (_status != null)
                {
                    servicesStatus.Add((int)_status);
                }
                var status = 1;
                //if (servicesStatus.Any(m => m < 3))
                //{
                //    return 1;  //In Process
                //}
                if (servicesStatus.Any(m => m == 3) && servicesStatus.All(m => m >= 3))
                {
                    status = 2;  //Completed
                }
                if (servicesStatus.All(m => m == 4))
                {
                    status = 3;  //Canceled
                }
                if (servicesStatus.All(m => m == 5))
                {
                    status = 4;  //Refunded
                }

                return status;
            }
            public bool View()
            {
                //ePlatEntities db = new ePlatEntities();

                //var currentUser = session.UserID;
                //var userRole = (Guid)session.RoleID;
                //var currentProfile = db.tblUsers_SysWorkGroups.Single(m => m.userID == currentUser && m.roleID == userRole && m.sysWorkGroupID == session.WorkGroupID);
                //if ((bool)currentProfile.manageServices)
                //{
                //    return true;
                //}
                //else
                //{
                //    return false;
                //    //return true;//for test
                //}
                if (session.Services == "true")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public DateTime GetImmediateDayOfWeek(string day, bool backward)
            {
                var _day = DateTime.Today;

                var dayOfWeek = _day.DayOfWeek.ToString();
                if (backward)
                {
                    while (dayOfWeek.ToLower() != day.ToLower())
                    {
                        _day = _day.AddDays(-1);
                        dayOfWeek = _day.DayOfWeek.ToString();
                    }
                }
                else
                {
                    while (dayOfWeek.ToLower() != day.ToLower())
                    {
                        _day = _day.AddDays(1);
                        dayOfWeek = _day.DayOfWeek.ToString();
                    }
                }
                return _day;
            }

            public AttemptResponse AllowAccessToServices()
            {
                ePlatEntities db = new ePlatEntities();

                AttemptResponse response = new AttemptResponse();

                var dayOfWeek = DateTime.Today.DayOfWeek.ToString();
                var currentUser = session.UserID;
                var userRole = (Guid)session.RoleID;
                var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();

                var today = DateTime.Today;
                var endOfDay = today.AddDays(1).AddSeconds(-1);

                //var exchangeRatesOfWeek = db.tblExchangeRates.Where(m => m.exchangeRateTypeID == 1 && m.fromDate <= today && m.tblCurrencies1.currencyCode == "MXN" && terminals.Contains(m.terminalID) && m.providerID == null);
                var exchangeRatesOfWeek = db.tblExchangeRates.Where(m => m.exchangeRateTypeID == 1 && m.fromDate <= today && (m.toDate == null || m.toDate >= endOfDay) && m.tblCurrencies1.currencyCode == "MXN" && terminals.Contains(m.terminalID) && m.providerID == null);

                if (exchangeRatesOfWeek.Count() < 2 && session.Services == "true")
                {
                    response.Type = Attempt_ResponseTypes.Warning;
                    response.Message = "No Exchange Rate(s) Added For This Day <br />The rate to use will be the most recently expired";
                    response.ObjectID = new { AccessAllowed = false, ManageServices = session.Services == "true" };
                    return response;
                }
                else
                {
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.ObjectID = new { AccessAllowed = true, ManageServices = session.Services == "true" };
                    return response;
                }
            }

            public string SearchCoupons(LeadModel.Views.SearchCoupons model)
            {
                ePlatEntities db = new ePlatEntities();

                List<PurchasesModel.RecentCouponsResultsModel> list = new List<PurchasesModel.RecentCouponsResultsModel>();

                var _list = new List<string>();
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var _date = model.SearchCoupon_PurchaseDate != null && model.SearchCoupon_PurchaseDate != "" && (model.SearchCoupon_Coupon == null || model.SearchCoupon_Coupon == "") ? (DateTime?)DateTime.Parse(model.SearchCoupon_PurchaseDate, CultureInfo.InvariantCulture) : (DateTime?)null;
                var _endDate = _date != null ? ((DateTime)_date).AddDays(1).AddSeconds(-1) : (DateTime?)null;
                var _couponStructure = model.SearchCoupon_Coupon != null ? char.IsLetter(char.Parse(model.SearchCoupon_Coupon.Substring(0, 1))) ? model.SearchCoupon_Coupon : db.tblPointsOfSale.Single(m => m.pointOfSaleID == model.SearchCoupon_PointOfSale).shortName.Substring(0, 1) + model.SearchCoupon_Coupon : "";
                var fmt1 = _couponStructure != "" ? _couponStructure.Substring(0, 1) + int.Parse(_couponStructure.Substring(1)).ToString("00000.##") : "";
                var fmt2 = _couponStructure != "" ? _couponStructure.Substring(0, 1) + int.Parse(_couponStructure.Substring(1)).ToString("0000000.##") : "";

                var query = from p in db.tblPurchases
                            join ps in db.tblPurchases_Services on p.purchaseID equals ps.purchaseID
                            join l in db.tblLeads on p.leadID equals l.leadID
                            join psd in db.tblPurchaseServiceDetails on ps.purchase_ServiceID equals psd.purchase_ServiceID
                            join pss in db.tblPurchaseServiceStatus on ps.serviceStatusID equals pss.purchaseServiceStatusID
                            where p.purchaseStatusID < 5//discard
                                                        //&& (model.SearchCoupon_PurchaseDate == null || (ps.dateSaved >= _date && ps.dateSaved < _endDate))
                            && (_date == null || (ps.dateSaved >= _date && ps.dateSaved < _endDate))
                            && terminals.Contains(p.terminalID)
                            && (model.SearchCoupon_PointOfSale == 0 || model.SearchCoupon_PointOfSale == p.pointOfSaleID)
                            //&& (model.SearchCoupon_Coupon == null || (psd != null && (psd.coupon.Contains(fmt1) || psd.coupon.Contains(fmt2))))
                            && (model.SearchCoupon_Coupon == null || (psd != null && (psd.coupon.Contains(fmt1) || psd.coupon.Contains(fmt2) || psd.coupon == null)))
                            select new
                            {
                                p.pointOfSaleID,
                                p.purchaseID,
                                l.firstName,
                                l.lastName,
                                psd.coupon,
                                pss.purchaseServiceStatus,
                                l.leadID,
                                ps.total,
                                p.tblCurrencies.currencyCode,
                                ps.dateSaved,
                                ps.serviceDateTime,
                                p.tblLocations.location
                            };

                var _a = query.GroupBy(m => m.pointOfSaleID);
                foreach (var i in _a)
                {
                    var _coupons = new List<PurchasesModel.RecentCouponsModel>();
                    foreach (var a in i)
                    {
                        //var _coupon = a.coupon.Split('-')[0].ToString();
                        var _coupon = a.coupon != null ? a.coupon.Split('-')[0].ToString() : "";
                        if (_coupons.Where(m => m.RecentCoupon_Coupon == _coupon).Count() == 0)
                        {
                            _coupons.Add(new PurchasesModel.RecentCouponsModel()
                            {
                                DT_RowId = a.leadID.ToString(),
                                RecentCoupon_LeadID = a.leadID,
                                RecentCoupon_PurchaseID = a.purchaseID,
                                RecentCoupon_Coupon = a.coupon != null ? a.coupon.Split('-')[0] : "",
                                RecentCoupon_FirstName = a.firstName + " " + a.lastName,
                                RecentCoupon_ServiceStatus = a.purchaseServiceStatus,
                                RecentCoupon_Total = a.total + " " + a.currencyCode,
                                RecentCoupon_DateSaved = a.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                RecentCoupon_ServiceDate = a.serviceDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                RecentCoupon_Location = a.location
                            });
                        }
                    }
                    list.Add(new PurchasesModel.RecentCouponsResultsModel()
                    {
                        PointOfSale = i.Key.ToString(),
                        DateSaved = _date != null ? ((DateTime)_date).ToString("yyyy-MM-dd") : i.FirstOrDefault().dateSaved.ToString("yyyy-MM-dd"),
                        Coupons = _coupons,
                        DateLastUpdate = DateTime.Today.ToString("yyyy-MM-dd")
                    });
                }

                var json = new JavaScriptSerializer().Serialize(list);
                return json;
            }

            public string SearchCouponsByDate(LeadModel.Views.SearchCoupons model)
            {
                ePlatEntities db = new ePlatEntities();

                List<PurchasesModel.RecentCouponsResultsModel> list = new List<PurchasesModel.RecentCouponsResultsModel>();
                var _list = new List<string>();
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var _date = DateTime.Parse(model.SearchCouponByDate_I_ServiceDate, CultureInfo.InvariantCulture);
                var _endDate = DateTime.Parse(model.SearchCouponByDate_F_ServiceDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1);
                var _providers = !model.SearchCouponByDate_Provider.Contains(0) ? model.SearchCouponByDate_Provider : new PurchasesModel.PurchaseInfoModel().Providers.Select(m => int.Parse(m.Value)).ToArray();
                var _services = model.SearchCouponByDate_Service != null ? model.SearchCouponByDate_Service : LeadsCatalogs.FillDrpServicesPerProvider(_providers).Select(m => long.Parse(m.Value)).ToArray(); //new PurchasesModel.PurchaseInfoModel().Services.Select(m => long.Parse(m.Value)).ToArray();
                var _PoS = model.SearchCouponByDate_PointOfSale != null ? model.SearchCouponByDate_PointOfSale : LeadsCatalogs.FillDrpPointsOfSale().Select(m => int.Parse(m.Value)).ToArray();

                var query = from p in db.tblPurchases
                            join ps in db.tblPurchases_Services on p.purchaseID equals ps.purchaseID
                            join l in db.tblLeads on p.leadID equals l.leadID
                            join psd in db.tblPurchaseServiceDetails on ps.purchase_ServiceID equals psd.purchase_ServiceID into ps_psd
                            from psd in ps_psd.DefaultIfEmpty()
                            join pss in db.tblPurchaseServiceStatus on ps.serviceStatusID equals pss.purchaseServiceStatusID
                            where p.purchaseStatusID < 5//discard
                            && ps.serviceStatusID >= 3
                            && ps.openCouponMonths == 0
                            && terminals.Contains(p.terminalID)
                            && (ps.serviceDateTime >= _date && ps.serviceDateTime < _endDate)
                            && _PoS.Contains(p.pointOfSaleID)
                            && _providers.Contains(ps.tblServices.providerID)
                            && _services.Contains(ps.serviceID)
                            select new
                            {
                                p.pointOfSaleID,
                                p.purchaseID,
                                l.firstName,
                                l.lastName,
                                psd.coupon,
                                pss.purchaseServiceStatus,
                                l.leadID,
                                ps.total,
                                p.tblCurrencies.currencyCode,
                                ps.dateSaved,
                                ps.serviceDateTime,
                                p.tblLocations.location
                            };

                var _a = query.GroupBy(m => m.pointOfSaleID);
                foreach (var i in _a)
                {
                    var _coupons = new List<PurchasesModel.RecentCouponsModel>();
                    foreach (var a in i)
                    {
                        var _coupon = a.coupon.Split('-')[0].ToString();
                        if (_coupons.Where(m => m.RecentCoupon_Coupon == _coupon).Count() == 0)
                        {
                            _coupons.Add(new PurchasesModel.RecentCouponsModel()
                            {
                                DT_RowId = a.leadID.ToString(),
                                RecentCoupon_LeadID = a.leadID,
                                RecentCoupon_PurchaseID = a.purchaseID,
                                RecentCoupon_Coupon = a.coupon != null ? a.coupon.Split('-')[0] : "",
                                RecentCoupon_FirstName = a.firstName + " " + a.lastName,
                                RecentCoupon_ServiceStatus = a.purchaseServiceStatus,
                                RecentCoupon_Total = a.total + " " + a.currencyCode,
                                RecentCoupon_DateSaved = a.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                RecentCoupon_ServiceDate = a.serviceDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                RecentCoupon_Location = a.location
                            });
                        }
                    }
                    list.Add(new PurchasesModel.RecentCouponsResultsModel()
                    {
                        PointOfSale = i.Key.ToString(),
                        DateSaved = _date != null ? ((DateTime)_date).ToString("yyyy-MM-dd") : i.FirstOrDefault().dateSaved.ToString("yyyy-MM-dd"),
                        Coupons = _coupons,
                        DateLastUpdate = DateTime.Today.ToString("yyyy-MM-dd")
                    });
                }
                var json = new JavaScriptSerializer().Serialize(list);
                return json;
            }

            public AttemptResponse SaveFastSale(FastSaleModel.FastSaleInfoModel model)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                AttemptResponse _lead = new AttemptResponse();
                try
                {
                    //new code to save lead info
                    try
                    {
                        var lead = new tblLeads();
                        lead.leadID = Guid.NewGuid();
                        lead.personalTitleID = model.FastSaleInfo_Title;
                        lead.firstName = model.FastSaleInfo_FirstName;
                        lead.lastName = model.FastSaleInfo_LastName;
                        lead.leadSourceID = model.FastSaleInfo_LeadSource;
                        lead.initialTerminalID = model.FastSaleInfo_Terminal;
                        lead.terminalID = model.FastSaleInfo_Terminal;
                        lead.leadStatusID = 1;
                        lead.inputMethodID = 5;
                        lead.inputByUserID = session.UserID;
                        lead.inputDateTime = DateTime.Now;
                        lead.deleted = false;
                        lead.isTest = false;
                        lead.assignedToUserID = session.UserID;
                        //manifest fields
                        lead.spiCustomerID = model.CustomerID;
                        lead.frontOfficeGuestID = lead.frontOfficeGuestID == null ? model.FrontOfficeGuestID : lead.frontOfficeGuestID;
                        lead.frontOfficeResortID = lead.frontOfficeResortID == null ? model.FrontOfficeResortID : lead.frontOfficeResortID;

                        var email = new tblLeadEmails();
                        email.email = model.FastSaleInfo_Email ?? "notgiven@notgiven.com";
                        email.main = true;
                        //email.leadID = lead.leadID;


                        var phone = new tblPhones();
                        phone.phone = model.FastSaleInfo_Phone ?? "1111111111";
                        phone.main = true;
                        phone.phoneTypeID = 4;
                        phone.ext = null;
                        phone.doNotCall = false;
                        //phone.leadID = lead.leadID;

                        using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                        }))
                        {
                            lead.tblLeadEmails.Add(email);
                            lead.tblPhones.Add(phone);
                            db.tblLeads.AddObject(lead);
                            db.SaveChanges();
                            scope.Complete();
                        }
                        _lead.Type = Attempt_ResponseTypes.Ok;
                        _lead.ObjectID = lead.leadID.ToString();
                        _lead.Message = "Lead Saved";
                    }
                    catch (Exception ex)
                    {
                        _lead.Type = Attempt_ResponseTypes.Error;
                        _lead.ObjectID = 0;
                        _lead.Message = "Lead NOT Saved";
                        _lead.Exception = ex;
                    }
                    //

                    if (_lead.Type > 0)
                    {
                        var purchaseModel = new PurchasesModel.PurchaseInfoModel();
                        purchaseModel.PurchaseInfo_Lead = Guid.Parse(_lead.ObjectID.ToString());
                        purchaseModel.PurchaseInfo_Culture = model.FastSaleInfo_Language;
                        purchaseModel.PurchaseInfo_Terminal = (int)model.FastSaleInfo_Terminal;
                        purchaseModel.PurchaseInfo_Currency = model.FastSaleInfo_Currency.ToString();
                        purchaseModel.PurchaseInfo_PurchaseStatus = 1;//In process
                        //purchaseModel.PurchaseInfo_Agent = Membership.GetUser().ProviderUserKey.ToString();
                        //purchaseModel.PurchaseInfo_User = Membership.GetUser().ProviderUserKey.ToString();
                        purchaseModel.PurchaseInfo_Agent = session.UserID.ToString();
                        purchaseModel.PurchaseInfo_User = session.UserID.ToString();
                        purchaseModel.PurchaseInfo_PointOfSale = int.Parse(model.FastSaleInfo_PointOfSale.Split('|')[0]);
                        purchaseModel.PurchaseInfo_Location = model.FastSaleInfo_Location;
                        purchaseModel.PurchaseInfo_StayingAtPlace = model.FastSaleInfo_StayingAtPlace;
                        purchaseModel.PurchaseInfo_StayingAt = model.FastSaleInfo_StayingAtOhterPlace;
                        purchaseModel.PurchaseInfo_StayingAtRoom = model.FastSaleInfo_RoomNumber;
                        //manifest fields
                        purchaseModel.PurchaseInfo_MarketingProgram = model.MarketingProgram;
                        purchaseModel.PurchaseInfo_Subdivision = model.Subdivision;
                        purchaseModel.PurchaseInfo_Source = model.Source;
                        purchaseModel.PurchaseInfo_SpiOPCID = model.OPCID;
                        purchaseModel.PurchaseInfo_TourID = model.TourID;
                        purchaseModel.PurchaseInfo_TourDate = model.TourDate;

                        var purchase = new AttemptResponse();
                        using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                        }))
                        {
                            purchase = new Purchases().SavePurchase(purchaseModel);
                            scope.Complete();
                        }
                        if (purchase.Type > 0)
                        {
                            response.ObjectID = new { leadID = _lead.ObjectID, purchaseID = purchase.ObjectID };
                        }
                        else
                        {
                            var deleteLead = new Lead().TryToDelete((Guid)_lead.ObjectID);
                            if (deleteLead.Type > 0)
                            {
                                throw new Exception("There was an error trying to save Purchase Info");
                            }
                            else
                            {
                                throw new Exception("There was an error trying to save Purchase Info, only Lead Info was saved");
                            }
                        }
                    }
                    else
                    {
                        throw new Exception("There was an error trying to save Lead Info");
                    }
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Lead Saved";
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Lead NOT Saved";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            public AttemptResponse SavePurchase(PurchasesModel.PurchaseInfoModel model)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                var _message = "";
                if (model.PurchaseInfo_PurchaseID != null)
                {
                    try
                    {
                        var query = db.tblPurchases.Single(m => m.purchaseID == model.PurchaseInfo_PurchaseID);
                        query.culture = model.PurchaseInfo_Culture;
                        //query.promoID = model.PurchaseInfo_Promo != 0 ? model.PurchaseInfo_Promo : (long?)null;
                        query.terminalID = model.PurchaseInfo_Terminal;
                        query.customerRequests = model.PurchaseInfo_CustomerRequests;
                        ApplyPromoToCoupons((long)model.PurchaseInfo_Promo, query.purchaseID);
                        //query.promoID = model.PurchaseInfo_Promo;
                        //if (model.PurchaseInfo_Promo != 0)
                        //{
                        //    //update purchase total and promo fields
                        //    ApplyPromoToCoupons((long)model.PurchaseInfo_Promo, query.purchaseID);
                        //}
                        //else
                        //{
                        //    query.promoID = (long?)null;
                        //    query.total = model.PurchaseInfo_Total != null ? decimal.Parse(model.PurchaseInfo_Total) : (decimal?)null;
                        //}
                        int _currency;
                        if (!int.TryParse(model.PurchaseInfo_Currency, out _currency))
                        {
                            _currency = db.tblCurrencies.Single(m => m.currencyCode == model.PurchaseInfo_Currency).currencyID;
                        }
                        if ((query.currencyID != _currency || query.pointOfSaleID != model.PurchaseInfo_PointOfSale || query.culture != model.PurchaseInfo_Culture) && query.tblPurchases_Services.Count() > 0)
                        {
                            throw new Exception("Cannot modify currency nor point of sale due that purchase already have coupons related");
                        }
                        query.currencyID = _currency;
                        query.purchaseStatusID = model.PurchaseInfo_PurchaseStatus;
                        query.agentID = model.PurchaseInfo_Agent != null && model.PurchaseInfo_Agent != "null" ? Guid.Parse(model.PurchaseInfo_Agent) : (Guid?)null;
                        query.purchaseComments = model.PurchaseInfo_PurchaseComments;
                        query.notes = model.PurchaseInfo_Notes;
                        query.feedback = model.PurchaseInfo_Feedback;
                        query.userID = model.PurchaseInfo_User != null && model.PurchaseInfo_User != "null" ? Guid.Parse(model.PurchaseInfo_User) : (Guid?)null;
                        query.pointOfSaleID = model.PurchaseInfo_PointOfSale;
                        query.locationID = model.PurchaseInfo_Location != 0 ? model.PurchaseInfo_Location : (int?)null;
                        query.stayingAtPlaceID = model.PurchaseInfo_StayingAtPlace != "0" ? model.PurchaseInfo_StayingAtPlace != "null" ? long.Parse(model.PurchaseInfo_StayingAtPlace) : (long?)null : (long?)null;
                        query.stayingAt = model.PurchaseInfo_StayingAtPlace == "null" ? model.PurchaseInfo_StayingAt : null;
                        query.stayingAtRoom = model.PurchaseInfo_StayingAtRoom;
                        //manifest fields
                        query.spiMarketingProgram = model.PurchaseInfo_MarketingProgram;
                        query.spiSubdivision = model.PurchaseInfo_Subdivision;
                        query.spiSource = model.PurchaseInfo_Source;
                        query.spiOpcID = model.PurchaseInfo_SpiOPCID;
                        var key = model.PurchaseInfo_SpiOPCID != null ? model.PurchaseInfo_SpiOPCID.ToString() : null;
                        query.opcID = key != null ? db.tblOPCS.Count(m => m.legacyKey == key) > 0 ? db.tblOPCS.FirstOrDefault(m => m.legacyKey == key).opcID : (long?)null : (long?)null;
                        query.spiTourID = model.PurchaseInfo_TourID;
                        query.spiTourDate = model.PurchaseInfo_TourDate;

                        db.SaveChanges();
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Purchase Updated";
                        response.ObjectID = query.purchaseID;
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Purchase NOT Updated";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                }
                else
                {
                    try
                    {
                        tblPurchases query = new tblPurchases();
                        query.purchaseID = Guid.NewGuid();
                        query.leadID = model.PurchaseInfo_Lead;
                        query.culture = model.PurchaseInfo_Culture;
                        query.purchaseDateTime = DateTime.Now;
                        //query.originalLandingPage = model.PurchaseInfo_OriginalLandingPage;
                        //query.ipAddress = model.PurchaseInfo_IPAddress;
                        query.promoID = model.PurchaseInfo_Promo != 0 ? model.PurchaseInfo_Promo : (long?)null;
                        query.terminalID = model.PurchaseInfo_Terminal;
                        query.customerRequests = model.PurchaseInfo_CustomerRequests;
                        query.total = model.PurchaseInfo_Total != null ? decimal.Parse(model.PurchaseInfo_Total) : (decimal?)null;
                        int _currency;
                        if (!int.TryParse(model.PurchaseInfo_Currency, out _currency))
                        {
                            _currency = db.tblCurrencies.Single(m => m.currencyCode == model.PurchaseInfo_Currency).currencyID;
                        }
                        query.currencyID = _currency;
                        query.purchaseStatusID = model.PurchaseInfo_PurchaseStatus;
                        query.agentID = model.PurchaseInfo_Agent != null ? Guid.Parse(model.PurchaseInfo_Agent) : (Guid?)null;
                        query.purchaseComments = model.PurchaseInfo_PurchaseComments;
                        query.notes = model.PurchaseInfo_Notes;
                        query.feedback = model.PurchaseInfo_Feedback;
                        query.userID = model.PurchaseInfo_User != null ? Guid.Parse(model.PurchaseInfo_User) : (Guid?)null;
                        query.pointOfSaleID = model.PurchaseInfo_PointOfSale;
                        query.locationID = model.PurchaseInfo_Location != 0 ? model.PurchaseInfo_Location : (int?)null;
                        query.stayingAtPlaceID = model.PurchaseInfo_StayingAtPlace != "0" ? model.PurchaseInfo_StayingAtPlace != "null" ? long.Parse(model.PurchaseInfo_StayingAtPlace) : (long?)null : (long?)null;
                        query.stayingAt = model.PurchaseInfo_StayingAtPlace == "null" ? model.PurchaseInfo_StayingAt : null;
                        query.stayingAtRoom = model.PurchaseInfo_StayingAtRoom;
                        query.deleted = false;
                        query.isTest = false;
                        //manifest fields
                        query.spiMarketingProgram = model.PurchaseInfo_MarketingProgram;
                        query.spiSubdivision = model.PurchaseInfo_Subdivision;
                        query.spiSource = model.PurchaseInfo_Source;
                        query.spiOpcID = model.PurchaseInfo_SpiOPCID;
                        query.spiTourID = model.PurchaseInfo_TourID;
                        query.spiTourDate = model.PurchaseInfo_TourDate;
                        var key = model.PurchaseInfo_SpiOPCID != null ? model.PurchaseInfo_SpiOPCID.ToString() : null;
                        query.opcID = key != null ? db.tblOPCS.Count(m => m.legacyKey == key) > 0 ? db.tblOPCS.FirstOrDefault(m => m.legacyKey == key).opcID : (long?)null : (long?)null;

                        using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                        {
                            IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                        }))
                        {
                            db.tblPurchases.AddObject(query);
                            db.SaveChanges();
                            scope.Complete();
                        }
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Purchase Saved";
                        response.ObjectID = query.purchaseID;
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Purchase NOT Saved";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                }
            }

            public PurchasesModel.PurchaseInfoModel GetPurchase(string PurchaseInfo_PurchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                PurchasesModel.PurchaseInfoModel model = new PurchasesModel.PurchaseInfoModel();
                Guid purchaseID = Guid.Parse(PurchaseInfo_PurchaseID);
                var query = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                model.PurchaseInfo_PurchaseID = query.purchaseID;
                model.PurchaseInfo_Lead = query.leadID;
                model.PurchaseInfo_Culture = query.culture;
                model.PurchaseInfo_PurchaseDateTime = query.purchaseDateTime.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture);
                model.PurchaseInfo_OriginalLandingPage = query.originalLandingPage;
                model.PurchaseInfo_IPAddress = query.ipAddress;
                if (query.promoID != null)
                {
                    model.PurchaseInfo_Promo = (int)query.promoID;
                }
                model.PurchaseInfo_Terminal = (int)query.terminalID;
                model.PurchaseInfo_CustomerRequests = query.customerRequests;
                if (query.total != null)
                {
                    model.PurchaseInfo_Total = query.total != null ? query.total.ToString() : "";
                }
                if (query.currencyID != null)
                {
                    model.PurchaseInfo_Currency = query.tblCurrencies.currencyCode;
                }
                model.PurchaseInfo_PurchaseStatus = query.purchaseStatusID;
                if (query.agentID != null)
                {
                    model.PurchaseInfo_Agent = query.agentID.ToString();
                }
                model.PurchaseInfo_PurchaseComments = query.purchaseComments;
                model.PurchaseInfo_Notes = query.notes;
                model.PurchaseInfo_Feedback = query.feedback;
                if (query.userID != null)
                {
                    model.PurchaseInfo_User = query.userID.ToString();
                }
                model.PurchaseInfo_Location = query.locationID;
                model.PurchaseInfo_PointOfSale = query.pointOfSaleID;
                model.PurchaseInfo_PointOfSaleAcceptCharges = query.tblPointsOfSale.acceptCharges;
                model.PurchaseInfo_StayingAtPlace = query.stayingAtPlaceID != null ? query.stayingAtPlaceID.ToString() : query.stayingAt != null ? "null" : "0";
                model.PurchaseInfo_StayingAt = query.stayingAt;
                model.PurchaseInfo_StayingAtRoom = query.stayingAtRoom;
                model.PurchaseInfo_BankCommission = GetBankCommission(query.terminalID, DateTime.Now);
                model.PurchaseInfo_AllowUnitsEdition = query.tblPointsOfSale.dealPriceEdition ?? false;
                var flagsByTerminalPurchase = new
                {
                    bankCommission = GetBankCommission(query.terminalID, DateTime.Now),
                    printInColumn = query.tblTerminals.useTicketPrinters,//db.tblTerminals.Single(m => m.terminalID == query.terminalID).useTicketPrinters,
                    invoiceChargeBackToMarketingCompany = db.tblTerminals.Single(m => m.terminalID == query.terminalID).invoiceChargeBacksToMarketingCompany,
                    className = query.tblTerminals.prefix
                };

                model.PurchaseInfo_FlagsByTerminalPurchase = new JavaScriptSerializer().Serialize(flagsByTerminalPurchase);
                //manifest fields
                model.PurchaseInfo_MarketingProgram = query.spiMarketingProgram;
                model.PurchaseInfo_Subdivision = query.spiSubdivision;
                model.PurchaseInfo_Source = query.spiSource;
                model.PurchaseInfo_SpiOPCID = query.spiOpcID != null ? (int)query.spiOpcID : (int?)null;
                model.PurchaseInfo_OPCID = query.opcID != null ? (int)query.opcID : (int?)null;
                model.PurchaseInfo_TourID = query.spiTourID != null ? (int)query.spiTourID : (int?)null;
                model.PurchaseInfo_TourDate = query.spiTourDate;
                return model;
            }

            public List<PurchasesModel.PurchaseInfoModel> GetLeadPurchases(string PurchaseInfo_Lead)
            {
                ePlatEntities db = new ePlatEntities();
                List<PurchasesModel.PurchaseInfoModel> list = new List<PurchasesModel.PurchaseInfoModel>();
                Guid leadID = Guid.Parse(PurchaseInfo_Lead);

                var query = db.tblPurchases.Where(m => m.leadID == leadID && m.deleted == false).OrderByDescending(m => m.purchaseDateTime);

                foreach (var i in query)
                {
                    var coupons = db.tblPurchases_Services.Where(m => m.purchaseID == i.purchaseID).Count();
                    //var pictures = "";
                    //foreach(var a in i.tblPurchases_Services.Where(m => m.purchaseID == i.purchaseID).Select(m => m.serviceID)){
                    //    pictures += PictureDataModel.GetMainPicture(1, a) + '|';
                    //}
                    list.Add(new PurchasesModel.PurchaseInfoModel()
                    {
                        PurchaseInfo_PurchaseID = i.purchaseID,
                        PurchaseInfo_PurchaseServicesQuantity = coupons.ToString(),
                        //PurchaseInfo_PurchaseServicesQuantity = pictures.TrimEnd('|'),
                        PurchaseInfo_PurchaseStatusString = i.tblPurchaseStatus.purchaseStatus,
                        PurchaseInfo_PurchaseDateTime = i.purchaseDateTime.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture),
                        PurchaseInfo_Total = i.total != null ? i.total.ToString() : "",
                        PurchaseInfo_Currency = i.tblCurrencies.currencyCode,
                        PurchaseInfo_User = i.userID != null ? i.aspnet_Users.UserName : "",
                        PurchaseInfo_PointOfSaleString = i.tblPointsOfSale.pointOfSale,
                        PurchaseInfo_TerminalString = i.tblTerminals.terminal
                    });
                }
                return list;
            }

            public AttemptResponse DeletePurchase(string PurchaseID)
            {
                AttemptResponse response = new AttemptResponse();
                ePlatEntities db = new ePlatEntities();
                try
                {
                    var purchaseID = Guid.Parse(PurchaseID);
                    var query = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                    query.deleted = true;
                    query.deletedByUserID = session.UserID;
                    db.SaveChanges();
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Purchase Deleted";
                    response.ObjectID = PurchaseID;
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Purchase NOT Deleted";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            public List<PurchasesModel.PurchaseServiceModel> GetPurchaseServices(string PurchaseService_PurchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<PurchasesModel.PurchaseServiceModel>();
                var purchaseID = Guid.Parse(PurchaseService_PurchaseID);
                var query = db.tblPurchases_Services.Where(m => m.purchaseID == purchaseID);

                foreach (var i in query)
                {
                    var coupon = db.tblPurchaseServiceDetails.Any(m => m.purchase_ServiceID == i.purchase_ServiceID && m.coupon != null) ? db.tblPurchaseServiceDetails.Where(m => m.purchase_ServiceID == i.purchase_ServiceID).FirstOrDefault().coupon : "";
                    list.Add(new PurchasesModel.PurchaseServiceModel()
                    {
                        PurchaseService_PurchaseServiceID = i.purchase_ServiceID,
                        PurchaseService_MainPicture = PictureDataModel.GetMainPicture(1, i.serviceID),
                        PurchaseService_Purchase = i.purchaseID,
                        PurchaseService_ServiceString = i.tblServices.service,
                        PurchaseService_CouponNumber = coupon != "" ? coupon.Substring(0, coupon.IndexOf('-')) : "",
                        PurchaseService_ServiceDateTime = i.serviceDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                        //esta propiedad se cargará distinto para poder mostrar la hora exacta del horario
                        //PurchaseService_WeeklyAvailabilityString = i.weeklyAvailabilityID != null ? i.tblWeeklyAvailability.hour.ToString() : i.tblServices.transportationService ? i.customMeetingTime.ToString() : "",
                        PurchaseService_WeeklyAvailabilityString = i.weeklyAvailabilityID != null ? GeneralFunctions.DateFormat.ToMeridianHour((i.serviceDateTime.TimeOfDay != DateTime.Today.TimeOfDay ? i.serviceDateTime.TimeOfDay.ToString() : i.tblWeeklyAvailability.hour.ToString())) : i.tblServices.transportationService ? GeneralFunctions.DateFormat.ToMeridianHour(i.customMeetingTime.ToString()) : "",
                        PurchaseService_MeetingPointString = i.meetingPointID != null ? i.tblMeetingPoints.placeID != null ? i.tblMeetingPoints.tblPlaces.place + i.tblMeetingPoints.hour : "At your Hotel " + i.tblMeetingPoints.hour : i.customMeetingPlace != null ? i.customMeetingPlace : "",
                        PurchaseService_Promo = i.promoID != null ? (long)i.promoID : 0,
                        PurchaseService_PromoString = i.promoID != null ? new JavaScriptSerializer().Serialize(new { promoID = i.promoID, promo = i.tblPromos.promo, isPackable = i.tblPromos.isPackage, date = (i.confirmationDateTime != null ? ((DateTime)i.confirmationDateTime).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "") }) : new JavaScriptSerializer().Serialize(new { promoID = 0, promo = "", isPackable = false, date = "" }),
                        //PurchaseService_Total = i.total.ToString(),
                        PurchaseService_Total = i.total.ToString(),
                        PurchaseService_Currency = i.currencyID != null ? i.tblCurrencies.currencyCode : "",
                        PurchaseService_ServiceStatus = i.serviceStatusID,
                        PurchaseService_ServiceStatusString = i.tblPurchaseServiceStatus.purchaseServiceStatus,
                        PurchaseService_ConfirmationDateTime = i.confirmationDateTime != null ? ((DateTime)i.confirmationDateTime).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                        PurchaseService_CancelationDateTime = i.cancelationDateTime != null ? ((DateTime)i.cancelationDateTime).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                        PurchaseService_Issued = i.issued ?? false
                    });
                }
                return list;
            }

            public AttemptResponse _SavePurchaseService(PurchasesModel.PurchaseServiceModel model)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();

                var now = DateTime.Now;
                TimeSpan _time;
                var purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchaseService_Purchase);
                var isTransportation = IsTransportation(model.PurchaseService_Service);

                if (model.PurchaseService_PurchaseServiceID == 0)
                {
                    #region "new"
                    tblPurchases_Services ps = new tblPurchases_Services();

                    ps.serviceID = model.PurchaseService_Service;
                    ps.dateSaved = now;
                    ps.wholeStay = false;
                    ps.serviceDateTime = Convert.ToDateTime(model.PurchaseService_ServiceDateTime + " " + (TimeSpan.TryParse(GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString), out _time) ? GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString) : GeneralFunctions.DateFormat.ToMilitarHour(DateTime.Today.TimeOfDay.ToString())));
                    ps.openCouponMonths = model.PurchaseService_OpenCoupon;
                    ps.weeklyAvailabilityID = model.PurchaseService_WeeklyAvailability != 0 ? model.PurchaseService_WeeklyAvailability : (long?)null;
                    ps.meetingPointID = model.PurchaseService_MeetingPoint != "0" && model.PurchaseService_MeetingPoint != "null" ? long.Parse(model.PurchaseService_MeetingPoint) : (long?)null;
                    ps.serviceStatusID = model.PurchaseService_ServiceStatus;
                    ps.couponReference = model.PurchaseService_CouponReference;
                    ps.promoID = model.PurchaseService_Promo != 0 ? model.PurchaseService_Promo : (long?)null;
                    ps.total = new int[] { 4, 5 }.Contains(model.PurchaseService_ServiceStatus) ? (model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : 0) : model.PurchaseService_Total != null ? decimal.Parse(model.PurchaseService_Total) : 0;
                    ps.currencyID = purchase.currencyID;//it is always the same
                    ps.reservedFor = model.PurchaseService_ReservedFor;
                    ps.childrenAges = model.PurchaseService_ChildrenAges;
                    ps.customMeetingPlace = model.PurchaseService_MeetingPoint == "null" ? model.PurchaseService_CustomMeetingPoint : null;
                    ps.customMeetingTime = model.PurchaseService_CustomMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_CustomMeetingTime, CultureInfo.InvariantCulture) : (TimeSpan?)null;
                    ps.note = model.PurchaseService_Note;

                    #region "fields for trasportation"
                    if (isTransportation.Key)
                    {
                        ps.airline = model.PurchaseService_Airline;
                        ps.flightNumber = model.PurchaseService_FlightNumber;
                        ps.transportationZoneID = model.PurchaseService_TransportationZone;
                        if (isTransportation.Value && model.PurchaseService_Round)
                        {
                            ps.round = true;
                            ps.roundAirline = model.PurchaseService_RoundAirline;
                            ps.roundFlightNumber = model.PurchaseService_RoundFlightNumber;
                            ps.roundFlightTime = model.PurchaseService_RoundFlightTime != null ? TimeSpan.Parse(model.PurchaseService_RoundFlightTime, CultureInfo.InvariantCulture) : (TimeSpan?)null;
                            ps.roundDate = model.PurchaseService_RoundDate != null ? DateTime.Parse(model.PurchaseService_RoundDate, CultureInfo.InvariantCulture) : (DateTime?)null;
                            ps.roundMeetingTime = model.PurchaseService_RoundMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_RoundMeetingTime, CultureInfo.InvariantCulture) : (TimeSpan?)null;
                        }
                    }
                    #endregion

                    ps.specialRequest = model.PurchaseService_SpecialRequest;
                    ps.printCounter = 0;
                    ps.replacementOf = model.PurchaseService_ReplacementOf != null && model.PurchaseService_ReplacementOf != "0" ? long.Parse(model.PurchaseService_ReplacementOf) : (long?)null;
                    if (new int[] { 4, 5 }.Contains(model.PurchaseService_ServiceStatus))
                    {
                        ps.cancelationCharge = model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : 0;
                        ps.cancelationDateTime = now;
                        ps.cancelationNumber = model.PurchaseService_CancelationNumber;
                        ps.canceledByUserID = model.PurchaseService_CanceledByUser != "" ? Guid.Parse(model.PurchaseService_CanceledByUser) : session.UserID;
                    }
                    else if (model.PurchaseService_ServiceStatus == 3)
                    {
                        ps.confirmationNumber = model.PurchaseService_ConfirmationNumber;
                        ps.confirmationDateTime = now;
                        ps.confirmedByUserID = model.PurchaseService_ConfirmedByUser != "" ? Guid.Parse(model.PurchaseService_ConfirmedByUser) : session.UserID;
                    }
                    else if (model.PurchaseService_ServiceStatus == 6)
                    {
                        ps.noShowDateTime = now;
                        ps.noShowByUserID = model.PurchaseService_ConfirmedByUser != "" ? Guid.Parse(model.PurchaseService_ConfirmedByUser) : session.UserID;
                    }
                    ps.soldByOPC = model.PurchaseService_SoldByOPC;

                    #region "purchase service details"
                    if (model.ListPurchaseServiceDetails != null)
                    {
                        //validar folio en funcion externa
                        var isValidFolio = ValidateFolioFromModel(purchase, model.ListPurchaseServiceDetails.FirstOrDefault().Coupon, model.PurchaseService_Promo);
                        foreach (var unit in model.ListPurchaseServiceDetails)
                        {
                            tblPurchaseServiceDetails psd = new tblPurchaseServiceDetails();
                            psd.quantity = unit.Quantity;
                            psd.customPrice = unit.CustomPrice;
                            psd.netPriceID = unit.PriceID;
                            psd.promo = unit.Promo;
                            psd.priceTypeID = unit.PriceTypeID;
                            psd.dealPrice = unit.DealPrice;
                            psd.exchangeRateID = unit.ExchangeRateID;
                            //psd.coupon = pendiente asignar

                            #region "stock transactions"
                            if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == model.PurchaseService_Service) > 0)//is product and have stock
                            {
                                tblStocks stock = db.tblStocks.FirstOrDefault(m => m.serviceID == model.PurchaseService_Service);
                                tblStockTransactions transaction = new tblStockTransactions();
                                transaction.stockID = stock.stockID;
                                transaction.quantity = unit.Quantity;
                                transaction.dateSaved = now;
                                transaction.savedByUserID = session.UserID;
                                transaction.ingress = model.PurchaseService_ServiceStatus <= 3 ? false : true;
                                transaction.transactionDescription = model.PurchaseService_ServiceStatus <= 3 ? "Sale" : "Refund/Cancelation";
                                stock.quantity = model.PurchaseService_ServiceStatus <= 3 ? (stock.quantity - unit.Quantity) : (stock.quantity + unit.Quantity);
                                stock.dateModified = now;
                                stock.modifiedByUserID = session.UserID;
                                psd.tblStockTransactions.Add(transaction);
                            }
                            #endregion

                            ps.tblPurchaseServiceDetails.Add(psd);
                        }
                    }
                    #endregion
                    #endregion
                }
                return response;
            }

            public bool ValidateFolioFromModel(tblPurchases purchase, string folio, long promoID)
            {
                ePlatEntities db = new ePlatEntities();
                var promo = promoID != 0 ? db.tblPromos.Single(m => m.promoID == promoID) : null;
                var book = db.tblCouponFolios.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.available > 0).OrderBy(m => m.dateSaved).FirstOrDefault();
                var bookNextFolio = book.toFolio - book.available + 1;
                var serial = book.serial;
                var folioFromModel = folio.Split('-')[0];

                if (folioFromModel == (serial + String.Format("{0:D7}", bookNextFolio)))
                {
                    return true;
                }
                else if (promo.isPackage)
                {
                    var repeatedFolios = from psd in db.tblPurchaseServiceDetails
                                         join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                         join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                         where psd.coupon.Contains(folioFromModel)
                                         && p.terminalID == purchase.terminalID
                                         && p.pointOfSaleID == purchase.pointOfSaleID
                                         select psd;

                    if (repeatedFolios.Count(m => m.tblPurchases_Services.promoID == promoID) > 0)
                    {
                        return true;
                    }
                    else
                    {
                        return false;//en estos casos realizar la obtención del folio siguiente válido.
                    }
                }
                else
                {
                    return false;//en estos casos realizar la obtención del folio siguiente válido.
                }
            }

            public AttemptResponse SavePurchaseService(PurchasesModel.PurchaseServiceModel model)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                var _now = DateTime.Now;

                if (model.PurchaseService_PurchaseServiceID != 0)
                {
                    #region "update purchase_service"
                    try
                    {
                        var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == model.PurchaseService_PurchaseServiceID);
                        var isFolioInUse = false;
                        var counter = 0;
                        //valida que el cupon no esté confirmado, cancelado y que no se esté intentando cancelar
                        if (model.PurchaseService_ServiceStatus < 4 && purchase_service.serviceStatusID < 3)//  booking/pending => booking/pending/confirmed
                        {
                            #region
                            purchase_service.serviceID = model.PurchaseService_Service;
                            //if wholeStay will be visible in form, change this code
                            purchase_service.wholeStay = false;
                            purchase_service.promoID = model.PurchaseService_Promo != 0 ? (long)model.PurchaseService_Promo : (long?)null;
                            if (model.PurchaseService_Currency != null)
                            {
                                purchase_service.currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchaseService_Currency).currencyID;
                            }
                            purchase_service.reservedFor = model.PurchaseService_ReservedFor;
                            purchase_service.childrenAges = model.PurchaseService_ChildrenAges != null ? model.PurchaseService_ChildrenAges : null;

                            var savedUnits = db.tblPurchaseServiceDetails.Where(m => m.purchase_ServiceID == purchase_service.purchase_ServiceID).ToArray();
                            var modelUnits = model.ListPurchaseServiceDetails.ToArray();

                            foreach (var i in modelUnits)
                            {
                                if (i.ServiceDetailID != null && i.ServiceDetailID != 0)//if model unit is already saved
                                {
                                    savedUnits = savedUnits.Where(m => m.purchaseServiceDetailID != i.ServiceDetailID).ToArray();
                                }
                            }

                            if (savedUnits.Count() > 0)
                            {
                                foreach (var i in savedUnits)
                                {
                                    if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == model.PurchaseService_Service) > 0)//product
                                    {
                                        tblStocks stock = db.tblStocks.Where(m => m.serviceID == model.PurchaseService_Service).FirstOrDefault();
                                        tblStockTransactions transaction = new tblStockTransactions();
                                        transaction.stockID = stock.stockID;
                                        transaction.purchaseServiceDetailID = i.purchaseServiceDetailID;
                                        transaction.quantity = i.quantity;
                                        transaction.dateSaved = _now;
                                        transaction.savedByUserID = session.UserID;
                                        transaction.ingress = true;
                                        transaction.transactionDescription = "purchase service detail deleted by update";
                                        db.tblStockTransactions.AddObject(transaction);
                                        stock.quantity += i.quantity;
                                    }
                                    db.DeleteObject(i);
                                }
                            }

                            if (modelUnits.Count() != 0 || savedUnits.Count() != 0)
                            {
                                if (db.tblCloseOuts_Purchases.Where(m => m.purchase_ServiceID == purchase_service.purchase_ServiceID).Count() > 0 && model.PurchaseService_ServiceStatus > 3)
                                {
                                    throw new Exception("Cannot modify coupon units because it is related to a closeout already.");
                                }
                            }

                            if (model.ListPurchaseServiceDetails != null)
                            {
                                ///////new code
                                var nextCouponProperties = GetNextCouponFolio(purchase_service.purchaseID);//format: {folio = "Z,43", padding = "7", isFirstOfSerie = "false" }
                                var nextCouponFolio = nextCouponProperties.GetType().GetProperty("folio").GetValue(nextCouponProperties, null).ToString();//format: "Z,43"
                                var nextCouponPadding = nextCouponProperties.GetType().GetProperty("padding").GetValue(nextCouponProperties, null).ToString();
                                var lastUsedFolio = nextCouponProperties.GetType().GetProperty("lastUsedFolio").GetValue(nextCouponProperties, null).ToString();//format: "Z0000043"
                                var folioFromModel = (model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "") ? model.ListPurchaseServiceDetails.FirstOrDefault().Coupon.Split('-')[0] : null;//format: Z0000043 : null
                                var nextCouponFirstOfSerie = bool.Parse(nextCouponProperties.GetType().GetProperty("isFirstOfSerie").GetValue(nextCouponProperties, null).ToString());
                                var nextFolio = nextCouponFolio.Split(',')[0] + String.Format("{0:D" + nextCouponPadding + "}", long.Parse(nextCouponFolio.Split(',')[1]));//format: Z0000043
                                var packablePromo = model.PurchaseService_Promo != 0 && db.tblPromos.Single(m => m.promoID == model.PurchaseService_Promo).isPackage;

                                //if (folioFromModel != "0" && folioFromModel != "")
                                //{
                                foreach (var i in model.ListPurchaseServiceDetails)
                                {
                                    if (i.ServiceDetailID == null || i.ServiceDetailID == 0)
                                    {
                                        tblPurchaseServiceDetails purchaseServiceDetails = new tblPurchaseServiceDetails();
                                        purchaseServiceDetails.purchase_ServiceID = purchase_service.purchase_ServiceID;
                                        purchaseServiceDetails.quantity = i.Quantity;
                                        purchaseServiceDetails.coupon = folioFromModel != null ? nextFolio + "-" + i.Coupon.Split('-')[1] : folioFromModel;
                                        purchaseServiceDetails.customPrice = i.CustomPrice;
                                        if (i.PriceTypeID != null)
                                        {
                                            purchaseServiceDetails.netPriceID = i.PriceID;
                                        }
                                        else
                                        {
                                            purchaseServiceDetails.priceID = i.PriceID;
                                        }
                                        purchaseServiceDetails.promo = i.Promo;
                                        purchaseServiceDetails.priceTypeID = i.PriceTypeID != 0 ? i.PriceTypeID : (int?)null;
                                        purchaseServiceDetails.dealPrice = i.DealPrice;
                                        purchaseServiceDetails.exchangeRateID = i.ExchangeRateID != null ? i.ExchangeRateID : (long?)null;

                                        #region "stock transactions"
                                        if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == model.PurchaseService_Service) > 0)//product
                                        {
                                            tblStocks stock = db.tblStocks.Where(m => m.serviceID == model.PurchaseService_Service).FirstOrDefault();
                                            tblStockTransactions transaction = new tblStockTransactions();
                                            transaction.stockID = stock.stockID;
                                            transaction.quantity = i.Quantity;
                                            transaction.dateSaved = _now;
                                            transaction.savedByUserID = session.UserID;
                                            transaction.ingress = model.PurchaseService_ServiceStatus <= 3 ? false : true;
                                            transaction.transactionDescription = model.PurchaseService_ServiceStatus <= 3 ? "Sale" : "Refund/Cancelation";
                                            purchaseServiceDetails.tblStockTransactions.Add(transaction);
                                            stock.quantity = model.PurchaseService_ServiceStatus <= 3 ? (stock.quantity - i.Quantity) : (stock.quantity + i.Quantity);
                                            stock.dateModified = _now;
                                            stock.modifiedByUserID = session.UserID;
                                        }
                                        #endregion

                                        db.tblPurchaseServiceDetails.AddObject(purchaseServiceDetails);
                                    }
                                    //    //en teoría esto no se necesita ejecutar pues las unidades ya guardas, fueron eliminadas arriba
                                    else
                                    {
                                        var purchaseServiceDetails = db.tblPurchaseServiceDetails.Single(m => m.purchaseServiceDetailID == i.ServiceDetailID);
                                        purchaseServiceDetails.purchase_ServiceID = purchase_service.purchase_ServiceID;
                                        purchaseServiceDetails.quantity = i.Quantity;
                                        //purchaseServiceDetails.coupon = folioFromModel != null ? nextFolio + "-" + i.Coupon.Split('-')[1] : folioFromModel;
                                        purchaseServiceDetails.coupon = folioFromModel != null ? packablePromo ? i.Coupon : nextFolio + "-" + i.Coupon.Split('-')[1] : folioFromModel;
                                        purchaseServiceDetails.customPrice = i.CustomPrice;
                                        if (i.PriceTypeID != null)
                                        {
                                            purchaseServiceDetails.netPriceID = i.PriceID;
                                        }
                                        else
                                        {
                                            purchaseServiceDetails.priceID = i.PriceID;
                                        }
                                        purchaseServiceDetails.promo = i.Promo;
                                        purchaseServiceDetails.priceTypeID = i.PriceTypeID != 0 ? i.PriceTypeID : (int?)null;
                                        purchaseServiceDetails.exchangeRateID = i.ExchangeRateID != null ? i.ExchangeRateID : (long?)null;
                                    }
                                }
                                if (folioFromModel != null)
                                {
                                    if (model.PurchaseService_ServiceStatus == 3 && (!packablePromo || (packablePromo && nextFolio == folioFromModel)))
                                    {
                                        //update counters
                                        var folios = db.tblCouponFolios.Where(m => m.pointOfSaleID == purchase_service.tblPurchases.pointOfSaleID && m.available > 0);
                                        if (folios.Count() > 1)
                                        {
                                            var date = folios.Min(m => m.dateSaved);
                                            var folio = folios.Single(m => m.dateSaved == date);
                                            folio.generated = folio.generated + 1;
                                            folio.available = folio.available - 1;
                                        }
                                        else
                                        {
                                            var folio = folios.FirstOrDefault();
                                            folio.generated = folio.generated + 1;
                                            folio.available = folio.available - 1;
                                        }
                                    }
                                }
                                //}
                            }
                            #endregion
                        }
                        #region "deal price modification once it is confirmed"
                        if (purchase_service.serviceStatusID == 3 && model.PurchaseService_ServiceStatus == 3 && (GeneralFunctions.IsUserInRole("External Reservations Supervisor CAX") || GeneralFunctions.IsUserInRole("Administrator")))
                        {
                            foreach (var i in model.ListPurchaseServiceDetails)
                            {
                                var serviceDetail = purchase_service.tblPurchaseServiceDetails.Single(m => m.purchaseServiceDetailID == i.ServiceDetailID);
                                serviceDetail.quantity = i.Quantity;
                                serviceDetail.customPrice = i.CustomPrice;
                                serviceDetail.dealPrice = i.DealPrice;
                            }
                        }
                        #endregion
                        #region "fields modified depending on model service status"
                        #region "service status confirmed"
                        if (model.PurchaseService_ServiceStatus == 3)
                        {
                            if (purchase_service.confirmationDateTime == null)//first time confirmation
                            {
                                purchase_service.confirmationDateTime = _now;
                                //transaction generated above
                            }
                            else//reconfirmation
                            {
                                //update stock by adding new transaction
                                if (purchase_service.tblServices.itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == purchase_service.serviceID) > 0)
                                {
                                    var stock = db.tblStocks.Where(m => m.serviceID == purchase_service.serviceID);
                                    if (stock.Count() > 0)
                                    {
                                        foreach (var serviceDetail in purchase_service.tblPurchaseServiceDetails)
                                        {
                                            var transaction = new tblStockTransactions();
                                            transaction.stockID = stock.FirstOrDefault().stockID;
                                            transaction.purchaseServiceDetailID = serviceDetail.purchaseServiceDetailID;
                                            transaction.quantity = serviceDetail.quantity;
                                            transaction.dateSaved = _now;
                                            transaction.savedByUserID = session.UserID;
                                            transaction.ingress = false;
                                            transaction.transactionDescription = "Sale Confirmed";
                                            db.tblStockTransactions.AddObject(transaction);
                                            stock.FirstOrDefault().quantity -= transaction.quantity;
                                        }
                                    }
                                }
                            }

                            //if (model.PurchaseService_ConfirmedByUser != "" && model.PurchaseService_ConfirmedByUser != null)// change of user that confirmed
                            if (model.PurchaseService_ConfirmedByUser != "" && model.PurchaseService_ConfirmedByUser != null && purchase_service.tblCloseOuts_Purchases.Count() == 0)// change of user that confirmed
                            {
                                purchase_service.confirmedByUserID = Guid.Parse(model.PurchaseService_ConfirmedByUser);
                            }
                            else
                            {
                                if (purchase_service.confirmedByUserID == null)
                                {
                                    purchase_service.confirmedByUserID = session.UserID;
                                }
                            }
                            purchase_service.cancelationDateTime = null;
                            purchase_service.canceledByUserID = null;
                            purchase_service.cancelationNumber = null;
                            purchase_service.cancelationCharge = null;
                            purchase_service.noShowByUserID = null;
                            purchase_service.noShowDateTime = null;
                        }
                        #endregion
                        #region "service status noShow"
                        if (model.PurchaseService_ServiceStatus == 6 && purchase_service.noShowDateTime == null)
                        {
                            purchase_service.noShowByUserID = session.UserID;
                            purchase_service.noShowDateTime = _now;
                        }
                        #endregion
                        #region "service status canceled-refunded"
                        var purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchaseService_Purchase);
                        if (model.PurchaseService_ServiceStatus >= 4 && model.PurchaseService_ServiceStatus != 6)
                        {
                            //line added to change total in case of cancelation/refund
                            if (model.PurchaseService_CanceledByUser != "" && model.PurchaseService_CanceledByUser != null)//coupon already canceled, just being updated with same status
                            {
                                purchase_service.canceledByUserID = Guid.Parse(model.PurchaseService_CanceledByUser);
                            }
                            else
                            {
                                if (purchase_service.canceledByUserID == null)//    coupon canceled from other status
                                {
                                    purchase_service.canceledByUserID = session.UserID;
                                    //update stock by adding new transaction
                                    #region "stock"
                                    if (purchase_service.tblServices.itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == purchase_service.serviceID) > 0)
                                    {
                                        var stock = db.tblStocks.Where(m => m.serviceID == purchase_service.serviceID);
                                        if (stock.Count() > 0)
                                        {
                                            foreach (var serviceDetail in purchase_service.tblPurchaseServiceDetails)
                                            {
                                                var transaction = new tblStockTransactions();
                                                transaction.stockID = stock.FirstOrDefault().stockID;
                                                transaction.purchaseServiceDetailID = serviceDetail.purchaseServiceDetailID;
                                                transaction.quantity = serviceDetail.quantity;
                                                transaction.dateSaved = _now;
                                                transaction.savedByUserID = session.UserID;
                                                transaction.ingress = true;
                                                transaction.transactionDescription = "Sale Canceled/Refunded";
                                                db.tblStockTransactions.AddObject(transaction);
                                                stock.FirstOrDefault().quantity += transaction.quantity;
                                            }
                                        }
                                    }
                                    #endregion
                                }
                            }
                            purchase_service.cancelationNumber = model.PurchaseService_CancelationNumber != null ? model.PurchaseService_CancelationNumber : null;
                            purchase_service.cancelationDateTime = model.PurchaseService_CancelationDateTime != null ? model.PurchaseService_CancelationDateTime.IndexOf(":") > 0 ? DateTime.Parse(model.PurchaseService_CancelationDateTime) : DateTime.Parse(model.PurchaseService_CancelationDateTime + " 23:59:59") : DateTime.Now;
                            purchase_service.cancelationCharge = model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : (decimal?)null;
                            purchase_service.total = 0 + (model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : 0);
                        }
                        else
                        {
                            //se suma al total de compra existente el total del servicio guardado
                            purchase_service.total = model.PurchaseService_Total != null ? decimal.Parse(model.PurchaseService_Total) : 0;
                        }
                        #endregion
                        #endregion
                        //allow modification of these values even when status is higher than 3(confirmed)
                        TimeSpan _time;
                        purchase_service.openCouponMonths = model.PurchaseService_OpenCoupon;
                        purchase_service.serviceDateTime = Convert.ToDateTime(model.PurchaseService_ServiceDateTime + " " + (TimeSpan.TryParse(GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString), out _time) ? GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString) : GeneralFunctions.DateFormat.ToMilitarHour(DateTime.Today.TimeOfDay.ToString())));
                        purchase_service.weeklyAvailabilityID = model.PurchaseService_WeeklyAvailability != 0 ? model.PurchaseService_WeeklyAvailability : (long?)null;
                        purchase_service.meetingPointID = model.PurchaseService_MeetingPoint != "0" && model.PurchaseService_MeetingPoint != "null" ? long.Parse(model.PurchaseService_MeetingPoint) : (long?)null;
                        purchase_service.customMeetingPlace = model.PurchaseService_MeetingPoint == "null" ? model.PurchaseService_CustomMeetingPoint : null;
                        purchase_service.customMeetingTime = model.PurchaseService_CustomMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_CustomMeetingTime, CultureInfo.InvariantCulture) : (TimeSpan?)null;
                        purchase_service.confirmationNumber = model.PurchaseService_ConfirmationNumber != null ? model.PurchaseService_ConfirmationNumber : null;
                        purchase_service.note = model.PurchaseService_Note != null ? model.PurchaseService_Note : null;
                        purchase_service.specialRequest = model.PurchaseService_SpecialRequest != null ? model.PurchaseService_SpecialRequest : null;
                        purchase_service.replacementOf = model.PurchaseService_ReplacementOf != "null" ? long.Parse(model.PurchaseService_ReplacementOf) : (long?)null;
                        purchase_service.couponReference = model.PurchaseService_CouponReference;
                        purchase_service.soldByOPC = model.PurchaseService_SoldByOPC;

                        #region "if is service transportation"
                        if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).transportationService)
                        {
                            purchase_service.airline = model.PurchaseService_Airline;
                            purchase_service.flightNumber = model.PurchaseService_FlightNumber;
                            purchase_service.transportationZoneID = model.PurchaseService_TransportationZone != 0 ? model.PurchaseService_TransportationZone : (int?)null;

                            if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).offersRoundTrip)
                            {
                                purchase_service.round = model.PurchaseService_Round;
                                purchase_service.roundAirline = model.PurchaseService_RoundAirline;
                                purchase_service.roundFlightNumber = model.PurchaseService_RoundFlightNumber;
                                purchase_service.roundFlightTime = model.PurchaseService_RoundFlightTime != null ? TimeSpan.Parse(model.PurchaseService_RoundFlightTime) : (TimeSpan?)null;
                                purchase_service.roundDate = model.PurchaseService_RoundDate != null ? DateTime.Parse(model.PurchaseService_RoundDate) : (DateTime?)null;
                                purchase_service.roundMeetingTime = model.PurchaseService_RoundMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_RoundMeetingTime) : (TimeSpan?)null;
                            }
                            else
                            {
                                purchase_service.round = (bool?)null;
                                purchase_service.roundAirline = null;
                                purchase_service.roundFlightNumber = null;
                                purchase_service.roundFlightTime = (TimeSpan?)null;
                                purchase_service.roundDate = (DateTime?)null;
                                purchase_service.roundMeetingTime = (TimeSpan?)null;
                            }
                        }
                        else
                        {
                            purchase_service.airline = null;
                            purchase_service.flightNumber = null;
                            purchase_service.transportationZoneID = (int?)null;
                        }
                        #endregion

                        purchase_service.serviceStatusID = model.PurchaseService_ServiceStatus;
                        
                        if (purchase_service.audit != null && (bool)purchase_service.audit)
                        {
                            throw new Exception("Coupon is already audited");
                        }
                        purchase_service.dateLastModification = _now;
                        purchase_service.modifiedByUserID = session.UserID;
                        db.SaveChanges();
                        purchase.total = GetTotalOfPurchase(purchase.purchaseID);
                        purchase.purchaseStatusID = GetNewStatusOfPurchase(purchase.purchaseID);
                        db.SaveChanges();

                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Coupon Updated";
                        response.ObjectID = new { purchaseServiceID = purchase_service.purchase_ServiceID, purchaseTotal = purchase.total, purchaseStatus = purchase.purchaseStatusID, mainPicture = PictureDataModel.GetMainPicture(1, purchase_service.serviceID), newFolio = purchase_service.tblPurchaseServiceDetails.FirstOrDefault().coupon, datetime = purchase_service.serviceStatusID == 3 ? ((DateTime)purchase_service.confirmationDateTime).ToString("yyyy-MM-dd HH:mm:ss") : (purchase_service.serviceStatusID > 3 && purchase_service.serviceStatusID < 6) ? ((DateTime)purchase_service.cancelationDateTime).ToString("yyyy-MM-dd HH:mm:ss") : "", user = purchase_service.serviceStatusID == 3 ? purchase_service.confirmedByUserID.ToString() : (purchase_service.serviceStatusID > 3 && purchase_service.serviceStatusID < 6) ? purchase_service.canceledByUserID.ToString() : "", isClosed = purchase_service.tblCloseOuts_Purchases.Count() > 0 };
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Coupon NOT Updated";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                    #endregion
                }
                else
                {
                    #region "new purchase_service"
                    try
                    {
                        var purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchaseService_Purchase);
                        tblPurchases_Services purchase_service = new tblPurchases_Services();
                        purchase_service.serviceID = model.PurchaseService_Service;
                        //if wholeStay will be visible in form, change this code
                        purchase_service.wholeStay = false;
                        TimeSpan _time;
                        purchase_service.openCouponMonths = model.PurchaseService_OpenCoupon;
                        purchase_service.serviceDateTime = Convert.ToDateTime(model.PurchaseService_ServiceDateTime + " " + (TimeSpan.TryParse(GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString), out _time) ? GeneralFunctions.DateFormat.ToMilitarHour(model.PurchaseService_WeeklyAvailabilityString) : GeneralFunctions.DateFormat.ToMilitarHour(DateTime.Today.TimeOfDay.ToString())));
                        purchase_service.weeklyAvailabilityID = model.PurchaseService_WeeklyAvailability != 0 ? model.PurchaseService_WeeklyAvailability : (long?)null;
                        purchase_service.meetingPointID = model.PurchaseService_MeetingPoint != "0" && model.PurchaseService_MeetingPoint != "null" ? long.Parse(model.PurchaseService_MeetingPoint) : (long?)null;
                        purchase_service.customMeetingPlace = model.PurchaseService_MeetingPoint == "null" ? model.PurchaseService_CustomMeetingPoint : null;
                        purchase_service.serviceStatusID = model.PurchaseService_ServiceStatus;
                        //registrar cambio de status a no show
                        if (model.PurchaseService_ServiceStatus == 6)
                        {
                            purchase_service.noShowByUserID = session.UserID;
                            purchase_service.noShowDateTime = DateTime.Now;
                        }
                        purchase_service.confirmationNumber = model.PurchaseService_ConfirmationNumber != null ? model.PurchaseService_ConfirmationNumber : null;
                        if (model.PurchaseService_Promo != 0)
                        {
                            purchase_service.promoID = model.PurchaseService_Promo;
                        }
                        purchase_service.total = model.PurchaseService_Total != null ? decimal.Parse(model.PurchaseService_Total.ToString()) : 0;
                        if (model.PurchaseService_Currency != null && model.PurchaseService_Currency != "")//revisar
                        {
                            purchase_service.currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchaseService_Currency).currencyID;
                        }
                        purchase_service.reservedFor = model.PurchaseService_ReservedFor;
                        purchase_service.childrenAges = model.PurchaseService_ChildrenAges != null ? model.PurchaseService_ChildrenAges : null;
                        purchase_service.customMeetingTime = model.PurchaseService_CustomMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_CustomMeetingTime, CultureInfo.InvariantCulture) : (TimeSpan?)null;
                        purchase_service.note = model.PurchaseService_Note != null ? model.PurchaseService_Note : null;
                        purchase_service.specialRequest = model.PurchaseService_SpecialRequest != null ? model.PurchaseService_SpecialRequest : null;
                        #region "is transportation service"
                        if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).transportationService)
                        {
                            purchase_service.airline = model.PurchaseService_Airline;
                            purchase_service.flightNumber = model.PurchaseService_FlightNumber;
                            purchase_service.transportationZoneID = model.PurchaseService_TransportationZone != 0 ? model.PurchaseService_TransportationZone : (int?)null;
                            if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).offersRoundTrip)
                            {
                                purchase_service.round = model.PurchaseService_Round;
                                purchase_service.roundAirline = model.PurchaseService_RoundAirline;
                                purchase_service.roundFlightNumber = model.PurchaseService_RoundFlightNumber;
                                purchase_service.roundFlightTime = model.PurchaseService_RoundFlightTime != null ? TimeSpan.Parse(model.PurchaseService_RoundFlightTime) : (TimeSpan?)null;
                                purchase_service.roundDate = model.PurchaseService_RoundDate != null ? DateTime.Parse(model.PurchaseService_RoundDate) : (DateTime?)null;
                                purchase_service.roundMeetingTime = model.PurchaseService_RoundMeetingTime != null ? TimeSpan.Parse(model.PurchaseService_RoundMeetingTime) : (TimeSpan?)null;
                            }
                        }
                        #endregion
                        #region "serviceStatus == canceled or refunded"
                        if (model.PurchaseService_ServiceStatus >= 4 && model.PurchaseService_ServiceStatus != 6)
                        {
                            if (model.PurchaseService_CanceledByUser != "" && model.PurchaseService_CanceledByUser != null)
                            {
                                purchase_service.canceledByUserID = Guid.Parse(model.PurchaseService_CanceledByUser);
                            }
                            else
                            {
                                purchase_service.canceledByUserID = session.UserID;
                            }
                            purchase_service.total = 0 + (model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : 0);
                            purchase_service.cancelationCharge = model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : (decimal?)null;
                            purchase_service.cancelationNumber = model.PurchaseService_CancelationNumber;
                            purchase_service.cancelationDateTime = _now;
                            purchase_service.confirmationDateTime = model.ListPurchaseServiceDetails != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "" ? _now : (DateTime?)null;
                        }
                        #endregion
                        #region "Set confirmation date and user"
                        if (model.PurchaseService_ServiceStatus == 3)
                        {
                            purchase_service.confirmationDateTime = _now;
                            if (model.PurchaseService_ConfirmedByUser != "" && model.PurchaseService_ConfirmedByUser != null)
                            {
                                purchase_service.confirmedByUserID = Guid.Parse(model.PurchaseService_ConfirmedByUser);
                            }
                            else
                            {
                                purchase_service.confirmedByUserID = session.UserID;
                            }
                        }
                        #endregion
                        purchase_service.dateSaved = _now;
                        purchase_service.audit = false;
                        purchase_service.closeOut = false;
                        purchase_service.issued = false;
                        purchase_service.replacementOf = model.PurchaseService_ReplacementOf != "null" ? long.Parse(model.PurchaseService_ReplacementOf) : (long?)null;
                        purchase_service.couponReference = model.PurchaseService_CouponReference;
                        purchase_service.soldByOPC = model.PurchaseService_SoldByOPC;

                        decimal _purchase = 0;
                        var _purchaseStatus = 0;
                        var isFolioInUse = false;
                        var counter = 0;
                        var packablePromo = model.PurchaseService_Promo != 0 && db.tblPromos.Single(m => m.promoID == model.PurchaseService_Promo).isPackage;

                        //captura de unidades
                        if (model.ListPurchaseServiceDetails != null)
                        {
                            /////new code
                            var nextCouponProperties = GetNextCouponFolio(purchase.purchaseID);//format: {folio = "Z,43", padding = "7", isFirstOfSerie = "false" }
                            var nextCouponFolio = nextCouponProperties.GetType().GetProperty("folio").GetValue(nextCouponProperties, null).ToString();//format: "Z,43"
                            var nextCouponPadding = nextCouponProperties.GetType().GetProperty("padding").GetValue(nextCouponProperties, null).ToString();
                            var lastUsedFolio = nextCouponProperties.GetType().GetProperty("lastUsedFolio").GetValue(nextCouponProperties, null).ToString();//format: "Z0000043"
                            var lastUsedPurchase = nextCouponProperties.GetType().GetProperty("lastUsedPurchase").GetValue(nextCouponProperties, null).ToString();//format: "Z0000043"
                            var folioFromModel = (model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "") ? model.ListPurchaseServiceDetails.FirstOrDefault().Coupon.Split('-')[0] : null;//format: Z0000043 : null
                            var nextCouponFirstOfSerie = bool.Parse(nextCouponProperties.GetType().GetProperty("isFirstOfSerie").GetValue(nextCouponProperties, null).ToString());
                            var nextFolio = nextCouponFolio.Split(',')[0] + String.Format("{0:D" + nextCouponPadding + "}", long.Parse(nextCouponFolio.Split(',')[1]));//format: Z0000043

                            //if (folioFromModel != "0" && folioFromModel != "" && (nextFolio == folioFromModel || folioFromModel == null || packablePromo))
                            if (folioFromModel != "0" && folioFromModel != "")
                            {
                                foreach (var i in model.ListPurchaseServiceDetails)
                                {
                                    tblPurchaseServiceDetails purchaseServiceDetails = new tblPurchaseServiceDetails();
                                    purchaseServiceDetails.quantity = i.Quantity;
                                    purchaseServiceDetails.coupon = folioFromModel != null ? packablePromo && lastUsedPurchase == model.PurchaseService_Purchase.ToString() ? i.Coupon : nextFolio + "-" + i.Coupon.Split('-')[1] : folioFromModel;
                                    purchaseServiceDetails.customPrice = i.CustomPrice;
                                    purchaseServiceDetails.netPriceID = i.PriceID;
                                    purchaseServiceDetails.promo = i.Promo;
                                    purchaseServiceDetails.priceTypeID = i.PriceTypeID;
                                    purchaseServiceDetails.dealPrice = i.DealPrice;//revisar si llega como nulo o como 0
                                    purchaseServiceDetails.exchangeRateID = i.ExchangeRateID;
                                    //stocks
                                    if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == model.PurchaseService_Service) > 0)//product
                                    {
                                        tblStocks stock = db.tblStocks.Where(m => m.serviceID == model.PurchaseService_Service).FirstOrDefault();
                                        tblStockTransactions transaction = new tblStockTransactions();
                                        transaction.stockID = stock.stockID;
                                        transaction.quantity = i.Quantity;
                                        transaction.dateSaved = _now;
                                        transaction.savedByUserID = session.UserID;
                                        transaction.ingress = model.PurchaseService_ServiceStatus <= 3 ? false : true;
                                        transaction.transactionDescription = model.PurchaseService_ServiceStatus <= 3 ? "Sale" : "Refund/Cancelation";
                                        purchaseServiceDetails.tblStockTransactions.Add(transaction);
                                        stock.quantity = model.PurchaseService_ServiceStatus <= 3 ? (stock.quantity - i.Quantity) : (stock.quantity + i.Quantity);
                                        stock.dateModified = _now;
                                        stock.modifiedByUserID = session.UserID;
                                    }
                                    purchase_service.tblPurchaseServiceDetails.Add(purchaseServiceDetails);
                                    //end stocks
                                }

                                if (folioFromModel != null)
                                {
                                    //if (model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "" && (model.PurchaseService_ServiceStatus >= 4 && model.PurchaseService_ServiceStatus != 6))
                                    //if (model.PurchaseService_ServiceStatus == 3)
                                    if (model.PurchaseService_ServiceStatus == 3 && (!packablePromo || (packablePromo && nextFolio == folioFromModel)))
                                    {
                                        //update counters
                                        var folios = db.tblCouponFolios.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.available > 0);
                                        if (folios.Count() > 1)
                                        {
                                            var date = folios.Min(m => m.dateSaved);
                                            var folio = folios.Single(m => m.dateSaved == date);
                                            folio.generated = folio.generated + 1;
                                            folio.available = folio.available - 1;
                                        }
                                        else
                                        {
                                            var folio = folios.FirstOrDefault();
                                            folio.generated = folio.generated + 1;
                                            folio.available = folio.available - 1;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                throw new Exception();
                            }

                            ////

                            #region "save purchaseServiceDetails"
                            //var nextCouponFolio = GetNextCouponFolio(purchase.purchaseID);
                            ////modelFolio 
                            //var _modelFolio = model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "" ? model.ListPurchaseServiceDetails.FirstOrDefault().Coupon.Split('-')[0] : null;//Z0000043 | null

                            //var _padding = nextCouponFolio.GetType().GetProperty("padding").GetValue(nextCouponFolio, null).ToString();
                            ////firstFolioInSerie
                            //bool isFirstFolio = bool.Parse(nextCouponFolio.GetType().GetProperty("isFirstOfSerie").GetValue(nextCouponFolio, null).ToString());
                            ////couponSeries
                            //var folios = db.tblCouponFolios.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.available > 0);
                            //var _lastUsedFolio = 0;
                            //var _folioToSave = 0;
                            //var _serialPosition = 0;

                            //if (_modelFolio != null)
                            //{
                            //    //check if same folio exists in same terminal
                            //    isFolioInUse = db.tblPurchaseServiceDetails.Where(m => m.tblPurchases_Services.tblPurchases.terminalID == purchase.terminalID && m.coupon.Contains(_modelFolio)).Count() != 0;
                            //    //check if another purchase of same terminal has same folio
                            //    isFolioInUse = packablePromo ? db.tblPurchaseServiceDetails.Where(m => m.tblPurchases_Services.tblPurchases.terminalID == purchase.terminalID && m.tblPurchases_Services.purchaseID != purchase.purchaseID && m.coupon.Contains(_modelFolio)).Count() != 0 : isFolioInUse;
                            //    var serial = Regex.Split(_modelFolio.Trim(), string.Empty);
                            //    for (var i = 0; i < serial.Length; i++)
                            //    {
                            //        int s;
                            //        if (int.TryParse(serial[i], out s))
                            //        {
                            //            _serialPosition = i;
                            //            break;
                            //        }
                            //    }
                            //    //get 20 most recent folios of same terminal
                            //    var _coupons = db.tblPurchaseServiceDetails.Where(m => m.tblPurchases_Services.tblPurchases.terminalID == purchase.terminalID && m.coupon.StartsWith(_modelFolio.Substring(0, _serialPosition))).Count() > 0 ? db.tblPurchaseServiceDetails.Where(m => m.tblPurchases_Services.tblPurchases.terminalID == purchase.terminalID && m.coupon.StartsWith(_modelFolio.Substring(0, _serialPosition))).OrderByDescending(m => m.tblPurchases_Services.confirmationDateTime).Select(m => m.coupon).Take(20).ToArray() : new string[] { };
                            //    //get most recent folio without serial
                            //    var lastUsedFolio = _coupons.Count() > 0 ? _coupons.Select(m => Convert.ToInt32(m.Split('-')[0].Substring(m.IndexOf(_modelFolio.Substring(0, _serialPosition)) + 1))).OrderByDescending(m => m).FirstOrDefault() : 0;

                            //    if (isFolioInUse)
                            //    {
                            //        do
                            //        {
                            //            _modelFolio = nextCouponFolio.GetType().GetProperty("folio").GetValue(nextCouponFolio, null).ToString();//serial,nextFolio
                            //            _padding = nextCouponFolio.GetType().GetProperty("padding").GetValue(nextCouponFolio, null).ToString();//number of zeros
                            //            counter++;

                            //        } while (_modelFolio == "0" && counter <= 3);
                            //    }

                            //    Regex exp = new Regex(@"[^\d]");
                            //    _lastUsedFolio = lastUsedFolio;
                            //    _folioToSave = _modelFolio.IndexOf(',') != -1 ? int.Parse(_modelFolio.Split(',')[1]) : int.Parse(exp.Replace(_modelFolio, ""));
                            //}

                            ////if there is no folio in model, or the nextFolio is consecutive from the last used, or there are no folios sold in the point of sale, or there it is the first folio of the serie
                            //if ((_modelFolio != "0" && _modelFolio != "" && ((_folioToSave - _lastUsedFolio) == 1 || _modelFolio == null || _lastUsedFolio == 0 || isFirstFolio || packablePromo)))
                            ////verifies that folio is null or is not empty or is the first of the serial used
                            //{
                            //    foreach (var i in model.ListPurchaseServiceDetails)
                            //    {
                            //        tblPurchaseServiceDetails purchaseServiceDetails = new tblPurchaseServiceDetails();
                            //        purchaseServiceDetails.quantity = i.Quantity;
                            //        purchaseServiceDetails.coupon = (isFolioInUse || packablePromo) ? (_modelFolio.IndexOf(',') != -1 ? _modelFolio.Split(',')[0] + String.Format("{0:D" + _padding + "}", long.Parse(_modelFolio.Split(',')[1])) : _modelFolio) + '-' + i.Coupon.Split('-')[1] : _modelFolio != null ? i.Coupon : _modelFolio;
                            //        purchaseServiceDetails.customPrice = i.CustomPrice;
                            //        purchaseServiceDetails.netPriceID = i.PriceID;
                            //        purchaseServiceDetails.promo = i.Promo;
                            //        purchaseServiceDetails.priceTypeID = i.PriceTypeID;
                            //        purchaseServiceDetails.dealPrice = i.DealPrice;//revisar si llega como nulo o como 0
                            //        purchaseServiceDetails.exchangeRateID = i.ExchangeRateID;
                            //        //stocks
                            //        if (db.tblServices.Single(m => m.serviceID == model.PurchaseService_Service).itemTypeID == 4 && db.tblStocks.Count(m => m.serviceID == model.PurchaseService_Service) > 0)//product
                            //        {
                            //            tblStocks stock = db.tblStocks.Where(m => m.serviceID == model.PurchaseService_Service).FirstOrDefault();
                            //            tblStockTransactions transaction = new tblStockTransactions();
                            //            transaction.stockID = stock.stockID;
                            //            transaction.quantity = i.Quantity;
                            //            transaction.dateSaved = _now;
                            //            transaction.ingress = model.PurchaseService_ServiceStatus <= 3 ? false : true;
                            //            transaction.transactionDescription = model.PurchaseService_ServiceStatus <= 3 ? "Sale" : "Refund/Cancelation";
                            //            purchaseServiceDetails.tblStockTransactions.Add(transaction);
                            //            stock.quantity = model.PurchaseService_ServiceStatus <= 3 ? (stock.quantity - i.Quantity) : (stock.quantity + i.Quantity);
                            //            stock.dateModified = _now;
                            //        }
                            //        purchase_service.tblPurchaseServiceDetails.Add(purchaseServiceDetails);
                            //        //end stocks
                            //    }
                            //}
                            //else
                            //{
                            //    throw new Exception();
                            //}
                            #endregion
                            #region "Update Folios"
                            //if coupon is not a promo, or if there are not other coupons with same promo that this and are confirmed
                            //if (!packablePromo || purchase.tblPurchases_Services.Where(m => m.promoID == model.PurchaseService_Promo && m.serviceStatusID == 3 && ((DateTime)m.confirmationDateTime).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) == _now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)).Count() == 0)
                            //{
                            //    //only if serviceStatus is confirmed
                            //    if (purchase_service.serviceStatusID == 3 || (model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != null && model.ListPurchaseServiceDetails.FirstOrDefault().Coupon != "" && (model.PurchaseService_ServiceStatus >= 4 && model.PurchaseService_ServiceStatus != 6)))
                            //    {
                            //        if (folios.Count() > 1)
                            //        {
                            //            var date = folios.Min(m => m.dateSaved);
                            //            var folio = folios.Single(m => m.dateSaved == date);
                            //            folio.generated = folio.generated + 1;
                            //            folio.available = folio.available - 1;
                            //        }
                            //        else
                            //        {
                            //            var folio = folios.FirstOrDefault();
                            //            folio.generated = folio.generated + 1;
                            //            folio.available = folio.available - 1;
                            //        }
                            //    }
                            //}
                            #endregion
                            purchase.total = GetTotalOfPurchase(purchase.purchaseID, (model.PurchaseService_CancelationCharge != null ? decimal.Parse(model.PurchaseService_CancelationCharge) : model.PurchaseService_Total != null ? decimal.Parse(model.PurchaseService_Total) : 0));
                            purchase.purchaseStatusID = GetNewStatusOfPurchase(purchase.purchaseID, model.PurchaseService_ServiceStatus);
                            //using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                            //{
                            //    IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                            //}))
                            //{
                            purchase.tblPurchases_Services.Add(purchase_service);
                            db.SaveChanges();
                            //    scope.Complete();
                            //}
                            _purchase = (decimal)purchase.total;
                            _purchaseStatus = purchase.purchaseStatusID;
                        }
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Coupon Saved";
                        //response.ObjectID = new { purchaseServiceID = purchase_service.purchase_ServiceID, purchaseTotal = _purchase, purchaseStatus = _purchaseStatus, mainPicture = PictureDataModel.GetMainPicture(1, purchase_service.serviceID), newFolio = isFolioInUse ? purchase_service.tblPurchaseServiceDetails.FirstOrDefault().coupon : null, isClosed = false };
                        response.ObjectID = new { purchaseServiceID = purchase_service.purchase_ServiceID, purchaseTotal = _purchase, purchaseStatus = _purchaseStatus, mainPicture = PictureDataModel.GetMainPicture(1, purchase_service.serviceID), newFolio = purchase_service.tblPurchaseServiceDetails.FirstOrDefault().coupon, isClosed = false };
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Coupon NOT Saved";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                    #endregion
                }

            }

            //public AttemptResponse SavePurchaseService(PurchasesModel.PurchaseServiceModel model)
            //{

            //}

            //public PurchasesModel.PurchaseServiceModel GetPurchaseService(int PurchaseService_PurchaseServiceID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    PurchasesModel.PurchaseServiceModel model = new PurchasesModel.PurchaseServiceModel();
            //    var list = new List<PurchasesModel.PurchaseServiceDetailModel>();

            //    var query = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == PurchaseService_PurchaseServiceID);
            //    model.PurchaseService_PurchaseServiceID = query.purchase_ServiceID;
            //    model.PurchaseService_Purchase = query.purchaseID;
            //    model.PurchaseService_Provider = query.tblServices.providerID.ToString();//query.tblServices.tblCategories_Services.FirstOrDefault() != null ? query.tblServices.tblCategories_Services.FirstOrDefault().categoryID : 0;
            //    model.PurchaseService_Service = query.serviceID;
            //    model.PurchaseService_WholeStay = query.wholeStay;
            //    model.PurchaseService_ServiceDateTime = query.serviceDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            //    model.PurchaseService_WeeklyAvailability = query.weeklyAvailabilityID != null ? (long)query.weeklyAvailabilityID : 0;
            //    if (query.meetingPointID != null)
            //    {
            //        model.PurchaseService_MeetingPoint = (long)query.meetingPointID;
            //    }
            //    model.PurchaseService_ServiceStatus = query.serviceStatusID;
            //    model.PurchaseService_ConfirmationNumber = query.confirmationNumber;
            //    if (query.promoID != null)
            //    {
            //        model.PurchaseService_Promo = (long)query.promoID;
            //    }
            //    else
            //    {
            //        model.PurchaseService_Promo = 0;
            //    }
            //    model.PurchaseService_Total = query.total.ToString();
            //    model.PurchaseService_Currency = query.tblCurrencies.currencyCode;
            //    model.PurchaseService_ReservedFor = query.reservedFor;
            //    model.PurchaseService_ChildrenAges = query.childrenAges;
            //    model.PurchaseService_CustomMeetingTime = query.customMeetingTime.ToString();
            //    model.PurchaseService_Note = query.note;
            //    model.PurchaseService_Airline = query.airline;
            //    model.PurchaseService_FlightNumber = query.flightNumber;
            //    model.PurchaseService_Destination = query.transportationZoneID != null ? query.tblTransportationZones.destinationID : 0;
            //    if (query.transportationZoneID != null)
            //    {
            //        model.PurchaseService_TransportationZone = (int)query.transportationZoneID;
            //    }
            //    model.PurchaseService_Audit = query.audit != null ? (bool)query.audit : false;
            //    model.PurchaseService_CloseOut = query.closeOut != null ? (bool)query.closeOut : false;
            //    model.PurchaseService_Issued = query.issued != null ? (bool)query.issued : false;
            //    model.PurchaseService_Round = query.round != null ? (bool)query.round : false;
            //    model.PurchaseService_RoundAirline = query.roundAirline;
            //    model.PurchaseService_RoundFlightNumber = query.roundFlightNumber;
            //    model.PurchaseService_RoundMeetingTime = query.roundMeetingTime.ToString();//check culture
            //    model.PurchaseService_SpecialRequest = query.specialRequest;
            //    model.PurchaseService_CancelationCharge = query.cancelationCharge != null ? query.cancelationCharge.ToString() : "";
            //    model.PurchaseService_CancelationNumber = query.cancelationNumber != null ? query.cancelationNumber : "";
            //    model.PurchaseService_CancelationDateTime = query.cancelationDateTime != null ? ((DateTime)query.cancelationDateTime).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture) : "";
            //    #region "Fill ListPurchaseServiceDetails"
            //    var _query = db.tblPurchaseServiceDetails.Where(m => m.purchase_ServiceID == query.purchase_ServiceID);
            //    model.PurchaseService_CouponNumber = _query.Any(m => m.coupon != null) ? _query.FirstOrDefault(m => m.coupon != null).coupon.Substring(0, _query.FirstOrDefault(m => m.coupon != null).coupon.IndexOf('-')) : "";
            //    foreach (var i in _query)
            //    {
            //        list.Add(new PurchasesModel.PurchaseServiceDetailModel()
            //        {
            //            PurchaseServiceDetail_PurchaseServiceDetailID = i.purchaseServiceDetailID,
            //            PurchaseServiceDetail_PurchaseService = i.purchase_ServiceID,
            //            PurchaseServiceDetail_PriceUnitString = i.tblPrices.tblPriceUnits.FirstOrDefault() != null ? i.tblPrices.tblPriceUnits.FirstOrDefault().unit : "",
            //            PurchaseServiceDetail_Price = (i.netPriceID != null ? (long)i.netPriceID : (long)i.priceID),
            //            PurchaseServiceDetail_PriceString = (i.customPrice != null ? i.customPrice.ToString() : i.tblPrices.price.ToString()),
            //            PurchaseServiceDetail_Quantity = i.quantity.ToString(),
            //            PurchaseServiceDetail_Coupon = i.coupon ?? "",
            //            PurchaseServiceDetail_CustomPrice = i.customPrice != null ? i.customPrice.ToString() : "",
            //            PurchaseServiceDetail_Promo = i.promo
            //            //PurchaseServiceDetail_NetPriceString = i.netPriceID != null ? i.tblPrices1.price.ToString() : ""
            //        });
            //    }
            //    #endregion
            //    model.ListPurchaseServiceDetails = list;
            //    return model;
            //}
            public PurchasesModel.PurchaseServiceModel GetPurchaseService(int PurchaseService_PurchaseServiceID)
            {
                ePlatEntities db = new ePlatEntities();
                PurchasesModel.PurchaseServiceModel model = new PurchasesModel.PurchaseServiceModel();
                //var list = new List<PurchasesModel.PurchaseServiceDetailModel>();
                var list = new List<PurchasesModel.ListPurchaseServiceDetailModel>();

                var query = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == PurchaseService_PurchaseServiceID);
                model.PurchaseService_PurchaseServiceID = query.purchase_ServiceID;
                model.PurchaseService_Purchase = query.purchaseID;
                model.PurchaseService_Provider = query.tblServices.providerID.ToString();
                model.PurchaseService_ProviderText = query.tblServices.tblProviders.comercialName;
                model.PurchaseService_Service = query.serviceID;
                model.PurchaseService_ServiceText = query.tblServices.service;
                model.PurchaseService_WholeStay = query.wholeStay;
                model.PurchaseService_OpenCoupon = query.openCouponMonths;
                model.PurchaseService_ServiceDateTime = query.serviceDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                model.PurchaseService_WeeklyAvailability = query.weeklyAvailabilityID != null ? (long)query.weeklyAvailabilityID : 0;
                model.PurchaseService_WeeklyAvailabilityString = query.weeklyAvailabilityID != null ? GeneralFunctions.DateFormat.ToMeridianHour(query.serviceDateTime.TimeOfDay.ToString()) : "";
                if (query.meetingPointID != null)
                {
                    model.PurchaseService_MeetingPoint = query.meetingPointID.ToString();
                }
                else if (query.customMeetingPlace != null)
                {
                    model.PurchaseService_MeetingPoint = "null";
                }
                else
                {
                    model.PurchaseService_MeetingPoint = "0";
                }
                model.PurchaseService_CustomMeetingPoint = query.customMeetingPlace;
                model.PurchaseService_ServiceStatus = query.serviceStatusID;
                model.PurchaseService_ConfirmationNumber = query.confirmationNumber;
                model.PurchaseService_CouponReference = query.couponReference;
                model.PurchaseService_SoldByOPC = query.soldByOPC ?? false;
                if (query.promoID != null)
                {
                    model.PurchaseService_Promo = (long)query.promoID;
                }
                else
                {
                    model.PurchaseService_Promo = 0;
                }
                model.PurchaseService_Total = query.total.ToString();
                model.PurchaseService_Currency = query.tblCurrencies.currencyCode;
                model.PurchaseService_ReservedFor = query.reservedFor;
                model.PurchaseService_ChildrenAges = query.childrenAges;
                model.PurchaseService_CustomMeetingTime = query.customMeetingTime.ToString();
                model.PurchaseService_Note = query.note;
                model.PurchaseService_Airline = query.airline;
                model.PurchaseService_FlightNumber = query.flightNumber;
                model.PurchaseService_Destination = query.transportationZoneID != null ? query.tblTransportationZones.destinationID : 0;
                if (query.transportationZoneID != null)
                {
                    model.PurchaseService_TransportationZone = (int)query.transportationZoneID;
                }
                model.PurchaseService_Audit = query.audit != null ? (bool)query.audit : false;
                model.PurchaseService_CloseOut = query.closeOut != null ? (bool)query.closeOut : false;
                model.PurchaseService_Issued = query.issued != null ? (bool)query.issued : false;
                model.PurchaseService_Round = query.round != null ? (bool)query.round : false;
                model.PurchaseService_RoundAirline = query.roundAirline;
                model.PurchaseService_RoundFlightNumber = query.roundFlightNumber;
                model.PurchaseService_RoundFlightTime = query.roundFlightTime != null ? query.roundFlightTime.ToString() : "";
                model.PurchaseService_RoundDate = query.roundDate != null ? ((DateTime)query.roundDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                model.PurchaseService_RoundMeetingTime = query.roundMeetingTime != null ? query.roundMeetingTime.ToString() : "";//check culture
                model.PurchaseService_SpecialRequest = query.specialRequest;
                model.PurchaseService_CancelationCharge = query.cancelationCharge != null ? query.cancelationCharge.ToString() : "";
                model.PurchaseService_CancelationNumber = query.cancelationNumber != null ? query.cancelationNumber : "";
                model.PurchaseService_CancelationDateTime = query.cancelationDateTime != null ? ((DateTime)query.cancelationDateTime).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture) : "";
                model.PurchaseService_CanceledByUser = query.canceledByUserID != null ? query.canceledByUserID.ToString() : "";
                //model.PurchaseService_CanceledByUserName = query.canceledByUserID != null ? query.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + query.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName : "";
                model.PurchaseService_CanceledByUserName = query.canceledByUserID != null ? query.aspnet_Users3.tblUserProfiles.FirstOrDefault().firstName + " " + query.aspnet_Users3.tblUserProfiles.FirstOrDefault().lastName : "";
                model.PurchaseService_ConfirmationDateTime = query.confirmationDateTime != null ? ((DateTime)query.confirmationDateTime).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture) : "";
                model.PurchaseService_ConfirmedByUser = query.confirmedByUserID != null ? query.confirmedByUserID.ToString() : "";
                //model.PurchaseService_ConfirmedByUserName = query.confirmedByUserID != null ? query.aspnet_Users2.tblUserProfiles.FirstOrDefault().firstName + " " + query.aspnet_Users2.tblUserProfiles.FirstOrDefault().lastName : "";
                model.PurchaseService_ConfirmedByUserName = query.confirmedByUserID != null ? query.aspnet_Users4.tblUserProfiles.FirstOrDefault().firstName + " " + query.aspnet_Users4.tblUserProfiles.FirstOrDefault().lastName : "";
                model.PurchaseService_DateSaved = query.dateSaved.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                model.PurchaseService_ReplacementOf = query.replacementOf != null ? query.replacementOf.ToString() : "null";
                model.PurchaseService_IsClosed = query.tblCloseOuts_Purchases.Count() > 0;
                #region "Fill ListPurchaseServiceDetails"
                var _query = db.tblPurchaseServiceDetails.Where(m => m.purchase_ServiceID == query.purchase_ServiceID);
                model.PurchaseService_CouponNumber = _query.Any(m => m.coupon != null) ? _query.FirstOrDefault(m => m.coupon != null).coupon.Substring(0, _query.FirstOrDefault(m => m.coupon != null).coupon.IndexOf('-')) : "";
                //var _prices = PriceDataModel.GetComputedPrices(query.serviceID, query.serviceDateTime, query.tblPurchases.terminalID);
                foreach (var i in _query)
                {
                    //var priceUnit = _prices.Where(m => m.PriceTypeID == i.priceTypeID && m.PriceID == i.netPriceID && (m.ExchangeRateID == null || m.ExchangeRateID == i.exchangeRateID)).Select(m => new { m.FullUnit, m.MinMax, m.Culture });
                    var priceUnit = PriceDataModel.GetUnit((i.netPriceID != null ? (long)i.netPriceID : (long)i.priceID), i.tblPurchases_Services.tblPurchases.culture);
                    list.Add(new PurchasesModel.ListPurchaseServiceDetailModel()
                    {
                        ServiceDetailID = i.purchaseServiceDetailID,
                        PurchaseServiceID = i.purchase_ServiceID,
                        Unit = priceUnit.unit + " " + (priceUnit.min != null ? priceUnit.min + "-" + priceUnit.max : ""),
                        //Unit = i.priceTypeID != null ? priceUnit.Any() ? priceUnit.FirstOrDefault().FullUnit + " " + priceUnit.FirstOrDefault().MinMax : "" : i.tblPrices.tblPriceUnits.FirstOrDefault() != null ? i.tblPrices.tblPriceUnits.FirstOrDefault().unit : "",
                        PriceID = (i.netPriceID != null ? (long)i.netPriceID : (long)i.priceID),
                        Quantity = i.quantity,
                        Coupon = i.coupon ?? "",
                        CustomPrice = decimal.Round((i.customPrice != null ? decimal.Parse(i.customPrice.ToString()) : i.tblPrices.price), 2),
                        DealPrice = i.dealPrice,
                        Promo = i.promo,
                        PriceType = i.priceTypeID != null ? i.tblPriceTypes.priceType : "",
                        PriceTypeID = i.priceTypeID != null ? (int)i.priceTypeID : (int?)null,
                        ExchangeRateID = i.exchangeRateID != null ? i.exchangeRateID : (int?)null
                    });
                }
                #endregion
                model.PurchaseService_CurrentUnits = new JavaScriptSerializer().Serialize(list);
                model.ListPurchaseServiceDetails = list;

                model.PurchaseService_AvoidEdition = query.tblCloseOuts_Purchases.Count(m => m.canceled == true) > 0;

                return model;
            }

            public AttemptResponse DeletePurchaseService(int targetID)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                try
                {
                    var _query = db.tblPurchaseServiceDetails.Where(m => m.purchase_ServiceID == targetID).ToArray();
                    foreach (var i in _query)
                    {
                        db.DeleteObject(i);
                    }

                    var query = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == targetID);
                    db.DeleteObject(query);
                    db.SaveChanges();
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Coupon Deleted";
                    response.ObjectID = targetID;
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Coupon NOT Deleted";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            public object SetPurchaseServiceAsIssued(int PurchaseService_PurchaseServiceID)
            {
                ePlatEntities db = new ePlatEntities();
                var _issued = true;
                var couponRef = "";
                var providerEmail = "";
                try
                {
                    var query = db.tblPurchases_Services.Where(m => m.purchase_ServiceID == PurchaseService_PurchaseServiceID);
                    if (query.FirstOrDefault().serviceStatusID == 3)
                    {
                        query.FirstOrDefault().issued = true;
                        couponRef = GetCouponRef(query.FirstOrDefault().purchaseID);
                        db.SaveChanges();
                        providerEmail = query.FirstOrDefault().tblServices.tblProviders.contactEmail ?? "";
                    }
                    else
                    {
                        throw new Exception();
                    }
                }
                catch
                {
                    _issued = false;
                    couponRef = "";
                }
                return new { Issued = _issued, CouponRef = couponRef, ProviderEmail = providerEmail };
            }

            public object SetPurchaseServicesAsIssued(Guid PurchaseInfo_Purchase)
            {
                ePlatEntities db = new ePlatEntities();
                var _issued = true;
                try
                {
                    var query = db.tblPurchases_Services.Where(m => m.purchaseID == PurchaseInfo_Purchase && m.serviceStatusID == 3);
                    foreach (var i in query)
                    {
                        i.issued = true;
                    }
                    db.SaveChanges();
                }
                catch
                {
                    _issued = false;
                }
                return new { Issued = _issued };
            }

            public object PrintAllCoupons(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                try
                {
                    //revisar permiso de reimpresion
                    //var p = AdminDataModel.GetViewPrivileges(".print-coupons");
                    
                    var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                    //var coupons = purchase.tblPurchases_Services.Where(m => (m.issued != true || p.FirstOrDefault().Edit == true) && m.serviceStatusID == 3);
                    var coupons = purchase.tblPurchases_Services.Where(m => m.issued != true && m.serviceStatusID == 3);
                    var PoSDomain = db.tblPointsOfSale.Single(m => m.pointOfSaleID == purchase.pointOfSaleID).domain;

                    if (PoSDomain != null)
                    {
                        var _url = "https://" + PoSDomain + "/coupons/" + purchase.purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return new { CouponRef = _url, ProviderEmail = (string.Join(",",coupons.Select(m => m.tblServices.tblProviders.contactEmail)) ?? ""), Coupons = string.Join(",",coupons.Select(m => m.purchase_ServiceID)) };
                    }
                    var domain = db.tblTerminalDomains.Where(m => m.terminalID == purchase.terminalID && m.culture == purchase.culture && m.domain.IndexOf("localhost") == -1 && m.domain.IndexOf("beta") == -1);

                    if (domain.Count() > 0)
                    {
                        var _url = "https://" + (domain.FirstOrDefault().domain.IndexOf("experience.com") >= 0 ? domain.FirstOrDefault().domain : (domain.FirstOrDefault().culture == "es-MX" ? "mx." : "") + "eplatfront.villagroup.com") + "/coupons/" + purchase.purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return new { CouponRef = _url, ProviderEmail = (string.Join(",", coupons.Select(m => m.tblServices.tblProviders.contactEmail)) ?? ""), Coupons = string.Join(",", coupons.Select(m => m.purchase_ServiceID)) };
                    }
                    else
                    {
                        return new { CouponRef = "", ProviderEmail = "", Coupons = "" };
                    }
                }
                catch
                {
                    return new { CouponRef = "", ProviderEmail = "", Coupons = "" };
                }
            }

            public object GetCouponRefObj(long purchaseServiceID)
            {
                ePlatEntities db = new ePlatEntities();
                try
                {
                    var _coupon = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == purchaseServiceID);
                    var purchase = _coupon.tblPurchases;
                    var PoSDomain = db.tblPointsOfSale.Single(m => m.pointOfSaleID == purchase.pointOfSaleID).domain;

                    if (PoSDomain != null)
                    {
                        var _url = "https://" + PoSDomain + "/coupons/" + purchase.purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return new { CouponRef = _url, ProviderEmail = (_coupon.tblServices.tblProviders.contactEmail ?? "") };
                    }
                    var domain = db.tblTerminalDomains.Where(m => m.terminalID == purchase.terminalID && m.culture == purchase.culture && m.domain.IndexOf("localhost") == -1 && m.domain.IndexOf("beta") == -1);

                    if (domain.Count() > 0)
                    {
                        var _url = "https://" + (domain.FirstOrDefault().domain.IndexOf("experience.com") >= 0 ? domain.FirstOrDefault().domain : (domain.FirstOrDefault().culture == "es-MX" ? "mx." : "") + "eplatfront.villagroup.com") + "/coupons/" + purchase.purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return new { CouponRef = _url, ProviderEmail = (_coupon.tblServices.tblProviders.contactEmail ?? "") };
                    }
                    else
                    {
                        return new { CouponRef = "", ProviderEmail = "" };
                    }
                }
                catch
                {
                    return new { CouponRef = "", ProviderEmail = "" };
                }
            }

            public string GetCouponRef(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                try
                {
                    var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);

                    var PoSDomain = db.tblPointsOfSale.Single(m => m.pointOfSaleID == purchase.pointOfSaleID).domain;

                    if (PoSDomain != null)
                    {
                        var _url = "https://" + PoSDomain + "/coupons/" + purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return _url;
                    }

                    var domain = db.tblTerminalDomains.Where(m => m.terminalID == purchase.terminalID && m.culture == purchase.culture && m.domain.IndexOf("localhost") == -1 && m.domain.IndexOf("beta") == -1);

                    if (domain.Count() > 0)
                    {
                        var _url = "https://" + (domain.FirstOrDefault().domain.IndexOf("experience.com") >= 0 ? domain.FirstOrDefault().domain : (domain.FirstOrDefault().culture == "es-MX" ? "mx." : "") + "eplatfront.villagroup.com") + "/coupons/" + purchaseID;
                        _url = _url.Replace("//my", "//www.my");
                        return _url;
                    }
                    else
                    {
                        return "";
                    }
                }
                catch
                {
                    return "";
                }
            }

            public object _GetNextCouponFolio(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();


                var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                var couponBooks = db.tblCouponFolios.Where(m => m.pointOfSaleID == purchase.pointOfSaleID && m.available > 0);
                var body = "";

                if (couponBooks.Count() == 0)//no hay folios disponibles
                {
                    return new { folio = "null", exception = purchase.tblPointsOfSale.shortName + " - " + purchase.tblPointsOfSale.pointOfSale };
                }
                else
                {
                    var book = couponBooks.Count() == 1 ? couponBooks.FirstOrDefault() : couponBooks.OrderBy(m => m.dateSaved).FirstOrDefault();
                    var bookSerial = book.serial;
                    var bookNextFolio = (book.toFolio - book.available) + 1;
                    var recentFolios = (from psd in db.tblPurchaseServiceDetails
                                        join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                        join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                        where p.terminalID == purchase.terminalID
                                        && p.pointOfSaleID == purchase.pointOfSaleID
                                        && psd.coupon.StartsWith(bookSerial)
                                        orderby ps.confirmationDateTime descending
                                        select new
                                        {
                                            purchase = ps.purchaseID,
                                            purchaseService = ps.purchase_ServiceID,
                                            purchaseServiceDetail = psd.purchaseServiceDetailID,
                                            coupon = psd.coupon,
                                            promo = ps.promoID
                                        }).Take(20);

                    var mostRecentCoupon = recentFolios.FirstOrDefault();
                    var lastUsedFolio = int.Parse(mostRecentCoupon.coupon.Split('-')[0].Substring(mostRecentCoupon.coupon.IndexOf(bookSerial) + 1));//folio numerico más reciente usado
                    var psdGroupedByFolio = recentFolios.GroupBy(m => m.coupon.Split('-')[0]).Select(m => new { folio = m.Key, count = m.Count(), group = m });
                    var couponToAssign = bookSerial + String.Format("{0:D7}", bookNextFolio);

                    if (psdGroupedByFolio.Where(m => m.count > 1 && m.group.Count(x => x.promo == null) > 0).Count() > 0)//existen folios repetidos que no son promocion
                    {
                        #region "corrección de folios repetidos sin ser promoción"
                        var newFolioIncrement = 0;

                        body += "<br /><br /><strong>Purchase ID: </strong>" + purchase.purchaseID + "<br />";
                        body += "<br /><br /><strong>Terminal: </strong>" + purchase.tblTerminals.terminal + "<br />";
                        body += "<br /><strong>Point Of Sale: </strong>" + purchase.tblPointsOfSale.pointOfSale + "<br />";
                        body += "<br /><strong>Client Name: </strong>" + purchase.tblLeads.firstName + " " + purchase.tblLeads.lastName + "<br />";

                        foreach (var i in psdGroupedByFolio.Where(m => m.count > 1 && m.group.Count(x => x.promo == null) > 0))//iteracion sobre grupos con folios sin promocion repetidos
                        {
                            newFolioIncrement++;
                            var folioRepeated = int.Parse(i.folio.Split('-')[0].Substring(1));
                            var itemsModified = "";

                            body += "<br /><br /><strong>Purchase Service ID of Original:</strong> " + mostRecentCoupon.purchaseService + ". <strong>Folio: </strong>" + folioRepeated + "<br />";

                            var groupsByPurchaseService = i.group.GroupBy(m => m.purchaseService).OrderBy(m => m.Key).Skip(1);//psd grouped by purchaseService and asc ordered by purchaseServiceID
                            foreach (var purchaseService in groupsByPurchaseService)//iteracion sobre groupos por purchaseService a excepción del primero, pues este no será modificado.
                            {
                                var purchaseServiceDetails = recentFolios.Where(m => m.purchaseService == purchaseService.Key).OrderBy(m => m.purchaseServiceDetail);
                                var oldFolio = purchaseServiceDetails.FirstOrDefault().coupon.Split('-')[0];
                                var newFolio = bookSerial + String.Format("{0:D7}", (folioRepeated + newFolioIncrement));

                                itemsModified += "<br />purchaseServiceID: " + purchaseService.Key;
                                itemsModified += "<br />Folios Modified: " + oldFolio + " => " + newFolio;

                                foreach (var folio in purchaseServiceDetails)
                                {
                                    var folioLetter = 0;
                                    var coupon = db.tblPurchaseServiceDetails.Single(m => m.purchaseServiceDetailID == folio.purchaseServiceDetail);
                                    //coupon.oldCoupon = coupon.coupon;
                                    coupon.coupon = newFolio + "-" + Char.ConvertFromUtf32(65 + folioLetter);
                                    folioLetter++;
                                }
                            }//pendiente guardar cambios de nuevas asignaciones
                            body += "<br /><br /><strong>Coupons Modified: </strong><br />" + itemsModified;
                        }
                        couponBooks.FirstOrDefault().generated = (int)(lastUsedFolio + newFolioIncrement) - (int)couponBooks.FirstOrDefault().fromFolio + 1;
                        couponBooks.FirstOrDefault().available = (int)couponBooks.FirstOrDefault().toFolio - (int)(lastUsedFolio + newFolioIncrement);
                        //db.SaveChanges();
                        return new { folio = bookSerial + "," + (lastUsedFolio + newFolioIncrement + 1), padding = 7, isFirstOfSerie = couponBooks.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = purchaseID, couponFolioID = couponBooks.FirstOrDefault().couponFolioID };
                        #endregion
                    }
                    //posible aquí no se necesite el else, solo el if
                    if (recentFolios.Where(m => m.coupon == (couponToAssign + "-A")).Count() > 0)//el folio propuesto por el sistema ya se encuentra guardado
                    {
                        if (recentFolios.Where(m => m.coupon == (couponToAssign + "-A") && m.promo != null).Count() > 0)//revisar si el más reciente es promocion
                        {
                            return new { folio = bookSerial + "," + bookNextFolio, padding = 7, isFirstOfSerie = couponBooks.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = purchaseID, couponFolioID = couponBooks.FirstOrDefault().couponFolioID };
                        }
                        else//folio brindado por sistema ya está guardado y no es promocion
                        {
                            int newFolioIncrement = 0;
                            do
                            {
                                newFolioIncrement++;
                            } while (recentFolios.Where(m => m.coupon == (bookSerial + String.Format("{0:D7}", (bookNextFolio + newFolioIncrement)) + "-A")).Count() > 0);

                            body += "<br /><br /><strong>Purchase ID: </strong>" + purchase.purchaseID + "<br />";
                            body += "<br /><br /><strong>Terminal: </strong>" + purchase.tblTerminals.terminal + "<br />";
                            body += "<br /><strong>Point Of Sale: </strong>" + purchase.tblPointsOfSale.pointOfSale + "<br />";
                            body += "<br /><strong>Client Name: </strong>" + purchase.tblLeads.firstName + " " + purchase.tblLeads.lastName + "<br />";
                            body += "<br /><br /><strong>Purchase Service ID of Original:</strong> " + mostRecentCoupon.purchaseService + ". <strong>Folio: </strong>" + mostRecentCoupon.coupon + "<br />";
                            body += "<br /><br /><strong>Folio initially suggested by system:</strong> " + couponToAssign + ". <strong>Folio suggested after correction: </strong>" + bookSerial + String.Format("{0:D7}", (bookNextFolio + newFolioIncrement)) + "<br />";

                            couponBooks.FirstOrDefault().generated = (int)(lastUsedFolio + newFolioIncrement) - (int)couponBooks.FirstOrDefault().fromFolio + 1;
                            couponBooks.FirstOrDefault().available = (int)couponBooks.FirstOrDefault().toFolio - (int)(lastUsedFolio + newFolioIncrement);
                            //db.SaveChanges();
                            return new { folio = bookSerial + "," + (bookNextFolio + newFolioIncrement), padding = 7, isFirstOfSerie = couponBooks.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = purchaseID, couponFolioID = couponBooks.FirstOrDefault().couponFolioID };
                        }
                    }
                    else// el folio propuesto por el sistema sí es el consecutivo
                    {
                        return new { folio = bookSerial + "," + bookNextFolio, padding = 7, isFirstOfSerie = couponBooks.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = purchaseID, couponFolioID = couponBooks.FirstOrDefault().couponFolioID };
                    }
                }
            }

            public object GetNextCouponFolio(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();

                Regex exp = new Regex(@"[^\d]");
                var bodyMail = "";
                var _purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                var query = db.tblCouponFolios.Where(m => m.pointOfSaleID == _purchase.pointOfSaleID && m.available > 0);
                //var _coupons = new string[] { };
                try
                {
                    if (query.Count() == 0)
                    {
                        return new { folio = "null", exception = _purchase.tblPointsOfSale.shortName + " - " + _purchase.tblPointsOfSale.pointOfSale };
                    }
                    else if (query.Count() == 1)
                    {
                        var serial = query.FirstOrDefault().serial;
                        int nextFolio = ((int)query.FirstOrDefault().toFolio - (int)query.FirstOrDefault().available) + 1;

                        var _serviceDetails = from psd in db.tblPurchaseServiceDetails
                                              join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                              join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                              where p.terminalID == _purchase.terminalID
                                              && p.pointOfSaleID == _purchase.pointOfSaleID
                                              && psd.coupon.StartsWith(serial)
                                              orderby ps.confirmationDateTime descending
                                              select new
                                              {
                                                  purchase = ps.purchaseID,
                                                  purchaseService = ps.purchase_ServiceID,
                                                  purchaseServiceDetail = psd.purchaseServiceDetailID,
                                                  coupon = psd.coupon,
                                                  promo = ps.promoID
                                              };

                        var _coupons = _serviceDetails.Count() > 0 ? _serviceDetails.Select(m => new { m.coupon, m.purchase }).Take(20) : null;//order by confirmationDateTime
                        var recentCoupons = _serviceDetails.Take(20);
                        var groupedCoupons = recentCoupons.GroupBy(m => m.coupon).Select(m => new { coupon = m.Key, count = m.Count(), group = m });
                        var lastFolioProperties = _coupons != null ? _coupons.FirstOrDefault() : null;//assuming the first result is the last used since is ordered by confirmationDateTime
                        var lastFolioUsed = lastFolioProperties != null ? int.Parse(lastFolioProperties.coupon.Split('-')[0].Substring(lastFolioProperties.coupon.IndexOf(serial) + 1)) : 0;
                        var numericFolio = lastFolioUsed;
                        var _folioLength = 7;//according to Gerardo so we can have the same length in every coupon since a specific date
                        var _folio = serial + String.Format("{0:D" + _folioLength + "}", nextFolio);
                        var lastUsedFolio = serial + String.Format("{0:D" + _folioLength + "}", numericFolio);

                        //posibles casos
                        //esto corrige el error de cupones con folios repetidos sin ser promoción
                        //existen folios guardados repetidos. Se corrigen los cupones guardados solo si no son promocion, se actualizan los contadores y se regresa el folio consecutivo corregido
                        if (groupedCoupons.Where(m => m.count > 1).Count() > 0)
                        {
                            #region "Existen folios guardados repetidos. Se corrigen los cupones guardados, se actualizan los contadores y se regresa el folio consecutivo corregido"
                            var repeatedFolios = "";
                            var counter = 1;
                            //only coupons with no promo
                            if (groupedCoupons.Where(m => m.count > 1 && m.group.FirstOrDefault().promo == null).Count() > 0)
                            {
                                foreach (var group in groupedCoupons.Where(m => m.count > 1 && m.group.FirstOrDefault().promo == null))
                                {
                                    //skip the first ocurrence since the first one assignation is correct
                                    foreach (var coupon in group.group.GroupBy(m => m.purchaseService).OrderBy(m => m.Key).Skip(1))
                                    {
                                        var _counter = 0;
                                        var purchaseServiceDetail = new tblPurchaseServiceDetails();
                                        //correct folio of saved coupons including their units
                                        foreach (var _coupon in coupon)
                                        {
                                            purchaseServiceDetail = db.tblPurchaseServiceDetails.Single(m => m.purchaseServiceDetailID == _coupon.purchaseServiceDetail);
                                            purchaseServiceDetail.coupon = serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "-" + Char.ConvertFromUtf32(65 + _counter);
                                            _counter++;
                                        }
                                        repeatedFolios += "<br />Purchase_ServiceID: " + coupon.FirstOrDefault().purchaseService + ", Current Folio: " + coupon.FirstOrDefault().coupon.Split('-')[0] + " Folio Assigned: " + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter));
                                        counter++;
                                    }
                                }

                                //mail sending
                                bodyMail += "<strong>There was found repeated folios on coupons. Correction In Counters and Coupons Applied.</strong><br /><br />";
                                bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                                bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1)) + "</strong>";
                                bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1))) + "</strong>";
                                bodyMail += "<br /><br />Serial Starting Folio: <strong>" + query.FirstOrDefault().fromFolio + "</strong><br />";
                                //bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong><br />The last folio used is <strong>" + _folioToCheck + "</strong> and the coupon has the ID <strong>" + repeatedFolios.FirstOrDefault().purchase_ServiceID + ".</strong>";
                                bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong><br />The last folio used is <strong>" + recentCoupons.OrderByDescending(m => m.purchaseService).FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.OrderByDescending(m => m.purchaseService).FirstOrDefault().purchaseService + ".</strong>";
                                bodyMail += (repeatedFolios != "" ? "<br />Coupons with folio correction:<br />" + repeatedFolios : "");
                                bodyMail += "<br /><br />The folio initially suggested was: <strong>" + _folio + "</strong>";
                                bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "</strong>";
                                query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1));
                                query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1);
                                db.SaveChanges();

                                var email = EmailNotifications.GetSystemEmail(bodyMail);
                                //EmailNotifications.Send(email, false);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                            }
                            return new { folio = serial + "," + (numericFolio + counter), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            #endregion
                        }
                        //el folio propuesto por los contadores ya está guardado
                        else if (groupedCoupons.Where(m => m.coupon == _folio + "-A").Count() > 0)
                        {
                            #region
                            //puede ser el segundo cupon de una promo paquete
                            //se sabe que no hay folios multiples repetidos, esto significa un error en los contadores.
                            //Se busca cuantas posiciones necesita recorrerse la propuesta de folio y actualizar los contadores
                            if (recentCoupons.FirstOrDefault(m => m.coupon == _folio + "-A").promo != null)
                            {
                                return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty) };
                            }
                            else
                            {
                                var counter = 0;
                                var folioToCompare = "";

                                do
                                {
                                    counter++;
                                    folioToCompare = serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "-A";
                                } while (groupedCoupons.Where(m => m.coupon == folioToCompare).Count() > 0);

                                bodyMail += "<strong>Folio Given By System Is Already Saved. Correction In Counters Applied.</strong><br /><br />";
                                bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                                bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1)) + "</strong>";
                                bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1))) + "</strong>";
                                bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong>";
                                bodyMail += "<br />The last folio used is <strong>" + recentCoupons.FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.FirstOrDefault().purchaseService + ".</strong>";
                                bodyMail += "<br /><br />The folio initally suggested was: <strong>" + _folio + "</strong>";
                                bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "</strong>";

                                query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1);
                                query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1));
                                db.SaveChanges();

                                //email sending
                                var email = EmailNotifications.GetSystemEmail(bodyMail);
                                //EmailNotifications.Send(email, false);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });

                                return new { folio = serial + "," + (numericFolio + counter), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            }
                            #endregion
                        }
                        //el folio propuesto por los contadores no es el consecutivo del último guardado
                        else if ((numericFolio + 1) != nextFolio)
                        {
                            #region "el folio propuesto por los contadores no es el consecutivo del ultimo guardado. los contadores se modificaron sin utilizar folios"
                            var counter = nextFolio - numericFolio;

                            //new line
                            numericFolio = recentCoupons.Count() == 0 && numericFolio == 0 ? nextFolio - 1 : numericFolio;

                            bodyMail += "<strong>Folio Given By System Is NOT Consecutive. Correction In Counters Applied.</strong><br /><br />";
                            bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                            bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - numericFolio) + "</strong>";
                            bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - numericFolio)) + "</strong>";
                            bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong>";

                            bodyMail += (recentCoupons.Count() > 0 ? "<br />The last folio used is <strong>" + recentCoupons.FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.FirstOrDefault().purchaseService + ".</strong>" : "<br /><strong>NO FOLIOS USED YET</strong>");
                            bodyMail += "<br /><br />The folio initally suggested was: <strong>" + _folio + "</strong>";
                            bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + 1)) + "</strong>";

                            query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - numericFolio;
                            query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - numericFolio);
                            db.SaveChanges();

                            //email sending
                            var email = EmailNotifications.GetSystemEmail(bodyMail);
                            //EmailNotifications.Send(email, false);
                            EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });

                            return new { folio = serial + "," + (numericFolio + 1), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            #endregion
                        }
                        //el folio propuesto por los contadores sí es el consecutivo del último guardado
                        else
                        {
                            return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                        }
                    }
                    else
                    {
                        var date = query.Min(m => m.dateSaved);
                        var coupons = query.Single(m => m.dateSaved == date);
                        var serial = coupons.serial;
                        int nextFolio = ((int)coupons.toFolio - (int)coupons.available) + 1;
                        var _serviceDetails = from psd in db.tblPurchaseServiceDetails
                                              join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                              join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                              where p.terminalID == _purchase.terminalID
                                              && p.pointOfSaleID == _purchase.pointOfSaleID
                                              && psd.coupon.StartsWith(serial)
                                              orderby ps.confirmationDateTime descending
                                              select new
                                              {
                                                  purchase = ps.purchaseID,
                                                  purchaseService = ps.purchase_ServiceID,
                                                  purchaseServiceDetail = psd.purchaseServiceDetailID,
                                                  coupon = psd.coupon,
                                                  promo = ps.promoID
                                              };

                        var _coupons = _serviceDetails.Count() > 0 ? _serviceDetails.Select(m => new { m.coupon, m.purchase }).Take(20) : null;//order by confirmationDateTime
                        var lastFolioProperties = _coupons != null ? _coupons.FirstOrDefault() : null;//assuming the first result is the last used since is ordered by confirmationDateTime
                        var lastFolioUsed = lastFolioProperties != null ? int.Parse(lastFolioProperties.coupon.Split('-')[0].Substring(lastFolioProperties.coupon.IndexOf(serial) + 1)) : 0;
                        var numericFolio = lastFolioUsed;
                        //new code
                        var recentCoupons = _serviceDetails.Take(20);
                        var groupedCoupons = recentCoupons.GroupBy(m => m.coupon).Select(m => new { coupon = m.Key, count = m.Count(), group = m });
                        var _folioLength = 7;//according to Gerardo so we can have the same length in every coupon since a specific date
                        var _folio = serial + String.Format("{0:D" + _folioLength + "}", nextFolio);
                        var lastUsedFolio = serial + String.Format("{0:D" + _folioLength + "}", numericFolio);

                        //new code
                        //posibles casos
                        //esto corrige el error de cupones con folios repetidos sin ser promoción
                        //existen folios guardados repetidos. Se corrigen los cupones guardados solo si no son promocion, se actualizan los contadores y se regresa el folio consecutivo corregido
                        if (groupedCoupons.Where(m => m.count > 1).Count() > 0)
                        {
                            #region "Existen folios guardados repetidos. Se corrigen los cupones guardados, se actualizan los contadores y se regresa el folio consecutivo corregido"
                            var repeatedFolios = "";
                            var counter = 1;
                            //only coupons with no promo
                            if (groupedCoupons.Where(m => m.count > 1 && m.group.FirstOrDefault().promo == null).Count() > 0)
                            {
                                foreach (var group in groupedCoupons.Where(m => m.count > 1 && m.group.FirstOrDefault().promo == null))
                                {
                                    //skip the first ocurrence since the first one assignation is correct
                                    foreach (var coupon in group.group.GroupBy(m => m.purchaseService).OrderBy(m => m.Key).Skip(1))
                                    {
                                        var _counter = 0;
                                        var purchaseServiceDetail = new tblPurchaseServiceDetails();
                                        //correct folio of saved coupons including their units
                                        foreach (var _coupon in coupon)
                                        {
                                            purchaseServiceDetail = db.tblPurchaseServiceDetails.Single(m => m.purchaseServiceDetailID == _coupon.purchaseServiceDetail);
                                            purchaseServiceDetail.coupon = serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "-" + Char.ConvertFromUtf32(65 + _counter);
                                            _counter++;
                                        }
                                        repeatedFolios += "<br />Purchase_ServiceID: " + coupon.FirstOrDefault().purchaseService + ", Current Folio: " + coupon.FirstOrDefault().coupon.Split('-')[0] + " Folio Assigned: " + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter));
                                        counter++;
                                    }
                                }

                                //mail sending
                                bodyMail += "<strong>There was found repeated folios on coupons. Correction In Counters and Coupons Applied.</strong><br /><br />";
                                bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                                bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1)) + "</strong>";
                                bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1))) + "</strong>";
                                bodyMail += "<br /><br />Serial Starting Folio: <strong>" + query.FirstOrDefault().fromFolio + "</strong><br />";
                                //bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong><br />The last folio used is <strong>" + _folioToCheck + "</strong> and the coupon has the ID <strong>" + repeatedFolios.FirstOrDefault().purchase_ServiceID + ".</strong>";
                                bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong><br />The last folio used is <strong>" + recentCoupons.OrderByDescending(m => m.purchaseService).FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.OrderByDescending(m => m.purchaseService).FirstOrDefault().purchaseService + ".</strong>";
                                bodyMail += (repeatedFolios != "" ? "<br />Coupons with folio correction:<br />" + repeatedFolios : "");
                                bodyMail += "<br /><br />The folio initially suggested was: <strong>" + _folio + "</strong>";
                                bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "</strong>";
                                query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1));
                                query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1);
                                db.SaveChanges();

                                var email = EmailNotifications.GetSystemEmail(bodyMail);
                                //EmailNotifications.Send(email, false);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                            }
                            return new { folio = serial + "," + (numericFolio + counter), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            #endregion
                        }
                        //el folio propuesto por los contadores ya está guardado
                        else if (groupedCoupons.Where(m => m.coupon == _folio + "-A").Count() > 0)
                        {
                            #region
                            //puede ser el segundo cupon de una promo paquete
                            //se sabe que no hay folios multiples repetidos, esto significa un error en los contadores.
                            //Se busca cuantas posiciones necesita recorrerse la propuesta de folio y actualizar los contadores
                            if (recentCoupons.FirstOrDefault(m => m.coupon == _folio + "-A").promo != null)
                            {
                                return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty) };
                            }
                            else
                            {
                                var counter = 0;
                                var folioToCompare = "";

                                do
                                {
                                    counter++;
                                    folioToCompare = serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "-A";
                                } while (groupedCoupons.Where(m => m.coupon == folioToCompare).Count() > 0);

                                bodyMail += "<strong>Folio Given By System Is Already Saved. Correction In Counters Applied.</strong><br /><br />";
                                bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                                bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1)) + "</strong>";
                                bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1))) + "</strong>";
                                bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong>";
                                bodyMail += "<br />The last folio used is <strong>" + recentCoupons.FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.FirstOrDefault().purchaseService + ".</strong>";
                                bodyMail += "<br /><br />The folio initally suggested was: <strong>" + _folio + "</strong>";
                                bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + counter)) + "</strong>";

                                query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1);
                                query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - (numericFolio + counter - 1));
                                db.SaveChanges();

                                //email sending
                                var email = EmailNotifications.GetSystemEmail(bodyMail);
                                //EmailNotifications.Send(email, false);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                return new { folio = serial + "," + (numericFolio + counter), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            }
                            #endregion
                        }
                        //el folio propuesto por los contadores no es el consecutivo del último guardado
                        else if ((numericFolio + 1) != nextFolio)
                        {
                            #region "el folio propuesto por los contadores no es el consecutivo del ultimo guardado. los contadores se modificaron sin utilizar folios"
                            var counter = nextFolio - numericFolio;

                            //new line
                            numericFolio = recentCoupons.Count() == 0 && numericFolio == 0 ? nextFolio - 1 : numericFolio;

                            bodyMail += "<strong>Folio Given By System Is NOT Consecutive. Correction In Counters Applied.</strong><br /><br />";
                            bodyMail += "Terminal: <strong>" + _purchase.tblTerminals.terminal + "</strong><br />Client Name: <strong>" + _purchase.tblLeads.firstName + " " + _purchase.tblLeads.lastName + ".</strong>";
                            bodyMail += "<br /><br />Currently available coupons: <strong>" + query.FirstOrDefault().available + "</strong><br />Corrected available coupons: <strong>" + ((int)query.FirstOrDefault().toFolio - numericFolio) + "</strong>";
                            bodyMail += "<br /><br />Currently generated coupons: <strong>" + query.FirstOrDefault().generated + "</strong><br />Corrected generated coupons: <strong>" + ((int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - numericFolio)) + "</strong>";
                            bodyMail += "<br /><br />The Point Of Sale of the purchase is: <strong>" + _purchase.tblPointsOfSale.shortName + ".</strong>";

                            bodyMail += (recentCoupons.Count() > 0 ? "<br />The last folio used is <strong>" + recentCoupons.FirstOrDefault().coupon + "</strong> and the coupon has the ID <strong>" + recentCoupons.FirstOrDefault().purchaseService + ".</strong>" : "<br /><strong>NO FOLIOS USED YET</strong>");
                            bodyMail += "<br /><br />The folio initally suggested was: <strong>" + _folio + "</strong>";
                            bodyMail += "<br />The folio returned is: <strong>" + serial + String.Format("{0:D" + _folioLength + "}", (numericFolio + 1)) + "</strong>";

                            query.FirstOrDefault().available = (int)query.FirstOrDefault().toFolio - numericFolio;
                            query.FirstOrDefault().generated = (int)query.FirstOrDefault().delivered - ((int)query.FirstOrDefault().toFolio - numericFolio);
                            db.SaveChanges();

                            //email sending
                            var email = EmailNotifications.GetSystemEmail(bodyMail);
                            //EmailNotifications.Send(email, false);
                            EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                            return new { folio = serial + "," + (numericFolio + 1), padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                            #endregion
                        }
                        //el folio propuesto por los contadores sí es el consecutivo del último guardado
                        else
                        {
                            return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = query.FirstOrDefault().generated == 0, lastUsedFolio = lastUsedFolio, lastUsedPurchase = (lastFolioProperties != null ? lastFolioProperties.purchase : Guid.Empty), couponFolioID = query.FirstOrDefault().couponFolioID };
                        }
                        //


                        //////////
                        if (coupons.generated != 0 && ((coupons.fromFolio + coupons.generated) != nextFolio || (nextFolio - numericFolio) > 1))
                        {
                            return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = coupons.generated == 0, couponFolioID = coupons.couponFolioID };
                        }
                        if (db.tblPurchaseServiceDetails.Where(m => m.tblPurchases_Services.tblPurchases.terminalID == _purchase.terminalID && m.coupon.Contains(_folio)).Count() == 0)
                        {
                            return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = coupons.generated == 0, couponFolioID = coupons.couponFolioID };
                        }
                        else
                        {
                            return new { folio = serial + "," + nextFolio, padding = _folioLength, isFirstOfSerie = coupons.generated == 0, couponFolioID = coupons.couponFolioID };
                        }
                    }
                }
                catch (Exception ex)
                {
                    return new { folio = "-1", exception = ex };
                }
            }

            //public string GetNextCouponFolio(Guid purchaseID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);

            //    return GetNextCouponFolio(purchase.pointOfSaleID, purchase.terminalID);
            //}

            public string GetNextCouponFolio(int pointOfSaleID, long? terminalID = null)
            {
                ePlatEntities db = new ePlatEntities();

                Regex exp = new Regex(@"[^\d]");

                var terminals = terminalID != null ? new long[] { (long)terminalID } : session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                var query = db.tblCouponFolios.Where(m => m.pointOfSaleID == pointOfSaleID && m.available > 0);
                if (query.Count() > 1)
                {
                    var date = query.Min(m => m.dateSaved);
                    var coupons = query.Single(m => m.dateSaved == date);
                    var serial = coupons.serial;
                    var nextFolio = (coupons.toFolio - coupons.available) + 1;
                    var _serviceDetails = from psd in db.tblPurchaseServiceDetails
                                          join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                          join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                          where terminals.Contains(p.terminalID)
                                          && psd.coupon.StartsWith(serial)
                                          orderby ps.confirmationDateTime descending
                                          select psd.coupon;
                    var _coupons = _serviceDetails.Count() > 0 ? _serviceDetails.Take(20).ToArray() : new string[] { };
                    //var _coupons = db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.StartsWith(serial)).Count() > 0 ? 
                    //    db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.StartsWith(serial)).OrderByDescending(m => m.tblPurchases_Services.confirmationDateTime).Select(m => m.coupon).Take(20).ToArray() : new string[] { };
                    var lastFolioUsed = _coupons.Count() > 0 ? _coupons.Select(m => Convert.ToInt32(m.Split('-')[0].Substring(m.IndexOf(serial) + 1))).OrderByDescending(m => m).FirstOrDefault() : 0;
                    var numericFolio = lastFolioUsed;
                    //new code
                    var _folioLength = 7;//according to Gerardo so we can have the same length in every coupon since a specific date
                    var _folio = serial + String.Format("{0:D" + _folioLength + "}", nextFolio);
                    //////////
                    if (coupons.generated != 0 && ((coupons.fromFolio + coupons.generated) != nextFolio || (nextFolio - numericFolio) > 1))
                    {
                        //it is no consecutive
                        return "0";
                    }
                    if (db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.Contains(_folio)).Count() == 0)
                    {
                        return serial + "," + nextFolio;
                    }
                    else
                    {
                        return "0";
                    }
                }
                else
                {
                    try
                    {
                        var serial = query.FirstOrDefault().serial;
                        int nextFolio = ((int)query.FirstOrDefault().toFolio - (int)query.FirstOrDefault().available) + 1;
                        var _serviceDetails = from psd in db.tblPurchaseServiceDetails
                                              join ps in db.tblPurchases_Services on psd.purchase_ServiceID equals ps.purchase_ServiceID
                                              join p in db.tblPurchases on ps.purchaseID equals p.purchaseID
                                              where terminals.Contains(p.terminalID)
                                              && psd.coupon.StartsWith(serial)
                                              orderby ps.confirmationDateTime descending
                                              select psd.coupon;
                        var _coupons = _serviceDetails.Count() > 0 ? _serviceDetails.Take(20).ToArray() : new string[] { };
                        //var _coupons = db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.StartsWith(serial)).Count() > 0 ? db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.StartsWith(serial)).OrderByDescending(m => m.tblPurchases_Services.confirmationDateTime).Select(m => m.coupon).Take(20).ToArray() : new string[] { };
                        var lastFolioUsed = _coupons.Count() > 0 ? _coupons.Select(m => Convert.ToInt32(m.Split('-')[0].Substring(m.IndexOf(serial) + 1))).OrderByDescending(m => m).FirstOrDefault() : 0;
                        var numericFolio = lastFolioUsed;

                        //new code
                        var _folioLength = 7;//according to Gerardo so we can have the same length in every coupon since a specific date
                        var _folio = serial + String.Format("{0:D" + _folioLength + "}", nextFolio);
                        //////////

                        if (query.FirstOrDefault().generated != 0 && ((query.FirstOrDefault().fromFolio + query.FirstOrDefault().generated) != nextFolio || (nextFolio - numericFolio) > 1))
                        {
                            //it is no consecutive
                            return "0";
                        }
                        if (db.tblPurchaseServiceDetails.Where(m => terminals.Contains(m.tblPurchases_Services.tblPurchases.terminalID) && m.coupon.Contains(_folio)).Count() == 0)
                        {
                            return serial + "," + nextFolio;
                        }
                        else
                        {
                            //folio already exists in tblPurchaseServiceDetails
                            return "0";
                        }
                    }
                    catch (Exception ex)
                    {
                        return "";
                    }
                }
            }

            public object IsTransportationService(long serviceID)
            {
                ePlatEntities db = new ePlatEntities();
                var query = db.tblServices.Single(m => m.serviceID == serviceID);
                return new { IsTransportation = query.transportationService, OffersRoundTrip = query.transportationService ? query.offersRoundTrip : false };
            }

            public static KeyValuePair<bool, bool> IsTransportation(long serviceID)
            {
                ePlatEntities db = new ePlatEntities();
                var query = db.tblServices.Single(m => m.serviceID == serviceID);
                return new KeyValuePair<bool, bool>(query.transportationService, query.offersRoundTrip);
            }

            //public static decimal GetSpecificRate(DateTime? date, string currency, long terminalid, int pointOfSaleID)
            /// <summary>
            /// 
            /// </summary>
            /// <param name="date">ER date</param>
            /// <param name="currency">ER from currency</param>
            /// <param name="terminalid">ER terminal</param>
            /// <param name="pointOfSaleID">ER point of sale</param>
            /// <returns></returns>
            public static decimal GetSpecificRate(DateTime? date, string currency, long terminalid, int pointOfSaleID = 0)
            {
                ePlatEntities db = new ePlatEntities();
                var _date = date ?? DateTime.Now;
                int _currency;
                if (!int.TryParse(currency, out _currency))
                {
                    _currency = db.tblCurrencies.Single(m => m.currencyCode == currency).currencyID;
                }
                //return _currency != 2 ? db.tblExchangeRates.Where(m => m.fromCurrencyID == _currency && m.fromDate <= _date && m.providerID == null && m.toCurrencyID == 2 && m.terminalID == terminalid).OrderByDescending(m => m.fromDate).ThenByDescending(m => m.dateSaved).FirstOrDefault().exchangeRate : 1;
                tblExchangeRates exchangeRateQ = null;
                exchangeRateQ = db.tblExchangeRates.Where(m =>
                    m.exchangeRateTypeID == 1
                    && m.fromCurrencyID == _currency
                    && m.fromDate <= _date
                    && (m.permanent_ == true || m.toDate >= _date)
                    && m.dateSaved <= _date
                    && m.providerID == null
                    && m.toCurrencyID == 2
                    && m.terminalID == terminalid
                    //&& (pointOfSaleID == 0 || m.tblExchangeRates_PointsOfSales.Count(
                    && (m.tblExchangeRates_PointsOfSales.Count(
                        p => p.pointOfSaleID == pointOfSaleID
                        && p.dateAdded <= date
                        && (p.dateDeleted == null || p.dateDeleted > date)
                    ) > 0)
                    ).FirstOrDefault();

                if (exchangeRateQ == null)
                {
                    exchangeRateQ = db.tblExchangeRates.Where(m =>
                    m.exchangeRateTypeID == 1
                    && m.fromCurrencyID == _currency
                    && m.fromDate <= _date
                    && (m.permanent_ == true || m.toDate >= _date)
                    && m.dateSaved <= _date
                    && m.providerID == null
                    && m.toCurrencyID == 2
                    && m.terminalID == terminalid
                    && m.tblExchangeRates_PointsOfSales.Count() == 0
                    ).OrderByDescending(m => m.fromDate).ThenByDescending(m => m.dateSaved).FirstOrDefault();
                }

                return _currency != 2 ? (exchangeRateQ != null ? exchangeRateQ.exchangeRate : 1) : 1;
            }

            public decimal NumberWithRateApplied(decimal number, decimal rate)
            {
                return (number * rate);
            }

            //Purchase Payments

            public AttemptResponse Current_SavePayment(PurchasesModel.PurchasePaymentModel model)
            {
                ePlatEntities db = new ePlatEntities();
                var currentUser = session.UserID;
                var _now = DateTime.Now;
                AttemptResponse response = new AttemptResponse();
                RescomDataModel.ApplyPayment_Data paymentData = new RescomDataModel.ApplyPayment_Data();
                RescomDataModel.ApplyPayment_Response paymentResponse = new RescomDataModel.ApplyPayment_Response();
                //condition to check if is new payment
                if (model.PurchasePayment_PaymentDetailsID == 0 || model.PurchasePayment_PaymentDetailsID == null)
                {
                    try
                    {
                        var paymentsAmount = new List<KeyValuePair<decimal, string>>();
                        var _purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase);
                        var _terminalID = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase).terminalID;
                        paymentsAmount.Add(new KeyValuePair<decimal, string>(model.PurchasePayment_Amount, model.PurchasePayment_Budget));
                        if (model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_Budget != "0")
                        {
                            //chargeback with budget selected
                            paymentsAmount.Clear();
                            int budgetID = int.Parse(model.PurchasePayment_Budget.Split('|')[0]);
                            var budget = db.tblBudgets.Single(m => m.budgetID == budgetID);
                            var budgetTeams = db.tblBudgets_PromotionTeams.Where(m => m.budgetID == budgetID).Select(m => m.promotionTeamID).ToArray();
                            //var _currentRates = GetExchangeRates(DateTime.Parse(model.PurchasePayment_DateSaved), _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                            var _currentRates = GetExchangeRates(_now.Date, _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                            decimal budgetUsed = 0;
                            decimal amountLeft = ConvertAmountToRate(_currentRates, model.PurchasePayment_Amount, model.PurchasePayment_Currency, budget.tblCurrencies.currencyCode).Key;
                            decimal budgetLeft = 0;

                            if (!budget.perWeek)
                            {
                                #region "budget per client"
                                #region "get amount of budget used"
                                var _budgetExpirationDate = DateTime.Now.AddMonths(-6);
                                var _transactions = db.tblPaymentDetails.Where(m => (m.deleted == null || !(bool)m.deleted) && m.tblPurchases.leadID == _purchase.leadID && m.tblPurchases.purchaseDateTime >= _budgetExpirationDate && m.paymentType == 3 && m.budgetID == budgetID);
                                foreach (var i in _transactions)
                                {
                                    var _rates = GetExchangeRates(i.dateSaved, _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                                    {
                                        //payment
                                        budgetUsed += ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, budget.tblCurrencies.currencyCode).Key;
                                    }
                                    else
                                    {
                                        //refund
                                        budgetUsed -= ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, budget.tblCurrencies.currencyCode).Key;
                                    }
                                }
                                #endregion
                                if (model.PurchasePayment_TransactionType == "1")
                                {
                                    budgetLeft = budget.budget - budgetUsed;
                                }
                                else
                                {
                                    budgetLeft = budgetUsed;
                                }
                                if (budgetLeft > 0)
                                {
                                    //use budget
                                    if (budgetLeft >= amountLeft)
                                    {
                                        //budget left covers amount
                                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                                    }
                                    else
                                    {
                                        //budget left is not enough to covers amount
                                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, budgetLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                                        amountLeft -= budgetLeft;
                                        if (amountLeft > 0)
                                        {
                                            if (model.PurchasePayment_IsVoucher)
                                            {
                                                //use extension
                                                var _extension = CatalogsDataModel.Budgets.BudgetsCatalogs.FillDrpBudgetsPerTeam(int.Parse(model.PurchasePayment_PromotionTeam)).Where(m => m.Value.IndexOf("Extension") > 0).FirstOrDefault().Value;
                                                var extensionID = int.Parse(_extension.Split('|')[0]);
                                                var extension = db.tblBudgets.Single(m => m.budgetID == extensionID);
                                                decimal extensionLeft = extension.budget;
                                                if (extensionLeft >= amountLeft)
                                                {
                                                    //use extension
                                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, (extensionID.ToString() + "|Extension")));
                                                }
                                                else
                                                {
                                                    //extension left is not enough to covers amount
                                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, extensionLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, (extensionID.ToString() + "|Extension")));
                                                    amountLeft -= extensionLeft;
                                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                                                }
                                            }
                                            else
                                            {
                                                //charge excedent to opc
                                                paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //there's no budget left
                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                                }
                                #endregion
                            }
                            else
                            {
                                #region "budget per week"
                                var opcID = int.Parse(model.PurchasePayment_OPC);
                                var teamID = int.Parse(model.PurchasePayment_PromotionTeam);
                                //budgetUsed = GetBudgetUsedInWeek(opcID, teamID, model.PurchasePayment_DateSaved, _terminalID, _purchase.pointOfSaleID);
                                budgetUsed = GetBudgetUsedInWeek(opcID, teamID, _now.Date.ToString("yyyy-MM-dd"), _terminalID, _purchase.pointOfSaleID);

                                if (model.PurchasePayment_TransactionType == "1")
                                {
                                    budgetLeft = budget.budget - budgetUsed;
                                }
                                else
                                {
                                    budgetLeft = budgetUsed;
                                }

                                if (budgetLeft >= amountLeft)
                                {
                                    //budget covers amount
                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                                }
                                else
                                {
                                    //budget is not enough to covers amount
                                    if (budgetLeft > 0)
                                    {
                                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, budgetLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                                    }
                                    amountLeft -= budgetLeft;
                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                                }
                                #endregion
                            }
                        }
                        #region "new payment"
                        foreach (var paymentAmount in paymentsAmount)
                        {
                            tblPaymentDetails paymentDetails = new tblPaymentDetails();
                            tblMoneyTransactions moneyTransaction = new tblMoneyTransactions();

                            paymentDetails.purchaseID = model.PurchasePayment_Purchase;
                            paymentDetails.paymentType = model.PurchasePayment_PaymentType != "0" ? int.Parse(model.PurchasePayment_PaymentType) : (int?)null;
                            paymentDetails.certificateNumbers = model.PurchasePayment_PaymentType == "6" ? model.PurchasePayment_CertificateNumbers : null;
                            #region "opc related properties assignment"
                            if (model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null)
                            {
                                if (model.PurchasePayment_OPC != "null")
                                {
                                    paymentDetails.opcID = long.Parse(model.PurchasePayment_OPC);
                                    paymentDetails.promotionTeamID = int.Parse(model.PurchasePayment_PromotionTeam);
                                }
                                else
                                {
                                    paymentDetails.opcID = (long?)null;
                                    paymentDetails.other = model.PurchasePayment_Other;
                                    paymentDetails.promotionTeamID = (int?)null;
                                }
                            }
                            else
                            {
                                paymentDetails.opcID = (long?)null;
                                paymentDetails.other = model.PurchasePayment_Other;
                                paymentDetails.promotionTeamID = (int?)null;
                            }
                            #endregion
                            if (model.PurchasePayment_PaymentType == "3")
                            {
                                if (paymentAmount.Value != "0")
                                {
                                    //has budget
                                    paymentDetails.chargedToCompanyID = int.Parse(model.PurchasePayment_Company.Split('|')[0]);
                                }
                                else
                                {
                                    //does not has budget, check if company comes in model
                                    if (paymentsAmount.Count() > 1 && !db.tblTerminals.Single(m => m.terminalID == _terminalID).invoiceChargeBacksToMarketingCompany)
                                    {
                                        //charge to payingCompany since it exceeds budget
                                        var _opc = long.Parse(model.PurchasePayment_OPC);
                                        //if(!db.tblTerminals.Single(m => m.terminalID == _terminalID).invoiceChargeBacksToMarketingCompany)
                                        //{
                                        //invoice to payingCompany
                                        paymentDetails.chargedToCompanyID = db.tblOPCS.Single(m => m.opcID == _opc).payingCompanyIDX;
                                        //}
                                        //else
                                        //{
                                        //    //invoice to marketingCompany
                                        //    paymentDetails.chargedToCompanyID = int.Parse(model.PurchasePayment_Company.Split('|')[0]);
                                        //}
                                    }
                                    else
                                    {
                                        //if (!db.tblTerminals.Single(m => m.terminalID == _terminalID).invoiceChargeBacksToMarketingCompany)
                                        //{
                                        //charge to model company
                                        paymentDetails.chargedToCompanyID = int.Parse(model.PurchasePayment_Company.Split('|')[0]);
                                        //}
                                    }
                                }
                            }
                            else if (model.PurchasePayment_PaymentType == "4")
                            {
                                paymentDetails.chargedToCompanyID = int.Parse(model.PurchasePayment_Company.Split('|')[0]);
                            }
                            //paymentDetails.chargedToCompanyID = model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_Company != "null" && model.PurchasePayment_Company != null ? int.Parse(model.PurchasePayment_Company) : (int?)null;
                            paymentDetails.locationID = model.PurchasePayment_PaymentType == "3" ? (model.PurchasePayment_Location != "null" ? int.Parse(model.PurchasePayment_Location) : (int?)null) : (int?)null;
                            paymentDetails.invitation = model.PurchasePayment_PaymentType == "3" ? model.PurchasePayment_Invitation != null ? model.PurchasePayment_Invitation.Trim() : null : null;
                            paymentDetails.chargeBackConceptID = model.PurchasePayment_PaymentType == "3" ? long.Parse(model.PurchasePayment_ChargeBackConcept) : (long?)null;
                            paymentDetails.currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                            paymentDetails.amount = paymentAmount.Key;
                            paymentDetails.chargeDescriptionID = 1;
                            paymentDetails.chargeTypeID = 1;
                            paymentDetails.paymentComments = model.PurchasePayment_PaymentComments;
                            paymentDetails.dateSaved = model.PurchasePayment_DateSaved != null ? DateTime.Parse(model.PurchasePayment_DateSaved).Date == DateTime.Today ? _now : DateTime.Parse(model.PurchasePayment_DateSaved).AddHours(12) : _now;

                            paymentDetails.savedByUserID = session.UserID;
                            //paymentDetails.applyCommission = model.PurchasePayment_ApplyCommission;
                            paymentDetails.applyCommission = model.PurchasePayment_PaymentType == "2" || model.PurchasePayment_PaymentType == "5" ? model.PurchasePayment_ApplyCommission : false;
                            paymentDetails.budgetID = paymentAmount.Value != "0" && model.PurchasePayment_PaymentType == "3" ? int.Parse(paymentAmount.Value.Split('|')[0]) : (int?)null;

                            moneyTransaction.terminalID = _terminalID;
                            //these properties will change their value if amount > 0 && payment is made with CC
                            moneyTransaction.authCode = string.Empty;
                            moneyTransaction.authAmount = paymentAmount.Key;
                            moneyTransaction.authDate = DateTime.ParseExact(DateTime.Today.ToString("M/d/yyyy"), "M/d/yyyy", CultureInfo.InvariantCulture);
                            moneyTransaction.errorCode = "0";
                            moneyTransaction.transactionDate = _now;
                            moneyTransaction.transactionTypeID = int.Parse(model.PurchasePayment_TransactionType);
                            moneyTransaction.reference = TerminalDataModel.GetPrefix(_terminalID) + '-' + model.PurchasePayment_Purchase;
                            moneyTransaction.madeByEplat = false;

                            response.Type = Attempt_ResponseTypes.Ok;//if payment made with cc, this could change

                            #region "check if credit card transactions with same info exist"
                            if (model.PurchasePayment_PaymentType == "2")
                            {
                                var existingBillingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                var _transactionType = int.Parse(model.PurchasePayment_TransactionType);
                                var existingTransactions = db.tblPaymentDetails.Where(m => (m.deleted == null || !(bool)m.deleted) && m.purchaseID == model.PurchasePayment_Purchase && m.tblMoneyTransactions.authCode == model.PurchasePayment_TransactionCode && m.tblMoneyTransactions.transactionTypeID == _transactionType);
                                if (existingBillingInfoID > 0)
                                {
                                    //has billing info saved
                                    var _billingInfo = db.tblBillingInfo.Single(m => m.billingInfoID == existingBillingInfoID);
                                    var cardNumber = mexHash.mexHash.DecryptString(_billingInfo.cardNumber).ToString();
                                    cardNumber = cardNumber.Substring(cardNumber.Length - 4);
                                    var decryptedInfo = new List<KeyValuePair<long, string>>();
                                    foreach (var i in existingTransactions)
                                    {
                                        var decryptedString = mexHash.mexHash.DecryptString(i.tblMoneyTransactions.tblBillingInfo.cardNumber);
                                        decryptedInfo.Add(new KeyValuePair<long, string>(i.paymentDetailsID, decryptedString.Substring(decryptedString.Length - 4)));
                                    }
                                    decryptedInfo = decryptedInfo.Where(m => m.Value == cardNumber).ToList();
                                    var paymentDetailsArray = decryptedInfo.Select(x => x.Key).ToArray();
                                    existingTransactions = existingTransactions.Where(m => paymentDetailsArray.Contains(m.paymentDetailsID));
                                    //existingTransactions = existingTransactions.Where(m => mexHash.mexHash.DecryptString(m.tblMoneyTransactions.tblBillingInfo.cardNumber).Substring(mexHash.mexHash.DecryptString(m.tblMoneyTransactions.tblBillingInfo.cardNumber).Length - 4) == cardNumber);
                                }
                                else
                                {
                                    //use reference number as billing info
                                    var _cardReference = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                    existingTransactions = existingTransactions.Where(m => m.ccReferenceNumber == _cardReference);
                                }
                                if (existingTransactions.Count() > 0)
                                {
                                    throw new Exception("A transaction with same data is already registered");
                                }
                            }
                            #endregion

                            if (model.PurchasePayment_TransactionType == "2")
                            {
                                #region "Refund"
                                paymentDetails.refundAccount = model.PurchasePayment_RefundAccount;
                                //register credit card info as well as payments(dont apply refund)
                                if (model.PurchasePayment_PaymentType == "2")
                                {
                                    #region "Refund to CC"
                                    paymentDetails.ccReferenceNumber = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                    paymentDetails.ccType = model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null;

                                    var _billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                    var _currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                                    var merchantAccount = db.tblMerchantAccountSettings
                                        .Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID)
                                        .Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });

                                    if (merchantAccount.Count() > 0)
                                    {
                                        moneyTransaction.merchantAccountID = merchantAccount.First().merchantAccountID;
                                    }
                                    //moneyTransaction.authCode = "0";
                                    moneyTransaction.authCode = model.PurchasePayment_TransactionCode ?? "0";//requested by Gerardo
                                    moneyTransaction.authDate = DateTime.ParseExact(DateTime.Today.ToString("M/d/yyyy"), "M/d/yyyy", CultureInfo.InvariantCulture);
                                    moneyTransaction.errorCode = "0";
                                    moneyTransaction.billingInfoID = _billingInfoID > 0 ? _billingInfoID : (long?)null;
                                    #endregion
                                }
                                response.Message = "Refund Saved";
                                #endregion
                            }
                            else
                            {
                                #region "Payment"
                                #region "payment with credit card"
                                if (model.PurchasePayment_PaymentType == "2")
                                {
                                    var _currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                                    var _billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);

                                    //validate if pointOfSale accepts charges
                                    if (bool.Parse(LeadsCatalogs.DoesPointAcceptCharges(model.PurchasePayment_Purchase).FirstOrDefault().Value))
                                    {

                                        if (model.PurchasePayment_ApplyCharge)
                                        {
                                            #region "apply charge to credit card"
                                            try
                                            {
                                                var billingInfo = db.tblBillingInfo.Single(m => m.billingInfoID == _billingInfoID);
                                                var merchantAccount = db.tblMerchantAccountSettings
                                                    .Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID)
                                                    .Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });

                                                if (merchantAccount.Count() > 0)
                                                {
                                                    moneyTransaction.merchantAccountID = merchantAccount.First().merchantAccountID;
                                                    paymentData.UserName = merchantAccount.First().username;
                                                    paymentData.Password = merchantAccount.First().password;
                                                }

                                                paymentData.Card_Holder = billingInfo.cardHolderName;
                                                paymentData.Card_Holder_Address = billingInfo.address;
                                                paymentData.Card_Holder_Zip = billingInfo.zipcode;
                                                paymentData.Card_Number = mexHash.mexHash.DecryptString(billingInfo.cardNumber);
                                                paymentData.Card_Security_Number = billingInfo.cardCVV;
                                                paymentData.Expiration_Date = billingInfo.cardExpiry.Split('/')[0] + "/01/" + billingInfo.cardExpiry.Split('/')[1];
                                                paymentData.Reference_Code = TerminalDataModel.GetPrefix(_terminalID) + '-' + model.PurchasePayment_Purchase;
                                                //paymentData.Transaction_Amount = double.Parse(model.PurchasePayment_Amount.ToString());
                                                paymentData.Transaction_Amount = double.Parse(paymentAmount.Key.ToString());
                                                paymentData.CurrencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;

                                                paymentResponse = RescomDataModel.ApplyPayment(paymentData);
                                                //fill moneyTransaction with paymentResponse
                                                moneyTransaction.authDate = paymentResponse.Authorization_Date;
                                                moneyTransaction.authCode = paymentResponse.Auth_Code;
                                                moneyTransaction.authAmount = (decimal)paymentResponse.Authorization_Amount;
                                                moneyTransaction.madeByEplat = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                throw new Exception("Billing Info is not correct or complete.");
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region "don't apply charge to CC, only fill moneyTransaction fields"
                                            paymentDetails.ccReferenceNumber = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                            paymentDetails.ccType = model.PurchasePayment_CardType != 0 ? model.PurchasePayment_CardType : (int?)null;
                                            paymentResponse.Error_Code = 0;
                                            moneyTransaction.authDate = DateTime.ParseExact(DateTime.Today.ToString("M/d/yyyy"), "M/d/yyyy", CultureInfo.InvariantCulture);
                                            moneyTransaction.authCode = model.PurchasePayment_TransactionCode;
                                            //moneyTransaction.authAmount = model.PurchasePayment_Amount;
                                            moneyTransaction.authAmount = paymentAmount.Key;
                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        paymentDetails.ccReferenceNumber = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                        paymentDetails.ccType = model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null;
                                        paymentResponse.Error_Code = 0;
                                        moneyTransaction.authDate = DateTime.ParseExact(DateTime.Today.ToString("M/d/yyyy"), "M/d/yyyy", CultureInfo.InvariantCulture);
                                        moneyTransaction.authCode = model.PurchasePayment_TransactionCode != null ? model.PurchasePayment_TransactionCode : "0";
                                        //moneyTransaction.authAmount = model.PurchasePayment_Amount;
                                        moneyTransaction.authAmount = paymentAmount.Key;
                                    }
                                    moneyTransaction.errorCode = paymentResponse.Error_Code.ToString();
                                    moneyTransaction.billingInfoID = _billingInfoID > 0 ? _billingInfoID : (long?)null;

                                    #region "payment response section"
                                    if (paymentResponse.Error_Code == 0)
                                    {
                                        //paid
                                        response.Message = "Payment Saved";
                                    }
                                    else
                                    {
                                        //response.Type = Attempt_ResponseTypes.Ok;
                                        response.Message = RescomDataModel.ApplyPayment_ErrorCodes[paymentResponse.Error_Code];
                                    }
                                    #endregion
                                }
                                #endregion
                                #endregion
                            }
                            //add instances after inserting all property values 
                            paymentDetails.tblMoneyTransactions = moneyTransaction; //add moneyTransaction instance to paymentDetails instance
                            db.tblPaymentDetails.AddObject(paymentDetails);
                            db.SaveChanges();
                            _purchase.total = GetTotalOfPurchase(_purchase.purchaseID);
                            db.SaveChanges();
                            #region "definition of reference"
                            var _reference = "";
                            switch (paymentDetails.paymentType)
                            {
                                case 2:
                                    {
                                        var cardType = paymentDetails.ccType != null ? paymentDetails.tblCardTypes.cardType : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? paymentDetails.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType : "Master Card";
                                        var reference = paymentDetails.ccReferenceNumber != null ? paymentDetails.ccReferenceNumber.ToString() : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(paymentDetails.tblMoneyTransactions.tblBillingInfo.cardNumber)).Substring(12) : "1234";

                                        _reference = cardType + "-" + reference + "-" + paymentDetails.tblMoneyTransactions.authCode + " | " + (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved, paymentDetails.ccType) + "% of Commission Applied" : "Commission NOT Applied");
                                        break;
                                    }
                                case 3:
                                    {
                                        _reference = (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public") : paymentDetails.opcID != null ? (paymentDetails.tblOPCS.opc + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public")) : paymentDetails.other + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public"));
                                        _reference += (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? "" : " - " + (paymentDetails.budgetID != null ? paymentDetails.tblBudgets.budgetExt ? "Extension" : paymentDetails.tblBudgets.perClient ? "Per Client" : "Per Week" : "No Budget"));
                                        break;
                                    }
                                case 6:
                                    {
                                        _reference = paymentDetails.certificateNumbers;
                                        break;
                                    }
                                case 5:
                                    {
                                        _reference = (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved) + "% of Commission Applied" : "");
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                            #endregion

                            response.ObjectID = new
                            {
                                paymentID = paymentDetails.paymentDetailsID,
                                exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase((int)paymentDetails.currencyID, paymentDetails.dateSaved, _purchase.terminalID, _purchase.pointOfSaleID),
                                reference = _reference,
                                purchase = paymentDetails.purchaseID,
                                authCode = moneyTransaction.authCode,
                                purchaseTotal = _purchase.total,
                                errorCode = GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(moneyTransaction.errorCode)).Value,
                                dateSaved = paymentDetails.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                            };
                            response.Message = "Transaction Saved <br />" + response.Message;
                        }
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Payment NOT Saved";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                    #endregion
                }
                else
                {
                    #region "update of payment/refund"
                    try
                    {
                        tblPaymentDetails paymentDetails = db.tblPaymentDetails.Single(m => m.paymentDetailsID == model.PurchasePayment_PaymentDetailsID);
                        tblMoneyTransactions moneyTransaction = db.tblMoneyTransactions.FirstOrDefault(m => m.moneyTransactionID == paymentDetails.moneyTransactionID);
                        var _terminalID = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase).terminalID;

                        if (db.tblCloseOuts_PaymentDetails.Where(m => m.paymentDetailsID == model.PurchasePayment_PaymentDetailsID).Count() > 0)
                        {
                            if (GeneralFunctions.IsUserInRole("Comptroller") || GeneralFunctions.IsUserInRole("Operation Manager VEX"))
                            {
                                if (paymentDetails.amount != model.PurchasePayment_Amount || paymentDetails.paymentType != int.Parse(model.PurchasePayment_PaymentType) || paymentDetails.tblCurrencies.currencyCode != model.PurchasePayment_Currency)
                                {
                                    throw new Exception("Payment Related to a Close Out");
                                }
                            }
                            else
                            {
                                throw new Exception("Payment Related to a Close Out");
                            }
                        }

                        if (model.PurchasePayment_PaymentType == "3" && paymentDetails.budgetID != (model.PurchasePayment_Budget != "0" ? int.Parse(model.PurchasePayment_Budget.Split('|')[0]) : (int?)null))
                        {
                            if (!GeneralFunctions.IsUserInRole("Comptroller"))
                            {
                                throw new Exception("Property Budget cannot be updated. You need to delete transaction and create a new one.");
                            }
                        }

                        paymentDetails.purchaseID = model.PurchasePayment_Purchase;
                        paymentDetails.paymentType = model.PurchasePayment_PaymentType != "0" ? int.Parse(model.PurchasePayment_PaymentType) : (int?)null;
                        paymentDetails.certificateNumbers = model.PurchasePayment_PaymentType == "6" ? model.PurchasePayment_CertificateNumbers : null;
                        #region "opc related properties assignment"
                        if (model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null)
                        {
                            if (model.PurchasePayment_OPC != "null")
                            {
                                paymentDetails.opcID = long.Parse(model.PurchasePayment_OPC);
                                paymentDetails.promotionTeamID = int.Parse(model.PurchasePayment_PromotionTeam);
                            }
                            else
                            {
                                paymentDetails.opcID = (long?)null;
                                paymentDetails.other = model.PurchasePayment_Other;
                                paymentDetails.promotionTeamID = (int?)null;
                            }
                        }
                        else
                        {
                            paymentDetails.opcID = (long?)null;
                            paymentDetails.other = model.PurchasePayment_Other;
                            paymentDetails.promotionTeamID = (int?)null;
                        }
                        #endregion
                        paymentDetails.chargedToCompanyID = (model.PurchasePayment_PaymentType == "3" || model.PurchasePayment_PaymentType == "4") && model.PurchasePayment_Company != "null" && model.PurchasePayment_Company != null ? int.Parse(model.PurchasePayment_Company.Split('|')[0]) : (int?)null;
                        paymentDetails.locationID = model.PurchasePayment_PaymentType == "3" ? (model.PurchasePayment_Location != "null" ? int.Parse(model.PurchasePayment_Location) : (int?)null) : (int?)null;
                        paymentDetails.invitation = model.PurchasePayment_PaymentType == "3" ? model.PurchasePayment_Invitation != null ? model.PurchasePayment_Invitation.Trim() : null : null;
                        paymentDetails.chargeBackConceptID = model.PurchasePayment_PaymentType == "3" ? long.Parse(model.PurchasePayment_ChargeBackConcept) : (long?)null;
                        paymentDetails.currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                        paymentDetails.amount = model.PurchasePayment_Amount;
                        paymentDetails.chargeDescriptionID = 1;
                        paymentDetails.chargeTypeID = 1;
                        paymentDetails.paymentComments = model.PurchasePayment_PaymentComments;
                        paymentDetails.dateSaved = model.PurchasePayment_DateSaved != null ? DateTime.Parse(model.PurchasePayment_DateSaved).Date != DateTime.Today ? DateTime.Parse(model.PurchasePayment_DateSaved).AddHours(12) : paymentDetails.dateSaved.Date == DateTime.Parse(model.PurchasePayment_DateSaved).Date ? paymentDetails.dateSaved : (DateTime.Parse(model.PurchasePayment_DateSaved).Date + paymentDetails.dateSaved.TimeOfDay) : paymentDetails.dateSaved;
                        paymentDetails.lastDateModified = DateTime.Now;
                        paymentDetails.modifiedByUserID = session.UserID;
                        //paymentDetails.applyCommission = model.PurchasePayment_ApplyCommission;
                        paymentDetails.applyCommission = model.PurchasePayment_PaymentType == "2" || model.PurchasePayment_PaymentType == "5" ? model.PurchasePayment_ApplyCommission : false;
                        paymentDetails.budgetID = model.PurchasePayment_Budget != "0" && model.PurchasePayment_PaymentType == "3" ? int.Parse(model.PurchasePayment_Budget.Split('|')[0]) : (int?)null;

                        moneyTransaction.terminalID = _terminalID;
                        moneyTransaction.authAmount = model.PurchasePayment_Amount;

                        response.Type = Attempt_ResponseTypes.Ok;//if payment made with cc, this should change

                        if (model.PurchasePayment_TransactionType == "2")
                        {
                            #region "Refund"
                            paymentDetails.refundAccount = model.PurchasePayment_RefundAccount;
                            //register credit card as payment (dont make refund)
                            if (model.PurchasePayment_PaymentType == "2")
                            {
                                paymentDetails.ccReferenceNumber = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                paymentDetails.ccType = model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null;

                                var _billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                var _currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                                var merchantAccount = db.tblMerchantAccountSettings
                                    .Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID)
                                    .Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });

                                if (merchantAccount.Count() > 0)
                                {
                                    moneyTransaction.merchantAccountID = merchantAccount.First().merchantAccountID;
                                }
                                moneyTransaction.billingInfoID = _billingInfoID > 0 ? _billingInfoID : (long?)null;
                            }
                            else
                            {
                                paymentDetails.ccReferenceNumber = (int?)null;
                                paymentDetails.ccType = (int?)null;
                                moneyTransaction.billingInfoID = (long?)null;
                            }
                            response.Message = "Refund Updated";
                            #endregion
                        }
                        else
                        {
                            #region "Payment"
                            if (model.PurchasePayment_PaymentType == "2")
                            {
                                paymentDetails.ccReferenceNumber = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                paymentDetails.ccType = model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null;

                                var _billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                var _currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                                var merchantAccount = db.tblMerchantAccountSettings
                                    .Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID)
                                    .Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });

                                if (merchantAccount.Count() > 0)
                                {
                                    moneyTransaction.merchantAccountID = merchantAccount.First().merchantAccountID;
                                }

                                moneyTransaction.billingInfoID = _billingInfoID > 0 ? _billingInfoID : (long?)null;
                            }
                            else
                            {
                                paymentDetails.ccReferenceNumber = (int?)null;
                                paymentDetails.ccType = (int?)null;
                                moneyTransaction.billingInfoID = (long?)null;
                            }
                            response.Message = "Payment Updated";
                            #endregion
                        }

                        #region "relationships of purchases_services - moneyTransactions"
                        //delete previous retationships created
                        //var dbServices = db.tblPurchases_Services_MoneyTransactions.Where(m => m.moneyTransactionID == moneyTransaction.moneyTransactionID).Select(m => m.purchase_ServiceID).ToArray();
                        var _purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase);
                        #endregion

                        db.SaveChanges();
                        _purchase.total = GetTotalOfPurchase(_purchase.purchaseID);
                        db.SaveChanges();
                        #region "definition of reference"
                        var _reference = "";
                        switch (paymentDetails.paymentType)
                        {
                            case 2:
                                {
                                    var cardType = paymentDetails.ccType != null ? paymentDetails.tblCardTypes.cardType : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? paymentDetails.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType : "Master Card";
                                    var reference = paymentDetails.ccReferenceNumber != null ? paymentDetails.ccReferenceNumber.ToString() : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(paymentDetails.tblMoneyTransactions.tblBillingInfo.cardNumber)).Substring(12) : "1234";

                                    _reference = cardType + "-" + reference + "-" + paymentDetails.tblMoneyTransactions.authCode + " | " + (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved, paymentDetails.ccType) + "% of Commission Applied" : "Commission NOT Applied");
                                    break;
                                }
                            case 3:
                                {
                                    _reference = (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public") : paymentDetails.opcID != null ? paymentDetails.tblOPCS.opc + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public") : paymentDetails.other + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public"));
                                    _reference += (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? "" : " - " + (paymentDetails.budgetID != null ? paymentDetails.tblBudgets.budgetExt ? "Extension" : paymentDetails.tblBudgets.perClient ? "Per Client" : "Per Week" : "No Budget"));
                                    break;
                                }
                            case 6:
                                {
                                    _reference = paymentDetails.certificateNumbers;
                                    break;
                                }
                            case 5:
                                {
                                    _reference = (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved) + "% of Commission Applied" : "");
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        #endregion
                        response.ObjectID = new
                        {
                            paymentID = paymentDetails.paymentDetailsID,
                            //exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase((Guid)paymentDetails.purchaseID),
                            exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase((int)paymentDetails.currencyID, paymentDetails.dateSaved, _purchase.terminalID, _purchase.pointOfSaleID),
                            reference = _reference,
                            purchase = paymentDetails.purchaseID,
                            purchaseTotal = _purchase.total,
                            authCode = moneyTransaction.authCode,
                            errorCode = GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(moneyTransaction.errorCode)).Value,
                            dateSaved = paymentDetails.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                        };
                        response.Message = "Transaction Updated <br />" + response.Message;
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Payment NOT Updated";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                    #endregion
                }
            }

            public AttemptResponse SavePayment(PurchasesModel.PurchasePaymentModel model)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                RescomDataModel.ApplyPayment_Data pData = new RescomDataModel.ApplyPayment_Data();
                RescomDataModel.ApplyPayment_Response pResponse = new RescomDataModel.ApplyPayment_Response();
                RescomDataModel.ApplyPayment_Data paymentData = new RescomDataModel.ApplyPayment_Data();
                RescomDataModel.ApplyPayment_Response paymentResponse = new RescomDataModel.ApplyPayment_Response();

                var currentUser = session.UserID;
                var _now = DateTime.Now;
                var _purchase = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase);
                var _terminalID = db.tblPurchases.Single(m => m.purchaseID == model.PurchasePayment_Purchase).terminalID;
                var _currencyID = db.tblCurrencies.Single(m => m.currencyCode == model.PurchasePayment_Currency).currencyID;
                var paymentsAmount = new List<KeyValuePair<decimal, string>>();

                //condition to check if is new payment
                if (model.PurchasePayment_PaymentDetailsID == 0 || model.PurchasePayment_PaymentDetailsID == null)
                {
                    try
                    {
                        var pdResponse = new tblPaymentDetails();
                        paymentsAmount.Add(new KeyValuePair<decimal, string>(model.PurchasePayment_Amount, model.PurchasePayment_Budget));
                        int budgetID = model.PurchasePayment_Budget != "0" ? int.Parse(model.PurchasePayment_Budget.Split('|')[0]) : 0;
                        var reference = "";
                        if (model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_Budget != "0")
                        {
                            paymentsAmount.Clear();
                            var budget = db.tblBudgets.Single(m => m.budgetID == budgetID);
                            var _currentRates = GetExchangeRates(_now.Date, _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                            decimal budgetAvailable = 0;
                            decimal _budgetUsed = 0;
                            bool useBudget;
                            //********
                            var amountToSave = ConvertAmountToRate(_currentRates, model.PurchasePayment_Amount, model.PurchasePayment_Currency, budget.tblCurrencies.currencyCode).Key;
                            if (!budget.perWeek)
                            {
                                var purchaseDate = _purchase.purchaseDateTime.AddDays(-15);
                                var savedEgresses = db.tblEgresses.Where(m => m.invitationNumber == model.PurchasePayment_Invitation && m.pointOfSaleID == _purchase.pointOfSaleID && m.budgetID == budgetID && (m.dateSaved >= purchaseDate)).Select(m => new { m.amount, m.tblCurrencies.currencyCode, budgetCurrency = m.tblBudgets.tblCurrencies.currencyCode, m.dateSaved });
                                var savedPayments = _purchase.tblPaymentDetails.Where(m => m.deletedByUserID == null && m.invitation == model.PurchasePayment_Invitation && m.paymentType == 3 && m.budgetID == budgetID).Select(m => new { m.amount, m.tblCurrencies.currencyCode, budgetCurrency = m.tblBudgets.tblCurrencies.currencyCode, m.dateSaved });
                                var savedTransactions = savedEgresses.Count() > 0 ? savedPayments.Count() > 0 ? savedEgresses.Concat(savedPayments) : savedEgresses : savedPayments;
                                budgetAvailable = 0;

                                if (savedTransactions.Count() == 0)
                                {
                                    budgetAvailable = budget.budget;
                                }
                                else
                                {
                                    _budgetUsed = 0;
                                    foreach (var i in savedTransactions)
                                    {
                                        var _rate = GetExchangeRates(i.dateSaved, _terminalID, 0, true).Replace(" ", string.Empty).Split(',').ToList();
                                        _budgetUsed += ConvertAmountToRate(_rate, i.amount, i.currencyCode, i.budgetCurrency).Key;
                                    }
                                    //budgetAvailable =  budget.budget - _budgetUsed;
                                    budgetAvailable = model.PurchasePayment_TransactionType == "2" ? budget.budget : budget.budget - _budgetUsed;
                                }
                            }
                            else
                            {
                                var opcID = int.Parse(model.PurchasePayment_OPC);
                                var teamID = int.Parse(model.PurchasePayment_PromotionTeam);
                                _budgetUsed = GetBudgetUsedInWeek(opcID, teamID, _now.ToString("yyyy-MM-dd"), _terminalID, _purchase.pointOfSaleID);
                                budgetAvailable = budget.budget - _budgetUsed <= 0 ? 0 : budget.budget - _budgetUsed;
                            }
                            useBudget = budgetAvailable > 0;
                            if (useBudget)
                            {
                                var toBudget = Math.Round(ConvertAmountToRate(_currentRates, (amountToSave <= budgetAvailable ? amountToSave : budgetAvailable), budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, 2, MidpointRounding.AwayFromZero);
                                var toOther = Math.Round(ConvertAmountToRate(_currentRates, (amountToSave <= budgetAvailable ? 0 : amountToSave - budgetAvailable), budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, 2, MidpointRounding.AwayFromZero);
                                paymentsAmount.Add(new KeyValuePair<decimal, string>(toBudget, model.PurchasePayment_Budget));
                                if (toOther != 0)
                                {
                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(toOther, null));
                                }
                            }
                            else
                            {
                                response.Message = "<br />No Budget Available";
                                paymentsAmount.Add(new KeyValuePair<decimal, string>(model.PurchasePayment_Amount, null));
                            }

                            //********
                            //*****
                            #region "oldCode"
                            //var budgetTeams = db.tblBudgets_PromotionTeams.Where(m => m.budgetID == budgetID).Select(m => m.promotionTeamID).ToArray();
                            //var _currentRates = GetExchangeRates(_now.Date, _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                            //decimal budgetUsed = 0;
                            //decimal amountLeft = ConvertAmountToRate(_currentRates, model.PurchasePayment_Amount, model.PurchasePayment_Currency, budget.tblCurrencies.currencyCode).Key;
                            //decimal budgetLeft = 0;

                            //if (!budget.perWeek)
                            //{
                            //    #region "budget per client"
                            //    #region "get amount of budget used"
                            //    var _budgetExpirationDate = DateTime.Now.AddMonths(-6);
                            //    var _transactions = db.tblPaymentDetails.Where(m => (m.deleted == null || !(bool)m.deleted) && m.tblPurchases.leadID == _purchase.leadID && m.tblPurchases.purchaseDateTime >= _budgetExpirationDate && m.paymentType == 3 && m.budgetID == budgetID);
                            //    foreach (var i in _transactions)
                            //    {
                            //        var _rates = GetExchangeRates(i.dateSaved, _terminalID, _purchase.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                            //        if (i.tblMoneyTransactions.transactionTypeID == 1)
                            //        {
                            //            //payment
                            //            budgetUsed += ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, budget.tblCurrencies.currencyCode).Key;
                            //        }
                            //        else
                            //        {
                            //            //refund
                            //            budgetUsed -= ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, budget.tblCurrencies.currencyCode).Key;
                            //        }
                            //    }
                            //    #endregion
                            //    if (model.PurchasePayment_TransactionType == "1")
                            //    {
                            //        budgetLeft = budget.budget - budgetUsed;
                            //    }
                            //    else
                            //    {
                            //        budgetLeft = budgetUsed;
                            //    }
                            //    if (budgetLeft > 0)
                            //    {
                            //        //use budget
                            //        if (budgetLeft >= amountLeft)
                            //        {
                            //            //budget left covers amount
                            //            paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                            //        }
                            //        else
                            //        {
                            //            //budget left is not enough to covers amount
                            //            paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, budgetLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                            //            amountLeft -= budgetLeft;
                            //            if (amountLeft > 0)
                            //            {
                            //                if (model.PurchasePayment_IsVoucher)
                            //                {
                            //                    //use extension
                            //                    var _extension = CatalogsDataModel.Budgets.BudgetsCatalogs.FillDrpBudgetsPerTeam(int.Parse(model.PurchasePayment_PromotionTeam)).Where(m => m.Value.IndexOf("Extension") > 0).FirstOrDefault().Value;
                            //                    var extensionID = int.Parse(_extension.Split('|')[0]);
                            //                    var extension = db.tblBudgets.Single(m => m.budgetID == extensionID);
                            //                    decimal extensionLeft = extension.budget;
                            //                    if (extensionLeft >= amountLeft)
                            //                    {
                            //                        //use extension
                            //                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, (extensionID.ToString() + "|Extension")));
                            //                    }
                            //                    else
                            //                    {
                            //                        //extension left is not enough to covers amount
                            //                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, extensionLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, (extensionID.ToString() + "|Extension")));
                            //                        amountLeft -= extensionLeft;
                            //                        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                            //                    }
                            //                }
                            //                else
                            //                {
                            //                    //charge excedent to opc
                            //                    paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                            //                }
                            //            }
                            //        }
                            //    }
                            //    else
                            //    {
                            //        //there's no budget left
                            //        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                            //    }
                            //    #endregion
                            //}
                            //else
                            //{
                            //    #region "budget per week"
                            //    var opcID = int.Parse(model.PurchasePayment_OPC);
                            //    var teamID = int.Parse(model.PurchasePayment_PromotionTeam);
                            //    //budgetUsed = GetBudgetUsedInWeek(opcID, teamID, model.PurchasePayment_DateSaved, _terminalID, _purchase.pointOfSaleID);
                            //    budgetUsed = GetBudgetUsedInWeek(opcID, teamID, _now.Date.ToString("yyyy-MM-dd"), _terminalID, _purchase.pointOfSaleID);

                            //    if (model.PurchasePayment_TransactionType == "1")
                            //    {
                            //        budgetLeft = budget.budget - budgetUsed;
                            //    }
                            //    else
                            //    {
                            //        budgetLeft = budgetUsed;
                            //    }

                            //    if (budgetLeft >= amountLeft)
                            //    {
                            //        //budget covers amount
                            //        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                            //    }
                            //    else
                            //    {
                            //        //budget is not enough to covers amount
                            //        if (budgetLeft > 0)
                            //        {
                            //            paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, budgetLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, model.PurchasePayment_Budget));
                            //        }
                            //        amountLeft -= budgetLeft;
                            //        paymentsAmount.Add(new KeyValuePair<decimal, string>(ConvertAmountToRate(_currentRates, amountLeft, budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key, "0"));
                            //    }
                            //    #endregion
                            //}
                            #endregion
                            //*****
                        }
                        var counter = 0;
                        foreach (var item in paymentsAmount)
                        {
                            tblPaymentDetails pd = new tblPaymentDetails();
                            tblMoneyTransactions mt = new tblMoneyTransactions();

                            pd.purchaseID = _purchase.purchaseID;
                            pd.amount = item.Key;
                            pd.currencyID = _currencyID;
                            pd.dateSaved = model.PurchasePayment_DateSaved != null ? DateTime.Parse(model.PurchasePayment_DateSaved).Date == _now.Date ? _now : DateTime.Parse(model.PurchasePayment_DateSaved).AddHours(12) : _now;
                            pd.paymentComments = model.PurchasePayment_PaymentComments;
                            pd.refundAccount = model.PurchasePayment_TransactionType == "2" ? model.PurchasePayment_RefundAccount : null;
                            pd.chargeTypeID = 1;
                            pd.chargeDescriptionID = 1;
                            pd.paymentType = int.Parse(model.PurchasePayment_PaymentType);
                            pd.certificateNumbers = model.PurchasePayment_PaymentType == "6" ? model.PurchasePayment_CertificateNumbers : null;
                            pd.chargeBackConceptID = model.PurchasePayment_PaymentType == "3" ? long.Parse(model.PurchasePayment_ChargeBackConcept) : (long?)null;
                            pd.opcID = model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null ? model.PurchasePayment_OPC != "null" ? long.Parse(model.PurchasePayment_OPC) : (long?)null : (long?)null;
                            pd.promotionTeamID = model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null ? model.PurchasePayment_OPC != "null" ? int.Parse(model.PurchasePayment_PromotionTeam) : (int?)null : (int?)null;
                            pd.other = model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null ? model.PurchasePayment_OPC == null ? model.PurchasePayment_Other : null : model.PurchasePayment_Other;
                            pd.chargedToCompanyID = (model.PurchasePayment_PaymentType == "3" || model.PurchasePayment_PaymentType == "4") && model.PurchasePayment_Company != "null" && model.PurchasePayment_Company != null ? int.Parse(model.PurchasePayment_Company.Split('|')[0]) : (int?)null;
                            if (model.PurchasePayment_PaymentType == "3" && counter > 0 && model.PurchasePayment_TransactionType == "1" && model.PurchasePayment_OPC != null && model.PurchasePayment_OPC != "null" && budgetID > 0)
                            {
                                //charge to opc, with budget second iteration which means its the excedent of a charge to budget
                                var opcID = long.Parse(model.PurchasePayment_OPC);
                                var payingCompanyID = db.tblOPCS.Single(m => m.opcID == opcID).payingCompanyIDX;
                                pd.chargedToCompanyID = payingCompanyID ?? pd.chargedToCompanyID;
                            }
                            pd.savedByUserID = session.UserID;
                            pd.invitation = model.PurchasePayment_PaymentType == "3" ? model.PurchasePayment_Invitation != null ? model.PurchasePayment_Invitation.Trim() : null : null;
                            pd.locationID = model.PurchasePayment_PaymentType == "3" ? (model.PurchasePayment_Location != "null" ? int.Parse(model.PurchasePayment_Location) : (int?)null) : (int?)null;
                            //pd.applyCommission = model.PurchasePayment_PaymentType == "2" || model.PurchasePayment_PaymentType == "5" ? model.PurchasePayment_ApplyCommission : false;
                            pd.applyCommission = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ApplyCommission : false;
                            pd.ccReferenceNumber = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null : (int?)null;
                            pd.ccType = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null : (int?)null;
                            pd.budgetID = item.Value != null && item.Value != "0" ? int.Parse(item.Value.Split('|')[0]) : (int?)null;

                            mt.terminalID = _terminalID;
                            mt.authCode = string.Empty;
                            mt.authAmount = item.Key;
                            mt.authDate = DateTime.ParseExact(_now.Date.ToString("M/d/yyyy"), "M/d/yyyy", CultureInfo.InvariantCulture);
                            mt.errorCode = "0";
                            mt.transactionDate = _now;
                            mt.transactionTypeID = int.Parse(model.PurchasePayment_TransactionType);
                            mt.reference = TerminalDataModel.GetPrefix(_terminalID) + "-" + model.PurchasePayment_Purchase;
                            mt.madeByEplat = false;
                            if (model.PurchasePayment_PaymentType == "2" && model.PurchasePayment_BillingInfo != "0")
                            {
                                var billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                var bInfo = new tblBillingInfo();
                                var transactionType = int.Parse(model.PurchasePayment_TransactionType);
                                var existingTransactions = db.tblPaymentDetails.Where(m => m.deleted != true && m.purchaseID == _purchase.purchaseID && m.tblMoneyTransactions.authCode == model.PurchasePayment_TransactionCode && m.tblMoneyTransactions.transactionTypeID == transactionType);
                                //if (existingTransactions.Count() > 0)
                                if (billingInfoID > 0)
                                {
                                    bInfo = db.tblBillingInfo.Single(m => m.billingInfoID == billingInfoID);
                                    var cardNumber = mexHash.mexHash.DecryptString(bInfo.cardNumber).ToString();
                                    cardNumber = cardNumber.Substring(cardNumber.Length - 4);
                                    var info = new List<KeyValuePair<long, string>>();
                                    foreach (var i in existingTransactions)
                                    {
                                        var str = mexHash.mexHash.DecryptString(i.tblMoneyTransactions.tblBillingInfo.cardNumber);
                                        info.Add(new KeyValuePair<long, string>(i.paymentDetailsID, str.Substring(str.Length - 4)));
                                    }
                                    info = info.Where(m => m.Value == cardNumber).ToList();
                                    var pdArray = info.Select(m => m.Key).ToArray();
                                    existingTransactions = existingTransactions.Where(m => pdArray.Contains(m.paymentDetailsID));
                                }
                                else
                                {
                                    var ccRef = model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null;
                                    existingTransactions = existingTransactions.Where(m => m.ccReferenceNumber == ccRef);
                                }
                                if (existingTransactions.Count() > 0)
                                {
                                    throw new Exception("A transaction with same data is already registered");
                                }

                                //var mAccount = db.tblMerchantAccountSettings.Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID).Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });
                                //mt.merchantAccountID = mAccount.Count() >= 1 ? mAccount.FirstOrDefault().merchantAccountID : (int?)null;
                                var mAccount = db.tblMerchantAccountSettings.Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID && (m.pointOfSaleID == _purchase.pointOfSaleID || m.pointOfSaleID == null)).Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password, m.pointOfSaleID });
                                mt.merchantAccountID = mAccount.Count() >= 1 ? mAccount.Count(m => m.pointOfSaleID != null) > 0 ? mAccount.FirstOrDefault(m => m.pointOfSaleID != null).merchantAccountID : mAccount.FirstOrDefault().merchantAccountID : (int?)null;

                                
                                mt.authCode = model.PurchasePayment_TransactionCode ?? "0";
                                mt.billingInfoID = billingInfoID > 0 ? billingInfoID : (long?)null;
                                if (model.PurchasePayment_TransactionType == "1")
                                {
                                    if (model.PurchasePayment_ApplyCharge && bool.Parse(LeadsCatalogs.DoesPointAcceptCharges(_purchase.purchaseID).FirstOrDefault().Value))
                                    {
                                        bInfo = db.tblBillingInfo.Single(m => m.billingInfoID == billingInfoID);
                                        if (bInfo != new tblBillingInfo())
                                        {
                                            if (mAccount.Count() > 0)
                                            {
                                                pData.UserName = mAccount.First().username;
                                                pData.Password = mAccount.First().password;
                                            }
                                            pData.Card_Holder = bInfo.cardHolderName;
                                            pData.Card_Holder_Address = bInfo.address;
                                            pData.Card_Holder_Zip = bInfo.zipcode;
                                            pData.Card_Number = mexHash.mexHash.DecryptString(bInfo.cardNumber);
                                            pData.Card_Security_Number = bInfo.cardCVV;
                                            pData.Expiration_Date = bInfo.cardExpiry.Split('/')[0] + "/01/" + bInfo.cardExpiry.Split('/')[1];
                                            pData.Reference_Code = TerminalDataModel.GetPrefix(_terminalID) + "-" + _purchase.purchaseID;
                                            pData.Transaction_Amount = double.Parse(item.Key.ToString());
                                            pData.CurrencyID = _currencyID;

                                            pResponse = RescomDataModel.ApplyPayment(pData);
                                            mt.authDate = pResponse.Authorization_Date;
                                            mt.authCode = pResponse.Auth_Code;
                                            mt.errorCode = pResponse.Error_Code.ToString();
                                            mt.authAmount = (decimal)pResponse.Authorization_Amount;
                                            mt.madeByEplat = true;
                                            if (pResponse.Error_Code != 0)
                                            {
                                                response.Message = "<br />" + RescomDataModel.ApplyPayment_ErrorCodes[pResponse.Error_Code];
                                            }
                                        }
                                    }
                                }
                            }
                            pd.tblMoneyTransactions = mt;
                            db.tblPaymentDetails.AddObject(pd);
                            db.SaveChanges();
                            pdResponse = pd;
                            switch (pd.paymentType)
                            {
                                case 2:
                                    {
                                        var cType = pd.ccType != null ? pd.tblCardTypes.cardType : pd.tblMoneyTransactions.tblBillingInfo != null ? pd.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType : "NoType";
                                        var refNumber = pd.ccReferenceNumber != null ? pd.ccReferenceNumber.ToString() : pd.tblMoneyTransactions.tblBillingInfo != null ? GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(pd.tblMoneyTransactions.tblBillingInfo.cardNumber)).Substring(12) : "1234";
                                        reference = cType + "-" + refNumber + "-" + pd.tblMoneyTransactions.authCode + "|" + (pd.applyCommission != null && pd.applyCommission == true ? GetBankCommission(_terminalID, pd.dateSaved, pd.ccType) + "% of Commission Applied" : "Commission NOT Applied");
                                        break;
                                    }
                                case 3:
                                    {
                                        reference = (pd.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? (pd.chargedToCompanyID != null ? pd.tblCompanies.company : "General Public") : pd.opcID != null ? (pd.tblOPCS.opc + " - " + (pd.promotionTeamID != null ? pd.tblPromotionTeams.promotionTeam : "No Team") + " - " + (pd.chargedToCompanyID != null ? pd.tblCompanies.company : "General Public")) : pd.other + " - " + (pd.promotionTeamID != null ? pd.tblPromotionTeams.promotionTeam : "No Team") + " - " + (pd.chargedToCompanyID != null ? pd.tblCompanies.company : "General Public"));
                                        reference += (pd.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? "" : " - " + (pd.budgetID != null ? pd.tblBudgets.budgetExt ? "Extension" : pd.tblBudgets.perClient ? "Per Client" : "Per Week" : "No Budget"));
                                        break;
                                    }
                                case 6:
                                    {
                                        reference = pd.certificateNumbers;
                                        break;
                                    }
                                case 5:
                                    {
                                        //reference = (pd.applyCommission != null && pd.applyCommission == true ? GetBankCommission(_terminalID, pd.dateSaved) + "% of Commission Applied" : "");
                                        break;
                                    }
                                default:
                                    {
                                        break;
                                    }
                            }
                            counter++;
                        }
                        _purchase.total = GetTotalOfPurchase(_purchase.purchaseID);
                        db.SaveChanges();

                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Payment Saved" + response.Message;
                        response.ObjectID = new
                        {
                            paymentID = pdResponse.paymentDetailsID,
                            exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase(_currencyID, pdResponse.dateSaved, _terminalID, _purchase.pointOfSaleID),
                            reference = reference,
                            purchase = pdResponse.purchaseID,
                            authCode = pdResponse.tblMoneyTransactions.authCode,
                            purchaseTotal = _purchase.total,
                            errorCode = GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(pdResponse.tblMoneyTransactions.errorCode)).Value,
                            dateSaved = pdResponse.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                        };
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Payment NOT Saved";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                }
                else
                {
                    #region "update of payment/refund"
                    try
                    {
                        tblPaymentDetails paymentDetails = db.tblPaymentDetails.Single(m => m.paymentDetailsID == model.PurchasePayment_PaymentDetailsID);
                        tblMoneyTransactions moneyTransaction = db.tblMoneyTransactions.FirstOrDefault(m => m.moneyTransactionID == paymentDetails.moneyTransactionID);

                        if (db.tblCloseOuts_PaymentDetails.Where(m => m.paymentDetailsID == model.PurchasePayment_PaymentDetailsID).Count() > 0)
                        {
                            if (GeneralFunctions.IsUserInRole("Comptroller") || GeneralFunctions.IsUserInRole("Operation Manager VEX"))
                            {
                                if (paymentDetails.amount != model.PurchasePayment_Amount || paymentDetails.paymentType != int.Parse(model.PurchasePayment_PaymentType) || paymentDetails.tblCurrencies.currencyCode != model.PurchasePayment_Currency)
                                {
                                    throw new Exception("Payment Related to a Close Out");
                                }
                            }
                            else
                            {
                                throw new Exception("Payment Related to a Close Out");
                            }
                        }

                        if (model.PurchasePayment_PaymentType == "3" && paymentDetails.budgetID != (model.PurchasePayment_Budget != "0" ? int.Parse(model.PurchasePayment_Budget.Split('|')[0]) : (int?)null))
                        {
                            if (!GeneralFunctions.IsUserInRole("Comptroller"))
                            {
                                throw new Exception("Property Budget cannot be updated. You need to delete transaction and create a new one.");
                            }
                        }

                        //******
                        paymentsAmount.Add(new KeyValuePair<decimal, string>(model.PurchasePayment_Amount, null));
                        var budgetID = model.PurchasePayment_Budget != "0" ? int.Parse(model.PurchasePayment_Budget.Split('|')[0]) : 0;

                        if (budgetID != 0)
                        {
                            paymentsAmount.Clear();
                            var budget = db.tblBudgets.Single(m => m.budgetID == budgetID);
                            var paymentRate = GetExchangeRates(paymentDetails.dateSaved, _terminalID, 0, true).Replace(" ", string.Empty).Split(',').ToList();
                            var amountToSave = ConvertAmountToRate(paymentRate, model.PurchasePayment_Amount, model.PurchasePayment_Currency, budget.tblCurrencies.currencyCode).Key;
                            decimal budgetAvailable = 0;
                            decimal _budgetUsed = 0;
                            bool useBudget;
                            if (!budget.perWeek)
                            {
                                var purchaseDate = _purchase.purchaseDateTime.AddDays(-15);
                                //var savedEgresses = db.tblEgresses.Where(m => m.invitationNumber == model.PurchasePayment_Invitation && m.pointOfSaleID == _purchase.pointOfSaleID && m.budgetID == budgetID).Select(m => new { m.amount, m.tblCurrencies.currencyCode, budgetCurrency = m.tblBudgets.tblCurrencies.currencyCode, m.dateSaved });
                                var savedEgresses = db.tblEgresses.Where(m => m.invitationNumber == model.PurchasePayment_Invitation && m.pointOfSaleID == _purchase.pointOfSaleID && m.budgetID == budgetID && (m.dateSaved >= purchaseDate)).Select(m => new { m.amount, m.tblCurrencies.currencyCode, budgetCurrency = m.tblBudgets.tblCurrencies.currencyCode, m.dateSaved });
                                var savedPayments = _purchase.tblPaymentDetails.Where(m => m.deletedByUserID == null && m.invitation == model.PurchasePayment_Invitation && m.paymentType == 3 && m.budgetID == budgetID && m.paymentDetailsID != paymentDetails.paymentDetailsID).Select(m => new { m.amount, m.tblCurrencies.currencyCode, budgetCurrency = m.tblBudgets.tblCurrencies.currencyCode, m.dateSaved });
                                var savedTransactions = savedEgresses.Count() > 0 ? savedPayments.Count() > 0 ? savedEgresses.Concat(savedPayments) : savedEgresses : savedPayments;
                                budgetAvailable = 0;

                                if (savedTransactions.Count() == 0)
                                {
                                    budgetAvailable = budget.budget;
                                }
                                else
                                {
                                    _budgetUsed = 0;
                                    foreach (var i in savedTransactions)
                                    {
                                        var _rate = GetExchangeRates(i.dateSaved, _terminalID, 0, true).Replace(" ", string.Empty).Split(',').ToList();
                                        _budgetUsed += ConvertAmountToRate(_rate, i.amount, i.currencyCode, i.budgetCurrency).Key;
                                    }
                                    budgetAvailable = budget.budget - _budgetUsed;
                                }
                            }
                            else
                            {
                                var opcID = int.Parse(model.PurchasePayment_OPC);
                                var teamID = int.Parse(model.PurchasePayment_PromotionTeam);
                                _budgetUsed = GetBudgetUsedInWeek(opcID, teamID, paymentDetails.dateSaved.ToString("yyyy-MM-dd"), _terminalID, _purchase.pointOfSaleID);
                                budgetAvailable = budget.budget - _budgetUsed <= 0 ? 0 : budget.budget - _budgetUsed;
                            }
                            useBudget = budgetAvailable > 0;
                            if (useBudget)
                            {
                                var toBudget = ConvertAmountToRate(paymentRate, (amountToSave <= budgetAvailable ? amountToSave : budgetAvailable), budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key;
                                var toOther = ConvertAmountToRate(paymentRate, (amountToSave <= budgetAvailable ? 0 : amountToSave - budgetAvailable), budget.tblCurrencies.currencyCode, model.PurchasePayment_Currency).Key;
                                paymentsAmount.Add(new KeyValuePair<decimal, string>(toBudget, model.PurchasePayment_Budget));
                                if (toOther != 0)
                                {
                                    paymentsAmount.Add(new KeyValuePair<decimal, string>(toOther, null));
                                }
                            }
                            else
                            {
                                paymentsAmount.Add(new KeyValuePair<decimal, string>(model.PurchasePayment_Amount, null));
                            }
                        }
                        var counter = 0;
                        foreach (var item in paymentsAmount)
                        {
                            if (counter != 0)
                            {
                                paymentDetails = new tblPaymentDetails();
                                moneyTransaction = new tblMoneyTransactions();
                            }
                            paymentDetails.paymentType = model.PurchasePayment_PaymentType != "0" ? int.Parse(model.PurchasePayment_PaymentType) : (int?)null;
                            paymentDetails.certificateNumbers = model.PurchasePayment_PaymentType == "6" ? model.PurchasePayment_CertificateNumbers : null;
                            if (model.PurchasePayment_PaymentType == "3" && model.PurchasePayment_OPC != null)
                            {
                                if (model.PurchasePayment_OPC != "null")
                                {
                                    paymentDetails.opcID = long.Parse(model.PurchasePayment_OPC);
                                    paymentDetails.promotionTeamID = int.Parse(model.PurchasePayment_PromotionTeam);
                                }
                                else
                                {
                                    paymentDetails.opcID = (long?)null;
                                    paymentDetails.other = model.PurchasePayment_Other;
                                    paymentDetails.promotionTeamID = (int?)null;
                                }
                            }
                            paymentDetails.chargedToCompanyID = (model.PurchasePayment_PaymentType == "3" || model.PurchasePayment_PaymentType == "4") && model.PurchasePayment_Company != "null" && model.PurchasePayment_Company != null ? int.Parse(model.PurchasePayment_Company.Split('|')[0]) : (int?)null;
                            if (model.PurchasePayment_PaymentType == "3" && counter > 0 && model.PurchasePayment_TransactionType == "1" && model.PurchasePayment_OPC != null && model.PurchasePayment_OPC != "null" && budgetID > 0)
                            {
                                //charge to opc, with budget second iteration which means its the excedent of a charge to budget
                                var opcID = long.Parse(model.PurchasePayment_OPC);
                                var payingCompanyID = db.tblOPCS.Single(m => m.opcID == opcID).payingCompanyIDX;
                                paymentDetails.chargedToCompanyID = payingCompanyID ?? paymentDetails.chargedToCompanyID;
                            }
                            paymentDetails.locationID = model.PurchasePayment_PaymentType == "3" ? (model.PurchasePayment_Location != "null" ? int.Parse(model.PurchasePayment_Location) : (int?)null) : (int?)null;
                            paymentDetails.invitation = model.PurchasePayment_PaymentType == "3" ? model.PurchasePayment_Invitation != null ? model.PurchasePayment_Invitation.Trim() : null : null;
                            paymentDetails.chargeBackConceptID = model.PurchasePayment_PaymentType == "3" ? long.Parse(model.PurchasePayment_ChargeBackConcept) : (long?)null;
                            paymentDetails.currencyID = _currencyID;
                            paymentDetails.amount = item.Key;
                            paymentDetails.budgetID = item.Value != null && item.Value != "0" ? budgetID : (int?)null;
                            paymentDetails.chargeDescriptionID = 1;
                            paymentDetails.chargeTypeID = 1;
                            paymentDetails.paymentComments = model.PurchasePayment_PaymentComments;
                            paymentDetails.dateSaved = model.PurchasePayment_DateSaved != null ? DateTime.Parse(model.PurchasePayment_DateSaved).Date != _now.Date ? DateTime.Parse(model.PurchasePayment_DateSaved).AddHours(12) : paymentDetails.dateSaved.Date == DateTime.Parse(model.PurchasePayment_DateSaved).Date ? paymentDetails.dateSaved : (DateTime.Parse(model.PurchasePayment_DateSaved).Date + paymentDetails.dateSaved.TimeOfDay) : paymentDetails.dateSaved;
                            paymentDetails.lastDateModified = _now;
                            paymentDetails.modifiedByUserID = session.UserID;
                            //paymentDetails.applyCommission = model.PurchasePayment_PaymentType == "2" || model.PurchasePayment_PaymentType == "5" ? model.PurchasePayment_ApplyCommission : false;
                            paymentDetails.applyCommission = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ApplyCommission : false;
                            paymentDetails.ccReferenceNumber = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ReferenceNumber != null ? int.Parse(model.PurchasePayment_ReferenceNumber) : (int?)null : (int?)null;
                            paymentDetails.ccType = model.PurchasePayment_PaymentType == "2" ? model.PurchasePayment_ReferenceNumber != null ? model.PurchasePayment_CardType : (int?)null : (int?)null;
                            paymentDetails.refundAccount = model.PurchasePayment_TransactionType == "2" ? model.PurchasePayment_TransactionType : null;
                            moneyTransaction.terminalID = _terminalID;
                            moneyTransaction.authAmount = item.Key;
                            moneyTransaction.authCode = model.PurchasePayment_TransactionCode ?? moneyTransaction.authCode;
                            if (model.PurchasePayment_PaymentType == "2")
                            {
                                var billingInfoID = int.Parse(model.PurchasePayment_BillingInfo);
                                //var merchantAccount = db.tblMerchantAccountSettings.Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID).Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password });
                                //if (merchantAccount.Count() > 0)
                                //{
                                //    moneyTransaction.merchantAccountID = merchantAccount.FirstOrDefault().merchantAccountID;
                                //}
                                var mAccount = db.tblMerchantAccountSettings.Where(m => m.terminalID == _terminalID && m.tblMerchantAccounts.currencyID == _currencyID && (m.pointOfSaleID == _purchase.pointOfSaleID || m.pointOfSaleID == null)).Select(m => new { m.tblMerchantAccounts.merchantAccountID, m.tblMerchantAccounts.username, m.tblMerchantAccounts.password, m.pointOfSaleID });
                                moneyTransaction.merchantAccountID = mAccount.Count() >= 1 ? mAccount.Count(m => m.pointOfSaleID != null) > 0 ? mAccount.FirstOrDefault(m => m.pointOfSaleID != null).merchantAccountID : mAccount.FirstOrDefault().merchantAccountID : (int?)null;

                                moneyTransaction.billingInfoID = billingInfoID > 0 ? billingInfoID : (long?)null;
                            }

                            if (counter != 0)
                            {
                                paymentDetails.purchaseID = model.PurchasePayment_Purchase;
                                paymentDetails.lastDateModified = (DateTime?)null;
                                paymentDetails.modifiedByUserID = (Guid?)null;
                                paymentDetails.tblMoneyTransactions = moneyTransaction;
                                db.tblPaymentDetails.AddObject(paymentDetails);

                            }
                            db.SaveChanges();
                            counter++;
                        }
                        _purchase.total = GetTotalOfPurchase(_purchase.purchaseID);
                        db.SaveChanges();
                        //******

                        #region "definition of reference"
                        var _reference = "";
                        switch (paymentDetails.paymentType)
                        {
                            case 2:
                                {
                                    var cardType = paymentDetails.ccType != null ? paymentDetails.tblCardTypes.cardType : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? paymentDetails.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType : "Master Card";
                                    var refNumber = paymentDetails.ccReferenceNumber != null ? paymentDetails.ccReferenceNumber.ToString() : paymentDetails.tblMoneyTransactions.tblBillingInfo != null ? Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(paymentDetails.tblMoneyTransactions.tblBillingInfo.cardNumber)).Substring(12) : "1234";

                                    _reference = cardType + "-" + refNumber + "-" + paymentDetails.tblMoneyTransactions.authCode + " | " + (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved, paymentDetails.ccType) + "% of Commission Applied" : "Commission NOT Applied");
                                    break;
                                }
                            case 3:
                                {
                                    _reference = (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public") : paymentDetails.opcID != null ? paymentDetails.tblOPCS.opc + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public") : paymentDetails.other + " - " + (paymentDetails.promotionTeamID != null ? paymentDetails.tblPromotionTeams.promotionTeam : "No Team") + " - " + (paymentDetails.chargedToCompanyID != null ? paymentDetails.tblCompanies.company : "General Public"));
                                    _reference += (paymentDetails.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? "" : " - " + (paymentDetails.budgetID != null ? paymentDetails.tblBudgets.budgetExt ? "Extension" : paymentDetails.tblBudgets.perClient ? "Per Client" : "Per Week" : "No Budget"));
                                    break;
                                }
                            case 6:
                                {
                                    _reference = paymentDetails.certificateNumbers;
                                    break;
                                }
                            case 5:
                                {
                                    //_reference = (paymentDetails.applyCommission != null && (bool)paymentDetails.applyCommission ? GetBankCommission(paymentDetails.tblPurchases.terminalID, paymentDetails.dateSaved) + "% of Commission Applied" : "");
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        #endregion
                        response.ObjectID = new
                        {
                            paymentID = paymentDetails.paymentDetailsID,
                            exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase((int)paymentDetails.currencyID, paymentDetails.dateSaved, _purchase.terminalID, _purchase.pointOfSaleID),
                            reference = _reference,
                            purchase = paymentDetails.purchaseID,
                            purchaseTotal = _purchase.total,
                            authCode = moneyTransaction.authCode,
                            errorCode = GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(moneyTransaction.errorCode)).Value,
                            dateSaved = paymentDetails.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                        };
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Transaction Updated <br />" + response.Message;
                        return response;
                    }
                    catch (Exception ex)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Payment NOT Updated";
                        response.ObjectID = 0;
                        response.Exception = ex;
                        return response;
                    }
                    #endregion
                }
            }

            public static decimal GetBankCommission(long terminalID, DateTime date)
            {
                decimal commission = 0;
                ePlatEntities db = new ePlatEntities();
                var bankCommission = from b in db.tblBankCommissions
                                     where b.terminalID == terminalID
                                     && b.initialDate <= date && b.finalDate > date
                                     select b;

                if (bankCommission.Count() > 0)
                {
                    commission = bankCommission.FirstOrDefault().commissionPercentage;
                }

                return commission;
            }

            public static decimal GetBankCommission(long terminalID, DateTime date, int? cardTypeID)
            {
                ePlatEntities db = new ePlatEntities();

                var query = db.tblBankCommissions.Where(m => m.terminalID == terminalID
                    && m.initialDate <= date
                    && (m.finalDate == null || m.finalDate > date));

                //return query != null && query.Count() > 0 ? query.Count() == 1 ? query.FirstOrDefault().commissionPercentage : query.Where(m => m.cardTypeID == cardTypeID).FirstOrDefault().commissionPercentage : 0;
                return query != null && query.Count() > 0 ? query.Count() == 1 ? query.FirstOrDefault().commissionPercentage : query.FirstOrDefault(m => m.cardTypeID == cardTypeID).commissionPercentage : 0;
            }

            public static tblBankCommissions GetBankCommissionObject(long terminalID, DateTime date, int? cardTypeID)
            {
                ePlatEntities db = new ePlatEntities();
                tblBankCommissions obj = (from b in db.tblBankCommissions
                                          where b.terminalID == terminalID
                                          && b.initialDate <= date && b.finalDate > date
                                          && (b.cardTypeID == null || b.cardTypeID == cardTypeID)
                                          select b).FirstOrDefault();

                return obj;
            }

            public List<PurchasesModel.PurchaseTicketsModel> GetPurchaseTickets(string PurchasePayment_Purchase)
            {
                ePlatEntities db = new ePlatEntities();
                List<PurchasesModel.PurchaseTicketsModel> list = new List<PurchasesModel.PurchaseTicketsModel>();
                var purchaseID = Guid.Parse(PurchasePayment_Purchase);

                var query = db.tblPurchaseTickets.Where(m => m.purchaseID == purchaseID).OrderByDescending(m => m.dateSaved);

                foreach (var i in query)
                {
                    list.Add(new PurchasesModel.PurchaseTicketsModel()
                    {
                        PurchaseTicketID = i.purchaseTicketID,
                        DateSaved = i.dateSaved.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture),
                        SavedByUser = i.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + i.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                        PurchaseTotal = i.purchaseTotal.ToString(),
                        Reprints = i.printCounter.ToString()
                    });
                }

                return list;
            }

            public List<PurchasesModel.PurchasePaymentModel> GetPurchasePayments(string PurchasePayment_Purchase)
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<PurchasesModel.PurchasePaymentModel>();
                var purchaseID = Guid.Parse(PurchasePayment_Purchase);
                //var terminals = new UserSession().Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
                var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
                var query = db.tblPaymentDetails.Where(m => m.purchaseID == purchaseID);

                foreach (var i in query)
                {
                    var _paymentType = i.paymentType.ToString();
                    var _purchases_services = db.tblPurchases_Services_MoneyTransactions
                        .Where(m => m.moneyTransactionID == i.moneyTransactionID).Select(m => m.purchase_ServiceID).ToArray();
                    var _servicesArray = db.tblPurchases_Services
                        .Where(m => _purchases_services.Contains(m.purchase_ServiceID))
                        .Select(m => new { m.tblPurchaseServiceDetails.FirstOrDefault().coupon, m.tblServices.service, m.tblPurchaseServiceStatus.purchaseServiceStatus });
                    bool hideDeleteIcon = false;
                    decimal bankCommission = 0;
                    decimal exchangeRate = 1;

                    if (i.currencyID != 2)
                    {
                        exchangeRate = LeadsCatalogs.GetExchangeRateOfPurchase((int)i.currencyID, i.dateSaved, i.tblPurchases.terminalID, i.tblPurchases.pointOfSaleID);
                    }
                    var _reference = "";
                    switch (i.paymentType)
                    {
                        case 2:
                            {
                                var cardType = i.ccType != null ? i.tblCardTypes.cardType : i.tblMoneyTransactions.tblBillingInfo != null ? i.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType : "Master Card";
                                var reference = i.ccReferenceNumber != null ? i.ccReferenceNumber.ToString() : i.tblMoneyTransactions.tblBillingInfo != null ? Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(i.tblMoneyTransactions.tblBillingInfo.cardNumber)).Substring(12) : "1234";
                                bankCommission = GetBankCommission(i.tblPurchases.terminalID, i.dateSaved, i.ccType);

                                _reference = cardType + "-" + reference + "-" + i.tblMoneyTransactions.authCode + " | " + (i.applyCommission != null && (bool)i.applyCommission ? bankCommission + "% of Commission Applied" : "Commission NOT Applied");
                                hideDeleteIcon = i.tblMoneyTransactions.madeByEplat;
                                break;
                            }
                        case 3:
                            {
                                _reference = (i.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? (i.chargedToCompanyID != null ? i.tblCompanies.company : "General Public") : i.opcID != null ? i.tblOPCS.opc + "-" + (i.promotionTeamID != null ? i.tblPromotionTeams.promotionTeam : " No Team ") + " - " + (i.chargedToCompanyID != null ? i.tblCompanies.company : "General Public") : i.other + " - " + (i.promotionTeamID != null ? i.tblPromotionTeams.promotionTeam : "No Team") + " - " + (i.chargedToCompanyID != null ? i.tblCompanies.company : "General Public"));
                                _reference += (i.tblEgressConcepts.egressConcept.IndexOf("Company") != -1 ? "" : " - " + (i.budgetID != null ? i.tblBudgets.budgetExt ? "Extension" : i.tblBudgets.perClient ? "Per Client" : "Per Week" : "No Budget"));
                                break;
                            }
                        case 5:
                            {
                                bankCommission = GetBankCommission(i.tblPurchases.terminalID, i.dateSaved);
                                _reference = (i.applyCommission != null && (bool)i.applyCommission ? bankCommission + "% of Commission Applied" : "");
                                break;
                            }
                        case 6:
                            {
                                _reference = i.certificateNumbers;
                                break;
                            }
                        default:
                            {
                                break;
                            }
                    }
                    list.Add(new PurchasesModel.PurchasePaymentModel()
                    {
                        PurchasePayment_PaymentDetailsID = (int)i.paymentDetailsID,
                        PurchasePayment_Company = i.chargedToCompanyID != null ? i.tblCompanies.company : "General Public",
                        PurchasePayment_PaymentType = GeneralFunctions.PaymentTypes.Single(m => m.Key == _paymentType).Value,
                        PurchasePayment_ExchangeRate = exchangeRate,
                        PurchasePayment_Amount = i.tblMoneyTransactions.transactionTypeID == 1 ? i.amount : (i.amount * -1),
                        PurchasePayment_ApplyCommission = i.applyCommission != null ? (bool)i.applyCommission : false,
                        PurchasePayment_Currency = i.tblCurrencies.currencyCode,
                        PurchasePayment_PurchaseReference = _reference,
                        PurchasePayment_AuthCode = i.tblMoneyTransactions.authCode,
                        PurchasePayment_ErrorCode = GeneralFunctions.ApplyPayment_ErrorCodes.FirstOrDefault(m => m.Key == int.Parse(i.tblMoneyTransactions.errorCode)).Value,
                        PurchasePaymentInfo_DateSaved = i.dateSaved.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture),
                        PurchasePaymentInfo_IsRelatedToCloseOut = db.tblCloseOuts_PaymentDetails.Where(m => m.paymentDetailsID == i.paymentDetailsID).Count() == 0 ? hideDeleteIcon : true,
                        PurchasePayment_CardCommission = bankCommission,
                        PurchasePaymentInfo_Deleted = i.deleted ?? false
                    });
                }
                return list;
            }

            public PurchasesModel.PurchasePaymentModel GetPurchasePayment(string PurchasePayment_PaymentDetailsID)
            {
                ePlatEntities db = new ePlatEntities();
                var model = new PurchasesModel.PurchasePaymentModel();
                var paymentDetailsID = long.Parse(PurchasePayment_PaymentDetailsID);

                var query = db.tblPaymentDetails.Single(m => m.paymentDetailsID == paymentDetailsID);

                model.PurchasePayment_PaymentDetailsID = (int)query.paymentDetailsID;
                model.PurchasePayment_Purchase = (Guid)query.purchaseID;
                model.PurchasePayment_TransactionType = query.tblMoneyTransactions.transactionTypeID.ToString();
                model.PurchasePayment_PaymentType = query.paymentType != null ? query.paymentType.ToString() : "";
                model.PurchasePayment_CertificateNumbers = query.certificateNumbers;
                model.PurchasePayment_ChargeBackConcept = query.chargeBackConceptID != null ? query.chargeBackConceptID.ToString() : null;
                model.PurchasePayment_Amount = query.amount;
                model.PurchasePayment_Currency = query.tblCurrencies.currencyCode;
                model.PurchasePayment_RefundAccount = query.refundAccount;
                model.PurchasePayment_BillingInfo = query.tblMoneyTransactions.billingInfoID != null ? query.tblMoneyTransactions.billingInfoID.ToString() : "";
                model.PurchasePayment_OPC = query.opcID != null ? query.opcID.ToString() : query.other != null ? "null" : "";
                model.PurchasePayment_Other = query.other;
                model.PurchasePayment_PromotionTeam = query.promotionTeamID != null ? query.promotionTeamID.ToString() : null;
                model.PurchasePayment_Company = query.chargedToCompanyID != null ? query.chargedToCompanyID.ToString() + "|" + query.tblCompanies.companyTypeID.ToString() : "null";
                model.PurchasePayment_Budget = query.budgetID != null ? query.budgetID.ToString() + "|" + (query.tblBudgets.budgetExt ? "Extension" : query.tblBudgets.perClient ? "Client" : query.tblBudgets.resetDayOfWeek) : "0";
                model.PurchasePayment_Location = query.locationID != null ? query.locationID.ToString() : "null";
                model.PurchasePayment_Invitation = query.invitation;
                model.PurchasePayment_PaymentComments = query.paymentComments;
                model.PurchasePayment_Coupons = Array.ConvertAll(db.tblPurchases_Services_MoneyTransactions.Where(m => m.moneyTransactionID == query.moneyTransactionID).Select(m => m.purchase_ServiceID).ToArray(), Convert.ToString);
                model.PurchasePayment_ApplyCommission = query.applyCommission != null ? (bool)query.applyCommission : false;
                //model.PurchasePayment_CardCommission = query.paymentType == 2 ? GetBankCommission(query.tblPurchases.terminalID, query.dateSaved, query.ccType) : 0;
                model.PurchasePayment_CardCommission = query.applyCommission == true ? GetBankCommission(query.tblPurchases.terminalID, query.dateSaved, query.ccType) : 0;
                model.PurchasePayment_ApplyCharge = query.tblMoneyTransactions.madeByEplat;
                model.PurchasePayment_TransactionCode = query.tblMoneyTransactions.authCode;
                model.PurchasePayment_ReferenceNumber = query.ccReferenceNumber != null ? query.ccReferenceNumber.ToString() : "";
                model.PurchasePayment_CardType = query.ccType != null ? query.ccType : 0;
                model.PurchasePayment_DateSaved = query.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                return model;
            }

            public AttemptResponse DeletePayment(int targetID)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                try
                {
                    if (db.tblCloseOuts_PaymentDetails.Where(m => m.paymentDetailsID == targetID).Count() == 0)
                    {
                        var payment = db.tblPaymentDetails.Single(m => m.paymentDetailsID == targetID);
                        var moneyTransaction = db.tblMoneyTransactions.FirstOrDefault(m => m.moneyTransactionID == payment.moneyTransactionID);
                        if (moneyTransaction.madeByEplat)
                        {
                            throw new Exception("Payment is related to a valid transaction with CC");
                        }
                        payment.deleted = true;
                        payment.dateDeleted = DateTime.Now;
                        payment.deletedByUserID = session.UserID;
                        db.SaveChanges();
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Payment Deleted";
                        response.ObjectID = targetID;
                        return response;
                    }
                    throw new Exception("Payment Related to a Close Out");
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Payment NOT Deleted";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }
            //public AttemptResponse DeletePayment(int targetID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    AttemptResponse response = new AttemptResponse();
            //    try
            //    {
            //        if (db.tblCloseOuts_PaymentDetails.Where(m => m.paymentDetailsID == targetID).Count() == 0)
            //        {
            //            var query = db.tblPaymentDetails.Single(m => m.paymentDetailsID == targetID);
            //            var moneyTransaction = db.tblMoneyTransactions.FirstOrDefault(m => m.moneyTransactionID == query.moneyTransactionID);
            //            //if (moneyTransaction.authCode != string.Empty && moneyTransaction.authCode != "0")
            //            if (moneyTransaction.madeByEplat)
            //            {
            //                throw new Exception("Payment is related to a valid transaction with CC");
            //            }
            //            db.DeleteObject(moneyTransaction);
            //            db.SaveChanges();
            //            response.Type = Attempt_ResponseTypes.Ok;
            //            response.Message = "Payment Deleted";
            //            response.ObjectID = targetID;
            //            return response;
            //        }
            //        throw new Exception("Payment Related to a Close Out");
            //    }
            //    catch (Exception ex)
            //    {
            //        response.Type = Attempt_ResponseTypes.Error;
            //        response.Message = "Payment NOT Deleted";
            //        response.ObjectID = 0;
            //        response.Exception = ex;
            //        return response;
            //    }
            //}

            public string GetExchangeRates(DateTime date, int pointOfSaleID)
            {
                //return GetExchangeRates(DateTime.Today, null, pointOfSaleID);
                return GetExchangeRates(date, null, pointOfSaleID);
            }

            //public string GetExchangeRates(DateTime date)
            //{
            //    return GetExchangeRates(date, null);
            //}

            public string GetExchangeRates(DateTime date, long? terminalid, int pointOfSaleID, bool includeMXNRate = false)
            {
                ePlatEntities db = new ePlatEntities();
                var terminals = new List<long>();

                if (terminalid == null)
                {

                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalid);
                }

                var exchangeRates = "";
                List<tblExchangeRates> list = new List<tblExchangeRates>();

                if (date == DateTime.Today)
                {
                    date = DateTime.Now;
                }

                List<tblExchangeRates> query = new List<tblExchangeRates>();
                var erPos = db.tblExchangeRates.Where(m => m.exchangeRateTypeID == 1 && m.fromDate <= date && (m.toDate == null || m.toDate > date) && m.tblCurrencies1.currencyCode == "MXN" && terminals.Contains((long)m.terminalID) && m.providerID == null && m.tblExchangeRates_PointsOfSales.Count(p =>
                    p.pointOfSaleID == pointOfSaleID
                    && p.dateAdded <= date
                    && (p.dateDeleted == null || p.dateDeleted > date)
                    ) > 0).OrderByDescending(m => m.fromDate).ThenByDescending(m => m.dateSaved);

                if (erPos.Count() > 0)
                {
                    query = erPos.ToList();
                }

                var query2 = db.tblExchangeRates.Where(m => m.exchangeRateTypeID == 1 && m.fromDate <= date && (m.toDate == null || m.toDate > date) && m.tblCurrencies1.currencyCode == "MXN" && terminals.Contains((long)m.terminalID) && m.providerID == null && m.tblExchangeRates_PointsOfSales.Count() == 0).OrderByDescending(m => m.fromDate).ThenByDescending(m => m.dateSaved).ToList();

                query = query.Concat(query2).ToList();

                list.Add(query.FirstOrDefault(m => m.fromCurrencyID == 1));
                list.Add(query.FirstOrDefault(m => m.fromCurrencyID == 3));

                if (list.Any(m => m != null))
                {
                    foreach (var i in list)
                    {
                        if (i != null)
                        {
                            exchangeRates += i.tblCurrencies.currencyCode + " = " + i.exchangeRate + ",";
                        }
                    }
                    exchangeRates = exchangeRates.TrimEnd(',').Replace(",", ", ");
                }
                if (includeMXNRate)
                {
                    exchangeRates += ", MXN = 1.00";
                }
                return exchangeRates;
            }

            public PurchasesModel.TicketInfoModel GetTicketInfo(string PurchaseID, int PurchaseTicketID)
            {
                ePlatEntities db = new ePlatEntities();
                JavaScriptSerializer serializer = new JavaScriptSerializer();
                var model = new PurchasesModel.TicketInfoModel();

                if (PurchaseTicketID != 0)
                {
                    var ticket = db.tblPurchaseTickets.Single(m => m.purchaseTicketID == PurchaseTicketID);
                    ticket.printCounter += 1;
                    db.SaveChanges();
                    var type = typeof(PurchasesModel.TicketInfoModel);
                    model = (PurchasesModel.TicketInfoModel)serializer.Deserialize(ticket.jsonTicket, type);
                    model.TicketInfo_DateIssued = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                    return model;
                }

                var currentUser = session.UserID;
                var purchase = Guid.Parse(PurchaseID);
                var userProfile = db.aspnet_Users.Where(m => m.UserId == currentUser).Select(m => new { m.tblUserProfiles.FirstOrDefault().firstName, m.tblUserProfiles.FirstOrDefault().lastName });
                var services = new List<SelectListItem>();

                var query = db.tblPurchases.Single(m => m.purchaseID == purchase);
                var company = query.tblTerminals.tblCompanies;
                //var _services = db.tblPurchases_Services.Where(m => m.purchaseID == purchase).Select(m => new { m.purchase_ServiceID, m.serviceID, serviceDescription = m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service.ToLower(), service = m.tblServices.service.ToLower(), total = m.tblPurchaseServiceDetails.Sum(x => (x.quantity * (x.dealPrice ?? x.customPrice))), currency = m.tblCurrencies.currencyCode, folio = m.tblPurchaseServiceDetails.FirstOrDefault().coupon, status = m.tblPurchaseServiceStatus.purchaseServiceStatus, statusID = m.serviceStatusID, details = m.tblPurchaseServiceDetails }).Distinct();
                var _services = db.tblPurchases_Services.Where(m => m.purchaseID == purchase).Select(m => new { m.purchase_ServiceID, m.serviceID, serviceDescription = m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service.ToLower(), service = m.tblServices.service.ToLower(), total = m.tblPurchaseServiceDetails.Sum(x => (x.quantity * (x.dealPrice ?? x.customPrice))), currency = m.tblCurrencies.currencyCode, folio = m.tblPurchaseServiceDetails.FirstOrDefault().coupon, status = m.tblPurchaseServiceStatus.purchaseServiceStatus, statusID = m.serviceStatusID, details = m.tblPurchaseServiceDetails });
                var allRelatedPayments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted));
                var _payments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted) && m.tblMoneyTransactions.transactionTypeID == 1 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode, cardType = m.ccType != null ? m.tblCardTypes.cardType : "", m.ccReferenceNumber, m.applyCommission, cardTypeID = m.ccType ?? 0 });
                var _refunds = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted) && m.tblMoneyTransactions.transactionTypeID == 2 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode, cardType = m.ccType != null ? m.tblCardTypes.cardType : "", m.ccReferenceNumber, m.applyCommission, cardTypeID = m.ccType ?? 0, comments = m.paymentComments });
                var showCouponTotal = query.tblTerminals.couponTotalInTicket;
                var exchangeRates = GetExchangeRates(query.purchaseDateTime, query.terminalID, query.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();
                var showGeneralDescription = query.tblTerminals.showGeneralDescriptionInTicket;
                #region "comercial name definition"
                switch (query.terminalID)
                {
                    case 32:
                        {
                            model.TicketInfo_ComercialName = "Profesionales de Playa Mujeres, S.A. de C.V.<br />" + company.address + ", " + company.city + ", " + company.state + " " + company.zipCode;
                            break;
                        }
                    default:
                        {
                            model.TicketInfo_ComercialName = "";
                            break;
                        }
                }
                #endregion

                model.TicketInfo_DateSaved = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                model.TicketInfo_DateIssued = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                model.TicketInfo_TerminalID = query.terminalID;
                model.TicketInfo_Phone = company.phone != null ? query.tblTerminals.tblCompanies.phone : "";
                model.TicketInfo_Culture = query.culture;
                model.TicketInfo_PointOfSale = query.tblPointsOfSale.shortName + " - " + query.tblPointsOfSale.pointOfSale;
                model.TicketInfo_ExchangeRate = GetSpecificRate(query.purchaseDateTime, "USD", query.terminalID, query.pointOfSaleID).ToString();
                model.TicketInfo_Customer = query.tblLeads.firstName + " " + query.tblLeads.lastName;
                model.TicketInfo_Terminal = query.tblTerminals.terminal;
                model.TicketInfo_Company = company.company;
                model.TicketInfo_TicketNumber = PurchaseID.ToString().Substring(PurchaseID.ToString().Length - 6);
                model.TicketInfo_UserName = userProfile.FirstOrDefault().firstName + " " + userProfile.FirstOrDefault().lastName;
                model.TicketInfo_URL = query.tblTerminals.terminal + "<br />" + (query.tblTerminals.tblCompanies.phone != null ? query.tblTerminals.tblCompanies.phone : "");
                model.TicketInfo_PurchaseTotal = ConvertAmountToRate(exchangeRates, (decimal)query.total, query.tblCurrencies.currencyCode, "USD").Key;

                foreach (var i in _services)
                {
                    var chargeBackPayments = _payments.Where(m => m.paymentType == 3);
                    var certificatePayments = _payments.Where(m => m.paymentType == 6);

                    if (chargeBackPayments.Count() != allRelatedPayments.Count() && allRelatedPayments.Count() != certificatePayments.Count())
                    {

                        if (showGeneralDescription == true && allRelatedPayments.Count(m => m.tblMoneyTransactions.transactionTypeID == 2) == 0)
                        {
                            //services = new List<SelectListItem>();
                            //services.Add(new SelectListItem() { Value = "3", Text = "Venta de actividades publico en general" + "_ " });
                            //break;
                            var units = "";
                            foreach (var a in i.details)
                            {
                                units += (units == "" ? "" : ", ") + a.quantity + " " + (a.tblPrices1.tblPriceUnits.Count(m => m.culture == query.culture) > 0 ? a.tblPrices1.tblPriceUnits.FirstOrDefault(m => m.culture == query.culture).unit : a.tblPrices1.tblPriceUnits.FirstOrDefault().unit);
                            }
                            //services.Add(new SelectListItem() { Value = i.statusID.ToString(), Text = (i.status + " | " + i.folio.Split('-')[0] + " | " + (i.serviceDescription ?? i.service) + " | " + units + "_" + (showCouponTotal == true ? (i.statusID > 3 ? "-" : "") + " $" + (Math.Round((decimal)i.total, 2, MidpointRounding.AwayFromZero) + " " + i.currency) : "")) });
                            services.Add(new SelectListItem() { Value = i.statusID.ToString(), Text = (i.status + " | " + i.folio.Split('-')[0] + " | " + (i.serviceDescription ?? i.service) + " | " + units + "_" + "") });
                        }
                        else
                        {
                            var units = "";
                            foreach (var a in i.details)
                            {
                                units += (units == "" ? "" : ", ") + a.quantity + " " + (a.tblPrices1.tblPriceUnits.Count(m => m.culture == query.culture) > 0 ? a.tblPrices1.tblPriceUnits.FirstOrDefault(m => m.culture == query.culture).unit : a.tblPrices1.tblPriceUnits.FirstOrDefault().unit);
                            }
                            services.Add(new SelectListItem() { Value = i.statusID.ToString(), Text = (i.status + " | " + i.folio.Split('-')[0] + " | " + (i.serviceDescription ?? i.service) + " | " + units + "_" + (showCouponTotal == true ? (i.statusID > 3 ? "-" : "") + " $" + (Math.Round((decimal)i.total, 2, MidpointRounding.AwayFromZero) + " " + i.currency) : "")) });
                        }
                    }
                }
                model.TicketInfo_Services = services;

                var _listCash = new List<PurchasesModel.TicketPaymentModel>();
                var _listCC = new List<PurchasesModel.TicketPaymentModel>();
                var _listCB = new List<PurchasesModel.TicketPaymentModel>();
                var _listTC = new List<PurchasesModel.TicketPaymentModel>();
                var _listWT = new List<PurchasesModel.TicketPaymentModel>();
                var _listC = new List<PurchasesModel.TicketPaymentModel>();
                #region "payments"
                var _paymentsByType = _payments.GroupBy(m => m.paymentType);

                foreach (var i in _paymentsByType)
                {
                    switch ((int)i.Key)
                    {
                        case 1:
                            {
                                #region "Cash"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCashUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    _listCash.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 2:
                            {
                                #region "credit card"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    //model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    foreach (var x in a)
                                    {
                                        var _bankCommission = GetBankCommission(query.terminalID, query.purchaseDateTime, x.cardTypeID);
                                        var _amount = x.applyCommission != null && (bool)x.applyCommission ? x.amount / ((_bankCommission / 100) + 1) : x.amount;
                                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
                                        {
                                            Currency = x.currencyCode,//a.Key,
                                            Amount = _amount,//x.amount / ((_bankCommission / 100) + 1),// a.Sum(m => m.amount),
                                            CardType = x.cardType,//a.FirstOrDefault().cardType,
                                            CardNumber = (x.ccReferenceNumber != null ? x.ccReferenceNumber.ToString() : "") + (x.applyCommission != null && (bool)x.applyCommission ? " (+" + _bankCommission + "%)" : "")//a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                        });
                                        model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? _amount : 0;
                                        model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? _amount : 0;
                                        model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? _amount : 0;
                                    }
                                    //_listCC.Add(new PurchasesModel.TicketPaymentModel()
                                    //{
                                    //    Currency = a.Key,
                                    //    Amount = a.Sum(m => m.amount),
                                    //    CardType = a.FirstOrDefault().cardType,
                                    //    CardNumber = a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                    //});
                                }
                                break;
                                #endregion
                            }
                        case 3:
                            {
                                #region "chargebacks"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listCB.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 4:
                            {
                                #region "TravelerChecks"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listTC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 5:
                            {
                                #region "wire transfer"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listWT.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 6:
                            {
                                #region "Certificates"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                    }
                }
                model.TicketInfo_CashPayments = _listCash;
                model.TicketInfo_CCPayments = _listCC;
                model.TicketInfo_TCPayments = _listTC;
                model.TicketInfo_WTPayments = _listWT;
                #endregion

                #region "purchase total"
                if (_listCB.Count() > 0)
                {
                    foreach (var c in _listCB)
                    {
                        model.TicketInfo_PurchaseTotal -= ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                if (_listC.Count() > 0)
                {
                    foreach (var c in _listC)
                    {
                        model.TicketInfo_PurchaseTotal -= ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                #endregion

                #region "refunds"
                _listCash = new List<PurchasesModel.TicketPaymentModel>();
                _listCC = new List<PurchasesModel.TicketPaymentModel>();
                _listCB = new List<PurchasesModel.TicketPaymentModel>();
                _listTC = new List<PurchasesModel.TicketPaymentModel>();
                _listWT = new List<PurchasesModel.TicketPaymentModel>();
                _listC = new List<PurchasesModel.TicketPaymentModel>();

                var _refundsByType = _refunds.GroupBy(m => m.paymentType);

                foreach (var i in _refundsByType)
                {
                    switch ((int)i.Key)
                    {
                        case 1:
                            {
                                #region "Cash"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCashUSD -= a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    _listCash.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 2:
                            {
                                #region "credit card"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    //model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;

                                    foreach (var x in a)
                                    {
                                        var _bankCommission = GetBankCommission(query.terminalID, query.purchaseDateTime, x.cardTypeID);
                                        var _amount = x.applyCommission != null && (bool)x.applyCommission ? x.amount / ((_bankCommission / 100) + 1) : x.amount;
                                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
                                        {
                                            Currency = x.currencyCode,
                                            Amount = _amount,//x.amount / ((_bankCommission / 100) + 1),
                                            CardType = x.cardType,
                                            CardNumber = (x.ccReferenceNumber != null ? x.ccReferenceNumber.ToString() : "") + (x.applyCommission != null && (bool)x.applyCommission ? " (+" + _bankCommission + "%)" : "")//a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                        });
                                        model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? _amount : 0;
                                        model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? _amount : 0;
                                        model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? _amount : 0;
                                    }
                                    //_listCC.Add(new PurchasesModel.TicketPaymentModel()
                                    //{
                                    //    Currency = a.Key,
                                    //    Amount = a.Sum(m => m.amount),
                                    //    CardType = a.FirstOrDefault().cardType,
                                    //    //CardNumber = a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                    //});
                                }
                                break;
                                #endregion
                            }
                        case 3:
                            {
                                #region "chargebacks"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    _listCB.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 4:
                            {
                                #region "TravelerChecks"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listTC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 5:
                            {
                                #region "wire transfer"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listWT.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 6:
                            {
                                #region "Certificates"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                    }
                    model.TicketInfo_Comments += (model.TicketInfo_Comments == null || model.TicketInfo_Comments == "" ? "" : ". ") + string.Join(". ", i.Select(m => m.comments).ToArray());
                }
                model.TicketInfo_CashRefunds = _listCash;
                model.TicketInfo_CCRefunds = _listCC;
                model.TicketInfo_TCRefunds = _listTC;
                model.TicketInfo_WTRefunds = _listWT;
                #endregion

                #region "purchase total"
                if (_listCB.Count() > 0)
                {
                    foreach (var c in _listCB)
                    {
                        model.TicketInfo_PurchaseTotal += ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                if (_listC.Count() > 0)
                {
                    foreach (var c in _listC)
                    {
                        model.TicketInfo_PurchaseTotal += ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                #endregion
                model.TicketInfo_PurchaseTotalMXN = ConvertAmountToRate(exchangeRates, model.TicketInfo_PurchaseTotal, "USD", "MXN").Key;
                model.TicketInfo_ChangeDue = model.TicketInfo_PurchaseTotal - ((model.TicketInfo_TotalPaidUSD + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalPaidMXN, "MXN", "USD").Key + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalPaidCAD, "CAD", "USD").Key)
                    - (model.TicketInfo_TotalRefundUSD + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalRefundMXN, "MXN", "USD").Key + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalRefundCAD, "CAD", "USD").Key));
                model.TicketInfo_ChangeDueMXN = ConvertAmountToRate(exchangeRates, model.TicketInfo_ChangeDue, "USD", "MXN").Key;
                //model.TicketInfo_TotalPaidLetter = 
                var purchaseTicket = new tblPurchaseTickets();

                purchaseTicket.purchaseID = purchase;
                purchaseTicket.purchaseTotal = (decimal)query.total;
                purchaseTicket.savedByUserID = currentUser;
                purchaseTicket.dateSaved = DateTime.Now;
                purchaseTicket.printCounter = 1;
                purchaseTicket.jsonTicket = serializer.Serialize(model);
                db.tblPurchaseTickets.AddObject(purchaseTicket);
                db.SaveChanges();

                return model;
            }

            public PurchasesModel.TicketInfoModel Current_GetTicketInfo(string PurchaseID, int PurchaseTicketID)
            {
                ePlatEntities db = new ePlatEntities();
                JavaScriptSerializer serializer = new JavaScriptSerializer();
                var model = new PurchasesModel.TicketInfoModel();

                if (PurchaseTicketID != 0)
                {
                    var ticket = db.tblPurchaseTickets.Single(m => m.purchaseTicketID == PurchaseTicketID);
                    ticket.printCounter += 1;
                    db.SaveChanges();
                    var type = typeof(PurchasesModel.TicketInfoModel);
                    model = (PurchasesModel.TicketInfoModel)serializer.Deserialize(ticket.jsonTicket, type);
                    model.TicketInfo_DateIssued = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                    return model;
                }

                var currentUser = session.UserID;
                var purchase = Guid.Parse(PurchaseID);
                var userProfile = db.aspnet_Users.Where(m => m.UserId == currentUser).Select(m => new { m.tblUserProfiles.FirstOrDefault().firstName, m.tblUserProfiles.FirstOrDefault().lastName });
                var services = new List<SelectListItem>();

                var query = db.tblPurchases.Single(m => m.purchaseID == purchase);
                var company = query.tblTerminals.tblCompanies;
                //var _services = db.tblPurchases_Services.Where(m => m.purchaseID == purchase).Select(m => new { m.purchase_ServiceID, m.serviceID, serviceDescription = m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service.ToLower(), service = m.tblServices.service.ToLower(), total = m.tblPurchaseServiceDetails.Sum(x => (x.quantity * (x.dealPrice ?? x.customPrice))), currency = m.tblCurrencies.currencyCode, folio = m.tblPurchaseServiceDetails.FirstOrDefault().coupon, status = m.tblPurchaseServiceStatus.purchaseServiceStatus, statusID = m.serviceStatusID, details = m.tblPurchaseServiceDetails }).Distinct();
                var _services = db.tblPurchases_Services.Where(m => m.purchaseID == purchase).Select(m => new { m.purchase_ServiceID, m.serviceID, serviceDescription = m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service.ToLower(), service = m.tblServices.service.ToLower(), total = m.tblPurchaseServiceDetails.Sum(x => (x.quantity * (x.dealPrice ?? x.customPrice))), currency = m.tblCurrencies.currencyCode, folio = m.tblPurchaseServiceDetails.FirstOrDefault().coupon, status = m.tblPurchaseServiceStatus.purchaseServiceStatus, statusID = m.serviceStatusID, details = m.tblPurchaseServiceDetails });
                var allRelatedPayments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted));
                var _payments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted) && m.tblMoneyTransactions.transactionTypeID == 1 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode, cardType = m.ccType != null ? m.tblCardTypes.cardType : "", m.ccReferenceNumber, m.applyCommission, cardTypeID = m.ccType ?? 0 });
                var _refunds = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && (m.deleted == null || !(bool)m.deleted) && m.tblMoneyTransactions.transactionTypeID == 2 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode, cardType = m.ccType != null ? m.tblCardTypes.cardType : "", m.ccReferenceNumber, m.applyCommission, cardTypeID = m.ccType ?? 0, comments = m.paymentComments });
                var showCouponTotal = query.tblTerminals.couponTotalInTicket;
                var exchangeRates = GetExchangeRates(query.purchaseDateTime, query.terminalID, query.pointOfSaleID, true).Replace(" ", string.Empty).Split(',').ToList();

                #region "comercial name definition"
                switch (query.terminalID)
                {
                    case 32:
                        {
                            model.TicketInfo_ComercialName = "Profesionales de Playa Mujeres, S.A. de C.V.<br />" + company.address + ", " + company.city + ", " + company.state + " " + company.zipCode;
                            break;
                        }
                    default:
                        {
                            model.TicketInfo_ComercialName = "";
                            break;
                        }
                }
                #endregion

                model.TicketInfo_DateSaved = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                model.TicketInfo_DateIssued = DateTime.Now.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);
                model.TicketInfo_TerminalID = query.terminalID;
                model.TicketInfo_Phone = company.phone != null ? query.tblTerminals.tblCompanies.phone : "";
                model.TicketInfo_Culture = query.culture;
                model.TicketInfo_PointOfSale = query.tblPointsOfSale.shortName + " - " + query.tblPointsOfSale.pointOfSale;
                model.TicketInfo_ExchangeRate = GetSpecificRate(query.purchaseDateTime, "USD", query.terminalID, query.pointOfSaleID).ToString();
                model.TicketInfo_Customer = query.tblLeads.firstName + " " + query.tblLeads.lastName;
                model.TicketInfo_Terminal = query.tblTerminals.terminal;
                model.TicketInfo_Company = company.company;
                model.TicketInfo_TicketNumber = PurchaseID.ToString().Substring(PurchaseID.ToString().Length - 6);
                model.TicketInfo_UserName = userProfile.FirstOrDefault().firstName + " " + userProfile.FirstOrDefault().lastName;
                model.TicketInfo_URL = query.tblTerminals.terminal + "<br />" + (query.tblTerminals.tblCompanies.phone != null ? query.tblTerminals.tblCompanies.phone : "");
                model.TicketInfo_PurchaseTotal = ConvertAmountToRate(exchangeRates, (decimal)query.total, query.tblCurrencies.currencyCode, "USD").Key;

                foreach (var i in _services)
                {
                    var chargeBackPayments = _payments.Where(m => m.paymentType == 3);
                    var certificatePayments = _payments.Where(m => m.paymentType == 6);

                    if (chargeBackPayments.Count() != allRelatedPayments.Count() && allRelatedPayments.Count() != certificatePayments.Count())
                    {
                        var units = "";
                        foreach (var a in i.details)
                        {
                            //units += (units == "" ? "" : ", ") + a.quantity + " " + a.tblPrices1.tblPriceUnits.FirstOrDefault(m => m.culture == query.culture).unit;
                            units += (units == "" ? "" : ", ") + a.quantity + " " + (a.tblPrices1.tblPriceUnits.Count(m => m.culture == query.culture) > 0 ? a.tblPrices1.tblPriceUnits.FirstOrDefault(m => m.culture == query.culture).unit : a.tblPrices1.tblPriceUnits.FirstOrDefault().unit);
                        }
                        //services.Add(new SelectListItem() { Value = i.statusID.ToString(), Text = (i.status + " | " + i.folio.Split('-')[0] + " | " + (i.serviceDescription ?? i.service) + "_" + (showCouponTotal == true ? (i.statusID > 3 ? "-" : "") + " $" + (Math.Round((decimal)i.total, 2, MidpointRounding.AwayFromZero) + " " + i.currency) : "")) });
                        services.Add(new SelectListItem() { Value = i.statusID.ToString(), Text = (i.status + " | " + i.folio.Split('-')[0] + " | " + (i.serviceDescription ?? i.service) + " | " + units + "_" + (showCouponTotal == true ? (i.statusID > 3 ? "-" : "") + " $" + (Math.Round((decimal)i.total, 2, MidpointRounding.AwayFromZero) + " " + i.currency) : "")) });
                    }
                }
                model.TicketInfo_Services = services;

                var _listCash = new List<PurchasesModel.TicketPaymentModel>();
                var _listCC = new List<PurchasesModel.TicketPaymentModel>();
                var _listCB = new List<PurchasesModel.TicketPaymentModel>();
                var _listTC = new List<PurchasesModel.TicketPaymentModel>();
                var _listWT = new List<PurchasesModel.TicketPaymentModel>();
                var _listC = new List<PurchasesModel.TicketPaymentModel>();
                #region "payments"
                var _paymentsByType = _payments.GroupBy(m => m.paymentType);

                foreach (var i in _paymentsByType)
                {
                    switch ((int)i.Key)
                    {
                        case 1:
                            {
                                #region "Cash"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCashUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    _listCash.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 2:
                            {
                                #region "credit card"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    //model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    foreach (var x in a)
                                    {
                                        var _bankCommission = GetBankCommission(query.terminalID, query.purchaseDateTime, x.cardTypeID);
                                        var _amount = x.applyCommission != null && (bool)x.applyCommission ? x.amount / ((_bankCommission / 100) + 1) : x.amount;
                                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
                                        {
                                            Currency = x.currencyCode,//a.Key,
                                            Amount = _amount,//x.amount / ((_bankCommission / 100) + 1),// a.Sum(m => m.amount),
                                            CardType = x.cardType,//a.FirstOrDefault().cardType,
                                            CardNumber = (x.ccReferenceNumber != null ? x.ccReferenceNumber.ToString() : "") + (x.applyCommission != null && (bool)x.applyCommission ? " (+" + _bankCommission + "%)" : "")//a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                        });
                                        model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? _amount : 0;
                                        model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? _amount : 0;
                                        model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? _amount : 0;
                                    }
                                    //_listCC.Add(new PurchasesModel.TicketPaymentModel()
                                    //{
                                    //    Currency = a.Key,
                                    //    Amount = a.Sum(m => m.amount),
                                    //    CardType = a.FirstOrDefault().cardType,
                                    //    CardNumber = a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                    //});
                                }
                                break;
                                #endregion
                            }
                        case 3:
                            {
                                #region "chargebacks"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listCB.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 4:
                            {
                                #region "TravelerChecks"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listTC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 5:
                            {
                                #region "wire transfer"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    model.TicketInfo_TotalPaidUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listWT.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 6:
                            {
                                #region "Certificates"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                    }
                }
                model.TicketInfo_CashPayments = _listCash;
                model.TicketInfo_CCPayments = _listCC;
                model.TicketInfo_TCPayments = _listTC;
                model.TicketInfo_WTPayments = _listWT;
                #endregion

                #region "purchase total"
                if (_listCB.Count() > 0)
                {
                    foreach (var c in _listCB)
                    {
                        model.TicketInfo_PurchaseTotal -= ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                if (_listC.Count() > 0)
                {
                    foreach (var c in _listC)
                    {
                        model.TicketInfo_PurchaseTotal -= ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                #endregion

                #region "refunds"
                _listCash = new List<PurchasesModel.TicketPaymentModel>();
                _listCC = new List<PurchasesModel.TicketPaymentModel>();
                _listCB = new List<PurchasesModel.TicketPaymentModel>();
                _listTC = new List<PurchasesModel.TicketPaymentModel>();
                _listWT = new List<PurchasesModel.TicketPaymentModel>();
                _listC = new List<PurchasesModel.TicketPaymentModel>();

                var _refundsByType = _refunds.GroupBy(m => m.paymentType);

                foreach (var i in _refundsByType)
                {
                    switch ((int)i.Key)
                    {
                        case 1:
                            {
                                #region "Cash"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalPaidCashUSD -= a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    _listCash.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 2:
                            {
                                #region "credit card"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    //model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    //model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;

                                    foreach (var x in a)
                                    {
                                        var _bankCommission = GetBankCommission(query.terminalID, query.purchaseDateTime, x.cardTypeID);
                                        var _amount = x.applyCommission != null && (bool)x.applyCommission ? x.amount / ((_bankCommission / 100) + 1) : x.amount;
                                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
                                        {
                                            Currency = x.currencyCode,
                                            Amount = _amount,//x.amount / ((_bankCommission / 100) + 1),
                                            CardType = x.cardType,
                                            CardNumber = (x.ccReferenceNumber != null ? x.ccReferenceNumber.ToString() : "") + (x.applyCommission != null && (bool)x.applyCommission ? " (+" + _bankCommission + "%)" : "")//a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                        });
                                        model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? _amount : 0;
                                        model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? _amount : 0;
                                        model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? _amount : 0;
                                    }
                                    //_listCC.Add(new PurchasesModel.TicketPaymentModel()
                                    //{
                                    //    Currency = a.Key,
                                    //    Amount = a.Sum(m => m.amount),
                                    //    CardType = a.FirstOrDefault().cardType,
                                    //    //CardNumber = a.FirstOrDefault().ccReferenceNumber != null ? a.FirstOrDefault().ccReferenceNumber.ToString() : ""
                                    //});
                                }
                                break;
                                #endregion
                            }
                        case 3:
                            {
                                #region "chargebacks"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    _listCB.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 4:
                            {
                                #region "TravelerChecks"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listTC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 5:
                            {
                                #region "wire transfer"
                                var refundsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in refundsByCurrency)
                                {
                                    model.TicketInfo_TotalRefundUSD += a.Key == "USD" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundMXN += a.Key == "MXN" ? a.Sum(m => m.amount) : 0;
                                    model.TicketInfo_TotalRefundCAD += a.Key == "CAD" ? a.Sum(m => m.amount) : 0;
                                    _listWT.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                        case 6:
                            {
                                #region "Certificates"
                                var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
                                foreach (var a in paymentsByCurrency)
                                {
                                    _listC.Add(new PurchasesModel.TicketPaymentModel()
                                    {
                                        Currency = a.Key,
                                        Amount = a.Sum(m => m.amount)
                                    });
                                }
                                break;
                                #endregion
                            }
                    }
                    model.TicketInfo_Comments += (model.TicketInfo_Comments == null || model.TicketInfo_Comments == "" ? "" : ". ") + string.Join(". ", i.Select(m => m.comments).ToArray());
                }
                model.TicketInfo_CashRefunds = _listCash;
                model.TicketInfo_CCRefunds = _listCC;
                model.TicketInfo_TCRefunds = _listTC;
                model.TicketInfo_WTRefunds = _listWT;
                #endregion

                #region "purchase total"
                if (_listCB.Count() > 0)
                {
                    foreach (var c in _listCB)
                    {
                        model.TicketInfo_PurchaseTotal += ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                if (_listC.Count() > 0)
                {
                    foreach (var c in _listC)
                    {
                        model.TicketInfo_PurchaseTotal += ConvertAmountToRate(exchangeRates, c.Amount, c.Currency, "USD").Key;
                    }
                }
                #endregion
                model.TicketInfo_PurchaseTotalMXN = ConvertAmountToRate(exchangeRates, model.TicketInfo_PurchaseTotal, "USD", "MXN").Key;
                model.TicketInfo_ChangeDue = model.TicketInfo_PurchaseTotal - ((model.TicketInfo_TotalPaidUSD + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalPaidMXN, "MXN", "USD").Key + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalPaidCAD, "CAD", "USD").Key)
                    - (model.TicketInfo_TotalRefundUSD + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalRefundMXN, "MXN", "USD").Key + ConvertAmountToRate(exchangeRates, model.TicketInfo_TotalRefundCAD, "CAD", "USD").Key));
                model.TicketInfo_ChangeDueMXN = ConvertAmountToRate(exchangeRates, model.TicketInfo_ChangeDue, "USD", "MXN").Key;
                //model.TicketInfo_TotalPaidLetter = 
                var purchaseTicket = new tblPurchaseTickets();

                purchaseTicket.purchaseID = purchase;
                purchaseTicket.purchaseTotal = (decimal)query.total;
                purchaseTicket.savedByUserID = currentUser;
                purchaseTicket.dateSaved = DateTime.Now;
                purchaseTicket.printCounter = 1;
                purchaseTicket.jsonTicket = serializer.Serialize(model);
                db.tblPurchaseTickets.AddObject(purchaseTicket);
                db.SaveChanges();

                return model;
            }

            //public PurchasesModel.TicketInfoModel _GetTicketInfo(string PurchaseID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    var model = new PurchasesModel.TicketInfoModel();
            //    var purchase = Guid.Parse(PurchaseID);
            //    var userProfile = db.aspnet_Users.Where(m => m.UserId == currentUser).Select(m => new { m.tblUserProfiles.FirstOrDefault().firstName, m.tblUserProfiles.FirstOrDefault().lastName });
            //    var services = new List<string>();

            //    var query = db.tblPurchases.Single(m => m.purchaseID == purchase);
            //    var _services = db.tblPurchases_Services.Where(m => m.purchaseID == purchase && (m.serviceStatusID <= 3 || (m.serviceStatusID >= 4 && m.cancelationCharge != null && m.cancelationCharge != 0))).Select(m => new { m.purchase_ServiceID, m.serviceID, serviceDescription = m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service, m.tblServices.service, total = m.total, currency = m.tblCurrencies.currencyCode }).Distinct();
            //    var allRelatedPayments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase);
            //    var _payments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && m.paymentType != 3 && m.paymentType != 6 && m.tblMoneyTransactions.transactionTypeID == 1 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode });
            //    var _refunds = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && m.paymentType != 3 && m.paymentType != 6 && m.tblMoneyTransactions.transactionTypeID == 2 && m.tblMoneyTransactions.errorCode == "0").Select(m => new { m.amount, m.paymentType, m.tblCurrencies.currencyCode });
            //    var showCouponTotal = query.tblTerminals.couponTotalInTicket;

            //    model.TicketInfo_Phone = query.tblTerminals.tblCompanies.phone != null ? query.tblTerminals.tblCompanies.phone : "";//query.tblTerminals.tblTerminalDomains.FirstOrDefault(m => m.domain.IndexOf("localhost") == -1 && m.domain.IndexOf("beta") == -1 && m.culture == query.culture).domain;
            //    model.TicketInfo_Culture = query.culture;
            //    model.TicketInfo_PointOfSale = query.tblPointsOfSale.shortName + " - " + query.tblPointsOfSale.pointOfSale;
            //    model.TicketInfo_Customer = query.tblLeads.firstName + " " + query.tblLeads.lastName;
            //    model.TicketInfo_Terminal = query.tblTerminals.terminal;
            //    model.TicketInfo_Company = query.tblTerminals.tblCompanies.company;
            //    model.TicketInfo_TicketNumber = PurchaseID.ToString().Substring(PurchaseID.ToString().Length - 6);
            //    model.TicketInfo_UserName = userProfile.FirstOrDefault().firstName + " " + userProfile.FirstOrDefault().lastName;

            //    foreach (var i in _services)
            //    {
            //        var chargeBackPayments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && m.tblPurchases.tblPurchases_Services.FirstOrDefault(x => x.serviceID == i.serviceID).purchase_ServiceID != null && m.paymentType == 3);
            //        var certificatePayments = db.tblPaymentDetails.Where(m => m.purchaseID == purchase && m.tblPurchases.tblPurchases_Services.FirstOrDefault(x => x.serviceID == i.serviceID).purchase_ServiceID != null && m.paymentType == 6);
            //        //var allRelatedPayments = db.tblPurchases_Services_MoneyTransactions.Where(m => m.purchase_ServiceID == i.purchase_ServiceID);
            //        if (chargeBackPayments.Count() != allRelatedPayments.Count() && allRelatedPayments.Count() != certificatePayments.Count())
            //        {
            //            //services.Add(i.serviceDescription ?? i.service);
            //            services.Add((i.serviceDescription ?? i.service) + "|" + (showCouponTotal == true ? (i.total + " " + i.currency) : ""));
            //        }
            //    }
            //    model.TicketInfo_Services = services;

            //    var _listCash = new List<PurchasesModel.TicketPaymentModel>();
            //    var _listCC = new List<PurchasesModel.TicketPaymentModel>();
            //    var _listTC = new List<PurchasesModel.TicketPaymentModel>();
            //    var _listWT = new List<PurchasesModel.TicketPaymentModel>();

            //    #region "payments"
            //    var _paymentsByType = _payments.GroupBy(m => m.paymentType);

            //    foreach (var i in _paymentsByType)
            //    {
            //        switch ((int)i.Key)
            //        {
            //            case 1:
            //                {
            //                    #region "Cash"
            //                    var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in paymentsByCurrency)
            //                    {
            //                        _listCash.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 2:
            //                {
            //                    #region "credit card"
            //                    var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in paymentsByCurrency)
            //                    {
            //                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 4:
            //                {
            //                    #region "TravelerChecks"
            //                    var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in paymentsByCurrency)
            //                    {
            //                        _listTC.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 5:
            //                {
            //                    #region "wire transfer"
            //                    var paymentsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in paymentsByCurrency)
            //                    {
            //                        _listWT.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //        }
            //    }
            //    model.TicketInfo_CashPayments = _listCash;
            //    model.TicketInfo_CCPayments = _listCC;
            //    model.TicketInfo_TCPayments = _listTC;
            //    model.TicketInfo_WTPayments = _listWT;
            //    #endregion

            //    #region "refunds"
            //    _listCash = new List<PurchasesModel.TicketPaymentModel>();
            //    _listCC = new List<PurchasesModel.TicketPaymentModel>();
            //    _listTC = new List<PurchasesModel.TicketPaymentModel>();
            //    _listWT = new List<PurchasesModel.TicketPaymentModel>();
            //    var _refundsByType = _refunds.GroupBy(m => m.paymentType);

            //    foreach (var i in _refundsByType)
            //    {
            //        switch ((int)i.Key)
            //        {
            //            case 1:
            //                {
            //                    #region "Cash"
            //                    var refundsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in refundsByCurrency)
            //                    {
            //                        _listCash.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 2:
            //                {
            //                    #region "credit card"
            //                    var refundsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in refundsByCurrency)
            //                    {
            //                        _listCC.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 4:
            //                {
            //                    #region "TravelerChecks"
            //                    var refundsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in refundsByCurrency)
            //                    {
            //                        _listTC.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //            case 5:
            //                {
            //                    #region "wire transfer"
            //                    var refundsByCurrency = i.GroupBy(m => m.currencyCode);
            //                    foreach (var a in refundsByCurrency)
            //                    {
            //                        _listWT.Add(new PurchasesModel.TicketPaymentModel()
            //                        {
            //                            Currency = a.Key,
            //                            Amount = a.Sum(m => m.amount)
            //                        });
            //                    }
            //                    break;
            //                    #endregion
            //                }
            //        }
            //    }
            //    model.TicketInfo_CashRefunds = _listCash;
            //    model.TicketInfo_CCRefunds = _listCC;
            //    model.TicketInfo_TCRefunds = _listTC;
            //    model.TicketInfo_WTRefunds = _listWT;
            //    #endregion

            //    return model;
            //}

            public object CanApplyPromo(Guid PurchaseService_Purchase)
            {
                ePlatEntities db = new ePlatEntities();
                var canApplyPromo = true;
                var promosApplied = false;
                object result;
                var _promos = db.tblPurchases_Services.Where(m => m.purchaseID == PurchaseService_Purchase && m.promoID != null && m.serviceStatusID < 4).Select(m => new { m.promoID, m.tblPromos.combinable, m.tblPromos.applyOnPerson });

                if (_promos.Count() > 0)
                {
                    promosApplied = true;
                    //if true, it means that some of the promos is not combinable so promo cannot be applied
                    if (_promos.Count() != _promos.Where(m => m.combinable == true).Count())
                    {
                        canApplyPromo = false;
                    }
                    if (_promos.Count() == _promos.Where(m => m.applyOnPerson == true).Count())
                    {
                        canApplyPromo = true;
                    }
                }
                result = new { canApplyPromo = canApplyPromo, promosApplied = promosApplied };
                return result;
            }

            public object GetPromoInfo(long promoID)
            {
                ePlatEntities db = new ePlatEntities();
                object obj = "";
                if (promoID != 0)
                {
                    var query = db.tblPromos.Single(m => m.promoID == promoID);
                    obj = new { isDiscountType = (query.tblPromos_PromoTypes.Where(m => m.promoTypeID == 4).Count() == 1 ? true : false), percentage = query.percentage, amount = query.amount, combinable = query.combinable, applyOnPerson = query.applyOnPerson, isPackable = query.isPackage };
                }
                return obj;
            }

            public AttemptResponse ApplyPromoToCoupons(long promoID, Guid purchaseID)
            {
                AttemptResponse response = new AttemptResponse();
                ePlatEntities db = new ePlatEntities();
                try
                {
                    var _purchase = db.tblPurchases.FirstOrDefault(m => m.purchaseID == purchaseID);
                    //confirmed coupons
                    var coupons = _purchase.tblPurchases_Services.Where(m => m.serviceStatusID == 3).Select(m => m.purchase_ServiceID).ToArray();
                    var newPromo = promoID != 0 ? db.tblPromos.Single(m => m.promoID == promoID) : null;
                    decimal _amount = 0;

                    var currentPromo = _purchase.promoID != null ? db.tblPromos.Single(m => m.promoID == _purchase.promoID) : null;
                    if (currentPromo != null)//revert promo on coupons
                    {
                        foreach (long i in coupons)
                        {
                            var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i);
                            var purchaseServiceDetails = purchase_service.tblPurchaseServiceDetails;

                            if (currentPromo.percentage != null)
                            {

                                var _total = ((purchase_service.total * 100) / (100 - currentPromo.percentage));
                                purchase_service.total = (decimal)_total;
                                _amount += (decimal)_total;
                            }
                            else if (currentPromo.amount != null)
                            {
                                var _total = (decimal)currentPromo.amount / coupons.Count();
                                purchase_service.total = purchase_service.total + _total;
                                _amount += purchase_service.total + _total;
                                //var units = purchaseServiceDetails.Sum(m => m.quantity);
                                //var amountPerUnit = currentPromo.amount / units;
                                //_amount += (decimal)amountPerUnit * units;
                            }
                        }
                        _purchase.total = _amount;
                    }
                    _amount = 0;//reset before reuse
                    if (newPromo != null)
                    {

                        //if (_purchase.tblPurchases_Services.Any(m => m.promoID != null && !m.tblPromos.combinable))
                        if (!newPromo.combinable && _purchase.tblPurchases_Services.Any(m => m.promoID != null && !m.tblPromos.combinable))
                        {
                            throw new Exception("One or more coupons have promo applied");
                        }
                        foreach (long i in coupons)
                        {
                            var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i);
                            var purchaseServiceDetails = purchase_service.tblPurchaseServiceDetails;
                            var _total = purchase_service.total - (newPromo.amount != null ? newPromo.amount : newPromo.percentage != null ? Decimal.Round((decimal)((purchase_service.total * newPromo.percentage) / 100), 2) : 0);
                            purchase_service.total = (decimal)_total;
                            _amount += (decimal)_total;
                            //if (newPromo.amount != null)
                            //{
                            //    var units = purchaseServiceDetails.Sum(m => m.quantity);
                            //    var amountPerUnit = newPromo.amount / units;
                            //    _amount += (decimal)amountPerUnit * units;
                            //}
                            //else if (newPromo.percentage != null)
                            //{
                            //    foreach (var a in purchaseServiceDetails)
                            //    {
                            //        var _price = a.customPrice - ((a.customPrice * newPromo.percentage) / 100);
                            //        _amount += (decimal)_price * a.quantity;
                            //    }
                            //}
                        }
                        _purchase.total = _amount;
                    }
                    _purchase.promoID = promoID != 0 ? promoID : (long?)null;
                    db.SaveChanges();
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Promo Code Applied";
                    response.ObjectID = new { purchaseID = _purchase.purchaseID, purchaseTotal = _purchase.total };
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Promo Code NOT Applied";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            public AttemptResponse _ApplyPromoToCoupons(long promoID, string purchase_services)
            {
                AttemptResponse response = new AttemptResponse();
                ePlatEntities db = new ePlatEntities();
                try
                {
                    var coupons = new JavaScriptSerializer().Deserialize(purchase_services, typeof(long[])) as long[];
                    var newPromo = promoID != 0 ? db.tblPromos.Single(m => m.promoID == promoID) : null;
                    decimal _amount = 0;

                    var _purchase = db.tblPurchases.FirstOrDefault(m => m.tblPurchases_Services.FirstOrDefault(x => coupons.Contains(x.purchase_ServiceID)).purchaseID != null);
                    var currentPromo = _purchase.promoID != null ? db.tblPromos.Single(m => m.promoID == _purchase.promoID) : null;

                    if (currentPromo != null)
                    {
                        foreach (long i in coupons)
                        {
                            var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i);
                            var purchaseServiceDetails = purchase_service.tblPurchaseServiceDetails;

                            if (currentPromo.percentage != null)
                            {
                                var _total = ((purchase_service.total * 100) / (100 - currentPromo.percentage));
                                purchase_service.total = (decimal)_total;
                                _amount += (decimal)_total;

                                foreach (var a in purchaseServiceDetails)
                                {
                                    a.customPrice = ((a.dealPrice * 100) / (100 - currentPromo.percentage));
                                    a.dealPrice = ((a.dealPrice * 100) / (100 - currentPromo.percentage));
                                }
                            }
                            else if (currentPromo.amount != null)
                            {
                                var units = purchaseServiceDetails.Sum(m => m.quantity);
                                var amountPerUnit = currentPromo.amount / units;
                                _amount += (decimal)amountPerUnit * units;

                                foreach (var a in purchaseServiceDetails)
                                {
                                    a.dealPrice = a.customPrice + amountPerUnit;
                                    a.customPrice += amountPerUnit;
                                }
                            }
                        }
                        _purchase.total = _amount;
                    }

                    _amount = 0;//reset before reuse

                    if (newPromo != null)
                    {
                        if (db.tblPurchases_Services.Any(m => m.promoID != null && !m.tblPromos.combinable))
                        {
                            throw new Exception("One or more coupons have promo applied");
                        }
                        foreach (long i in coupons)
                        {
                            var purchase_service = db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i);
                            var purchaseServiceDetails = purchase_service.tblPurchaseServiceDetails;
                            var _total = purchase_service.total - (newPromo.amount != null ? newPromo.amount : newPromo.percentage != null ? Decimal.Round((decimal)((purchase_service.total * newPromo.percentage) / 100), 2) : 0);
                            purchase_service.total = (decimal)_total;
                            if (newPromo.amount != null)
                            {
                                var units = purchaseServiceDetails.Sum(m => m.quantity);
                                var amountPerUnit = newPromo.amount / units;
                                _amount += (decimal)amountPerUnit * units;
                                foreach (var a in purchaseServiceDetails)
                                {
                                    a.dealPrice = a.customPrice - amountPerUnit;
                                    a.customPrice -= amountPerUnit;
                                }
                            }
                            else if (newPromo.percentage != null)
                            {
                                foreach (var a in purchaseServiceDetails)
                                {
                                    a.dealPrice = a.customPrice - ((a.customPrice * newPromo.percentage) / 100);
                                    a.customPrice = a.customPrice - ((a.customPrice * newPromo.percentage) / 100);
                                    _amount += (decimal)a.customPrice * a.quantity;
                                }
                            }
                        }
                        _purchase.total = _amount;
                    }
                    //db.SaveChanges();
                    response.Type = Attempt_ResponseTypes.Ok;
                    response.Message = "Promo Code Applied";
                    response.ObjectID = new { purchaseID = _purchase.purchaseID, purchaseTotal = _purchase.total };
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Promo Code NOT Applied";
                    response.ObjectID = 0;
                    response.Exception = ex;
                    return response;
                }
            }

            public AttemptResponse SendCouponsByEmail(Guid PurchaseService_Purchase, string PurchaseService_Service, bool SendToProvider, bool SendToOther, string OtherMail)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                try
                {
                    var purchase = db.tblPurchases.Where(m => m.purchaseID == PurchaseService_Purchase).Select(m => new { m.terminalID, m.culture, m.tblLeads.firstName, m.pointOfSaleID });
                    var couponRef = GetCouponRef(PurchaseService_Purchase) + "-";
                    var _leadEmails = string.Join(",", db.tblPurchases.Single(m => m.purchaseID == PurchaseService_Purchase).tblLeads.tblLeadEmails.Select(m => m.email));
                    var _message = "";
                    var _ccEmails = "";
                    var _purchasesServices = PurchaseService_Service.Split(',').Select(m => long.Parse(m)).ToArray();

                    var _servicesConfirmed = from m in db.tblPurchases_Services
                                             where m.purchaseID == PurchaseService_Purchase
                                             && m.serviceStatusID == 3
                                             && _purchasesServices.Contains(m.purchase_ServiceID)
                                             select new
                                             {
                                                 m.serviceID,
                                                 m.tblServices.itemTypeID,
                                                 m.purchase_ServiceID,
                                                 m.tblPurchases.terminalID,
                                                 isTransportation = m.tblServices.transportationService,
                                                 isRoundTransportation = m.round != null ? (bool)m.round : false,
                                                 range = m.weeklyAvailabilityID != null ? m.tblWeeklyAvailability.range : false,
                                                 hour = m.weeklyAvailabilityID != null ? m.tblWeeklyAvailability.hour : (TimeSpan?)null,
                                                 m.serviceDateTime,
                                                 m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service,
                                                 meetingPoint = m.tblMeetingPoints.atYourHotel ? "At your Hotel" : m.tblMeetingPoints.tblPlaces.place,
                                                 meetingTime = m.customMeetingTime != null ? m.customMeetingTime : m.tblServices.transportationService ? (TimeSpan?)null : m.tblMeetingPoints.hour,
                                                 m.roundAirline,
                                                 m.roundDate,
                                                 m.roundFlightNumber,
                                                 m.roundFlightTime,
                                                 m.roundMeetingTime,
                                                 details = m.tblPurchaseServiceDetails,
                                                 place = m.tblPurchases.stayingAt != null ? m.tblPurchases.stayingAt : m.tblPurchases.tblPlaces.place,
                                                 mapLink = m.tblMeetingPoints.note,
                                                 m.airline,
                                                 m.flightNumber,
                                                 m.tblServices.tblDestinations.destination
                                             };
                    if (_servicesConfirmed.Count() > 0)
                    {
                        foreach (var _service in _servicesConfirmed)
                        {
                            #region "send to provider & other address"
                            if (SendToProvider)
                            {
                                var providerEmail = db.tblServices.Single(m => m.serviceID == _service.serviceID).tblProviders.contactEmail;
                                if (providerEmail.IndexOf(',') > 0)
                                {
                                    providerEmail = providerEmail.Split(',')[0].Trim();
                                }
                                else if (providerEmail.IndexOf('/') > 0)
                                {
                                    providerEmail = providerEmail.Split('/')[0].Trim();
                                }
                                else if (providerEmail.IndexOf(' ') > 0)
                                {
                                    providerEmail = providerEmail.Split(' ')[0].Trim();
                                }
                                if (providerEmail != null)
                                {
                                    _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                                    _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                                }
                            }
                            if (SendToOther)
                            {
                                _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                                _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                            }

                            #endregion
                        }
                        //System.Net.Mail.MailMessage email = new System.Net.Mail.MailMessage();
                        //var _bodyMail = "";
                        var GroupsTypes = _servicesConfirmed.GroupBy(x => x.itemTypeID);
                        foreach (var Sales in GroupsTypes.ToList())
                        {
                            System.Net.Mail.MailMessage email = new System.Net.Mail.MailMessage();
                            var _bodyMail = "";
                            //Template's
                            #region "Tours And Activites"
                            if (Sales.Key == 1)
                            {
                                _bodyMail = "";
                                email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture, purchase.FirstOrDefault().pointOfSaleID);
                                foreach (var Activities in Sales.ToList())
                                {
                                    var units = "";
                                    foreach (var a in Activities.details)
                                    {
                                        var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                        units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                    }
                                    //email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                    if (purchase.FirstOrDefault().culture == "es-MX")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(Activities.serviceDateTime) + "</strong><br />"
                                                           + "**Hora de la Actividad: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((Activities.range ? Activities.hour != null ? Activities.hour.ToString() : Activities.serviceDateTime.TimeOfDay.ToString() : Activities.hour.ToString())) + "</strong><br />"
                                                           + "Nombre de la Actividad: <strong>" + Activities.service + "</strong><br />"
                                                        + "Válido para: <strong>" + units + "</strong><br />"
                                                           + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + Activities.meetingPoint + "</strong></span><br />"
                                                           + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (Activities.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Activities.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                           + "Enlace de Cupón: <a href=\"" + couponRef + Activities.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + Activities.purchase_ServiceID + "</a>";
                                    }
                                    else if (purchase.FirstOrDefault().culture == "en-US")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(Activities.serviceDateTime) + "</strong><br />"
                                                    + "**Activity Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((Activities.range ? Activities.hour != null ? Activities.hour.ToString() : Activities.serviceDateTime.TimeOfDay.ToString() : Activities.hour.ToString())) + "</strong><br />"
                                                    + "Name of Activity: <strong>" + Activities.service + "</strong><br />"
                                                        + "Good For: <strong>" + units + "</strong><br />"
                                                    + "<span style=\"color:red\">Meeting Point: <strong>" + Activities.meetingPoint + "</strong></span><br />"
                                                    + "<span style=\"color:red\">**Meeting Time: <strong>" + (Activities.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Activities.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                    + "Coupon Link: <a href=\"" + couponRef + Activities.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + Activities.purchase_ServiceID + "</a>";
                                    }
                                    //email.Body = email.Body
                                    //            .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                    //            .Replace("$BodyMail", _bodyMail);
                                    db.tblPurchases_Services.Single(m => m.purchase_ServiceID == Activities.purchase_ServiceID).issued = true;
                                }
                                email.Body = email.Body
            .Replace("$FirstName", purchase.FirstOrDefault().firstName)
            .Replace("$BodyMail", _bodyMail);
                                //CC
                                //new
                                if (_leadEmails.IndexOf("notgiven@notgiven.com") != -1)
                                {
                                    if (_ccEmails != "")
                                    {
                                        email.To.Add(_ccEmails);
                                        //Utils.EmailNotifications.Send(email);
                                        EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    email.To.Add(_leadEmails);
                                    if (_ccEmails != "")
                                    {
                                        email.CC.Add(_ccEmails);
                                    }
                                    //Utils.EmailNotifications.Send(email);
                                    EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                    db.SaveChanges();
                                }
                                //new
                                //email.To.Add(_leadEmails);
                                //if (_ccEmails != "")
                                //{
                                //    email.CC.Add(_ccEmails);
                                //}
                                //email.Body = email.Body.Replace("á", "&aacute;")
                                //    .Replace("é", "&eacute;")
                                //    .Replace("í", "&iacute;")
                                //    .Replace("ó", "&oacute;")
                                //    .Replace("ú", "&uacute;");
                                //send mail and save change 
                                //Utils.EmailNotifications.Send(email);
                                //db.SaveChanges();
                            }
                            #endregion
                            #region"Transportation"
                            else if (Sales.Key == 3)
                            {
                                var roundTripTranportations = Sales.Where(m => m.isRoundTransportation);
                                var singleTransportations = Sales.Where(m => !m.isRoundTransportation);
                                var counter = 0;

                                if (roundTripTranportations.Count() > 0)
                                {
                                    _bodyMail = "";
                                    email = Utils.EmailNotifications.GetEmail(11, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture, purchase.FirstOrDefault().pointOfSaleID);
                                    foreach (var Transportation in roundTripTranportations.ToList())
                                    {
                                        var units = "";
                                        foreach (var a in Transportation.details)
                                        {
                                            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                            units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                        }
                                        if (purchase.FirstOrDefault().culture == "es-MX")
                                        {
                                            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Usted llega: <strong>" + new ActivityDataModel().RemoveTimeFromDate(Transportation.serviceDateTime) + "</strong><br />"
                                                + "Se Hospedará en: <strong>" + Transportation.place + "</strong><br />"
                                                + "Aerolínea: <strong>" + Transportation.airline + "</strong><br />"
                                                + "Número de vuelo: <strong>" + Transportation.flightNumber + "</strong><br />"
                                                + "LLEGADA - Su llegada al Aeropuerto Internacional de " + Transportation.destination + " es: <strong>" + (Transportation.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.meetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Pasajeros: <strong>" + units + "</strong><br />"
                                                + "REGRESO - Su regreso al Aeropuerto Internacional de " + Transportation.destination + " es: <strong>" + (Transportation.roundMeetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.roundMeetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Enlace de Cupón: <a href=\"" + couponRef + Transportation.purchase_ServiceID + "\">" + couponRef + Transportation.purchase_ServiceID + "</a><br />";
                                            //+ "Mapa: " + Transportation.mapLink + "<br />";
                                        }
                                        else if (purchase.FirstOrDefault().culture == "en-US")
                                        {
                                            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "You Arrive: <strong>" + new ActivityDataModel().RemoveTimeFromDate(Transportation.serviceDateTime) + "</strong><br />"
                                                + "You will stay at: <strong>" + Transportation.place + "</strong><br />"
                                                + "Airline: <strong>" + Transportation.airline + "</strong><br />"
                                                + "Flight Number: <strong>" + Transportation.flightNumber + "</strong><br />"
                                                + "ARRIVAL - Your arrival at the International Airport of " + Transportation.destination + " is: <strong>" + (Transportation.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.meetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Passengers: <strong>" + units + "</strong><br />"
                                                + "DEPARTURE - Your pick up for departure to the International Airport of " + Transportation.destination + " is: <strong>" + (Transportation.roundMeetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.roundMeetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Coupon Link: <a href=\"" + couponRef + Transportation.purchase_ServiceID + "\">" + couponRef + Transportation.purchase_ServiceID + "</a><br />";
                                            //+ "Map Link: " + Transportation.mapLink + "<br />";

                                        }
                                        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == Transportation.purchase_ServiceID).issued = true;
                                    }
                                    email.Body = email.Body
                                               .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                               .Replace("$BodyMail", _bodyMail);
                                    email.To.Add(_leadEmails);
                                    if (_ccEmails != "")
                                    {
                                        email.CC.Add(_ccEmails);
                                    }
                                    email.Body = email.Body.Replace("á", "&aacute;")
                                        .Replace("é", "&eacute;")
                                        .Replace("í", "&iacute;")
                                        .Replace("ó", "&oacute;")
                                        .Replace("ú", "&uacute;");
                                    //send mail and save change 
                                    //Utils.EmailNotifications.Send(email);
                                    EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                }

                                if (singleTransportations.Count() > 0)
                                {
                                    counter = 0;
                                    _bodyMail = "";
                                    email = Utils.EmailNotifications.GetEmail(10, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture, purchase.FirstOrDefault().pointOfSaleID);
                                    foreach (var Transportation in singleTransportations.ToList().OrderBy(m => m.serviceDateTime))
                                    {
                                        var units = "";
                                        foreach (var a in Transportation.details)
                                        {
                                            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                            units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                        }
                                        if (purchase.FirstOrDefault().culture == "es-MX")
                                        {
                                            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Usted llega: <strong>" + new ActivityDataModel().RemoveTimeFromDate(Transportation.serviceDateTime) + "</strong><br />"
                                                + "Se Hospedará en: <strong>" + Transportation.place + "</strong><br />"
                                                + "Aerolínea: <strong>" + Transportation.airline + "</strong><br />"
                                                + "Número de vuelo: <strong>" + Transportation.flightNumber + "</strong><br />"
                                                + "Su " + (counter == 0 ? "llegada" : "regreso") + " al Aeropuerto Internacional de " + Transportation.destination + " es: <strong>" + (Transportation.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.meetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Pasajeros: <strong>" + units + "</strong><br />"
                                                + "Enlace de Cupón: <a href=\"" + couponRef + Transportation.purchase_ServiceID + "\">" + couponRef + Transportation.purchase_ServiceID + "</a><br />";
                                            //+ "Mapa: " + Transportation.mapLink + "<br />";
                                        }
                                        else if (purchase.FirstOrDefault().culture == "en-US")
                                        {
                                            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "You " + (counter == 0 ? "Arrive" : "Depart") + ": <strong>" + new ActivityDataModel().RemoveTimeFromDate(Transportation.serviceDateTime) + "</strong><br />"
                                                + "You " + (counter == 0 ? "will stay at" : "will depart from") + ": <strong>" + Transportation.place + "</strong><br />"
                                                + "Airline: <strong>" + Transportation.airline + "</strong><br />"
                                                + "Flight Number: <strong>" + Transportation.flightNumber + "</strong><br />"
                                                + "Your " + (counter == 0 ? "arrival at" : "pick up for departure to") + " the International Airport of " + Transportation.destination + " is: <strong>" + (Transportation.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(Transportation.meetingTime.ToString()) : "Unknown") + "</strong><br />"
                                                + "Passengers: <strong>" + units + "</strong><br />"
                                                + "Coupon Link: <a href=\"" + couponRef + Transportation.purchase_ServiceID + "\">" + couponRef + Transportation.purchase_ServiceID + "</a><br />";
                                            //+ "Map Link: " + Transportation.mapLink + "<br />";

                                        }
                                        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == Transportation.purchase_ServiceID).issued = true;
                                        counter++;
                                    }
                                    email.Body = email.Body
                                               .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                               .Replace("$BodyMail", _bodyMail);
                                    email.To.Add(_leadEmails);
                                    if (_ccEmails != "")
                                    {
                                        email.CC.Add(_ccEmails);
                                    }
                                    email.Body = email.Body.Replace("á", "&aacute;")
                                        .Replace("é", "&eacute;")
                                        .Replace("í", "&iacute;")
                                        .Replace("ó", "&oacute;")
                                        .Replace("ú", "&uacute;");
                                    //send mail and save change 
                                    //Utils.EmailNotifications.Send(email);
                                    EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                }
                                db.SaveChanges();
                            }
                            #endregion
                            #region"Car Rental"
                            else if (Sales.Key == 5)
                            {
                                _bodyMail = "";
                                email = Utils.EmailNotifications.GetEmail(16, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                foreach (var CarRental in Sales.ToList())
                                {
                                    var units = "";
                                    foreach (var a in CarRental.details)
                                    {
                                        var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                        units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                    }

                                    //email = Utils.EmailNotifications.GetEmail(16, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                    if (purchase.FirstOrDefault().culture == "es-MX")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha del Evento: <strong>" + new ActivityDataModel().RemoveTimeFromDate(CarRental.serviceDateTime) + "</strong><br />"
                                                    + "**Hora de la Entrega: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((CarRental.range ? CarRental.hour != null ? CarRental.hour.ToString() : CarRental.serviceDateTime.TimeOfDay.ToString() : CarRental.hour.ToString())) + "</strong><br />"
                                                    + "Vehículo solicitado: <strong>" + CarRental.service + "</strong><br />"
                                                        + "Válido por: <strong>" + units + "</strong><br />"
                                                    + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + CarRental.meetingPoint + "</strong></span><br />"
                                                    + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (CarRental.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(CarRental.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                    + "Enlace de Cupón: <a href=\"" + couponRef + CarRental.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + CarRental.purchase_ServiceID + "</a>";
                                    }
                                    else if (purchase.FirstOrDefault().culture == "en-US")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Date of the event: <strong>" + new ActivityDataModel().RemoveTimeFromDate(CarRental.serviceDateTime) + "</strong><br />"
                                                    + "**Delivery Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((CarRental.range ? CarRental.hour != null ? CarRental.hour.ToString() : CarRental.serviceDateTime.TimeOfDay.ToString() : CarRental.hour.ToString())) + "</strong><br />"
                                                    + "Vehicle requested: <strong>" + CarRental.service + "</strong><br />"
                                                        + "Good For: <strong>" + units + "</strong><br />"
                                                    + "<span style=\"color:red\">Meeting Point: <strong>" + CarRental.meetingPoint + "</strong></span><br />"
                                                    + "<span style=\"color:red\">**Meeting Time: <strong>" + (CarRental.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(CarRental.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                    + "Coupon Link: <a href=\"" + couponRef + CarRental.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + CarRental.purchase_ServiceID + "</a>";
                                    }
                                    //email.Body = email.Body
                                    //            .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                    //            .Replace("$BodyMail", _bodyMail);
                                    db.tblPurchases_Services.Single(m => m.purchase_ServiceID == CarRental.purchase_ServiceID).issued = true;
                                }
                                email.Body = email.Body
                                                .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                                .Replace("$BodyMail", _bodyMail);
                                //CC 
                                email.To.Add(_leadEmails);
                                if (_ccEmails != "")
                                {
                                    email.CC.Add(_ccEmails);
                                }
                                email.Body = email.Body.Replace("á", "&aacute;")
                                    .Replace("é", "&eacute;")
                                    .Replace("í", "&iacute;")
                                    .Replace("ó", "&oacute;")
                                    .Replace("ú", "&uacute;");
                                //Utils.EmailNotifications.Send(email);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                db.SaveChanges();
                            }
                            #endregion
                            #region"Default"
                            else if ((Sales.Key == 2) || (Sales.Key == 4) || (Sales.Key == 6))
                            {
                                _bodyMail = "";
                                email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                foreach (var DefaulType in Sales.ToList())
                                {
                                    var units = "";
                                    foreach (var a in DefaulType.details)
                                    {
                                        var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                        units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                    }
                                    //email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                    if (purchase.FirstOrDefault().culture == "es-MX")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(DefaulType.serviceDateTime) + "</strong><br />"
                                                           + "**Hora de la Actividad: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((DefaulType.range ? DefaulType.hour != null ? DefaulType.hour.ToString() : DefaulType.serviceDateTime.TimeOfDay.ToString() : DefaulType.hour.ToString())) + "</strong><br />"
                                                           + "Nombre de la Actividad: <strong>" + DefaulType.service + "</strong><br />"
                                                           + "Válido para: <strong>" + units + "</strong><br />"
                                                           + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + DefaulType.meetingPoint + "</strong></span><br />"
                                                           + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (DefaulType.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(DefaulType.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                           + "Enlace de Cupón: <a href=\"" + couponRef + DefaulType.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + DefaulType.purchase_ServiceID + "</a>";
                                    }
                                    else if (purchase.FirstOrDefault().culture == "en-US")
                                    {
                                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(DefaulType.serviceDateTime) + "</strong><br />"
                                                    + "**Activity Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((DefaulType.range ? DefaulType.hour != null ? DefaulType.hour.ToString() : DefaulType.serviceDateTime.TimeOfDay.ToString() : DefaulType.hour.ToString())) + "</strong><br />"
                                                    + "Name of Activity: <strong>" + DefaulType.service + "</strong><br />"
                                                    + "Good For: <strong>" + units + "</strong><br />"
                                                    + "<span style=\"color:red\">Meeting Point: <strong>" + DefaulType.meetingPoint + "</strong></span><br />"
                                                    + "<span style=\"color:red\">**Meeting Time: <strong>" + (DefaulType.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(DefaulType.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                                    + "Coupon Link: <a href=\"" + couponRef + DefaulType.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + DefaulType.purchase_ServiceID + "</a>";
                                    }
                                    //email.Body = email.Body
                                    //               .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                    //               .Replace("$BodyMail", _bodyMail);
                                    db.tblPurchases_Services.Single(m => m.purchase_ServiceID == DefaulType.purchase_ServiceID).issued = true;
                                }
                                email.Body = email.Body
                                                   .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                                   .Replace("$BodyMail", _bodyMail);
                                //CC 
                                email.To.Add(_leadEmails);
                                if (_ccEmails != "")
                                {
                                    email.CC.Add(_ccEmails);
                                }
                                email.Body = email.Body.Replace("á", "&aacute;")
                                    .Replace("é", "&eacute;")
                                    .Replace("í", "&iacute;")
                                    .Replace("ó", "&oacute;")
                                    .Replace("ú", "&uacute;");
                                //Utils.EmailNotifications.Send(email);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                db.SaveChanges();
                            }
                            #endregion
                        }
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Coupon(s) Sent<br />" + _message;
                        response.ObjectID = new { Coupons = _servicesConfirmed.Select(m => m.purchase_ServiceID).ToArray() };
                        return response;
                        #region "commented code"
                        //if (_servicesConfirmed.Count() == _servicesConfirmed.Where(m => m.itemTypeID == 3).Count())
                        //{
                        //    #region "all services are not a transportation service"
                        //    //System.Net.Mail.MailMessage email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);

                        //    //var _bodyMail = "";
                        //    foreach (var i in _servicesConfirmed)
                        //    {
                        //        if (SendToProvider)
                        //        {
                        //            var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                        //            if (providerEmail.IndexOf(',') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(',')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf('/') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split('/')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf(' ') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(' ')[0].Trim();
                        //            }
                        //            if (providerEmail != null)
                        //            {
                        //                _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                        //                _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                        //            }
                        //        }

                        //        var units = "";
                        //        foreach (var a in i.details)
                        //        {
                        //            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                        //            units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                        //        }

                        //        if (purchase.FirstOrDefault().culture == "es-MX")
                        //        {
                        //            switch (i.itemTypeID)
                        //            {
                        //                case 5://car rental
                        //                    {
                        //                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Entrega: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                + "**Hora de la Entrega: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Modelo de Vehículo: <strong>" + i.service + "</strong><br />";
                        //                        break;
                        //                    }
                        //                default:
                        //                    {
                        //                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                + "**Hora de la Actividad: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Nombre de la Actividad: <strong>" + i.service + "</strong><br />";
                        //                        break;
                        //                    }
                        //            }

                        //            _bodyMail += "Valido para: <strong>" + units + "</strong><br />"
                        //                + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + i.meetingPoint + "</strong></span><br />"
                        //                + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                        //                + "Enlace de Cupón: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                        //        }
                        //        else
                        //        {
                        //            switch (i.itemTypeID)
                        //            {
                        //                case 5:
                        //                    {
                        //                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Delivery Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                + "**Delivery Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Vehicle Model: <strong>" + i.service + "</strong><br />";
                        //                        break;
                        //                    }
                        //                default:
                        //                    {
                        //                        _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                + "**Activity Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Name of Activity: <strong>" + i.service + "</strong><br />";
                        //                        break;
                        //                    }
                        //            }

                        //            _bodyMail += "Good For: <strong>" + units + "</strong><br />"
                        //            + "<span style=\"color:red\">Meeting Point: <strong>" + i.meetingPoint + "</strong></span><br />"
                        //            + "<span style=\"color:red\">**Meeting Time: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                        //            + "Coupon Link: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                        //        }
                        //        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                        //    }
                        //    if (SendToOther)
                        //    {
                        //        _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                        //        _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                        //    }
                        //    email.To.Add(_leadEmails);
                        //    if (_ccEmails != "")
                        //    {
                        //        email.CC.Add(_ccEmails);
                        //    }
                        //    email.Body = email.Body
                        //        .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                        //        .Replace("$BodyMail", _bodyMail);
                        //    Utils.EmailNotifications.Send(email);
                        //    #endregion
                        //}
                        //else if (_servicesConfirmed.Count() == _servicesConfirmed.Where(m => m.itemTypeID == 3).Count())
                        //{
                        //    foreach (var i in _servicesConfirmed)
                        //    {
                        //        #region "all services are transportation services"
                        //        //it suppose that is only one service transportation for email, not more. otherwise send one email per service
                        //        var _eventID = i.isRoundTransportation ? 11 : 10;
                        //        //System.Net.Mail.MailMessage email = Utils.EmailNotifications.GetEmail(_eventID, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                        //        if (SendToProvider)
                        //        {
                        //            var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                        //            if (providerEmail.IndexOf(',') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(',')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf('/') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split('/')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf(' ') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(' ')[0].Trim();
                        //            }
                        //            if (providerEmail != null)
                        //            {
                        //                _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                        //                _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                        //            }
                        //        }
                        //        if (SendToOther)
                        //        {
                        //            _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                        //            _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                        //        }
                        //        email.To.Add(_leadEmails);
                        //        if (_ccEmails != "")
                        //        {
                        //            email.CC.Add(_ccEmails);
                        //        }
                        //        var units = "";
                        //        foreach (var a in i.details)
                        //        {
                        //            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                        //            units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                        //        }

                        //        email.Body = email.Body.Replace("$FirstName", purchase.FirstOrDefault().firstName)
                        //            .Replace("$ServiceDate", new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime))
                        //            .Replace("$StayingAt", i.place)
                        //            .Replace("$Airline", i.airline)
                        //            .Replace("$FlightNumber", i.flightNumber)
                        //            .Replace("$MeetingTime", (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown"))
                        //            .Replace("$Unit", units)
                        //            .Replace("$CouponRef", couponRef + i.purchase_ServiceID)
                        //            .Replace("$MapLink", i.mapLink);
                        //        Utils.EmailNotifications.Send(email);
                        //        #endregion
                        //        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                        //    }
                        //}
                        //else
                        //{
                        //    //some services are a transportation service
                        //    var _activities = _servicesConfirmed.Where(m => m.isTransportation == false);
                        //    var _transportation = _servicesConfirmed.Where(m => m.isTransportation);

                        //    //SERVICES
                        //    #region "services"
                        //    System.Net.Mail.MailMessage emailActivities = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);

                        //    //var _bodyMail = "";
                        //    foreach (var i in _activities)
                        //    {
                        //        if (SendToProvider)
                        //        {
                        //            var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                        //            if (providerEmail.IndexOf(',') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(',')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf('/') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split('/')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf(' ') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(' ')[0].Trim();
                        //            }
                        //            if (providerEmail != null)
                        //            {
                        //                _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                        //                _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                        //            }
                        //        }
                        //        var units = "";
                        //        foreach (var a in i.details)
                        //        {
                        //            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                        //            units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                        //        }
                        //        if (purchase.FirstOrDefault().culture == "es-MX")
                        //        {
                        //            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                //+ "**Hora de la Actividad: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "**Hora de la Actividad: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Nombre de la Actividad: <strong>" + i.service + "</strong><br />"
                        //                + "Valido para: <strong>" + units + "</strong><br />"
                        //                + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + i.meetingPoint + "</strong></span><br />"
                        //                + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                        //                + "Enlace de Cupón: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                        //        }
                        //        else
                        //        {
                        //            _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                        //                //+ "**Activity Time: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "**Activity Time: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                        //                + "Name of Activity: <strong>" + i.service + "</strong><br />"
                        //                + "Good For: <strong>" + units + "</strong><br />"
                        //                + "<span style=\"color:red\">Meeting Point: <strong>" + i.meetingPoint + "</strong></span><br />"
                        //                + "<span style=\"color:red\">**Meeting Time: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                        //                + "Coupon Link: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                        //        }
                        //        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                        //    }
                        //    if (SendToOther)
                        //    {
                        //        _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                        //        _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                        //    }
                        //    emailActivities.To.Add(_leadEmails);
                        //    if (_ccEmails != "")
                        //    {
                        //        emailActivities.CC.Add(_ccEmails);
                        //    }
                        //    emailActivities.Body = emailActivities.Body
                        //        .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                        //        .Replace("$BodyMail", _bodyMail);
                        //    Utils.EmailNotifications.Send(emailActivities);
                        //    #endregion
                        //    //TRANSPORTATION
                        //    #region "transportation"
                        //    foreach (var i in _transportation)
                        //    {
                        //        var _eventID = i.isRoundTransportation ? 11 : 10;
                        //        System.Net.Mail.MailMessage emailTransportation = Utils.EmailNotifications.GetEmail(_eventID, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                        //        if (SendToProvider)
                        //        {
                        //            var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                        //            if (providerEmail.IndexOf(',') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(',')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf('/') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split('/')[0].Trim();
                        //            }
                        //            else if (providerEmail.IndexOf(' ') > 0)
                        //            {
                        //                providerEmail = providerEmail.Split(' ')[0].Trim();
                        //            }
                        //            if (providerEmail != null)
                        //            {
                        //                _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                        //                _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                        //            }
                        //        }
                        //        if (SendToOther)
                        //        {
                        //            _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                        //            _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                        //        }
                        //        emailTransportation.To.Add(_leadEmails);
                        //        if (_ccEmails != "")
                        //        {
                        //            emailTransportation.CC.Add(_ccEmails);
                        //        }
                        //        var _units = "";
                        //        foreach (var a in i.details)
                        //        {
                        //            var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                        //            _units += (_units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                        //        }
                        //        emailTransportation.Body = emailTransportation.Body.Replace("$FirstName", purchase.FirstOrDefault().firstName)
                        //        .Replace("$ServiceDate", new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime))
                        //        .Replace("$StayingAt", i.place)
                        //        .Replace("$Airline", i.airline)
                        //        .Replace("$FlightNumber", i.flightNumber)
                        //        .Replace("$MeetingTime", (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown"))
                        //        .Replace("$Unit", _units)
                        //        .Replace("$CouponRef", couponRef + i.purchase_ServiceID)
                        //        .Replace("$MapLink", i.mapLink);
                        //        Utils.EmailNotifications.Send(emailTransportation);
                        //        db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                        //    }
                        //    #endregion
                        //}
                        #endregion
                    }
                    else
                    {
                        //throw new Exception("No Confirmed Coupons");
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "No Pending Coupons to Send";
                        response.ObjectID = new { Coupons = new int[] { } };
                        return response;
                    }
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Coupon(s) NOT Sent";
                    response.ObjectID = new { Coupons = new int[] { } };
                    response.Exception = ex;
                    return response;
                }
            }

            public AttemptResponse _SendCouponsByEmail(Guid PurchaseService_Purchase, string PurchaseService_Service, bool SendToProvider, bool SendToOther, string OtherMail)
            {
                ePlatEntities db = new ePlatEntities();
                AttemptResponse response = new AttemptResponse();
                try
                {
                    var purchase = db.tblPurchases.Where(m => m.purchaseID == PurchaseService_Purchase).Select(m => new { m.terminalID, m.culture, m.tblLeads.firstName });
                    var couponRef = GetCouponRef(PurchaseService_Purchase) + "-";
                    var _leadEmails = string.Join(",", db.tblPurchases.Single(m => m.purchaseID == PurchaseService_Purchase).tblLeads.tblLeadEmails.Select(m => m.email));
                    var _message = "";
                    var _ccEmails = "";
                    var _purchasesServices = PurchaseService_Service.Split(',').Select(m => long.Parse(m)).ToArray();

                    var _servicesConfirmed = from m in db.tblPurchases_Services
                                             where m.purchaseID == PurchaseService_Purchase
                                             && m.serviceStatusID == 3
                                             && _purchasesServices.Contains(m.purchase_ServiceID)
                                             select new
                                             {
                                                 m.serviceID,
                                                 m.tblServices.itemTypeID,
                                                 m.purchase_ServiceID,
                                                 m.tblPurchases.terminalID,
                                                 isTransportation = m.tblServices.transportationService,
                                                 isRoundTransportation = m.round != null ? (bool)m.round : false,
                                                 range = m.weeklyAvailabilityID != null ? m.tblWeeklyAvailability.range : false,
                                                 hour = m.weeklyAvailabilityID != null ? m.tblWeeklyAvailability.hour : (TimeSpan?)null,
                                                 m.serviceDateTime,
                                                 m.tblServices.tblServiceDescriptions.FirstOrDefault(x => x.active && x.culture == m.tblPurchases.culture).service,
                                                 meetingPoint = m.tblMeetingPoints.atYourHotel ? "At your Hotel" : m.tblMeetingPoints.tblPlaces.place,
                                                 meetingTime = m.customMeetingTime != null ? m.customMeetingTime : m.tblServices.transportationService ? (TimeSpan?)null : m.tblMeetingPoints.hour,
                                                 details = m.tblPurchaseServiceDetails,
                                                 place = m.tblPurchases.stayingAt != null ? m.tblPurchases.stayingAt : m.tblPurchases.tblPlaces.place,
                                                 mapLink = m.tblMeetingPoints.note,
                                                 m.airline,
                                                 m.flightNumber,
                                                 m.tblServices.tblDestinations.destination
                                             };

                    if (_servicesConfirmed.Count() > 0)
                    {
                        if (_servicesConfirmed.Count() == _servicesConfirmed.Where(m => m.isTransportation == false).Count())
                        {
                            #region "all services are not a transportation service"
                            System.Net.Mail.MailMessage email = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);

                            var _bodyMail = "";
                            foreach (var i in _servicesConfirmed)
                            {
                                if (SendToProvider)
                                {
                                    var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                                    if (providerEmail.IndexOf(',') > 0)
                                    {
                                        providerEmail = providerEmail.Split(',')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf('/') > 0)
                                    {
                                        providerEmail = providerEmail.Split('/')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf(' ') > 0)
                                    {
                                        providerEmail = providerEmail.Split(' ')[0].Trim();
                                    }
                                    if (providerEmail != null)
                                    {
                                        _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                                        _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                                    }
                                }
                                var units = "";
                                foreach (var a in i.details)
                                {
                                    var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                    units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                }

                                if (purchase.FirstOrDefault().culture == "es-MX")
                                {
                                    switch (i.itemTypeID)
                                    {
                                        case 5://car rental
                                            {
                                                _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Entrega: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        + "**Hora de la Entrega: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Modelo de Vehículo: <strong>" + i.service + "</strong><br />";
                                                break;
                                            }
                                        default:
                                            {
                                                _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        + "**Hora de la Actividad: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Nombre de la Actividad: <strong>" + i.service + "</strong><br />";
                                                break;
                                            }
                                    }

                                    _bodyMail += "Valido para: <strong>" + units + "</strong><br />"
                                        + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + i.meetingPoint + "</strong></span><br />"
                                        + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                        + "Enlace de Cupón: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                                }
                                else
                                {
                                    switch (i.itemTypeID)
                                    {
                                        case 5:
                                            {
                                                _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Delivery Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        + "**Delivery Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Vehicle Model: <strong>" + i.service + "</strong><br />";
                                                break;
                                            }
                                        default:
                                            {
                                                _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        + "**Activity Time: <strong>" + GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Name of Activity: <strong>" + i.service + "</strong><br />";
                                                break;
                                            }
                                    }

                                    _bodyMail += "Good For: <strong>" + units + "</strong><br />"
                                    + "<span style=\"color:red\">Meeting Point: <strong>" + i.meetingPoint + "</strong></span><br />"
                                    + "<span style=\"color:red\">**Meeting Time: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                    + "Coupon Link: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                                }
                                db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                            }
                            if (SendToOther)
                            {
                                _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                                _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                            }
                            email.To.Add(_leadEmails);
                            if (_ccEmails != "")
                            {
                                email.CC.Add(_ccEmails);
                            }
                            email.Body = email.Body
                                .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                .Replace("$BodyMail", _bodyMail);
                            //Utils.EmailNotifications.Send(email);
                            EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                            #endregion
                        }
                        else if (_servicesConfirmed.Count() == _servicesConfirmed.Where(m => m.isTransportation).Count())
                        {
                            foreach (var i in _servicesConfirmed)
                            {
                                #region "all services are transportation services"
                                //it suppose that is only one service transportation for email, not more. otherwise send one email per service
                                var _eventID = i.isRoundTransportation ? 11 : 10;
                                System.Net.Mail.MailMessage email = Utils.EmailNotifications.GetEmail(_eventID, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                if (SendToProvider)
                                {
                                    var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                                    if (providerEmail.IndexOf(',') > 0)
                                    {
                                        providerEmail = providerEmail.Split(',')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf('/') > 0)
                                    {
                                        providerEmail = providerEmail.Split('/')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf(' ') > 0)
                                    {
                                        providerEmail = providerEmail.Split(' ')[0].Trim();
                                    }
                                    if (providerEmail != null)
                                    {
                                        _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                                        _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                                    }
                                }
                                if (SendToOther)
                                {
                                    _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                                    _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                                }
                                email.To.Add(_leadEmails);
                                if (_ccEmails != "")
                                {
                                    email.CC.Add(_ccEmails);
                                }
                                var units = "";
                                foreach (var a in i.details)
                                {
                                    var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                    units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                }

                                email.Body = email.Body.Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                    .Replace("$ServiceDate", new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime))
                                    .Replace("$StayingAt", i.place)
                                    .Replace("$Airline", i.airline)
                                    .Replace("$FlightNumber", i.flightNumber)
                                    .Replace("$MeetingTime", (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown"))
                                    .Replace("$Unit", units)
                                    .Replace("$CouponRef", couponRef + i.purchase_ServiceID)
                                    .Replace("$MapLink", i.mapLink);
                                //Utils.EmailNotifications.Send(email);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                                #endregion
                                db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                            }
                        }
                        else
                        {
                            //some services are a transportation service
                            var _activities = _servicesConfirmed.Where(m => m.isTransportation == false);
                            var _transportation = _servicesConfirmed.Where(m => m.isTransportation);

                            //SERVICES
                            #region "services"
                            System.Net.Mail.MailMessage emailActivities = Utils.EmailNotifications.GetEmail(9, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);

                            var _bodyMail = "";
                            foreach (var i in _activities)
                            {
                                if (SendToProvider)
                                {
                                    var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                                    if (providerEmail.IndexOf(',') > 0)
                                    {
                                        providerEmail = providerEmail.Split(',')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf('/') > 0)
                                    {
                                        providerEmail = providerEmail.Split('/')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf(' ') > 0)
                                    {
                                        providerEmail = providerEmail.Split(' ')[0].Trim();
                                    }
                                    if (providerEmail != null)
                                    {
                                        _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                                        _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                                    }
                                }
                                var units = "";
                                foreach (var a in i.details)
                                {
                                    var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                    units += (units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                }
                                if (purchase.FirstOrDefault().culture == "es-MX")
                                {
                                    _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Fecha de Actividad: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        //+ "**Hora de la Actividad: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "**Hora de la Actividad: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Nombre de la Actividad: <strong>" + i.service + "</strong><br />"
                                        + "Valido para: <strong>" + units + "</strong><br />"
                                        + "<span style=\"color:red\">Lugar de Encuentro: <strong>" + i.meetingPoint + "</strong></span><br />"
                                        + "<span style=\"color:red\">**Hora de Encuentro: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                        + "Enlace de Cupón: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                                }
                                else
                                {
                                    _bodyMail += (_bodyMail == "" ? "<br />" : "<br /><br />") + "Activity Date: <strong>" + new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime) + "</strong><br />"
                                        //+ "**Activity Time: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "**Activity Time: <strong>" + Utils.GeneralFunctions.DateFormat.ToMeridianHour((i.range ? i.hour != null ? i.hour.ToString() : i.serviceDateTime.TimeOfDay.ToString() : i.hour.ToString())) + "</strong><br />"
                                        + "Name of Activity: <strong>" + i.service + "</strong><br />"
                                        + "Good For: <strong>" + units + "</strong><br />"
                                        + "<span style=\"color:red\">Meeting Point: <strong>" + i.meetingPoint + "</strong></span><br />"
                                        + "<span style=\"color:red\">**Meeting Time: <strong>" + (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown") + "</strong></span><br />"
                                        + "Coupon Link: <a href=\"" + couponRef + i.purchase_ServiceID + "\" target=\"_blank\">" + couponRef + i.purchase_ServiceID + "</a>";
                                }
                                db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                            }
                            if (SendToOther)
                            {
                                _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                                _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                            }
                            emailActivities.To.Add(_leadEmails);
                            if (_ccEmails != "")
                            {
                                emailActivities.CC.Add(_ccEmails);
                            }
                            emailActivities.Body = emailActivities.Body
                                .Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                .Replace("$BodyMail", _bodyMail);
                            //Utils.EmailNotifications.Send(emailActivities);
                            EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = emailActivities } });
                            #endregion
                            //TRANSPORTATION
                            #region "transportation"
                            foreach (var i in _transportation)
                            {
                                var _eventID = i.isRoundTransportation ? 11 : 10;
                                System.Net.Mail.MailMessage emailTransportation = Utils.EmailNotifications.GetEmail(_eventID, purchase.FirstOrDefault().terminalID, purchase.FirstOrDefault().culture);
                                if (SendToProvider)
                                {
                                    var providerEmail = db.tblServices.Single(m => m.serviceID == i.serviceID).tblProviders.contactEmail;
                                    if (providerEmail.IndexOf(',') > 0)
                                    {
                                        providerEmail = providerEmail.Split(',')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf('/') > 0)
                                    {
                                        providerEmail = providerEmail.Split('/')[0].Trim();
                                    }
                                    else if (providerEmail.IndexOf(' ') > 0)
                                    {
                                        providerEmail = providerEmail.Split(' ')[0].Trim();
                                    }
                                    if (providerEmail != null)
                                    {
                                        _message += _message.IndexOf(providerEmail) == -1 ? providerEmail : "";
                                        _ccEmails += _ccEmails.IndexOf(providerEmail) == -1 ? (_ccEmails != "" ? "," : "") + providerEmail : "";
                                    }
                                }
                                if (SendToOther)
                                {
                                    _message += (_message != "" ? "<br />" : "") + OtherMail.Trim();
                                    _ccEmails += (_ccEmails != "" ? "," : "") + OtherMail.Trim();
                                }
                                emailTransportation.To.Add(_leadEmails);
                                if (_ccEmails != "")
                                {
                                    emailTransportation.CC.Add(_ccEmails);
                                }
                                var _units = "";
                                foreach (var a in i.details)
                                {
                                    var priceUnit = PriceDataModel.GetUnit((a.priceID != null ? (long)a.priceID : (long)a.netPriceID), purchase.FirstOrDefault().culture);
                                    _units += (_units != "" ? "," : "") + a.quantity + " " + priceUnit.unit + " " + priceUnit.additionalInfo;
                                }
                                emailTransportation.Body = emailTransportation.Body.Replace("$FirstName", purchase.FirstOrDefault().firstName)
                                .Replace("$ServiceDate", new ActivityDataModel().RemoveTimeFromDate(i.serviceDateTime))
                                .Replace("$StayingAt", i.place)
                                .Replace("$Airline", i.airline)
                                .Replace("$FlightNumber", i.flightNumber)
                                .Replace("$MeetingTime", (i.meetingTime != null ? GeneralFunctions.DateFormat.ToMeridianHour(i.meetingTime.ToString()) : "Unknown"))
                                .Replace("$Unit", _units)
                                .Replace("$CouponRef", couponRef + i.purchase_ServiceID)
                                .Replace("$MapLink", i.mapLink);
                                //Utils.EmailNotifications.Send(emailTransportation);
                                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = emailTransportation } });
                                db.tblPurchases_Services.Single(m => m.purchase_ServiceID == i.purchase_ServiceID).issued = true;
                            }
                            #endregion
                        }
                        db.SaveChanges();
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "Coupon(s) Sent<br />" + _message;
                        response.ObjectID = new { Coupons = _servicesConfirmed.Select(m => m.purchase_ServiceID).ToArray() };
                        return response;
                    }
                    else
                    {
                        //throw new Exception("No Confirmed Coupons");
                        response.Type = Attempt_ResponseTypes.Ok;
                        response.Message = "No Pending Coupons to Send";
                        response.ObjectID = new { Coupons = new int[] { } };
                        return response;
                    }
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "Coupon(s) NOT Sent";
                    response.ObjectID = new { Coupons = new int[] { } };
                    response.Exception = ex;
                    return response;
                }
            }

            public object GetBuyer(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                var _purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);

                return new { leadID = _purchase.leadID, terminalID = _purchase.terminalID };
            }

            public decimal GetBudgetUsedInWeek(int opcID, int promotionTeamID, string paymentDate, long? terminalID, int pointOfSaleID)
            {
                ePlatEntities db = new ePlatEntities();
                var date = paymentDate != null && paymentDate != "null" ? DateTime.Parse(paymentDate, CultureInfo.InvariantCulture) : DateTime.Now;
                var _rates = GetExchangeRates(date, terminalID, pointOfSaleID).Replace(" ", string.Empty).Split(',').ToList();
                _rates.Add("MXN=1.00");
                var query = db.tblBudgets_PromotionTeams.Where(m => m.promotionTeamID == promotionTeamID
                    && (m.tblBudgets.fromDate <= date && (m.tblBudgets.permanent_ || m.tblBudgets.toDate >= date)) && m.tblBudgets.perWeek).OrderBy(m => m.tblBudgets.fromDate).FirstOrDefault();

                var budgetAmount = query.tblBudgets.budget;
                var _dayOfReset = query.tblBudgets.resetDayOfWeek;
                var dayOfReset = Array.IndexOf(GeneralFunctions.WeekDays.Keys.ToArray(), _dayOfReset.ToLower());
                var today = Array.IndexOf(GeneralFunctions.WeekDays.Keys.ToArray(), date.DayOfWeek.ToString().ToLower());

                var daysDiff = (7 + (today - dayOfReset)) % 7;
                var dateToCheck = date.Date.AddDays(daysDiff * -1);
                var _today = date.Date.AddDays(1).AddSeconds(-1);

                var payments = db.tblPaymentDetails.Where(m => m.paymentType == 3 && (m.deleted == null || !(bool)m.deleted) && m.opcID == opcID && m.promotionTeamID == promotionTeamID && m.dateSaved >= dateToCheck && m.dateSaved <= _today && m.budgetID == query.budgetID);
                var egresses = db.tblEgresses.Where(m => m.opcID == opcID && m.promotionTeamID == promotionTeamID && m.dateSaved >= dateToCheck && m.dateSaved <= _today && m.budgetID == query.budgetID);
                decimal amountUsed = 0;
                foreach (var i in payments)
                {
                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                    {
                        amountUsed += ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, query.tblBudgets.tblCurrencies.currencyCode).Key;
                    }
                    else
                    {
                        amountUsed -= ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, query.tblBudgets.tblCurrencies.currencyCode).Key;
                    }
                }
                foreach (var i in egresses)
                {
                    amountUsed += ConvertAmountToRate(_rates, i.amount, i.tblCurrencies.currencyCode, query.tblBudgets.tblCurrencies.currencyCode).Key;
                }

                return amountUsed;
                //return new { budgetUsed = amountUsed };
            }

            public List<PurchasesModel.ChargebackTicketModel> GetChargeBackTicketInfo(Guid purchaseID, string printFromDate, string printToDate)
            {

                ePlatEntities db = new ePlatEntities();
                List<PurchasesModel.ChargebackTicketModel> list = new List<PurchasesModel.ChargebackTicketModel>();
                var fromDate = DateTime.Parse(printFromDate);
                var toDate = DateTime.Parse(printToDate).AddDays(1).AddSeconds(-1);

                var query = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                var salesAgent = query.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + query.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName;
                var opcTransactions = query.tblPaymentDetails.Where(m => m.paymentType == 3 && (m.deleted == null || !(bool)m.deleted) && m.tblEgressConcepts.egressConcept.IndexOf("OPC") != -1 && m.budgetID == null);
                var opcSeparatedTransactions = opcTransactions.GroupBy(m => m.opcID);
                var companyTransactions = query.tblPaymentDetails.Where(m => m.paymentType == 3 && (m.deleted == null || !(bool)m.deleted) && (m.budgetID != null || m.tblEgressConcepts.egressConcept.IndexOf("Company") != -1));
                var companySeparatedTransactions = companyTransactions.GroupBy(m => m.chargedToCompanyID);
                var clientTransactions = query.tblPaymentDetails.Where(m => m.paymentType != 3 && m.paymentType != 2 && (m.deleted == null || !(bool)m.deleted));
                var clientCardTransactions = query.tblPaymentDetails.Where(m => m.paymentType == 2 && (m.deleted == null || !(bool)m.deleted));
                var services = query.tblPurchases_Services;
                var _pointOfSale = query.tblPointsOfSale.pointOfSale;
                var _purchaseDate = query.purchaseDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                decimal _totalDue = 0;
                var _listServices = new List<SelectListItem>();//value = service, text = amount in usd
                var _folio = query.purchaseID.ToString().Split('-')[0].Substring(0, 6);
                var _rate = GetSpecificRate(query.purchaseDateTime, "1", query.terminalID, query.pointOfSaleID);

                decimal opcPayments = 0;
                decimal opcRefunds = 0;
                decimal companyPayments = 0;
                decimal companyRefunds = 0;
                decimal clientPayments = 0;
                decimal clientRefunds = 0;
                decimal cxcCompanyPayments = 0;
                decimal cxcCompanyRefunds = 0;
                decimal advancePayments = 0;
                decimal advanceRefunds = 0;

                decimal opcPaymentsCharged = 0;
                decimal opcRefundsCharged = 0;
                decimal companyPaymentsCharged = 0;
                decimal companyRefundsCharged = 0;
                decimal clientPaymentsCharged = 0;
                decimal clientRefundsCharged = 0;
                decimal cxcCompanyPaymentsCharged = 0;
                decimal cxcCompanyRefundsCharged = 0;
                decimal advancePaymentsCharged = 0;
                decimal advanceRefundsCharged = 0;

                decimal _totalOpcCharge = 0;
                decimal _totalCompanyCharge = 0;
                decimal _amountPaidByCustomer = 0;
                decimal _amountPaidByCXCCompany = 0;

                #region "get concepts/services and their total in USD"
                foreach (var i in services)
                {
                    var _amount = Math.Round(((i.total * GetSpecificRate(query.purchaseDateTime, i.currencyID.ToString(), query.terminalID, query.pointOfSaleID)) / GetSpecificRate(query.purchaseDateTime, "1", query.terminalID, query.pointOfSaleID)), 2, MidpointRounding.AwayFromZero);
                    _totalDue += _amount;
                    var _units = "";
                    foreach (var a in i.tblPurchaseServiceDetails)
                    {
                        var _priceUnit = PriceDataModel.GetUnit((a.netPriceID != null ? (long)a.netPriceID : (long)a.priceID), i.tblPurchases.culture);
                        _units += (_units != "" ? "," : "") + a.quantity + " " + _priceUnit.unit + (_priceUnit.min != null ? " " + _priceUnit.min + "-" + _priceUnit.max : "");
                    }
                    _listServices.Add(new SelectListItem()
                    {
                        Value = (i.tblPurchaseServiceDetails.FirstOrDefault().coupon != null ? i.tblPurchaseServiceDetails.FirstOrDefault().coupon.Split('-')[0] : "No Folio") + "|" + _units + "|" + i.tblServices.service + "|" + i.tblPurchaseServiceStatus.purchaseServiceStatus + (i.soldByOPC != null && (bool)i.soldByOPC ? "|" + "&#10004;" : ""),
                        Text = _amount.ToString()
                    });
                }
                #endregion

                #region "get amounts of charges to opc, company and client"
                foreach (var i in query.tblPaymentDetails.Where(m => (m.deleted == null || !(bool)m.deleted)))
                {
                    var transactionRate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), query.terminalID, query.pointOfSaleID);
                    var baseRate = GetSpecificRate(i.dateSaved, "1", query.terminalID, query.pointOfSaleID);
                    if (i.paymentType == 3)
                    {
                        if (i.tblEgressConcepts.egressConcept.IndexOf("OPC") != -1)
                        {
                            //charge back
                            if (i.budgetID == null)
                            {
                                //charge to opc
                                if (i.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        opcPaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //payment
                                        opcPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        opcRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //refund
                                        opcRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                            else
                            {
                                //charge to company
                                if (i.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        companyPaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //payment
                                        companyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        companyRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //refund
                                        companyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                        }
                        else if (i.tblEgressConcepts.egressConcept.IndexOf("Company") != -1)
                        {
                            //charge to cxc company
                            if (i.tblMoneyTransactions.transactionTypeID == 1)
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    cxcCompanyPaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    //payment
                                    cxcCompanyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                            else
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    cxcCompanyRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    //refund
                                    cxcCompanyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                        }
                        else
                        {
                            //charge in advance
                            if (i.tblMoneyTransactions.transactionTypeID == 1)
                            {
                                //payment
                                if ((int)i.paymentType == 2 && (i.applyCommission != null && (bool)i.applyCommission))
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == i.ccType || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                        //clientPaymentsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advancePaymentsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == i.ccType || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                        //clientPayments += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advancePayments += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        //clientPaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advancePaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //clientPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advancePayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                            else
                            {
                                //refund
                                if ((int)i.paymentType == 2 && (i.applyCommission != null && (bool)i.applyCommission))
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                        //clientRefundsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advanceRefundsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                        //clientRefunds += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advanceRefunds += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        //clientRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advanceRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //clientRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        advanceRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //charge to client
                        if (i.tblMoneyTransactions.transactionTypeID == 1)
                        {
                            //payment
                            if ((int)i.paymentType == 2 && (i.applyCommission != null && (bool)i.applyCommission))
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                    clientPaymentsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                    clientPayments += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                            else
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    clientPaymentsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    clientPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                        }
                        else
                        {
                            //refund
                            if ((int)i.paymentType == 2 && (i.applyCommission != null && (bool)i.applyCommission))
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                    clientRefundsCharged += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    var commission = db.tblBankCommissions.Where(m => m.terminalID == i.tblPurchases.terminalID && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved) && (m.cardTypeID == m.cardTypeID || m.cardTypeID == null)).FirstOrDefault().commissionPercentage;
                                    clientRefunds += Math.Round((((i.amount / ((commission / 100) + 1)) * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                            else
                            {
                                if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                {
                                    clientRefundsCharged += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                                else
                                {
                                    clientRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                }
                            }
                        }
                    }
                }
                //_amountPaidByCustomer = (clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds);
                _amountPaidByCustomer = (clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds) + (advancePaymentsCharged - advanceRefundsCharged) + (advancePayments - advanceRefunds);
                _amountPaidByCXCCompany = (cxcCompanyPaymentsCharged - cxcCompanyRefundsCharged) + (cxcCompanyPayments - cxcCompanyRefunds);
                _totalOpcCharge = (opcPaymentsCharged - opcRefundsCharged) + (opcPayments - opcRefunds);
                _totalCompanyCharge = (companyPaymentsCharged - companyRefundsCharged) + (companyPayments - companyRefunds);
                #endregion

                var _counter = 1;

                #region "opc separated transactions"
                foreach (var opc in opcSeparatedTransactions)
                {
                    decimal _opcPayments = 0;
                    decimal _opcRefunds = 0;
                    decimal _chargedOpcPayments = 0;
                    decimal _chargedOpcRefunds = 0;
                    var _opcNotes = "";
                    var _programOpc = opc.FirstOrDefault().promotionTeamID != null ? opc.FirstOrDefault().tblPromotionTeams.promotionTeam : "&nbsp;";
                    var _budgetLetter = companyTransactions.Count() > 0 ? companyTransactions.FirstOrDefault().budgetID != null ? companyTransactions.FirstOrDefault().tblBudgets.leadCode : "&nbsp;" : "&nbsp;";

                    #region "get comments"
                    foreach (var i in opc)
                    {
                        if (i.paymentComments != null && i.paymentComments != "")
                        {
                            _opcNotes += (_opcNotes != "" ? ". " : "") + i.paymentComments;
                        }
                    }
                    #endregion

                    #region "get amounts of charges to opc"
                    foreach (var i in opc)
                    {
                        var transactionRate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), query.terminalID, query.pointOfSaleID);
                        var baseRate = GetSpecificRate(i.dateSaved, "1", query.terminalID, query.pointOfSaleID);
                        if (i.paymentType == 3)
                        {
                            if (i.tblEgressConcepts.egressConcept.IndexOf("OPC") != -1)
                            {
                                //charge back
                                if (i.budgetID == null)
                                {
                                    //charge to opc
                                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                                    {
                                        if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                        {
                                            _chargedOpcPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else
                                        {
                                            //payment
                                            _opcPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                    else
                                    {
                                        if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                        {
                                            _chargedOpcRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else
                                        {
                                            //refund
                                            _opcRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                }
                            }
                        }

                    }
                    #endregion

                    if ((_opcPayments - _opcRefunds) > 0)
                    {
                        list.Add(new PurchasesModel.ChargebackTicketModel()
                        {
                            Folio = _folio + "-" + Convert.ToChar(64 + _counter),
                            PersonToCharge = opc.FirstOrDefault().other != null ? opc.FirstOrDefault().other : opc.FirstOrDefault().tblOPCS.opc,
                            Invitation = opc.FirstOrDefault().invitation,
                            Signature = "",
                            PayingCompany = opc.FirstOrDefault().tblOPCS != null ? opc.FirstOrDefault().tblOPCS.payingCompanyIDX != null ? opc.FirstOrDefault().tblOPCS.tblCompanies1.shortName : "&nbsp;" : "&nbsp;",
                            ClientName = query.tblLeads.firstName + " " + query.tblLeads.lastName,
                            ProgramOPC = _programOpc,
                            BudgetLetter = _budgetLetter,
                            Notes = _opcNotes,
                            TotalDue = _totalDue.ToString(),
                            //AmountPaidByCustomer = ((clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds) + (opcPaymentsCharged - opcRefundsCharged) + (companyPaymentsCharged - companyRefundsCharged) + (cxcCompanyPaymentsCharged - cxcCompanyRefundsCharged)).ToString(),
                            AmountPaidByCustomer = ((clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds) + (advancePaymentsCharged - advanceRefundsCharged) + (advancePayments - advanceRefunds) + (opcPaymentsCharged - opcRefundsCharged) + (companyPaymentsCharged - companyRefundsCharged) + (cxcCompanyPaymentsCharged - cxcCompanyRefundsCharged)).ToString(),
                            TotalDue2 = ((_opcPayments - _opcRefunds) + (companyPayments - companyRefunds) + (cxcCompanyPayments - cxcCompanyRefunds)).ToString(),
                            BudgetAmount = ((companyPayments - companyRefunds) + (cxcCompanyPayments - cxcCompanyRefunds)).ToString(),
                            //SalesAgent = opc.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + opc.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                            SalesAgent = salesAgent,
                            ExchangeRateUsed = _rate.ToString(),
                            TotalUSD = (_opcPayments - _opcRefunds).ToString(),
                            TotalMXN = Math.Round(((_opcPayments - _opcRefunds) * _rate), 2, MidpointRounding.AwayFromZero).ToString(),
                            PointOfSale = _pointOfSale,
                            Date = _purchaseDate,
                            Services = _listServices,
                            Container = "tblOpcChargeBack"
                        });
                    }
                    opcTransactions.Single(m => m.paymentDetailsID == opc.FirstOrDefault().paymentDetailsID).chargeBackFolio = _folio + "-" + Convert.ToChar(64 + _counter);
                    _counter++;
                }
                #endregion

                #region "company separated transactions"
                foreach (var company in companySeparatedTransactions)
                {
                    decimal _companyPayments = 0;
                    decimal _companyRefunds = 0;
                    decimal _cxcCompanyPayments = 0;
                    decimal _cxcCompanyRefunds = 0;
                    decimal _chargedCXCCompanyPayments = 0;
                    decimal _chargedCXCCompanyRefunds = 0;
                    decimal _chargedCompanyPayments = 0;
                    decimal _chargedCompanyRefunds = 0;
                    var _companyNotes = "";

                    #region "get company comments"
                    foreach (var i in company)
                    {
                        if (i.paymentComments != null && i.paymentComments != "")
                        {
                            _companyNotes += (_companyNotes != "" ? ". " : "") + i.paymentComments;
                        }
                    }
                    #endregion

                    #region "get amnount of charges to company"
                    foreach (var i in company)
                    {
                        var transactionRate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), query.terminalID, query.pointOfSaleID);
                        var baseRate = GetSpecificRate(i.dateSaved, "1", query.terminalID, query.pointOfSaleID);
                        if (i.paymentType == 3)
                        {
                            if (i.tblEgressConcepts.egressConcept.IndexOf("Company") != -1)
                            {
                                //charge to company
                                if (i.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        _chargedCXCCompanyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //payment
                                        _cxcCompanyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                    {
                                        _chargedCXCCompanyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        //refund
                                        _cxcCompanyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                    }
                                }
                            }
                            else
                            {
                                if (i.budgetID != null)
                                {
                                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                                    {
                                        if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                        {
                                            _chargedCompanyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else
                                        {
                                            //payment
                                            _companyPayments += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                    else
                                    {
                                        if (i.dateSaved < fromDate || i.dateSaved > toDate)
                                        {
                                            _chargedCompanyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else
                                        {
                                            //refund
                                            _companyRefunds += Math.Round(((i.amount * transactionRate) / baseRate), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    if (((_companyPayments - _companyRefunds) + (_cxcCompanyPayments - _cxcCompanyRefunds)) > 0)
                    {
                        list.Add(new PurchasesModel.ChargebackTicketModel()
                        {
                            Folio = _folio + "-" + Convert.ToChar(64 + _counter),
                            Invitation = company.FirstOrDefault().invitation,
                            PersonToCharge = company.FirstOrDefault().tblCompanies.company,
                            Signature = "",
                            //PayingCompany = company.FirstOrDefault().tblCompanies.shortName,
                            PayingCompany = company.FirstOrDefault().opcID != null ? company.FirstOrDefault().tblOPCS.opc : company.FirstOrDefault().tblCompanies.shortName,
                            ClientName = query.tblLeads.firstName + " " + query.tblLeads.lastName,
                            //ProgramOPC = "",
                            ProgramOPC = company.FirstOrDefault().opcID != null ? company.FirstOrDefault().tblPromotionTeams.promotionTeam : "",
                            //BudgetLetter = "",
                            BudgetLetter = company.FirstOrDefault().budgetID != null ? company.FirstOrDefault().tblBudgets.leadCode : "",
                            Notes = _companyNotes,
                            TotalDue = _totalDue.ToString(),

                            //AmountPaidByCustomer = ((clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds) + (opcPaymentsCharged - opcRefundsCharged) + (companyPaymentsCharged - companyRefundsCharged) + (cxcCompanyPaymentsCharged - cxcCompanyRefundsCharged)).ToString(),
                            AmountPaidByCustomer = ((clientPaymentsCharged - clientRefundsCharged) + (clientPayments - clientRefunds) + (advancePaymentsCharged - advanceRefundsCharged) + (advancePayments - advanceRefunds) + (opcPaymentsCharged - opcRefundsCharged) + (companyPaymentsCharged - companyRefundsCharged) + (cxcCompanyPaymentsCharged - cxcCompanyRefundsCharged)).ToString(),
                            TotalDue2 = ((opcPayments - opcRefunds) + (companyPayments - companyRefunds) + (cxcCompanyPayments - cxcCompanyRefunds)).ToString(),
                            BudgetAmount = ((opcPayments - opcRefunds) + ((companyPayments - companyRefunds) - (_companyPayments - _companyRefunds)) + ((cxcCompanyPayments - cxcCompanyRefunds) - (_cxcCompanyPayments - _cxcCompanyRefunds))).ToString(),
                            TotalUSD = ((_companyPayments - _companyRefunds) + (_cxcCompanyPayments - _cxcCompanyRefunds)).ToString(),
                            TotalMXN = Math.Round((((_companyPayments - _companyRefunds) + (_cxcCompanyPayments - _cxcCompanyRefunds)) * _rate), 2, MidpointRounding.AwayFromZero).ToString(),
                            SalesAgent = company.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + company.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                            ExchangeRateUsed = _rate.ToString(),
                            PointOfSale = _pointOfSale,
                            Date = _purchaseDate,
                            Services = _listServices,
                            Container = "tblCompanyChargeBack"
                        });
                    }
                    companyTransactions.Single(m => m.paymentDetailsID == company.FirstOrDefault().paymentDetailsID).chargeBackFolio = _folio + "-" + Convert.ToChar(64 + _counter);
                    _counter++;
                }
                #endregion
                db.SaveChanges();
                return list;
            }

            //public List<PurchasesModel.ChargebackTicketModel> Current_GetChargeVoucher(Guid purchaseID)
            //{
            //    ePlatEntities db = new ePlatEntities();
            //    List<PurchasesModel.ChargebackTicketModel> list = new List<PurchasesModel.ChargebackTicketModel>();
            //    List<SelectListItem> listServices = new List<SelectListItem>();
            //    List<SelectListItem> listEgresses = new List<SelectListItem>();

            //    var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
            //    var pointOfSale = purchase.tblPointsOfSale.pointOfSale;
            //    var folio = purchase.purchaseID.ToString().Split('-')[0].Substring(0, 6);
            //    var company = db.tblTerminals_Companies.Where(m => m.terminalID == purchase.terminalID && m.tblCompanies.companyTypeID == 1).FirstOrDefault().tblCompanies;
            //    var enterprise = company.company;
            //    var address = company.address + ", " + company.city + ", " + company.state + ", " + company.tblCountries.country + ", " + company.zipCode;
            //    var rfc = company.rfc;
            //    var payments = purchase.tblPaymentDetails.Where(m => m.deleted == null || !(bool)m.deleted);
            //    var services = purchase.tblPurchases_Services;
            //    var invitation = payments.Where(m => m.invitation != null).FirstOrDefault().invitation.Trim();
            //    var purchaseRate = GetSpecificRate(purchase.purchaseDateTime, "1", purchase.terminalID, purchase.pointOfSaleID);
            //    var clientName = purchase.tblLeads.firstName + " " + purchase.tblLeads.lastName;
            //    var salesAgent = purchase.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + purchase.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName;
            //    //var iDate = purchase.purchaseDateTime.AddDays(-2);
            //    //var fDate = purchase.purchaseDateTime.AddDays(2);
            //    var iDate = purchase.purchaseDateTime.Date;
            //    var fDate = purchase.purchaseDateTime.AddDays(1).AddSeconds(-1);
            //    //var transactionsByOPC = payments.Where(m => m.paymentType == 3 && m.tblEgressConcepts.egressConcept.IndexOf("OPC") != -1 && m.budgetID == null).GroupBy(m => m.opcID);

            //    var transactionsByOPC = payments.Where(m => m.paymentType == 3 && m.budgetID == null).GroupBy(m => m.opcID);
            //    var transactionsWithBudget = payments.Where(m => m.budgetID != null);
            //    var transactionsInCash = payments.Where(m => (m.paymentType != 3 && m.paymentType != 2) || (m.paymentType == 3 && m.tblEgressConcepts.egressConcept.IndexOf("Cash") != -1));//cash & cash in advance
            //    var transactionsInCC = payments.Where(m => m.paymentType == 2 || (m.paymentType == 3 && m.tblEgressConcepts.egressConcept.IndexOf("Credit Card") != -1));//CC & CC in Advance
            //    var transactionsTimeshare = db.tblEgresses.Where(m => m.invitationNumber == invitation && m.amount != 0 && m.terminalID == purchase.terminalID && m.pointOfSaleID == purchase.pointOfSaleID && (m.dateSaved >= iDate && m.dateSaved <= fDate));

            //    decimal totalDueUSD = 0;
            //    decimal cashPayments = 0;
            //    decimal cashRefunds = 0;
            //    decimal cashPaymentsAdvance = 0;
            //    decimal cashRefundsAdvance = 0;
            //    decimal ccPayments = 0;
            //    decimal ccRefunds = 0;
            //    decimal ccPaymentsAdvance = 0;
            //    decimal ccRefundsAdvance = 0;
            //    var counter = 1;
            //    #region "get services of purchase"
            //    foreach (var i in services)
            //    {
            //        var _rate = GetSpecificRate(purchase.purchaseDateTime, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
            //        var _amount = Math.Round(((i.total * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //        var _folio = i.tblPurchaseServiceDetails.FirstOrDefault().coupon;

            //        totalDueUSD += _amount;
            //        var _units = "";
            //        foreach (var a in i.tblPurchaseServiceDetails)
            //        {
            //            var _priceUnit = PriceDataModel.GetUnit((a.netPriceID != null ? (long)a.netPriceID : (long)a.priceID), purchase.culture);
            //            _units += (_units != "" ? "," : "") + a.quantity + " " + _priceUnit.unit + (_priceUnit.min != null ? " " + _priceUnit.min + "-" + _priceUnit.max : "");
            //        }
            //        listServices.Add(new SelectListItem()
            //        {
            //            Value = (_folio != null ? _folio.Split('-')[0] : "No Folio") + "|" + _units + "|" + i.tblServices.service + "|" + i.tblPurchaseServiceStatus.purchaseServiceStatus,
            //            Text = _amount.ToString()
            //        });
            //    }
            //    #endregion

            //    #region "get transaction amounts in cash"
            //    foreach (var i in transactionsInCash)
            //    {
            //        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
            //        if (i.tblMoneyTransactions.transactionTypeID == 1)
            //        {
            //            //payment
            //            if (i.paymentType == 1)
            //            {
            //                cashPayments += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //            else
            //            {
            //                //advance
            //                cashPaymentsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //        }
            //        else
            //        {
            //            //refund
            //            if (i.paymentType == 1)
            //            {
            //                cashRefunds += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //            else
            //            {
            //                cashRefundsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //        }
            //    }
            //    #endregion

            //    #region "get transaction amounts in cc"
            //    foreach (var i in transactionsInCC)
            //    {
            //        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
            //        if (i.tblMoneyTransactions.transactionTypeID == 1)
            //        {
            //            //payment
            //            if ((int)i.paymentType == 2)
            //            {
            //                var _commission = i.applyCommission != null && (bool)i.applyCommission ? db.tblBankCommissions.Where(m => m.terminalID == purchase.terminalID && (m.cardTypeID == i.ccType || m.cardTypeID == null) && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved)).FirstOrDefault().commissionPercentage : 0;
            //                ccPayments += Math.Round((((i.amount / ((_commission / 100) + 1)) * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //            else
            //            {
            //                //in advance
            //                ccPaymentsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //        }
            //        else
            //        {
            //            //refund
            //            if ((int)i.paymentType == 2)
            //            {
            //                var _commission = i.applyCommission != null && (bool)i.applyCommission ? db.tblBankCommissions.Where(m => m.terminalID == purchase.terminalID && (m.cardTypeID == i.ccType || m.cardTypeID == null) && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved)).FirstOrDefault().commissionPercentage : 0;
            //                ccRefunds += Math.Round((((i.amount / ((_commission / 100) + 1)) * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //            else
            //            {
            //                //in advance
            //                ccRefundsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //            }
            //        }
            //    }
            //    #endregion

            //    #region "get transaction amounts by opc"
            //    foreach (var opc in transactionsByOPC)
            //    {
            //        decimal _payments = 0;
            //        decimal _refunds = 0;
            //        var _cashGift = new List<SelectListItem>();
            //        var _cashCommission = new List<SelectListItem>();
            //        var _cashActivity = new List<SelectListItem>();
            //        decimal _cashGiftUSD = 0;
            //        decimal _commissionGiftUSD = 0;
            //        decimal _cashActivityUSD = 0;
            //        decimal _cashGiftMXN = 0;
            //        decimal _commissionGiftMXN = 0;
            //        decimal _cashActivityMXN = 0;
            //        decimal _totalToCharge = 0;
            //        var _notes = "";
            //        var _program = opc.FirstOrDefault().promotionTeamID != null ? opc.FirstOrDefault().tblPromotionTeams.promotionTeam : "&nbsp;";
            //        var _budget = transactionsWithBudget.Count() > 0 ? transactionsWithBudget.FirstOrDefault().tblBudgets : null;
            //        #region "get info"
            //        //foreach (var i in opc)
            //        //{
            //        #region "notes"
            //        if (opc.FirstOrDefault().paymentComments != null && opc.FirstOrDefault().paymentComments != "")
            //        {
            //            _notes += (_notes != "" ? ". " : "") + opc.FirstOrDefault().paymentComments;
            //        }
            //        #endregion

            //        #region "transactions"
            //        var _transactionRate = GetSpecificRate(opc.FirstOrDefault().dateSaved, opc.FirstOrDefault().currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
            //        if (opc.FirstOrDefault().tblMoneyTransactions.transactionTypeID == 1)
            //        {
            //            //payment
            //            _payments += Math.Round(((opc.FirstOrDefault().amount * _transactionRate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //        }
            //        else
            //        {
            //            //refund
            //            _refunds += Math.Round(((opc.FirstOrDefault().amount * _transactionRate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
            //        }
            //        #endregion

            //        #region "get egresses related by invitation"
            //        var currentOpc = opc.FirstOrDefault().opcID;
            //        foreach (var a in transactionsTimeshare.Where(m => m.opcID == currentOpc))
            //        {
            //            var _rate = GetSpecificRate(a.dateSaved, a.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
            //            if (a.tblEgressConcepts.egressConcept.IndexOf("Cash Gift") != -1)
            //            {
            //                _cashGift.Add(new SelectListItem()
            //                {
            //                    Value = a.amount.ToString(),
            //                    Text = a.tblCurrencies.currencyCode
            //                });
            //                _cashCommission.Add(new SelectListItem()
            //                {
            //                    Value = Math.Round((a.amount * ((decimal)a.adminFee / 100)), 2, MidpointRounding.AwayFromZero).ToString(),
            //                    Text = a.tblCurrencies.currencyCode
            //                });
            //            }
            //            else if (a.tblEgressConcepts.egressConcept.IndexOf("Cash Activity") != -1)
            //            {
            //                _cashActivity.Add(new SelectListItem()
            //                {
            //                    Value = a.amount.ToString(),
            //                    Text = a.tblCurrencies.currencyCode
            //                });
            //            }
            //            else
            //            {
            //                listEgresses.Add(new SelectListItem()
            //                {
            //                    Value = a.tblEgressConcepts.egressConcept,
            //                    Text = a.amount.ToString() + " " + a.tblCurrencies.currencyCode
            //                });
            //            }
            //        }

            //        #endregion
            //        //}
            //        #endregion

            //        _totalToCharge = (totalDueUSD - ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)) - ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)));
            //        _cashGiftUSD = _cashGift.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
            //        _commissionGiftUSD = _cashCommission.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
            //        _cashActivityUSD = _cashActivity.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
            //        _cashGiftMXN = _cashGift.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
            //        _commissionGiftMXN = _cashCommission.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
            //        _cashActivityMXN = _cashActivity.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
            //        list.Add(new PurchasesModel.ChargebackTicketModel()
            //        {
            //            Folio = folio + "-" + Convert.ToChar(64 + counter),
            //            PersonToCharge = opc.FirstOrDefault().other ?? opc.FirstOrDefault().tblOPCS.opc,
            //            PayingCompany = opc.FirstOrDefault().tblOPCS != null ? opc.FirstOrDefault().tblOPCS.payingCompanyIDX != null ? opc.FirstOrDefault().tblOPCS.tblCompanies1.shortName : "&nbsp;" : "&nbsp;",
            //            ClientName = clientName,
            //            ProgramOPC = _program,
            //            BudgetLetter = _budget != null ? _budget.leadCode : "&nbsp;",
            //            Notes = _notes,
            //            TotalDue = totalDueUSD.ToString(),//purchase total usd
            //            DepositAppliedToTours = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
            //            AmountPaidByCustomer = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
            //            TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
            //            BudgetAmount = opc.FirstOrDefault().budgetID != null ? opc.FirstOrDefault().amount.ToString() : "",
            //            SalesAgent = salesAgent,
            //            ExchangeRateUsed = purchaseRate.ToString(),
            //            TotalUSD = _totalToCharge.ToString(),
            //            PointOfSale = pointOfSale,
            //            Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
            //            Services = listServices,
            //            Egresses = listEgresses,
            //            CashGiftUSD = _cashGiftUSD.ToString(),
            //            CommissionCashGiftUSD = _commissionGiftUSD.ToString(),
            //            CashActivityUSD = _cashActivityUSD.ToString(),
            //            CashGiftMXN = _cashGiftMXN.ToString(),
            //            CommissionCashGiftMXN = _commissionGiftMXN.ToString(),
            //            CashActivityMXN = _cashActivityMXN.ToString(),
            //            TotalToChargeBackInUSD = (_totalToCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD).ToString(),
            //            TotalToChargeBackInMXN = (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN).ToString(),
            //            TotalToChargeMXN = (Math.Round(((_totalToCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD) * purchaseRate), 2, MidpointRounding.AwayFromZero) + (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN)).ToString(),
            //            Enterprise = enterprise,
            //            Address = address,
            //            RFC = rfc
            //        });
            //        counter++;
            //    }
            //    #endregion
            //    return list;
            //}

            public List<PurchasesModel.ChargebackTicketModel> GetChargeVoucher(Guid purchaseID)
            {
                ePlatEntities db = new ePlatEntities();
                List<PurchasesModel.ChargebackTicketModel> list = new List<PurchasesModel.ChargebackTicketModel>();
                List<SelectListItem> listServices = new List<SelectListItem>();
                List<SelectListItem> listEgresses = new List<SelectListItem>();

                var purchase = db.tblPurchases.Single(m => m.purchaseID == purchaseID);
                var pointOfSale = purchase.tblPointsOfSale.pointOfSale;
                var folio = purchase.purchaseID.ToString().Split('-')[0].Substring(0, 6);
                var company = db.tblTerminals_Companies.Where(m => m.terminalID == purchase.terminalID && m.tblCompanies.companyTypeID == 1).FirstOrDefault().tblCompanies;
                var enterprise = company.company;
                var address = company.address + ", " + company.city + ", " + company.state + ", " + company.tblCountries.country + ", " + company.zipCode;
                var rfc = company.rfc;
                var payments = purchase.tblPaymentDetails.Where(m => m.deleted == null || !(bool)m.deleted);
                var services = purchase.tblPurchases_Services;
                //var invitation = payments.Where(m => m.invitation != null).FirstOrDefault().invitation.Trim();
                var invitation = payments.Count(m => m.invitation != null) > 0 ? payments.Where(m => m.invitation != null).FirstOrDefault().invitation.Trim() : null;
                var purchaseRate = GetSpecificRate(purchase.purchaseDateTime, "1", purchase.terminalID, purchase.pointOfSaleID);
                var clientName = purchase.tblLeads.firstName + " " + purchase.tblLeads.lastName;
                var salesAgent = purchase.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName + " " + purchase.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName;

                var iDate = purchase.purchaseDateTime.Date;
                var fDate = purchase.purchaseDateTime.AddDays(2).AddSeconds(-1);
                var transactionsCHB = payments.Where(m => m.paymentType == 3);
                var transactionsByOPC = payments.Where(m => m.paymentType == 3 && m.budgetID == null).GroupBy(m => m.opcID);
                var transactionsWithBudget = payments.Where(m => m.budgetID != null);
                var transactionsInCash = payments.Where(m => (m.paymentType != 3 && m.paymentType != 2) || (m.paymentType == 3 && m.tblEgressConcepts.egressConcept.IndexOf("Cash") != -1));//cash & cash in advance
                var transactionsInCC = payments.Where(m => m.paymentType == 2 || (m.paymentType == 3 && m.tblEgressConcepts.egressConcept.IndexOf("Credit Card") != -1));//CC & CC in Advance
                var transactionsTimeshare = invitation != null ? db.tblEgresses.Where(m => m.invitationNumber == invitation && m.amount != 0 && m.terminalID == purchase.terminalID && m.pointOfSaleID == purchase.pointOfSaleID && (m.dateSaved >= iDate && m.dateSaved <= fDate)) : null;

                decimal totalDueUSD = 0;
                decimal cashPayments = 0;
                decimal cashRefunds = 0;
                decimal cashPaymentsAdvance = 0;
                decimal cashRefundsAdvance = 0;
                decimal ccPayments = 0;
                decimal ccRefunds = 0;
                decimal ccPaymentsAdvance = 0;
                decimal ccRefundsAdvance = 0;
                var counter = 1;
                #region "get services of purchase"
                foreach (var i in services)
                {
                    var _rate = GetSpecificRate(purchase.purchaseDateTime, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                    var _amount = Math.Round(((i.total * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                    var _folio = i.tblPurchaseServiceDetails.FirstOrDefault().coupon;

                    totalDueUSD += _amount;
                    var _units = "";
                    foreach (var a in i.tblPurchaseServiceDetails)
                    {
                        var _priceUnit = PriceDataModel.GetUnit((a.netPriceID != null ? (long)a.netPriceID : (long)a.priceID), purchase.culture);
                        _units += (_units != "" ? "," : "") + a.quantity + " " + _priceUnit.unit + (_priceUnit.min != null ? " " + _priceUnit.min + "-" + _priceUnit.max : "");
                    }
                    listServices.Add(new SelectListItem()
                    {
                        Value = (_folio != null ? _folio.Split('-')[0] : "No Folio") + "|" + _units + "|" + i.tblServices.service + "|" + i.tblPurchaseServiceStatus.purchaseServiceStatus,
                        Text = _amount.ToString()
                    });
                }
                #endregion

                #region "get transaction amounts in cash"
                foreach (var i in transactionsInCash)
                {
                    var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                    {
                        //payment
                        if (i.paymentType == 1)
                        {
                            cashPayments += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            //advance
                            cashPaymentsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    else
                    {
                        //refund
                        if (i.paymentType == 1)
                        {
                            cashRefunds += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            cashRefundsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                }
                #endregion

                #region "get transaction amounts in cc"
                foreach (var i in transactionsInCC)
                {
                    var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                    if (i.tblMoneyTransactions.transactionTypeID == 1)
                    {
                        //payment
                        if ((int)i.paymentType == 2)
                        {
                            var _commission = i.applyCommission != null && (bool)i.applyCommission ? db.tblBankCommissions.Where(m => m.terminalID == purchase.terminalID && (m.cardTypeID == i.ccType || m.cardTypeID == null) && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved)).FirstOrDefault().commissionPercentage : 0;
                            ccPayments += Math.Round((((i.amount / ((_commission / 100) + 1)) * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            //in advance
                            ccPaymentsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    else
                    {
                        //refund
                        if ((int)i.paymentType == 2)
                        {
                            var _commission = i.applyCommission != null && (bool)i.applyCommission ? db.tblBankCommissions.Where(m => m.terminalID == purchase.terminalID && (m.cardTypeID == i.ccType || m.cardTypeID == null) && (m.initialDate <= i.dateSaved && m.finalDate >= i.dateSaved)).FirstOrDefault().commissionPercentage : 0;
                            ccRefunds += Math.Round((((i.amount / ((_commission / 100) + 1)) * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            //in advance
                            ccRefundsAdvance += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                }
                #endregion

                #region "get chargebacks transaction amounts"                
                var byCompany = transactionsCHB.Where(m => m.tblEgressConcepts.egressConcept.IndexOf("Company") != -1).GroupBy(m => m.chargedToCompanyID);
                var byOpc = transactionsCHB.Where(m => m.tblEgressConcepts.egressConcept.IndexOf("OPC") != -1).GroupBy(m => m.opcID);
                var byAdvance = transactionsCHB.Where(m => m.tblEgressConcepts.egressConcept.IndexOf("Advance") != -1).GroupBy(m => m.opcID);

                foreach (var item in byCompany)
                {
                    decimal _payments = 0;
                    decimal _refunds = 0;
                    var _cashGift = new List<SelectListItem>();
                    var _cashCommission = new List<SelectListItem>();
                    var _cashActivity = new List<SelectListItem>();
                    decimal _cashGiftUSD = 0;
                    decimal _commissionGiftUSD = 0;
                    decimal _cashActivityUSD = 0;
                    decimal _cashGiftMXN = 0;
                    decimal _commissionGiftMXN = 0;
                    decimal _cashActivityMXN = 0;
                    decimal budgetUSD = 0;
                    decimal _totalToCharge = 0;
                    var _notes = string.Join(".<br />", item.Where(m => m.paymentComments != null && m.paymentComments != "").Select(m => m.paymentComments));
                    var _program = "--No Applies--";

                    foreach (var i in item)
                    {
                        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                        if (i.tblMoneyTransactions.transactionTypeID == 1)
                        {
                            _payments += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            _refunds += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    _totalToCharge = _payments - _refunds;//test
                    
                    list.Add(new PurchasesModel.ChargebackTicketModel()
                    {
                        Folio = folio + "-" + Convert.ToChar(64 + counter),
                        PersonToCharge = item.FirstOrDefault().tblCompanies.company,
                        PayingCompany = item.FirstOrDefault().tblCompanies.company,
                        ClientName = clientName,
                        ProgramOPC = _program,
                        BudgetLetter = "&nbsp;",
                        BudgetAmount = "&nbsp;",
                        Notes = _notes,
                        TotalDue = totalDueUSD.ToString(),
                        TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                        //DepositAppliedToTours = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                        //AmountPaidByCustomer = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                        AmountPaidByCustomer = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                        DepositAppliedToTours = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                        SalesAgent = salesAgent,
                        ExchangeRateUsed = purchaseRate.ToString(),
                        TotalUSD = _totalToCharge.ToString(),
                        PointOfSale = pointOfSale,
                        Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
                        Services = listServices,
                        Egresses = listEgresses,
                        CashGiftUSD = "0.00",
                        CommissionCashGiftUSD = "0.00",
                        CashActivityUSD = "0.00",
                        CashGiftMXN = "0.00",
                        CommissionCashGiftMXN = "0.00",
                        CashActivityMXN = "0.00",
                        TotalToChargeBackInUSD = _totalToCharge.ToString(),
                        TotalToChargeBackInMXN = Math.Round((_totalToCharge * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                        TotalToChargeMXN = Math.Round((_totalToCharge * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                        Enterprise = enterprise,
                        Address = address,
                        RFC = rfc
                    });
                    counter++;

                    if (byOpc.Count() == 0)
                    {
                        if (transactionsTimeshare != null)
                        {
                            var _byOpc = transactionsTimeshare.Where(m => m.opcID != null).GroupBy(m => m.opcID);
                            //**********
                            foreach (var opc in _byOpc)
                            {
                                _payments = 0;
                                _refunds = 0;
                                _cashGift = new List<SelectListItem>();
                                _cashCommission = new List<SelectListItem>();
                                _cashActivity = new List<SelectListItem>();
                                _cashGiftUSD = 0;
                                _commissionGiftUSD = 0;
                                _cashActivityUSD = 0;
                                _cashGiftMXN = 0;
                                _commissionGiftMXN = 0;
                                _cashActivityMXN = 0;
                                budgetUSD = 0;
                                _totalToCharge = 0;
                                decimal _timeshareCharge = 0;
                                decimal _cashGiftNoBudget = 0;
                                var wBudget = opc.Where(m => m.budgetID != null);
                                var woBudget = opc.Where(m => m.budgetID == null);

                                foreach (var i in woBudget)
                                {
                                    var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                                    _totalToCharge += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                                }

                                foreach (var i in wBudget)
                                {
                                    var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                                    budgetUSD += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                                }

                                foreach (var i in opc)
                                {
                                    var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                                    var _usdAmount = (i.amount * _rate) / purchaseRate;
                                    if (i.budgetID != null)
                                    {
                                        budgetUSD += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                    }
                                    else
                                    {
                                        _timeshareCharge += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                    }

                                    if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Gift") != -1)
                                    {
                                        _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                        _cashGiftNoBudget += i.budgetID == null ? Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero) : 0;
                                        _cashGift.Add(new SelectListItem()
                                        {
                                            Value = i.amount.ToString(),
                                            Text = i.tblCurrencies.currencyCode
                                        });
                                        _cashCommission.Add(new SelectListItem()
                                        {
                                            Value = Math.Round((i.amount * ((decimal)i.adminFee / 100)), 2, MidpointRounding.AwayFromZero).ToString(),
                                            Text = i.tblCurrencies.currencyCode
                                        });
                                    }
                                    else if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Activity") != -1)
                                    {
                                        _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                        _cashActivity.Add(new SelectListItem()
                                        {
                                            Value = i.amount.ToString(),
                                            Text = i.tblCurrencies.currencyCode
                                        });
                                    }
                                    else
                                    {
                                        //_totalToCharge += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                        _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                        listEgresses.Add(new SelectListItem()
                                        {
                                            Value = i.tblEgressConcepts.egressConcept,
                                            Text = i.amount.ToString() + " " + i.tblCurrencies.currencyCode
                                        });
                                    }
                                }

                                _cashGiftUSD = _cashGift.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                                _commissionGiftUSD = _cashCommission.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                                _cashActivityUSD = _cashActivity.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                                _cashGiftMXN = _cashGift.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                                _commissionGiftMXN = _cashCommission.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                                _cashActivityMXN = _cashActivity.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));

                                list.Add(new PurchasesModel.ChargebackTicketModel()
                                {
                                    Folio = folio + "-" + Convert.ToChar(64 + counter),
                                    PersonToCharge = item.FirstOrDefault().tblCompanies.company,
                                    PayingCompany = item.FirstOrDefault().tblCompanies.company,
                                    ClientName = clientName,
                                    ProgramOPC = _program,
                                    BudgetLetter = budgetUSD != 0 ? opc.FirstOrDefault().tblBudgets.leadCode : "&nbsp;",
                                    BudgetAmount = budgetUSD != 0 ? budgetUSD.ToString() : "&nbsp;",
                                    Notes = _notes,
                                    //TotalDue = totalDueUSD.ToString(),
                                    //TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                                    TotalDue = "0.00",
                                    TotalDue2 = "0.00",
                                    AmountPaidByCustomer = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                                    DepositAppliedToTours = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                                    SalesAgent = salesAgent,
                                    ExchangeRateUsed = purchaseRate.ToString(),
                                    //TotalUSD = _totalToCharge.ToString(),
                                    TotalUSD = "0.00",
                                    PointOfSale = pointOfSale,
                                    Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
                                    Services = listServices,
                                    Egresses = listEgresses,
                                    CashGiftUSD = _cashGiftUSD.ToString(),
                                    CommissionCashGiftUSD = _commissionGiftUSD.ToString(),
                                    CashActivityUSD = _cashActivityUSD.ToString(),
                                    CashGiftMXN = _cashGiftMXN.ToString(),
                                    CommissionCashGiftMXN = _commissionGiftMXN.ToString(),
                                    CashActivityMXN = _cashActivityMXN.ToString(),
                                    TotalToChargeBackInUSD = Math.Round((_timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD), 2, MidpointRounding.AwayFromZero).ToString(),
                                    TotalToChargeBackInMXN = Math.Round((_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN), 2, MidpointRounding.AwayFromZero).ToString(),
                                    TotalToChargeMXN = (Math.Round(((_timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD) * purchaseRate), 2, MidpointRounding.AwayFromZero) + (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN)).ToString(),
                                    Enterprise = enterprise,
                                    Address = address,
                                    RFC = rfc
                                });
                                counter++;
                            }
                        }
                        //**********
                        #region
                        //foreach (var opc in _byOpc)
                        //{
                        //    _cashGift = new List<SelectListItem>();
                        //    _cashCommission = new List<SelectListItem>();
                        //    _cashActivity = new List<SelectListItem>();
                        //    _cashGiftUSD = 0;
                        //    _commissionGiftUSD = 0;
                        //    _cashActivityUSD = 0;
                        //    _cashGiftMXN = 0;
                        //    _commissionGiftMXN = 0;
                        //    _cashActivityMXN = 0;
                        //    budgetUSD = 0;
                        //    decimal _timeshareCharge = 0;
                        //    decimal _cashGiftNoBudget = 0;


                        //    foreach (var i in opc)
                        //    {
                        //        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, i.pointOfSaleID);

                        //        budgetUSD += i.budgetID != null ? Math.Round((i.amount * _rate) / purchaseRate, 2, MidpointRounding.AwayFromZero) : 0;

                        //        if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Gift") != -1)
                        //        {
                        //            _cashGift.Add(new SelectListItem()
                        //            {
                        //                Value = i.amount.ToString(),
                        //                Text = i.tblCurrencies.currencyCode
                        //            });
                        //            _cashCommission.Add(new SelectListItem()
                        //            {
                        //                Value = Math.Round((i.amount * ((decimal)i.adminFee / 100)), 2, MidpointRounding.AwayFromZero).ToString(),
                        //                Text = i.tblCurrencies.currencyCode
                        //            });
                        //        }
                        //        else if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Activity") != -1)
                        //        {
                        //            _cashActivity.Add(new SelectListItem()
                        //            {
                        //                Value = i.amount.ToString(),
                        //                Text = i.tblCurrencies.currencyCode
                        //            });
                        //        }
                        //        else
                        //        {
                        //            listEgresses.Add(new SelectListItem()
                        //            {
                        //                Value = i.tblEgressConcepts.egressConcept,
                        //                Text = i.amount.ToString() + " " + i.tblCurrencies.currencyCode
                        //            });
                        //        }
                        //    }


                        //    list.Add(new PurchasesModel.ChargebackTicketModel()
                        //    {
                        //        Folio = folio + "-" + Convert.ToChar(64 + counter),
                        //        PersonToCharge = item.FirstOrDefault().tblCompanies.company,
                        //        PayingCompany = item.FirstOrDefault().tblCompanies.company,
                        //        ClientName = clientName,
                        //        ProgramOPC = _program,
                        //        BudgetLetter = budgetUSD != 0 ? opc.FirstOrDefault().tblBudgets.leadCode : "&nbsp;",
                        //        BudgetAmount = budgetUSD != 0 ? budgetUSD.ToString() : "&nbsp;",
                        //        Notes = _notes,
                        //        TotalDue = totalDueUSD.ToString(),
                        //        TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                        //        AmountPaidByCustomer = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                        //        DepositAppliedToTours = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                        //        SalesAgent = salesAgent,
                        //        ExchangeRateUsed = purchaseRate.ToString(),
                        //        TotalUSD = _totalToCharge.ToString(),
                        //        PointOfSale = pointOfSale,
                        //        Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
                        //        Services = listServices,
                        //        Egresses = listEgresses,
                        //        CashGiftUSD = _cashGiftUSD.ToString(),
                        //        CommissionCashGiftUSD = _commissionGiftUSD.ToString(),
                        //        CashActivityUSD = _cashActivityUSD.ToString(),
                        //        CashGiftMXN = _cashGiftMXN.ToString(),
                        //        CommissionCashGiftMXN = _commissionGiftMXN.ToString(),
                        //        CashActivityMXN = _cashActivityMXN.ToString(),
                        //        TotalToChargeBackInUSD = (_totalToCharge - budgetUSD).ToString(),
                        //        TotalToChargeBackInMXN = Math.Round((_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN), 2, MidpointRounding.AwayFromZero).ToString(),
                        //        TotalToChargeMXN = Math.Round(((_totalToCharge * purchaseRate) + _cashGiftMXN + _commissionGiftMXN + _cashActivityMXN), 2, MidpointRounding.AwayFromZero).ToString(),
                        //        Enterprise = enterprise,
                        //        Address = address,
                        //        RFC = rfc
                        //    });
                        //    counter++;
                        //}
                        #endregion
                    }
                }

                foreach (var item in byOpc)
                {
                    decimal _payments = 0;
                    decimal _refunds = 0;
                    var _cashGift = new List<SelectListItem>();
                    var _cashCommission = new List<SelectListItem>();
                    var _cashActivity = new List<SelectListItem>();
                    decimal _cashGiftUSD = 0;
                    decimal _commissionGiftUSD = 0;
                    decimal _cashActivityUSD = 0;
                    decimal _cashGiftMXN = 0;
                    decimal _commissionGiftMXN = 0;
                    decimal _cashActivityMXN = 0;
                    decimal _budgetUSD = 0;
                    decimal _totalToCharge = 0;
                    decimal _timeshareCharge = 0;
                    decimal _cashGiftNoBudget = 0;
                    var _notes = string.Join(".<br />", item.Where(m => m.paymentComments != null && m.paymentComments != "").Select(m => m.paymentComments));
                    var _program = item.FirstOrDefault().promotionTeamID != null ? item.FirstOrDefault().tblPromotionTeams.promotionTeam : "&nbsp;";
                    var wBudget = item.Where(m => m.budgetID != null);
                    var woBudget = item.Where(m => m.budgetID == null);

                    foreach (var i in woBudget)
                    {
                        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                        if (i.tblMoneyTransactions.transactionTypeID == 1)
                        {
                            _payments += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            _refunds += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    _totalToCharge = _payments - _refunds;
                    
                    foreach (var i in wBudget)
                    {
                        var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                        if (i.tblMoneyTransactions.transactionTypeID == 1)
                        {
                            _budgetUSD += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            _budgetUSD -= Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    if (transactionsTimeshare != null)
                    {
                        foreach (var i in transactionsTimeshare.Where(m => m.opcID == item.Key))
                        {
                            var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, i.pointOfSaleID);
                            var _usdAmount = (i.amount * _rate) / purchaseRate;
                            if (i.budgetID != null)
                            {
                                _budgetUSD += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);

                            }
                            else
                            {
                                _timeshareCharge += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                            }

                            if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Gift") != -1)
                            {
                                _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                _cashGiftNoBudget += i.budgetID == null ? Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero) : 0;
                                _cashGift.Add(new SelectListItem()
                                {
                                    Value = i.amount.ToString(),
                                    Text = i.tblCurrencies.currencyCode
                                });
                                _cashCommission.Add(new SelectListItem()
                                {
                                    Value = Math.Round((i.amount * ((decimal)i.adminFee / 100)), 2, MidpointRounding.AwayFromZero).ToString(),
                                    Text = i.tblCurrencies.currencyCode
                                });
                            }
                            else if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Activity") != -1)
                            {
                                _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                _cashActivity.Add(new SelectListItem()
                                {
                                    Value = i.amount.ToString(),
                                    Text = i.tblCurrencies.currencyCode
                                });
                            }
                            else
                            {
                                //_totalToCharge += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                listEgresses.Add(new SelectListItem()
                                {
                                    Value = i.tblEgressConcepts.egressConcept,
                                    Text = i.amount.ToString() + " " + i.tblCurrencies.currencyCode
                                });
                            }
                        }
                    }
                    _cashGiftUSD = _cashGift.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                    _commissionGiftUSD = _cashCommission.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                    _cashActivityUSD = _cashActivity.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                    _cashGiftMXN = _cashGift.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                    _commissionGiftMXN = _cashCommission.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                    _cashActivityMXN = _cashActivity.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));

                    list.Add(new PurchasesModel.ChargebackTicketModel()
                    {
                        Folio = folio + "-" + Convert.ToChar(64 + counter),
                        PersonToCharge = item.FirstOrDefault().tblOPCS.opc,
                        PayingCompany = item.FirstOrDefault().tblOPCS.payingCompanyIDX != null ? item.FirstOrDefault().tblOPCS.tblCompanies1.shortName : "&nbsp;",
                        ClientName = clientName,
                        ProgramOPC = _program,
                        BudgetLetter = _budgetUSD != 0 ? wBudget.FirstOrDefault().tblBudgets.leadCode : "&nbsp;",
                        BudgetAmount = Math.Round(_budgetUSD, 2, MidpointRounding.AwayFromZero).ToString(),
                        Notes = _notes,
                        TotalDue = totalDueUSD.ToString(),
                        TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                        AmountPaidByCustomer = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                        DepositAppliedToTours = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                        SalesAgent = salesAgent,
                        ExchangeRateUsed = purchaseRate.ToString(),
                        TotalUSD = _totalToCharge.ToString(),
                        PointOfSale = pointOfSale,
                        Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
                        Services = listServices,
                        Egresses = listEgresses,
                        CashGiftUSD = _cashGiftUSD.ToString(),
                        CommissionCashGiftUSD = _commissionGiftUSD.ToString(),
                        CashActivityUSD = _cashActivityUSD.ToString(),
                        CashGiftMXN = _cashGiftMXN.ToString(),
                        CommissionCashGiftMXN = _commissionGiftMXN.ToString(),
                        CashActivityMXN = _cashActivityMXN.ToString(),
                        //TotalToChargeBackInUSD = Math.Round((_totalToCharge + _timeshareCharge + _commissionGiftUSD + _cashActivityUSD), 2, MidpointRounding.AwayFromZero).ToString(),
                        TotalToChargeBackInUSD = Math.Round((_totalToCharge + _timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD), 2, MidpointRounding.AwayFromZero).ToString(),
                        TotalToChargeBackInMXN = Math.Round((_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN), 2, MidpointRounding.AwayFromZero).ToString(),
                        TotalToChargeMXN = (Math.Round(((_totalToCharge + _timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD) * purchaseRate), 2, MidpointRounding.AwayFromZero) + (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN)).ToString(),
                        Enterprise = enterprise,
                        Address = address,
                        RFC = rfc
                    });
                    counter++;
                }

                if (byCompany.Count() == 0 && byOpc.Count() == 0 && byAdvance.Count() > 0)
                {
                    //pendiente agregar codigo para llenado de item en lista
                    foreach (var item in byAdvance)
                    {
                        decimal _payments = 0;
                        decimal _refunds = 0;
                        var _cashGift = new List<SelectListItem>();
                        var _cashCommission = new List<SelectListItem>();
                        var _cashActivity = new List<SelectListItem>();
                        decimal _cashGiftUSD = 0;
                        decimal _commissionGiftUSD = 0;
                        decimal _cashActivityUSD = 0;
                        decimal _cashGiftMXN = 0;
                        decimal _commissionGiftMXN = 0;
                        decimal _cashActivityMXN = 0;
                        decimal _budgetUSD = 0;
                        decimal _totalToCharge = 0;
                        decimal _timeshareCharge = 0;
                        decimal _cashGiftNoBudget = 0;
                        var _notes = string.Join(".<br />", item.Where(m => m.paymentComments != null && m.paymentComments != "").Select(m => m.paymentComments));
                        var _program = item.FirstOrDefault().promotionTeamID != null ? item.FirstOrDefault().tblPromotionTeams.promotionTeam : "&nbsp;";
                        var wBudget = item.Where(m => m.budgetID != null);
                        
                        _totalToCharge = totalDueUSD - (cashPayments - cashRefunds) - (ccPayments - ccRefunds) - (cashPaymentsAdvance - cashRefundsAdvance) - (ccPaymentsAdvance - ccRefundsAdvance);

                        foreach (var i in wBudget)
                        {
                            var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, purchase.pointOfSaleID);
                            if (i.tblMoneyTransactions.transactionTypeID == 1)
                            {
                                _budgetUSD += Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                            }
                            else
                            {
                                _budgetUSD -= Math.Round(((i.amount * _rate) / purchaseRate), 2, MidpointRounding.AwayFromZero);
                            }
                        }
                        if (transactionsTimeshare != null)
                        {
                            foreach (var i in transactionsTimeshare.Where(m => m.opcID == item.Key))
                            {
                                var _rate = GetSpecificRate(i.dateSaved, i.currencyID.ToString(), purchase.terminalID, i.pointOfSaleID);
                                var _usdAmount = (i.amount * _rate) / purchaseRate;
                                if (i.budgetID != null)
                                {
                                    _budgetUSD += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);

                                }
                                else
                                {
                                    _timeshareCharge += Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                }

                                if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Gift") != -1)
                                {
                                    _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                    _cashGiftNoBudget += i.budgetID == null ? Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero) : 0;
                                    _cashGift.Add(new SelectListItem()
                                    {
                                        Value = i.amount.ToString(),
                                        Text = i.tblCurrencies.currencyCode
                                    });
                                    _cashCommission.Add(new SelectListItem()
                                    {
                                        Value = Math.Round((i.amount * ((decimal)i.adminFee / 100)), 2, MidpointRounding.AwayFromZero).ToString(),
                                        Text = i.tblCurrencies.currencyCode
                                    });
                                }
                                else if (i.tblEgressConcepts.egressConcept.IndexOf("Cash Activity") != -1)
                                {
                                    _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                    _cashActivity.Add(new SelectListItem()
                                    {
                                        Value = i.amount.ToString(),
                                        Text = i.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    _timeshareCharge -= Math.Round(_usdAmount, 2, MidpointRounding.AwayFromZero);
                                    listEgresses.Add(new SelectListItem()
                                    {
                                        Value = i.tblEgressConcepts.egressConcept,
                                        Text = i.amount.ToString() + " " + i.tblCurrencies.currencyCode
                                    });
                                }
                            }
                        }
                        _cashGiftUSD = _cashGift.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                        _commissionGiftUSD = _cashCommission.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                        _cashActivityUSD = _cashActivity.Where(m => m.Text == "USD").Sum(m => decimal.Parse(m.Value));
                        _cashGiftMXN = _cashGift.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                        _commissionGiftMXN = _cashCommission.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));
                        _cashActivityMXN = _cashActivity.Where(m => m.Text == "MXN").Sum(m => decimal.Parse(m.Value));

                        list.Add(new PurchasesModel.ChargebackTicketModel()
                        {
                            Folio = folio + "-" + Convert.ToChar(64 + counter),
                            PersonToCharge = item.FirstOrDefault().tblOPCS.opc,
                            PayingCompany = item.FirstOrDefault().tblOPCS.payingCompanyIDX != null ? item.FirstOrDefault().tblOPCS.tblCompanies1.shortName : "&nbsp;",
                            ClientName = clientName,
                            ProgramOPC = _program,
                            BudgetLetter = _budgetUSD != 0 ? wBudget.FirstOrDefault().tblBudgets.leadCode : "&nbsp;",
                            BudgetAmount = Math.Round(_budgetUSD, 2, MidpointRounding.AwayFromZero).ToString(),
                            Notes = _notes,
                            TotalDue = totalDueUSD.ToString(),
                            TotalDue2 = Math.Round((totalDueUSD * purchaseRate), 2, MidpointRounding.AwayFromZero).ToString(),
                            AmountPaidByCustomer = ((cashPayments - cashRefunds) + (ccPayments - ccRefunds)).ToString(),
                            DepositAppliedToTours = ((cashPaymentsAdvance - cashRefundsAdvance) + (ccPaymentsAdvance - ccRefundsAdvance)).ToString(),
                            SalesAgent = salesAgent,
                            ExchangeRateUsed = purchaseRate.ToString(),
                            TotalUSD = _totalToCharge.ToString(),
                            PointOfSale = pointOfSale,
                            Date = purchase.purchaseDateTime.ToString("yyyy-MM-dd"),
                            Services = listServices,
                            Egresses = listEgresses,
                            CashGiftUSD = _cashGiftUSD.ToString(),
                            CommissionCashGiftUSD = _commissionGiftUSD.ToString(),
                            CashActivityUSD = _cashActivityUSD.ToString(),
                            CashGiftMXN = _cashGiftMXN.ToString(),
                            CommissionCashGiftMXN = _commissionGiftMXN.ToString(),
                            CashActivityMXN = _cashActivityMXN.ToString(),
                            //TotalToChargeBackInUSD = Math.Round((_totalToCharge + _timeshareCharge + _commissionGiftUSD + _cashActivityUSD), 2, MidpointRounding.AwayFromZero).ToString(),
                            TotalToChargeBackInUSD = Math.Round((_totalToCharge + _timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD), 2, MidpointRounding.AwayFromZero).ToString(),
                            TotalToChargeBackInMXN = Math.Round((_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN), 2, MidpointRounding.AwayFromZero).ToString(),
                            //TotalToChargeMXN = (Math.Round(((_totalToCharge + _timeshareCharge + _commissionGiftUSD + _cashActivityUSD) * purchaseRate), 2, MidpointRounding.AwayFromZero) + (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN)).ToString(),
                            TotalToChargeMXN = (Math.Round(((_totalToCharge + _timeshareCharge + _cashGiftUSD + _commissionGiftUSD + _cashActivityUSD) * purchaseRate), 2, MidpointRounding.AwayFromZero) + (_cashGiftMXN + _commissionGiftMXN + _cashActivityMXN)).ToString(),
                            Enterprise = enterprise,
                            Address = address,
                            RFC = rfc
                        });
                        counter++;
                    }
                }
                #endregion

                return list;
            }

            public string GetManifest(string date)
            {
                //nullable flag in SpiTvgDataModel.Designer must be true for fields ContractStatus(ln 1435,1447) & VLO(ln 1387,1399)

                var terminal = long.Parse(session.Terminals.Split(',')[0]);
                var _date = DateTime.Parse(date, CultureInfo.InvariantCulture).Date;
                var list = new List<SPIViewModel.AgencyCustomer>();
                list = SPIDataModel.GetManifestForAgency(_date, terminal);
                foreach (var i in list)
                {
                    i.DT_RowId = i.CustomerID.ToString();
                }

                var response = new JavaScriptSerializer().Serialize(list);
                return response;
            }
        }

        public class Import
        {
            public class ImportRowsModel
            {
                public string Header { get; set; }
                public string Value { get; set; }
            }
            public class FieldsPerTableModel
            {
                public string Key { get; set; }
                public string Value { get; set; }

            }

            public static string GetPrimaryKeyName(string tableName)
            {
                var primaryKeyName = "";
                Type edmxType = typeof(EdmScalarPropertyAttribute);
                //IEnumerable cosa =Type.GetType("ePlatBack.Models." + tableName).GetProperties().Where(x =>  Attribute.IsDefined(x,edmxType));
                PropertyInfo[] otraCosa = Type.GetType("ePlatBack.Models." + tableName).GetProperties();

                foreach (var pi in otraCosa)
                {
                    if (Reflection.HasCustomAttribute<EdmScalarPropertyAttribute>(pi))
                    {
                        EdmScalarPropertyAttribute cosaAtt = Reflection.GetCustomAttribute<EdmScalarPropertyAttribute>(pi);
                        if (cosaAtt.EntityKeyProperty)
                        {
                            primaryKeyName = pi.Name;
                        }
                    }


                }
                //paco
                //foreach(var p in cosa){

                //    EdmScalarPropertyAttribute cosaAtt = Reflection.GetCustomAttribute<EdmScalarPropertyAttribute>(p);

                //    if (cosaAtt.EntityKeyProperty) {
                //        primaryKeyName = p.
                //    }

                //}
                //miguel
                //var members = from member in Type.GetType("ePlatBack.Models." + tableName).GetMembers()
                //              from attr in member.GetCustomAttributes(typeof(EdmScalarPropertyAttribute), true)
                //              select member;
                //foreach (var i in members)
                //{
                //    var attrs = i.GetCustomAttributes(true);
                //    foreach (var attr in attrs)
                //    {
                //        if (attr is EdmScalarPropertyAttribute)
                //        {
                //            var attrValue = (EdmScalarPropertyAttribute)attr;
                //            if (attrValue.EntityKeyProperty)
                //                primaryKeyName = i.Name;
                //        }
                //    }
                //}
                return primaryKeyName;
            }

            //private string GetPrimaryKeyName(string tableName)
            //{
            //    var primaryKeyName = "";
            //    var members = from member in tableName.GetMembers()
            //                  from attr in member.GetCustomAttributes(typeof(EdmScalarPropertyAttribute), true)
            //                  select member;
            //    foreach (var i in members)
            //    {
            //        var attrs = i.GetCustomAttributes(true);
            //        foreach (var attr in attrs)
            //        {
            //            if (attr is EdmScalarPropertyAttribute)
            //            {
            //                var attrValue = (EdmScalarPropertyAttribute)attr;
            //                if (attrValue.EntityKeyProperty)
            //                    primaryKeyName = i.Name;
            //            }
            //        }
            //    }
            //    return primaryKeyName;
            //}

            public FineUploaderResult UploadFile(PictureDataModel.FineUpload upload, bool hasHeader)
            {
                ePlatEntities db = new ePlatEntities();

                var dirData = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
                var filePath = Path.Combine(dirData, Uri.UnescapeDataString(upload.Filename));
                List<LeadModel.Import.ImportRowsModel> listRows = new List<LeadModel.Import.ImportRowsModel>();
                List<SelectListItem> listSections = new List<SelectListItem>();
                try
                {
                    upload.SaveAs(filePath);
                    try
                    {
                        StreamReader reader = new StreamReader(filePath);
                        var firstLine = reader.ReadLine().Split(',');
                        var secondLine = reader.ReadLine().Split(',');
                        var rowsContent = System.IO.File.ReadAllLines(filePath).Select(m => m.Split(','));
                        var numberColumns = rowsContent.Count();

                        for (var i = 0; i < firstLine.Count(); i++)
                        {
                            var cosa = firstLine[i];
                            listRows.Add(new LeadModel.Import.ImportRowsModel()
                            {
                                Header = firstLine[i],
                                Value = secondLine[i]
                            });
                        }
                        reader.Close();

                        listSections = LeadsCatalogs.FillDrpSections();
                        return new FineUploaderResult(true, new { listRows = listRows }, new { listSections = listSections });
                    }
                    catch (Exception ex)
                    {
                        return new FineUploaderResult(false, error: ex.Message);
                    }
                }
                catch (Exception ex)
                {
                    return new FineUploaderResult(false, error: ex.Message);
                }
            }

            //[ModelBinder(typeof(PictureDataModel.FineUpload.ModelBinder))]
            //public class FineUpload
            //{
            //    public string Filename { get; set; }
            //    public Stream InputStream { get; set; }

            //    public void SaveAs(string destination, bool overwrite = true, bool autoCreateDirectory = true)
            //    {
            //        if (autoCreateDirectory)
            //        {
            //            var directory = new FileInfo(destination).Directory;
            //            if (directory != null) directory.Create();
            //        }
            //        using (var file = new FileStream(destination, overwrite ? FileMode.Create : FileMode.CreateNew))
            //            InputStream.CopyTo(file);
            //    }

            //    public class ModelBinder : IModelBinder
            //    {
            //        public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
            //        {
            //            var request = controllerContext.RequestContext.HttpContext.Request;
            //            var formUpload = request.Files.Count > 0;

            //            //find filename
            //            var xFileName = request.Headers["X-File-Name"];
            //            var qqFile = request["qqfile"];
            //            var formFilename = formUpload ? request.Files[0].FileName : null;

            //            var upload = new FineUpload
            //            {
            //                Filename = xFileName ?? qqFile ?? formFilename,
            //                InputStream = formUpload ? request.Files[0].InputStream : request.InputStream
            //            };

            //            return upload;
            //        }
            //    }

            //}

            public class FineUploaderResult : ActionResult
            {


                JavaScriptSerializer serializer = new JavaScriptSerializer();
                public const string ResponseContentType = "text/plain";

                private readonly bool _success;
                private readonly string _error;
                private readonly bool? _preventRetry;
                private readonly JObject _otherData;
                private readonly JObject _otherData2;

                public FineUploaderResult(bool success, object otherData = null, object otherData2 = null, string error = null, bool? preventRetry = null)
                {
                    _success = success;
                    _error = error;
                    _preventRetry = preventRetry;

                    if (otherData != null)
                        _otherData = JObject.FromObject(otherData);

                    if (otherData2 != null)
                        _otherData2 = JObject.FromObject(otherData2);
                }

                public override void ExecuteResult(ControllerContext context)
                {
                    var response = context.HttpContext.Response;
                    response.ContentType = ResponseContentType;

                    response.Write(BuildResponse());
                }

                public Object BuildResponse()
                {
                    var response = _otherData ?? new JObject();
                    response["listSections"] = _otherData2 ?? new JObject();
                    response["success"] = _success;

                    if (!string.IsNullOrWhiteSpace(_error))
                        response["error"] = _error;

                    if (_preventRetry.HasValue)
                        response["preventRetry"] = _preventRetry.Value;

                    return response;//.ToString();
                }
            }

            /// <summary>
            /// Reads file,map data to corresponding model and attempts to save it in database
            /// </summary>
            /// <param name="fileData">Two position array that has file name in first index, and if file has header in second index</param>
            /// <param name="fields">Array that has all user mapped fields</param>
            /// <param name="values">Array that has all default values defined by user</param>
            /// <param name="columns">Array that has the mapped file columns </param>
            /// <param name="models">Array that has the name of tables_sections to match file data</param>
            /// <returns>attempt object with operation result message</returns>
            public AttemptResponse ImportData(bool[] comparableFlags, string[] fileData, string[] fields, string[] values, string[] secValues, string[] columns, string[] sections)
            {
                AttemptResponse response = new AttemptResponse();
                //--
                #region "Variables"
                _messageFlag = true;
                var dirData = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
                var dirErrors = HttpContext.Current.Server.MapPath(@"~/Content/files/errors/");
                var filePath = Path.Combine(dirData, fileData[0]);
                var notImportedFilePath = Path.Combine(dirData, "Rows_Not_Imported.csv");
                var errorFilePath = Path.Combine(dirErrors, "Errors_Importation.txt");
                var fileLines = (fileData[1].ToLower() == "true") ? File.ReadAllLines(filePath).Skip(1).Select(m => m.Split(',')) : File.ReadAllLines(filePath).Select(m => m.Split(','));
                var listSections = sections.Distinct();
                int lineCounter = 1;
                IDictionary<string, string> tablesPrecedency = new Dictionary<string, string>();
                List<LeadModel.Import.FieldsPerTableModel> fieldsPerTable = new List<LeadModel.Import.FieldsPerTableModel>();
                #endregion
                #region "Instances"
                ePlatEntities db = new ePlatEntities();
                StreamWriter recordsWriter = new StreamWriter(notImportedFilePath);
                StreamWriter errorWriter = new StreamWriter(errorFilePath);
                #endregion
                //--
                try
                {
                    //previous variables and instances declaration
                    if (fileData[1].ToLower() == "true")
                    {
                        recordsWriter.WriteLine(File.ReadAllLines(filePath).First());
                    }
                    foreach (var section in listSections) // listSections = 1-tblLeads,2-tblPlaces_LeadGeneralInformation;
                    {
                        var sectionSplitted = section.Substring(0, section.IndexOf("_")).Split(','); // sectionSplitted = 1-tblLeads; 2-tblPlaces
                        foreach (var table in sectionSplitted)
                            tablesPrecedency.Add(table.Substring(0, table.IndexOf("-")), table.Substring((table.IndexOf("-") + 1), table.Length - (table.IndexOf("-") + 1))); // sectionSplitted ascendant ordered in ascending
                    }
                    var orderedTables = tablesPrecedency.OrderBy(m => m.Key);  // orderedTables: {key:precedency; value: tableName}
                    foreach (var field in fields)
                        fieldsPerTable.Add(new LeadModel.Import.FieldsPerTableModel() { Key = field.Substring(0, field.IndexOf("-")), Value = field.Substring((field.IndexOf("-") + 1), field.Length - (field.IndexOf("-") + 1)) }); // {key:tableName, value:fieldName}
                    foreach (var fileLine in fileLines)
                    {
                        var PKField = "";
                        var PKTable = "";
                        var sqlQuery = "SELECT COUNT(tblLeads." + fieldsPerTable.FirstOrDefault(m => m.Key == "tblLeads").Value + ") FROM ";
                        var PTCondition = " WHERE ";
                        var coincidences = 0;
                        var line = "";
                        List<KeyValuePair<string, object>> tempInstanceCollection = new List<KeyValuePair<string, object>>();
                        List<KeyValuePair<string, object>> instancesCollection = new List<KeyValuePair<string, object>>();
                        try
                        {
                            foreach (var table in orderedTables) // orderedTables: {key: precedency value: tableName}
                            {
                                var typeTable = Type.GetType("ePlatBack.Models." + table.Value);
                                var fieldIndexes = fields.Select((i, v) => new { value = i, index = v }).Where(m => m.value.Contains(table.Value.ToString()));
                                object instance = Activator.CreateInstance(typeTable);
                                object mirrorInstance = Activator.CreateInstance(typeTable);
                                int flag2 = 0;
                                foreach (var field in fieldIndexes) // fieldIndexes: {index: fieldIndex, value: fieldName}
                                {
                                    int flag = 0;
                                    Type type;
                                    object value = "";
                                    object safeValue;
                                    PropertyInfo property;
                                    var subFields = fieldsPerTable[field.index].Value.Split(',');
                                    var counter = 0;
                                    var tempInstance = Activator.CreateInstance(typeTable);
                                    var mirrorTempInstance = Activator.CreateInstance(typeTable);
                                    foreach (var subfield in subFields)
                                    {
                                        value = "";
                                        var secondaryValues = secValues[field.index].Split(',');
                                        var secValuesIndexes = secondaryValues.Select((i, v) => new { value = i, index = v });
                                        try
                                        {
                                            if (counter > 0)
                                            {
                                                value = secValuesIndexes.Single(m => m.index == (counter - 1)).value;
                                            }
                                            if (subfield.IndexOf("ID") > 0)
                                            {
                                                foreach (var i in GetDDLData(subfield))
                                                {
                                                    if (subFields.Count() > 1)
                                                    {
                                                        value = secondaryValues.LastOrDefault();
                                                    }
                                                    else
                                                    {
                                                        try
                                                        {
                                                            if (i.Text.ToLower().Equals(fileLine[int.Parse(columns[field.index]) - 1].ToLower().Trim()))
                                                            {
                                                                value = i.Value;
                                                            }
                                                        }
                                                        catch
                                                        {
                                                            //assignation of default value if file column doesn't have a value
                                                            value = values[field.index];
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (value.ToString() == "")
                                                {
                                                    value = values[field.index];
                                                }
                                            }
                                            else
                                            {
                                                if (value.ToString() == "")
                                                {
                                                    //check if column number is higher than file columns number
                                                    value = fileLine.Count() > int.Parse(columns[field.index]) - 1 ? (fileLine[int.Parse(columns[field.index]) - 1] != "") ? fileLine[int.Parse(columns[field.index]) - 1] : values[field.index] : values[field.index];
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            throw new Exception("Source file line: " + lineCounter + "; Column: " + subfield + "; Mapping Exception: " + ex.InnerException);
                                        }
                                        try
                                        {
                                            if (subfield != "interactionComments")
                                            {
                                                if (subfield != "relatedColID")
                                                {
                                                    if (subFields.Count() > 1)
                                                    {
                                                        property = tempInstance.GetType().GetProperty(subfield);
                                                    }
                                                    else
                                                    {
                                                        property = instance.GetType().GetProperty(subfield);
                                                    }
                                                    type = property.PropertyType;
                                                    safeValue = value.ToString() == "" || value.ToString() == "0" ? null : value.ToString();
                                                }
                                                else
                                                {
                                                    var columnsIndexes = columns.Select((i, v) => new { value = i, index = v });
                                                    if (subFields.Count() > 1)
                                                    {
                                                        property = tempInstance.GetType().GetProperty("interactionComments");
                                                    }
                                                    else
                                                    {
                                                        property = instance.GetType().GetProperty("interactionComments");
                                                    }
                                                    type = property.PropertyType;
                                                    safeValue = Regex.IsMatch(value.ToString(), @"^\d+$") ? fileLine[int.Parse(value.ToString()) - 1] != "" ? fileLine[int.Parse(value.ToString()) - 1] : values[columnsIndexes.Single(m => m.value == value.ToString()).index] : null;
                                                }
                                                var isGeneric = type.IsGenericType;
                                                if (isGeneric && type.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
                                                {
                                                    type = Nullable.GetUnderlyingType(type);
                                                }
                                                if (safeValue != null)
                                                {
                                                    switch (type.FullName)
                                                    {
                                                        case "System.Guid":
                                                            {
                                                                safeValue = Guid.Parse(value.ToString());
                                                                break;
                                                            }
                                                        case "System.TimeSpan":
                                                            {
                                                                safeValue = TimeSpan.ParseExact(value.ToString(), "c", null);
                                                                break;
                                                            }
                                                        case "System.DateTime":
                                                            {
                                                                safeValue = DateTime.Parse(value.ToString(), CultureInfo.InvariantCulture);
                                                                //safeValue = DateTime.ParseExact(value.ToString(), "yyyy-MM-dd", null);
                                                                //safeValue = DateTime.Parse(safeValue.ToString());
                                                                break;
                                                            }
                                                        default:
                                                            {
                                                                safeValue = Convert.ChangeType(safeValue, type);
                                                                break;
                                                            }
                                                    }
                                                }
                                                value = safeValue;
                                                if (subFields.Count() > 1)
                                                {
                                                    switch (subfield)
                                                    {
                                                        case "phone":
                                                            {
                                                                if (safeValue.ToString() != "--")
                                                                {
                                                                    //if (Regex.IsMatch(safeValue.ToString(), @"^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$"))
                                                                    if (Regex.IsMatch(safeValue.ToString(), @"^\(?([0-9]{0,10})\)?[-. ]?([0-9]{0,3})[-. ]?([0-9]{3})[-. ]?([0-9]{4})$"))
                                                                    {
                                                                        property.SetValue(tempInstance, safeValue, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        property.SetValue(tempInstance, "--", null);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    property.SetValue(tempInstance, safeValue, null);
                                                                }
                                                                break;
                                                            }
                                                        case "email":
                                                            {
                                                                if (safeValue.ToString() != "--")
                                                                {
                                                                    if (Regex.IsMatch(safeValue.ToString(), "^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"))
                                                                    {
                                                                        property.SetValue(tempInstance, safeValue, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        property.SetValue(tempInstance, "--", null);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    property.SetValue(tempInstance, safeValue, null);
                                                                }
                                                                break;
                                                            }
                                                        default:
                                                            {
                                                                property.SetValue(tempInstance, safeValue, null);
                                                                break;
                                                            }
                                                    }
                                                }
                                                else
                                                {
                                                    property.SetValue(instance, safeValue, null);
                                                }
                                            }
                                            else
                                            {
                                                safeValue = "";//revisar si esta asignacion no arroja error.
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            var message = value != null ? "Value cannot be assigned, check format." : "This property cannot be set to null.";
                                            throw new Exception("Source file line: " + lineCounter + "; Column: " + subfield + "; Mapping Exception: " + message);
                                        }
                                        while (flag != 1)
                                        {
                                            if (comparableFlags[field.index])
                                            {
                                                if (table.Value == "tblPhones" || table.Value == "tblInteractions")
                                                {
                                                    if (PTCondition.IndexOf(table.Value) > 0)
                                                    {
                                                        PTCondition += "'" + safeValue + "'";
                                                    }
                                                    else
                                                    {
                                                        if (PTCondition.IndexOf("tbl") > 0)
                                                        {
                                                            PTCondition += " AND ";
                                                        }
                                                        PTCondition += table.Value + "." + subFields.First() + " IN ('" + safeValue + "',";
                                                    }
                                                }
                                                else
                                                {
                                                    if (table.Value != "tblContractsHistory")
                                                    {
                                                        var length = PTCondition.Length;
                                                        var index = PTCondition.LastIndexOf(")");
                                                        PTCondition = PTCondition.IndexOf(')') > 0 ? PTCondition.LastIndexOf("AND") == PTCondition.Length - 4 ? PTCondition : PTCondition + " AND " : PTCondition.IndexOf('(') > 0 ? PTCondition.Substring(0, PTCondition.Length - 1) + ")" : PTCondition;
                                                        PTCondition += PTCondition != " WHERE " ? PTCondition.IndexOf("AND") == -1 ? " AND " : "" : "";
                                                        PTCondition += table.Value + "." + subFields.First() + " ='" + safeValue + "' AND ";
                                                    }
                                                }
                                                while (flag2 != 1 && table.Value != "tblLeads")
                                                {
                                                    sqlQuery += " INNER JOIN " + table.Value + " ON " + PKTable + "." + PKField + "=" + table.Value + "." + PKField;
                                                    flag2 = 1;
                                                }
                                            }
                                            flag = 1;
                                        }
                                        counter++;
                                    }//end foreach subfield
                                    if (subFields.Count() > 1)
                                    {
                                        if (table.Value == "tblPhones" || table.Value == "tblLeadEmails")
                                        {
                                            var prop = table.Value == "tblPhones" ? "phone" : "email";
                                            var propertyValue = tempInstance.GetType().GetProperty(prop).GetValue(tempInstance, null).ToString();
                                            if (propertyValue != "--")
                                            {
                                                if (UtilsImport.CompareInstancesContent(tempInstance, mirrorTempInstance) > 0)
                                                {
                                                    tempInstanceCollection.Add(new KeyValuePair<string, object>(table.Value, tempInstance));
                                                }
                                            }
                                        }
                                        else
                                        {

                                            if (table.Value == "tblInteractions")
                                            {
                                                if (fileLine[int.Parse(columns[field.index]) - 1] != "false")
                                                {
                                                    if (UtilsImport.CompareInstancesContent(tempInstance, mirrorTempInstance) > 0)
                                                    {
                                                        tempInstanceCollection.Add(new KeyValuePair<string, object>(table.Value, tempInstance));
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (UtilsImport.CompareInstancesContent(tempInstance, mirrorTempInstance) > 0)
                                                {
                                                    tempInstanceCollection.Add(new KeyValuePair<string, object>(table.Value, tempInstance));
                                                }
                                            }
                                        }
                                    }
                                }//end foreach field
                                if (PKField == "")
                                {
                                    PKField = GetPrimaryKeyName(table.Value);
                                    PKTable = table.Value;
                                    sqlQuery += table.Value;
                                }
                                if ((PTCondition.LastIndexOf("AND") + 4) == PTCondition.Length)
                                {
                                    PTCondition = PTCondition.Substring(0, PTCondition.Length - 4);
                                    PTCondition = PTCondition.Replace("=''", " is null");
                                    coincidences = Convert.ToInt32(db.ExecuteStoreQuery<int>(sqlQuery + PTCondition).First());
                                }

                                if (PTCondition.Substring(PTCondition.Length - 1) == "'" || PTCondition.Substring(PTCondition.Length - 1) == ",")
                                {
                                    PTCondition = PTCondition.Substring(PTCondition.Length - 1) == "," ? PTCondition.Substring(0, PTCondition.Length - 1) + ")" : PTCondition + ")";
                                    PTCondition = PTCondition.Replace("=''", " is null");
                                    coincidences = Convert.ToInt32(db.ExecuteStoreQuery<int>(sqlQuery + PTCondition).First());
                                }
                                if (fieldIndexes.Count() > 0)
                                {
                                    if (fieldIndexes.First().value.IndexOf(',') == -1)
                                    {
                                        if (UtilsImport.CompareInstancesContent(instance, mirrorInstance) > 0)
                                        {
                                            tempInstanceCollection.Add(new KeyValuePair<string, object>(table.Value, instance));
                                        }
                                    }
                                }
                            }//end foreach table
                            if (coincidences == 0)//check if there are not duplicates
                            {
                                //this condition validates that a lead has at least one phone or one email
                                //if (tempInstanceCollection.Where(m => m.Key == "tblPhones").Count() > 0 || tempInstanceCollection.Where(m => m.Key == "tblLeadEmails").Count() > 0)//check if there is at least one instance of tblPhones (pending check for at least one mail)
                                {
                                    foreach (var instance in tempInstanceCollection)
                                        instancesCollection.Add(instance);
                                }
                            }
                            else
                            {
                                throw new Exception("Source file line: " + lineCounter + "; Mapping Exception: Record Duplicated");
                            }
                        }
                        catch (Exception ex)
                        {
                            line = "";
                            messageFlag = false;
                            foreach (var i in fileLine)
                                line += i + ',';
                            recordsWriter.WriteLine(line.Substring(0, line.Length - 1));
                            errorWriter.WriteLine(ex.Message);
                            response.Type = Attempt_ResponseTypes.Error;
                            response.Message = ex.Message;// "Some records were not imported, download files for details";
                            response.ObjectID = 0;
                        }
                        if (line == "")
                        {
                            Lead classInstance = new Lead();
                            if (instancesCollection.Count() > 0)
                            {
                                response = classInstance.TryToCreate(instancesCollection);
                            }
                            else
                            {
                                messageFlag = false;
                                response.Type = Attempt_ResponseTypes.Error;
                                response.Exception = new Exception("Unuseful Lead Because It Does Not have Email or Phone Number");
                            }
                            if (response.Type.ToString() != "Ok")
                            {
                                line = "";
                                foreach (var i in fileLine)
                                    line += i + ',';
                                recordsWriter.WriteLine(line.Substring(0, line.Length - 1));
                                errorWriter.WriteLine("");
                                errorWriter.WriteLine("Source File Line: " + lineCounter + "; Saving Exception: ");
                                if (response.Exception.InnerException != null)
                                {
                                    errorWriter.WriteLine(response.Exception.InnerException);
                                }
                                else
                                {
                                    errorWriter.WriteLine(response.Exception.Message);
                                }
                            }
                        }
                        lineCounter++;
                    }//end filelines
                    if (messageFlag == false)
                    {
                        response.Type = Attempt_ResponseTypes.Error;
                        response.Message = "Some records were not imported, download files for details";
                        response.Exception = null;
                    }
                    return response;
                }
                catch (Exception ex)
                {
                    response.Type = Attempt_ResponseTypes.Error;
                    response.Message = "An error ocurred while trying to read file";
                    response.Exception = ex;
                    response.ObjectID = 0;
                    return response;
                }
                finally
                {
                    recordsWriter.Close();
                    errorWriter.Close();
                }
            }

            public List<SelectListItem> GetDDLData(string path)
            {
                switch (path)
                {
                    case "new-row":
                        return LeadsCatalogs.FillDrpSections();
                    case "countryID":
                        return LeadsCatalogs.FillDrpCountries();
                    case "leadTypeID":
                        return LeadsCatalogs.FillDrpLeadTypes();
                    case "bookingStatusID":
                        return LeadsCatalogs.FillDrpBookingStatus(true);
                    case "finalBookingStatusID":
                        return LeadsCatalogs.FillDrpBookingStatus(true);
                    case "qualificationStatusID":
                        return LeadsCatalogs.FillDrpQualificationStatus();
                    case "leadSourceID":
                        return LeadsCatalogs.FillDrpLeadSources(true);
                    case "offerID":
                        return LeadsCatalogs.FillDrpOffers();
                    case "inputMethodID":
                        return LeadsCatalogs.FillDrpInputMethods();
                    case "memberID":
                        return LeadsCatalogs.FillDrpMembers();
                    case "leadStatusID":
                        return LeadsCatalogs.FillDrpLeadStatus(true);
                    case "timeZoneID":
                        return LeadsCatalogs.FillDrpTimeZones();
                    //case "phone,phoneTypeID":
                    case "phoneTypeID":
                        return LeadsCatalogs.FillDrpPhoneTypes();
                    case "placeID":
                        return LeadsCatalogs.FillDrpPlaces();
                    case "roomTypeID":
                        return LeadsCatalogs.FillDrpRoomTypes();
                    case "interactionTypeID":
                        return LeadsCatalogs.FillDrpInteractionTypes();
                    case "relatedColID":
                        return new List<SelectListItem>();
                    case "assignedToUserID":
                        {
                            //var list = UserDataModel.GetUsersBySupervisor((Guid)Membership.GetUser().ProviderUserKey);
                            //var list = UserDataModel.GetUsersBySupervisor((Guid)Membership.GetUser().ProviderUserKey, false, false, false, false);
                            var list = UserDataModel.GetUsersBySupervisor(null, false, false, false, false);
                            list.Insert(0, ListItems.Default());
                            return list;
                        }
                    case "assignedToUserMail":
                        {
                            var list = UserDataModel.GetUsersBySupervisor();
                            list.Insert(0, ListItems.Default());
                            return list;
                        }
                    case "greetingRepID":
                        return LeadsCatalogs.FillDrpGreetingReps();
                    case "opcID":
                        {
                            var list = LeadsCatalogs.FillDrpOPC();
                            list.Insert(0, ListItems.Default());
                            return list;
                        }
                    case "tourStatusID":
                        return LeadsCatalogs.FillDrpTourStatus();
                    case "finalTourStatusID":
                        return LeadsCatalogs.FillDrpTourStatus();
                    case "callClasificationID":
                        //return LeadsCatalogs.FillDrpCallClasifications();
                        return LeadsCatalogs.FillDrpCallsClasification();
                    case "destinationID":
                        {
                            var list = PlaceDataModel.GetDestinationsByCurrentTerminals();
                            list.Insert(0, ListItems.Default());
                            return list;
                        }
                    default:
                        return LeadsCatalogs.FillDrpTerminals();//TerminalDataModel.GetCurrentUserTerminals();
                }
                //var tableName = "tbl" + path.Substring(0, 1).ToUpper() + path.Substring(1, (path.Length - 3)) + "s";
                //var context = new DataContext(db.Connection);
                //context.Connection.Open();
                //var type = typeof(tblTerminals);
                //var table = context.GetTable(type);
                //Table<tblTerminals> table = context.GetType().GetProperty(tableName).GetValue(context, null);
                //IQueryable query = table;
                //var text = path.Substring(0, (path.Length - 2)).ToLower();
                //var value = path;
                //var query = db.ExecuteStoreQuery<ePlatEntities>(@"SELECT terminalID FROM " + tableName);
                //query.Select(String.Format("new({0})", String.Join(",", new {value, text})));
            }

            public AttemptResponse ValidateData(string fileName)
            {
                AttemptResponse response = new AttemptResponse();
                var dirData = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
                var dirErrors = HttpContext.Current.Server.MapPath(@"~/Content/files/errors/");
                var filePath = Path.Combine(dirData, fileName);
                var errorFilePath = Path.Combine(dirErrors, "Rows_With_Errors.csv");
                var fileLines = File.ReadAllLines(filePath).Skip(1).Select(m => m.Split(','));
                var lineCounter = 2;
                StreamWriter errorWriter = new StreamWriter(errorFilePath);
                foreach (var line in fileLines)
                {
                    var cosa = line.Count();
                    if (line.Count() != 49)
                    {
                        errorWriter.WriteLine("file line: " + lineCounter + ", Number Columns: " + line.Count());
                    }
                    lineCounter++;
                }
                errorWriter.Close();
                return response;
            }
        }

        public class Common
        {
            public List<SelectListItem> GetDDLData(string itemType, string itemID)
            {
                var list = new List<SelectListItem>();
                switch (itemType)
                {
                    #region "general info"
                    case "selectedTerminals":
                        {
                            list = TerminalDataModel.GetActiveTerminalsList();
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    #endregion
                    #region "import"
                    case "new-row":
                        {
                            list = LeadsCatalogs.FillDrpSections();
                            break;
                        }
                    case "countryID":
                        {
                            list = LeadsCatalogs.FillDrpCountries();
                            break;
                        }
                    case "leadTypeID":
                        {
                            list = LeadsCatalogs.FillDrpLeadTypes();
                            break;
                        }
                    case "bookingStatusID":
                        {
                            list = LeadsCatalogs.FillDrpBookingStatus(true);
                            break;
                        }
                    case "finalBookingStatusID":
                        {
                            list = LeadsCatalogs.FillDrpBookingStatus(true);
                            break;
                        }
                    case "qualificationStatusID":
                        {
                            list = LeadsCatalogs.FillDrpQualificationStatus();
                            break;
                        }
                    case "leadSourceID":
                        {
                            list = LeadsCatalogs.FillDrpLeadSources(true);
                            break;
                        }
                    case "offerID":
                        {
                            list = LeadsCatalogs.FillDrpOffers();
                            break;
                        }
                    case "inputMethodID":
                        {
                            list = LeadsCatalogs.FillDrpInputMethods();
                            break;
                        }
                    case "memberID":
                        {
                            list = LeadsCatalogs.FillDrpMembers();
                            break;
                        }
                    case "leadStatusID":
                        {
                            list = LeadsCatalogs.FillDrpLeadStatus(true);
                            break;
                        }
                    case "timeZoneID":
                        {
                            list = LeadsCatalogs.FillDrpTimeZones();
                            break;
                        }
                    case "phoneTypeID"://case "phone,phoneTypeID":
                        {
                            list = LeadsCatalogs.FillDrpPhoneTypes();
                            break;
                        }
                    case "placeID":
                        {
                            list = LeadsCatalogs.FillDrpPlaces();
                            break;
                        }
                    case "roomTypeID":
                        {
                            list = LeadsCatalogs.FillDrpRoomTypes();
                            break;
                        }
                    case "interactionTypeID":
                        {
                            list = LeadsCatalogs.FillDrpInteractionTypes();
                            break;
                        }
                    case "relatedColID":
                        {
                            list = new List<SelectListItem>();
                            break;
                        }
                    case "assignedToUserID":
                        {
                            var _list = UserDataModel.GetUsersBySupervisor();
                            _list.Insert(0, ListItems.Default());
                            list = _list;
                            break;
                        }
                    case "assignedToUserMail":
                        {
                            list = UserDataModel.GetUsersBySupervisor();
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "greetingRepID":
                        {
                            list = LeadsCatalogs.FillDrpGreetingReps();
                            break;
                        }
                    case "opcID":
                        {
                            list = LeadsCatalogs.FillDrpOPC();
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "tourStatusID":
                        {
                            list = LeadsCatalogs.FillDrpTourStatus();
                            break;
                        }
                    case "finalTourStatusID":
                        {
                            list = LeadsCatalogs.FillDrpTourStatus();
                            break;
                        }
                    case "callClasificationID":
                        {
                            //list = LeadsCatalogs.FillDrpCallClasifications();
                            list = LeadsCatalogs.FillDrpCallsClasification();
                            break;
                        }
                    case "destinationID":
                        {
                            var _list = PlaceDataModel.GetDestinationsByCurrentTerminals();
                            _list.Insert(0, ListItems.Default());
                            list = _list;
                            break;
                        }
                    #endregion
                    #region "purchases"
                    case "destination":
                        {
                            list = LeadsCatalogs.FillDrpTransportationZones(int.Parse(itemID));
                            break;
                        }
                    case "priceType":
                        {
                            try
                            {
                                var priceType = int.Parse(itemID.Split('|')[0]);
                                var service = long.Parse(itemID.Split('|')[1]);
                                var date = DateTime.Parse(itemID.Split('|')[2]);
                                var terminalID = long.Parse(itemID.Split('|')[3]);
                                var currency = itemID.Split('|')[4];
                                var pointOfSale = int.Parse(itemID.Split('|')[5]);
                                var culture = itemID.Split('|')[6];

                                list = LeadsCatalogs.FillDrpPricesUnits(priceType, service, date, terminalID, currency, pointOfSale, culture);
                            }
                            catch { }
                            break;
                        }
                    case "price":
                        {
                            list = LeadsCatalogs.FillDrpPriceUnits(int.Parse(itemID));
                            break;
                        }
                    case "service":
                        {

                            list = itemID.Split('|')[1] != "" ? ActivityDataModel.ActivitiesCatalogs.FillDrpAvailabilityPerDate(long.Parse(itemID.Split('|')[0]), DateTime.Parse(itemID.Split('|')[1])) : new List<SelectListItem>();

                            if (list.Count() > 0)
                            {
                                list.RemoveAt(0);
                                list.Insert(0, ListItems.Default());
                            }
                            else
                            {
                                list.Insert(0, ListItems.Default("--Select Service / Date--"));
                            }
                            break;
                        }
                    case "weeklyAvailability":
                        {
                            list = LeadsCatalogs.FillDrpMeetingPoints(long.Parse(itemID));
                            if (list.Count() > 0)
                            {
                                list.Insert(0, ListItems.Default());
                            }
                            else
                            {
                                list.Insert(0, ListItems.Default("--Select Schedule--"));
                            }
                            list.Add(new SelectListItem() { Value = "null", Text = "Add Custom" });
                            break;
                        }
                    case "billingInfo":
                        {
                            list = LeadsCatalogs.FillDrpBillingInfo(itemID);
                            list.Insert(list.Count(), ListItems.Default("+Add Billing Info", "-1"));
                            list.Insert(list.Count(), ListItems.Default("+Add reference Number", "-2"));
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "opc":
                        {
                            var _itemID = itemID.Split('|');
                            if (itemID.Split('|').Count() <= 3)
                            {
                                var opc = itemID.Split('|')[0];
                                var terminal = long.Parse(itemID.Split('|')[1]);
                                var cxcCompany = itemID.Split('|')[2].ToLower().IndexOf("company") > -1 ? true : false;
                                list = LeadsCatalogs.FillDrpCompaniesPerPromotionTeams(opc, terminal, cxcCompany);
                                list.Insert(0, ListItems.Default("--Select One--", ""));
                                list.Insert(1, ListItems.Default("General Public", "null"));
                            }
                            else
                            {
                                list = LeadsCatalogs.FillDrpCompaniesPerTypeAndTerminal(long.Parse(itemID.Split('|')[1]), int.Parse("5"));
                            }
                            break;
                        }
                    case "mktCompaniesPerTerminals":
                        {
                            list = LeadsCatalogs.FillDrpMarketingCompaniesPerTerminals(itemID != "0" ? itemID : null);
                            break;
                        }
                    case "opcTeam":
                        {
                            list = LeadsCatalogs.FillDrpPromotionTeamsPerOPC(itemID);
                            break;
                        }
                    case "opcPhone":
                        {
                            var _itemID = itemID != "" && itemID != "null" ? long.Parse(itemID) : 0;
                            list = LeadsCatalogs.GetOPCPhone(_itemID);
                            break;
                        }
                    case "teamWithBudget":
                        {
                            list = LeadsCatalogs.TeamHasBudget(itemID);
                            break;
                        }
                    case "purchase":
                        {
                            list = LeadsCatalogs.FillDrpCouponsByPurchase(itemID);
                            break;
                        }
                    case "place":
                        {
                            list = PlaceDataModel.GetResortsByTerminalDomains(itemID, true);
                            var text = list.Count() > 0 ? "--Select One--" : "--Select Terminal--";
                            list.Insert(0, ListItems.Default(text));
                            list.Add(ListItems.NotSet("--Other--"));
                            break;
                        }
                    case "terminal":
                        {
                            list = LeadsCatalogs.FillDrpProvidersPerDestinationInTerminals();
                            list.Insert(0, ListItems.Default("--All--", "", true));
                            break;
                        }
                    case "providersPerTerminal":
                        {
                            list = LeadsCatalogs.FillDrpProvidersPerDestinationInTerminals(long.Parse(itemID));
                            list.Insert(0, ListItems.Default("--All--", "", true));
                            break;
                        }
                    case "servicesPerTerminal":
                        {
                            var provider = itemID.IndexOf('|') > -1 ? int.Parse(itemID.Split('|')[0]) : (int?)null;
                            var terminal = itemID.IndexOf('|') > -1 ? itemID.Split('|')[1] != "null" ? long.Parse(itemID.Split('|')[1]) : (long?)null : itemID != "null" ? long.Parse(itemID) : (long?)null;
                            list = LeadsCatalogs.FillDrpServices(provider, terminal);
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "serviceProvider":
                        {
                            list = LeadsCatalogs.GetServiceProviderInfo(long.Parse(itemID));
                            break;
                        }
                    case "promo":
                        {
                            list = LeadsCatalogs.FillDrpPromosPerService(itemID);
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "promosPurchases":
                        {
                            list = LeadsCatalogs.FillDrpPromosPerPurchase(long.Parse(itemID));
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "location":
                        {
                            list = LeadsCatalogs.FillDrpLocationsPerCurrentTerminals(long.Parse(itemID));
                            if (itemID != "0")
                            {
                                list.Insert(0, ListItems.Default("--Unknown--", "null"));
                            }
                            else
                            {
                                list.Insert(0, ListItems.Default("--Select Terminal--"));
                            }
                            break;
                        }
                    case "priceTypeRule":
                        {
                            var _service = itemID.Split('|')[0];
                            var _terminal = itemID.Split('|')[1] != "null" ? itemID.Split('|')[1] : "0";
                            var _promo = itemID.Split('|')[2];
                            var _PoS = itemID.Split('|')[3];
                            list = LeadsCatalogs.FillDrpPriceTypeRules(long.Parse(_service), long.Parse(_terminal), long.Parse(_promo), int.Parse(_PoS));
                            list.Insert(0, ListItems.Default());
                            list = list.Where(m => m.Value != "3").ToList();
                            break;
                        }
                    case "minimalPrice":
                        {
                            var puchaseService = itemID.Split('|')[0];
                            var unitID = itemID.Split('|')[1];

                            long item;
                            if (!long.TryParse(itemID.Split('|')[0], out item))
                            {
                                var purchase = Guid.Parse(itemID.Split('|')[0]);
                                var promoID = itemID.Split('|')[2];
                                list = LeadsCatalogs.GetMinimalPrice(purchase, int.Parse(unitID), int.Parse(promoID));
                                break;
                            }

                            list = LeadsCatalogs.GetMinimalPrice(item, int.Parse(unitID));

                            break;
                        }
                    case "pointOfSale":
                        {
                            list = LeadsCatalogs.FillDrpPointsOfSale();
                            break;
                        }
                    case "siblingsCoupons":
                        {
                            list = LeadsCatalogs.FillDrpSiblingsCoupons(itemID);
                            list.Insert(0, ListItems.NotSet("--None--"));
                            break;
                        }
                    case "acceptCharges":
                        {
                            var acceptCharges = LeadsCatalogs.DoesPointAcceptCharges(Guid.Parse(itemID)).FirstOrDefault().Value;
                            var online = LeadsCatalogs.DoesPointAcceptCharges(Guid.Parse(itemID)).FirstOrDefault().Text;
                            var purchase = new MasterChartDataModel.Purchases().GetPurchase(itemID);
                            list.Add(
                                new SelectListItem()
                                {
                                    Value = acceptCharges + "|" + online,
                                    Text = MasterChartDataModel.Purchases.GetBankCommission(purchase.PurchaseInfo_Terminal, DateTime.Now).ToString()//commission.GetType().GetProperty("commission").GetValue(commission, null).ToString()
                                });
                            break;
                        }
                    case "allSalesAgentsByTerminal":
                        {
                            var _itemID = long.Parse(itemID);
                            list = LeadsCatalogs.FillDrpSalesAgents(_itemID);
                            list.Insert(0, ListItems.NotSet("--Select One--", ""));
                            break;
                        }
                    case "opcsPerPurchaseTerminal":
                        {
                            var _itemID = long.Parse(itemID);
                            list = LeadsCatalogs.FillDrpOPC(_itemID, null);
                            var privileges = AdminDataModel.GetViewPrivileges(10729);
                            //if (privileges.FirstOrDefault(m => m.Component == "PurchasePayment_OPC") == null || privileges.FirstOrDefault(m => m.Component == "PurchasePayment_OPC").Create == null || privileges.FirstOrDefault(m => m.Component == "PurchasePayment_OPC").Create)
                            if (privileges.FirstOrDefault(m => m.Component == "PurchasePayment_OPC").Create)
                            {
                                list.Insert(list.Count(), ListItems.NotSet("--Not Registered--"));
                            }
                            list.Insert(0, ListItems.Default("--Select One--", ""));
                            break;
                        }
                    case "paymentTypesPerLocation":
                        {
                            list = LeadsCatalogs.FillDrpPaymentTypes(int.Parse(itemID));
                            break;
                        }
                    #endregion
                    #region "accountancy"
                    case "opcsPerTerminals":
                        {
                            list = LeadsCatalogs.FillDrpOPC();
                            if (list.Count() > 0)
                            {
                                list.RemoveAt(0);
                            }
                            list.Insert(0, ListItems.NotSet("--Select One--"));
                            break;
                        }
                    #endregion
                    case "users":
                        {
                            list = UserDataModel.GetUsersBySupervisor(null, true);
                            list.Insert(0, ListItems.Default());
                            break;
                        }
                    case "currenciesAllowedPerSession":
                        {
                            list = LeadsCatalogs.FillDrpCurrencies();
                            break;
                        }
                    case "saleCurrenciesAllowedPerSession":
                        {
                            list = LeadsCatalogs.FillDrpCurrencies();
                            list.Insert(0, ListItems.NotSet("--Select One--", ""));
                            break;
                        }
                    #region "fastSale"
                    case "fastSaleTerminals":
                        {
                            list = TerminalDataModel.GetActiveTerminalsList();
                            if (list.Count() > 1)
                            {
                                list.Insert(0, ListItems.Default());
                            }
                            break;
                        }
                    case "pointsOfSalePerTerminal":
                        {
                            var _itemID = itemID != null && itemID != "0" ? long.Parse(itemID) : (long?)null;
                            list = LeadsCatalogs.FillDrpPointsOfSale(_itemID, null, true);
                            break;
                        }
                    case "titlesPerCulture":
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpPersonalTitles(itemID);
                            break;
                        }
                    //case "locations":
                    //    {
                    //        var terminalID = session.Terminals.Split(',').Select(m => long.Parse(m)).FirstOrDefault();
                    //        list = LeadsCatalogs.FillDrpLocationsPerCurrentTerminals(terminalID);
                    //        break;
                    //    }
                    #endregion
                    case "budgetsPerTeam":
                        {
                            var _itemID = itemID != "null" && itemID != "0" ? int.Parse(itemID) : (int?)null;
                            list = CatalogsDataModel.Budgets.BudgetsCatalogs.FillDrpBudgetsPerTeam(_itemID);
                            list.Insert(0, ListItems.Default("--None--"));
                            break;
                        }
                    case "optionTypesPerResort":
                        {
                            list = LeadsCatalogs.FillDrpOptionTypes(int.Parse(itemID));
                            break;
                        }
                    case "resortsByDestination":
                        {
                            list = PlaceDataModel.GetResortsByDestination(int.Parse(itemID));
                            break;
                        }
                    case "roomTypesPerResort":
                        {
                            list = PlaceDataModel.GetRoomTypesByPlace(int.Parse(itemID));
                            break;
                        }

                    default:
                        {
                            list = LeadsCatalogs.FillDrpTerminals();//TerminalDataModel.GetCurrentUserTerminals();
                            break;
                        }
                }
                return list;
            }
        }
    }
}