using System;
using System.IO;
using System.Web;
using System.Linq;
using System.Text;
using System.Data;
using System.Web.Mvc;
using System.Reflection;
using System.Data.Common;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Web.Routing;
using System.Web.Security;
using System.Linq.Dynamic;
using System.Globalization;
using ePlatBack.Models.Utils;
using System.Collections.Generic;
using ePlatBack.Models.ViewModels;
using ePlatBack.Models.Utils.Custom;
using ePlatBack.Models.Utils.Custom.Attributes;
using System.ComponentModel.DataAnnotations;
using System.Data.Objects.SqlClient;
using System.Data.SqlClient;
using System.Web.Script.Serialization;
using System.Text.RegularExpressions;
using ePlatBack.Models.eplatformDataModel;

namespace ePlatBack.Models.DataModels
{
    public class ReportDataModel
    {

        ePlatEntities db = new ePlatEntities();
        public static UserSession session = new UserSession();
        public static decimal IVA = 16;

        public class ReportsCatalogs
        {
            public static List<SelectListItem> FillDrpBookingStatusByWorkGroup(string defaultValue = null)
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup())
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.Value,
                        Text = i.Text
                    });
                }
                if (defaultValue != null)
                {
                    list.Insert(0, ListItems.Default(defaultValue));
                }
                return list;
            }

            public static List<SelectListItem> FillDrpLayouts()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

                var Layouts = from l in db.tblPricesReportLayouts
                              where terminals.Contains(l.terminalID)
                              && (l.userID == session.UserID
                              || l.tblPricesReportLayouts_Roles.Count(r => r.roleID == session.RoleID) > 0)
                              select l;

                foreach (var i in Layouts)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.priceReportLayoutID.ToString(),
                        Text = i.priceReportLayout
                    });
                }

                return list;
            }

            public static List<SelectListItem> FillDrpResorts()
            {
                List<SelectListItem> list = new List<SelectListItem>();
                list = PlaceDataModel.GetResortsByProfile();
                return list;
            }

            public static List<SelectListItem> FillDrpLeadSourcesByWorkGroup(ePlatEntities dataContext = null)
            {
                ePlatEntities db = dataContext ?? new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();

                //foreach (var i in LeadSourceDataModel.GetLeadSourcesByWorkGroup())
                foreach (var i in LeadSourceDataModel.GetLeadSourcesByTerminal())
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.Value,
                        Text = i.Text
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpTourStatus()
            {
                ePlatEntities db = new ePlatEntities();
                List<SelectListItem> list = new List<SelectListItem>();
                foreach (var i in db.tblTourStatus)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.tourStatusID.ToString(),
                        Text = i.tourStatus
                    });
                }
                return list;
            }

            public static List<SelectListItem> FillDrpDestinations()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblDestinations)
                    list.Add(new SelectListItem() { Value = i.destinationID.ToString(), Text = i.destination });
                return list;
            }

            public static List<SelectListItem> FillDrpReservationStatus()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblReservationStatus)
                    list.Add(new SelectListItem() { Value = i.reservationStatusID.ToString(), Text = i.reservationStatus });
                return list;
            }

            public static List<SelectListItem> FillDrpUsers()
            {
                List<SelectListItem> Users = UserDataModel.GetUsersBySupervisor();
                return Users;
            }

            public static List<SelectListItem> FillDrpPlanTypes()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblPlanTypes)
                    list.Add(new SelectListItem() { Value = i.planTypeID.ToString(), Text = i.planType });
                list.Insert(0, ListItems.NotSet());
                return list;
            }

            public static List<SelectListItem> FillDrpQualificationStatus()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                foreach (var i in db.tblQualificationStatus)
                    list.Add(new SelectListItem() { Value = i.qualificationStatusID.ToString(), Text = i.qualificationStatus });
                return list;
            }

            public static List<SelectListItem> GetDataBaseTablesProperties()
            {
                ePlatEntities db = new ePlatEntities();
                var listFields = new List<SelectListItem>();
                var tables = new List<string>();

                //search in DynamicModel.SearchDynamicModel to get tables used and search for their fields
                #region
                var properties = typeof(DynamicModel.SearchDynamicModel).GetProperties();
                var counter = 0;
                foreach (var i in properties)
                {
                    if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i))
                    {
                        tables.Add(Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name);
                        counter++;
                    }
                }
                #endregion

                //get all fields per table
                #region

                var listTables = tables.Distinct();
                var query = from component in db.tblSysComponents
                            where component.tblSysComponentAliases.Any(m => m.sysWorkGroupID == session.WorkGroupID)
                            && listTables.Contains(component.tableName)
                            orderby component.fieldName
                            select new
                            {
                                fieldName = component.tableName + "-" + component.fieldName,
                                fieldAlias = component.tblSysComponentAliases.FirstOrDefault(m => m.sysWorkGroupID == session.WorkGroupID).alias
                            };
                foreach (var i in query)
                {
                    foreach (var a in properties)
                    {
                        if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(a))
                        {
                            //if (Reflection.GetCustomAttribute<FieldInfoAttribute>(a).Name == i.fieldName.Substring(i.fieldName.IndexOf('-') + 1, i.fieldName.Length - (i.fieldName.IndexOf('-') + 1)))
                            if (Reflection.GetCustomAttribute<DataBaseInfoAttribute>(a).Name + "-" + Reflection.GetCustomAttribute<FieldInfoAttribute>(a).Name == i.fieldName)
                            {
                                var dataBaseAttr = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(a);
                                if (i.fieldName.IndexOf("ID") > 0)
                                {
                                    try
                                    {
                                        var fieldToRequest = Reflection.GetCustomAttribute<FieldToRequestAttribute>(a).Name;
                                        listFields.Add(new SelectListItem()
                                        {
                                            Value = dataBaseAttr.PrimaryKeyModelName + "*" + i.fieldName + "/" + dataBaseAttr.PrimaryKeyDatabaseName + "." + fieldToRequest + "+" + i.fieldAlias,
                                            Text = i.fieldAlias
                                        });
                                    }
                                    catch
                                    {
                                    }
                                }
                                else
                                {
                                    listFields.Add(new SelectListItem()
                                    {
                                        Value = i.fieldName + "+" + i.fieldAlias,
                                        Text = i.fieldAlias
                                    });
                                }
                            }
                        }
                    }

                }


                //foreach (var table in tables.Distinct())
                //{

                //    //var type = Type.GetType("ePlatBack.Models." + table);
                //    //var query = from p in type.GetProperties()
                //    //            join component in db.tblSysComponents on p.Name equals component.fieldName
                //    //            where (from a in p.GetCustomAttributes(false)
                //    //                   where a is System.Data.Objects.DataClasses.EdmScalarPropertyAttribute
                //    //                   select true).FirstOrDefault()
                //    //                   && component.tblSysComponentAliases.Any(m => m.sysWorkGroupID == session.WorkGroupID)
                //    //                   && component.tableName == table
                //    //            select new
                //    //            {
                //    //                fieldName = table + "-" + p.Name,
                //    //                fieldAlias = component.tblSysComponentAliases.Single(m => m.sysWorkGroupID == session.WorkGroupID).alias,
                //    //                propertyName = p.Name,
                //    //                fieldType = p.PropertyType.FullName,
                //    //                property = p
                //    //            };
                //    //foreach (var i in query)
                //    //{
                //    //    if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i.property))
                //    //    {
                //    //        var dataBaseAttr = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i.property);
                //    //        if (i.fieldName.IndexOf("ID") > 0)
                //    //        {
                //    //            listFields.Add(new SelectListItem()
                //    //            {
                //    //                Value = i.fieldName + "," + dataBaseAttr.PrimaryKeyDatabaseName + "." + dataBaseAttr.PrimaryKeyModelName + "_" + i.fieldAlias,
                //    //                Text = i.fieldAlias
                //    //            });
                //    //        }
                //    //        else
                //    //        {
                //    //            listFields.Add(new SelectListItem()
                //    //            {
                //    //                Value = i.fieldName + "_" + i.fieldAlias,
                //    //                Text = i.fieldAlias
                //    //            });
                //    //        }
                //    //    }
                //    //}
                //}
                #endregion
                return listFields;
            }

            public static List<SelectListItem> FillDrpUsersWithCommission(long terminalID)
            {
                List<SelectListItem> users = new List<SelectListItem>();
                ePlatEntities db = new ePlatEntities();

                var terminals = new List<long>();
                if (terminalID == null)
                {
                    terminals = session.Terminals != "" ?
                        session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                        session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                }
                else
                {
                    terminals.Add((long)terminalID);
                }

                var jobPositions = from j in db.tblCommissions
                                   where terminals.Contains(j.terminalID)
                                   select j.jobPositionID;

                var commissionableUsers = (from u in db.tblUsers_JobPositions
                                           where jobPositions.Contains(u.jobPositionID)
                                           && u.aspnet_Users.tblUsers_Terminals.Count(x => terminals.Contains(x.terminalID)) > 0
                                           && u.aspnet_Users.aspnet_Membership.IsApproved == true
                                           select u.aspnet_Users.tblUserProfiles.FirstOrDefault()).Distinct();

                foreach (tblUserProfiles user in commissionableUsers.OrderBy(x => x.firstName))
                {
                    users.Add(new SelectListItem()
                    {
                        Text = user.firstName + " " + user.lastName,
                        Value = user.userID.ToString()
                    });
                }

                return users;
            }

            public static string GetDataBaseTypeOfProperty(string tableName, string fieldName, bool? flag)
            {
                var tableType = Type.GetType("ePlatBack.Models." + tableName);
                var propertyType = tableType.GetProperty(fieldName).PropertyType;
                if (flag == true)
                {
                    if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
                    {
                        return Nullable.GetUnderlyingType(propertyType).FullName;
                    }
                    else
                    {
                        return propertyType.FullName;
                    }
                }
                else
                {
                    var fieldType = "string";
                    if (propertyType.ToString().IndexOf("Int") > 0)
                        fieldType = "int";
                    if (propertyType.ToString().IndexOf("Guid") > 0)
                        fieldType = "Guid";
                    if (propertyType.ToString().IndexOf("Boolean") > 0 || fieldName == "referredByID")
                        fieldType = "bit";
                    if (propertyType.ToString().IndexOf("DateTime") > 0)
                        fieldType = "date";
                    if (propertyType.ToString().IndexOf("TimeSpan") > 0)
                        fieldType = "time";
                    return fieldType;
                }
            }

            public static List<DynamicSearchFilters> GetDataBaseInfoForModel()
            {
                ePlatEntities db = new ePlatEntities();
                var listAvailableFields = new List<DynamicSearchFilters>();
                var model = new DynamicModel.SearchDynamicModel();
                var properties = model.GetType().GetProperties();

                foreach (var property in properties)
                {
                    if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(property))
                    {
                        var tableName = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(property).Name;
                        var fieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(property).Name;
                        var displayName = Reflection.HasCustomAttribute<DisplayAttribute>(property) ? Reflection.GetCustomAttribute<DisplayAttribute>(property).Name : "";
                        var fieldType = GetDataBaseTypeOfProperty(tableName, fieldName, null);//property.Name.ToLower();
                        listAvailableFields.Add(new DynamicSearchFilters()
                        {
                            FieldID = "",
                            TableName = tableName,
                            FieldName = fieldName,
                            FieldType = fieldType,
                            DisplayName = displayName,
                            PropertyName = property.Name
                        });
                    }
                }
                return listAvailableFields;
            }

            public static float Truncate(float value, int digits)
            {
                double mult = Math.Pow(10.0, digits);
                double result = Math.Truncate(mult * value) / mult;
                return (float)result;
            }

            public static string Capitals(string text)
            {
                var tag = "";
                foreach (char c in text)
                {
                    if (char.IsUpper(c))
                        tag += " " + c;
                    else
                        tag += c;
                }
                tag = tag.Substring(0, 1).ToUpper() + tag.Substring(1, tag.Length - 1);
                return tag;
            }

            public static string GetTextValueOfIndex(string property, string index)
            {
                ReportDataModel rdm = new ReportDataModel();
                var result = "";
                //List<SelectListItem> list = (List<SelectListItem>)rdm.GetDDLData(property, null);
                List<SelectListItem> list = (List<SelectListItem>)rdm.GetDDLData(property);
                result = list.Single(m => m.Value == index).Text;
                return result;
            }

            public static string SafeDataBaseValue(object textValue)
            {
                return textValue.ToString().Replace("'", "''");
            }

            public static List<SelectListItem> FillDrpReportLayoutsByUser()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var isAdmin = GeneralFunctions.IsUserInRole("Administrator");

                //var query = db.tblReportLayouts.Where(m => m.ownerUserID == session.UserID || m.public_ || isAdmin);
                var query = from w in db.tblSysWorkGroups_ReportLayouts
                            join r in db.tblReportLayouts on w.reportLayoutID equals r.reportLayoutID
                            join u in db.tblUserProfiles on r.ownerUserID equals u.userID into r_u
                            from u in r_u.DefaultIfEmpty()
                            where w.sysWorkGroupID == session.WorkGroupID
                            && (r.ownerUserID == session.UserID
                            || (r.public_ || isAdmin))
                            select new
                            {
                                r.reportLayoutID,
                                r.layout,
                                r.fields,
                                r.public_,
                                username = u.firstName + " " + u.lastName
                            };

                foreach (var i in query)
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.reportLayoutID.ToString() + "|" + i.fields + "|" + i.public_.ToString(),
                        Text = i.layout + (i.username != null ? " - " + i.username : "")
                    });
                }

                //foreach (var i in query)
                //{
                //    var profile = isAdmin ? i.aspnet_Users.tblUserProfiles.FirstOrDefault() : null;
                //    list.Add(new SelectListItem()
                //    {
                //        Value = i.reportLayoutID.ToString() + "|" + i.fields + "|" + i.public_.ToString(),
                //        Text = i.layout + (profile != null ? " - " + profile.firstName + " " + profile.lastName : "")
                //    });
                //}
                return list.OrderBy(m => m.Text).ToList();
            }

            public static List<SelectListItem> FillDrpMerchantAccounts()
            {
                ePlatEntities db = new ePlatEntities();
                var list = new List<SelectListItem>();
                var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();

                var query = from ma in db.tblMerchantAccounts
                            join tma in db.tblMerchantAccountSettings on ma.merchantAccountID equals tma.merchantAccountID
                            where terminals.Contains(tma.terminalID)
                            select ma;

                foreach (var i in query.Distinct())
                {
                    list.Add(new SelectListItem()
                    {
                        Value = i.merchantAccountID.ToString(),
                        Text = i.merchantAccountBillingName
                    });
                }

                return list;
            }
        }

        public static string Corrector(string fechaStr)
        {
            ePlatEntities db = new ePlatEntities();
            var fecha = DateTime.Parse(fechaStr);
            var siguienteFecha = fecha.AddDays(1);
            decimal total = decimal.Parse("6408");
            var cuponesHoy = from c in db.tblPurchases_Services
                             where c.dateSaved > fecha
                             && c.dateSaved < siguienteFecha
                             && c.total == total
                             && c.serviceStatusID == 3
                             select c;

            foreach (var c in cuponesHoy)
            {
                decimal subtotal = 0;
                bool refund = false;
                foreach (var detalle in c.tblPurchaseServiceDetails)
                {
                    subtotal += detalle.quantity * (decimal)detalle.customPrice;

                    if (refund == false)
                    {
                        var asignaciones = (from a in db.tblPaymentsAssignation
                                            where a.purchaseServiceDetailID == detalle.purchaseServiceDetailID
                                            && a.moneyTransactionTypeID == 2
                                            select a).Count();
                        if (asignaciones > 0)
                        {
                            refund = true;
                        }
                    }


                }
                c.total = subtotal;

                if (c.tblCloseOuts_Purchases.Count(x => x.canceled == true) > 0)
                {
                    if (c.cancelationCharge != null && c.cancelationCharge > 0)
                    {
                        c.total = (decimal)c.cancelationCharge;
                    }
                    else
                    {
                        c.total = 0;
                    }
                    if (refund)
                    {
                        c.serviceStatusID = 5;
                    }
                    else
                    {
                        c.serviceStatusID = 4;
                    }
                    c.cancelationDateTime = c.tblCloseOuts_Purchases.FirstOrDefault(x => x.canceled == true).dateCanceled;
                    c.canceledByUserID = c.tblCloseOuts_Purchases.FirstOrDefault(x => x.canceled == true).tblCloseOuts.salesAgentUserID;
                }
            }
            db.SaveChanges();

            return fecha.ToString("yyyy-MM-dd");
        }

        //public AttemptResponse CorrectorCupones(int idInicio, int idFin)
        //{
        //    ePlatEntities db = new ePlatEntities();
        //    //ePlatEdgarEntities dba = new ePlatEdgarEntities();
        //    edgarModelDataContext dba = new edgarModelDataContext();
        //    AttemptResponse response = new AttemptResponse();

        //    try
        //    {
        //        var queryBackup = dba.tblPurchase_Services.Where(m => m.purchase_ServiceID <= idInicio && m.purchase_ServiceID >= idFin).Select(m => new { m.purchase_ServiceID, m.total, m.cancelationDateTime, m.canceledByUserID, m.serviceStatusID });
        //        var queryOrdered = queryBackup.Select(m => m.purchase_ServiceID).OrderByDescending(m => m);
        //        var yesterday = DateTime.Today.AddDays(-1);
        //        var queryOriginal = db.tblPurchases_Services.Where(m => queryOrdered.Contains(m.purchase_ServiceID) && (m.cancelationDateTime < yesterday || m.cancelationDateTime == null)).OrderByDescending(m => m.purchase_ServiceID);
        //        long lastID = 0;
        //        foreach (var i in queryOriginal)
        //        {
        //            var match = queryBackup.Single(m => m.purchase_ServiceID == i.purchase_ServiceID);
        //            i.serviceStatusID = match.serviceStatusID;
        //            i.cancelationDateTime = match.cancelationDateTime;
        //            i.canceledByUserID = match.canceledByUserID;
        //            i.total = match.total;
        //            lastID = i.purchase_ServiceID;
        //        }
        //        db.SaveChanges();
        //        response.Type = Attempt_ResponseTypes.Ok;
        //        response.Message = "Correctly Updated<br />Last ID Updated: " + lastID.ToString();
        //        response.ObjectID = 0;
        //        return response;
        //    }
        //    catch (Exception ex)
        //    {
        //        response.Type = Attempt_ResponseTypes.Error;
        //        response.Message = "An Error Ocurred";
        //        response.ObjectID = 0;
        //        response.Exception = ex;
        //        return response;
        //    }
        //}

        public List<ArrivalsReportModel> SearchArrivals(ArrivalsReport.SearchArrivalsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<ArrivalsReportModel> list = new List<ArrivalsReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _resorts = model.SearchArrival_Resort != null ? model.SearchArrival_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _leadSources = model.SearchArrival_LeadSource != null ? model.SearchArrival_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            //var _bookingStatus = model.SearchArrival_BookingStatus != null ? model.SearchArrival_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _bookingStatus = model.SearchArrival_BookingStatus != null ? model.SearchArrival_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _leadStatus = new int?[] { 1, 2, 6, 13, 15 };//New, Assigned, In Process, Pushed to Onsite, Diamante //by Chelsea on email from 2017-02-17
            var _assignedToUsers = model.SearchArrival_AssignedToUser != null ? model.SearchArrival_AssignedToUser.Select(m => (Guid?)Guid.Parse(m)).ToArray() : UserDataModel.GetUsersBySupervisor(session.UserID).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var iDate = model.SearchArrival_I_ArrivalDate != null ? DateTime.Parse(model.SearchArrival_I_ArrivalDate) : DateTime.MinValue;
            var fDate = model.SearchArrival_F_ArrivalDate != null ? DateTime.Parse(model.SearchArrival_F_ArrivalDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        where _terminals.Contains(lead.terminalID)
                        && _leadStatus.Contains(lead.leadStatusID)
                        //&& _bookingStatus.Contains(lead.bookingStatusID)
                        && _bookingStatus.Contains(lead.secondaryBookingStatusID)
                        && _leadSources.Contains(lead.leadSourceID)
                        && _resorts.Contains(rsv.placeID)
                        && _assignedToUsers.Contains(lead.assignedToUserID)
                        && (iDate <= rsv.arrivalDate && rsv.arrivalDate <= fDate)
                        select new
                        {
                            lead.firstName,
                            lead.lastName,
                            clubType = lead.tblMemberInfo.Count() > 0 ? lead.tblMemberInfo.OrderByDescending(m => m.memberInfoID).FirstOrDefault().clubType : "",
                            rsv.arrivalDate,
                            resort = rsv.placeID != null ? rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination : "",
                            //bookingStatus = lead.bookingStatusID != null ? lead.tblBookingStatus.bookingStatus : "",
                            bookingStatus = lead.secondaryBookingStatusID != null ? lead.tblBookingStatus1.bookingStatus : "",
                            numberAdults = rsv.numberAdults != null ? rsv.numberAdults : "",
                            numberChildren = rsv.numberChildren != null ? rsv.numberChildren : "",
                            flights = rsv.tblFlights,
                            leadSource = lead.leadSourceID != null ? lead.tblLeadSources.leadSource : "",
                            assignedToUser = lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName + " " + lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                            lead.tblMemberInfo.FirstOrDefault().coOwner,
                            lead.tblMemberInfo.FirstOrDefault().contractNumber,
                            lead.tblMemberInfo.FirstOrDefault().memberNumber
                        };

            foreach (var i in query)
            {
                var flight = "";
                if (i.flights.Count() > 0)
                {
                    var _info = i.flights.OrderByDescending(m => m.flightDateTime).First();
                    flight = _info.tblAirLines.airLine + " " + _info.flightNumber + "<br />" + _info.flightDateTime.ToString("yyyy-MM-dd hh:mm tt", CultureInfo.InvariantCulture);
                }
                list.Add(new ArrivalsReportModel()
                {
                    ArrivalsReport_FirstName = i.firstName,
                    ArrivalsReport_LastName = i.lastName,
                    ArrivalsReport_ClubType = i.clubType,
                    ArrivalsReport_AccountNumber = i.memberNumber,
                    ArrivalsReport_ContractNumber = i.contractNumber,
                    ArrivalsReport_CoOwner = i.coOwner,
                    ArrivalsReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    ArrivalsReport_Resort = i.resort,
                    ArrivalsReport_BookingStatus = i.bookingStatus,
                    ArrivalsReport_NumberAdults = i.numberAdults,
                    ArrivalsReport_NumberChildren = i.numberChildren,
                    ArrivalsReport_FlightInformation = flight,
                    ArrivalsReport_LeadSource = i.leadSource,
                    ArrivalsReport_AssignedToUser = i.assignedToUser
                });
            }

            return list;
        }

        public List<DuplicateLeadsReportModel> SearchDuplicateLeads(DuplicateLeadsReport.SearchDuplicateLeadsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<DuplicateLeadsReportModel> list = new List<DuplicateLeadsReportModel>();

            var fromDate = model.SearchDuplicateLeads_I_ArrivalDate != null ? DateTime.Parse(model.SearchDuplicateLeads_I_ArrivalDate, CultureInfo.InvariantCulture) : DateTime.MinValue;
            var toDate = model.SearchDuplicateLeads_F_ArrivalDate != null ? DateTime.Parse(model.SearchDuplicateLeads_F_ArrivalDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;
            var resorts = model.SearchDuplicateLeads_Resort != null ? model.SearchDuplicateLeads_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadSources = model.SearchDuplicateLeads_LeadSource != null ? model.SearchDuplicateLeads_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadStatus = model.SearchDuplicateLeads_LeadStatus != null ? model.SearchDuplicateLeads_LeadStatus.Select(m => (int?)int.Parse(m)).ToArray() : LeadStatusDataModel.GetLeadStatusByTerminal().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var assignedToUser = model.SearchDuplicateLeads_AssignedToUser != null ? model.SearchDuplicateLeads_AssignedToUser.Select(m => (Guid?)Guid.Parse(m)).ToArray() : UserDataModel.GetUsersBySupervisor(session.UserID).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();

            IEnumerable<DuplicateLeadsReportModel> query = from lead in db.tblLeads
                                                           join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                                                           into lead_rsv
                                                           from rsv in lead_rsv.DefaultIfEmpty()
                                                           join member in db.tblMemberInfo on lead.leadID equals member.leadID into lead_member
                                                           from member in lead_member.DefaultIfEmpty()
                                                           where (fromDate <= rsv.arrivalDate && rsv.arrivalDate <= toDate)
                                                           && resorts.Contains(rsv.placeID)
                                                           && leadSources.Contains(lead.leadSourceID)
                                                           && leadStatus.Contains(lead.leadStatusID)
                                                           && assignedToUser.Contains(lead.assignedToUserID)
                                                           select new DuplicateLeadsReportModel()
                                                           {
                                                               DuplicateLeadsReport_LeadID = lead.leadID,
                                                               DuplicateLeadsReport_Name = lead.firstName + " " + lead.lastName,
                                                               DuplicateLeadsReport_Email = lead.tblLeadEmails.FirstOrDefault(x => x.main).email.ToLower(),
                                                               DuplicateLeadsReport_PhoneNumber = lead.tblPhones.FirstOrDefault(x => x.main).phone,
                                                               DuplicateLeadsReport_MemberAccount = member.memberNumber,
                                                               DuplicateLeadsReport_ConfirmationNumber = rsv.hotelConfirmationNumber,
                                                               DuplicateLeadsReport_ArrivalDate = (DateTime)rsv.arrivalDate,
                                                               //DuplicateLeadsReport_BookingStatus = lead.tblBookingStatus.bookingStatus,
                                                               DuplicateLeadsReport_BookingStatus = lead.tblBookingStatus1.bookingStatus,
                                                               DuplicateLeadsReport_LeadSource = lead.tblLeadSources.leadSource,
                                                               DuplicateLeadsReport_LeadStatus = lead.tblLeadStatus.leadStatus,
                                                               DuplicateLeadsReport_AssignedToUser = lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName + " " + lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                                                               DuplicateLeadsReport_Resort = rsv.placeID != null ? rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination : ""
                                                           };

            var names = query.GroupBy(m => m.DuplicateLeadsReport_Name).Where(m => m.Count() > 1).SelectMany(m => m).ToList();//.Select(m => m).ToList();
            var emails = query.GroupBy(m => m.DuplicateLeadsReport_Email).Where(m => m.Count() > 1 && m.Key != null && m.Key != "notgiven@notgiven.com" && m.Key != "none@none.com").SelectMany(m => m).ToList();
            var phones = query.GroupBy(m => m.DuplicateLeadsReport_PhoneNumber).Where(m => m.Count() > 1 && m.Key != null && m.Key != "1111111111").SelectMany(m => m).ToList();
            var members = query.GroupBy(m => m.DuplicateLeadsReport_MemberAccount).Where(m => m.Count() > 1 && m.Key != null).SelectMany(m => m).ToList();
            var confirmationNumbers = query.GroupBy(m => m.DuplicateLeadsReport_ConfirmationNumber).Where(m => m.Count() > 1 && m.Key != null).SelectMany(m => m).ToList();

            var iList = new List<DuplicateLeadsReportModel>();

            var dupes = names.Select(m => m).Concat(emails.Select(m => m)).Concat(phones.Select(m => m)).Concat(members.Select(m => m)).Concat(confirmationNumbers.Select(m => m));
            var duplicates = dupes.GroupBy(m => m.DuplicateLeadsReport_LeadID).Select(m => m).ToList();

            foreach (var i in duplicates)
            {
                iList.Add(i.FirstOrDefault());
            }

            foreach (var i in iList)
            {
                list.Add(new DuplicateLeadsReportModel()
                {
                    DuplicateLeadsReport_Lead = i.DuplicateLeadsReport_LeadID.ToString(),
                    DuplicateLeadsReport_Name = i.DuplicateLeadsReport_Name,
                    DuplicateLeadsReport_BookingStatus = i.DuplicateLeadsReport_BookingStatus,
                    DuplicateLeadsReport_LeadStatus = i.DuplicateLeadsReport_LeadStatus,
                    DuplicateLeadsReport_LeadSource = i.DuplicateLeadsReport_LeadSource,
                    DuplicateLeadsReport_ArrivalDate = i.DuplicateLeadsReport_ArrivalDate,
                    DuplicateLeadsReport_AssignedToUser = i.DuplicateLeadsReport_AssignedToUser,
                    DuplicateLeadsReport_Resort = i.DuplicateLeadsReport_Resort,
                    DuplicateLeadsReport_ConfirmationNumber = i.DuplicateLeadsReport_ConfirmationNumber ?? "",
                    DuplicateLeadsReport_PhoneNumber = i.DuplicateLeadsReport_PhoneNumber != null ? "******" + String.Join("", i.DuplicateLeadsReport_PhoneNumber.ToArray().Reverse().Take((i.DuplicateLeadsReport_PhoneNumber.ToArray().Length >= 4 ? 4 : i.DuplicateLeadsReport_PhoneNumber.Length)).Reverse().Select(m => m.ToString())) : "",
                    DuplicateLeadsReport_Email = i.DuplicateLeadsReport_Email ?? "",
                    DuplicateLeadsReport_MemberAccount = i.DuplicateLeadsReport_MemberAccount ?? ""
                });
            }

            list = list.OrderBy(m => m.DuplicateLeadsReport_Name).Distinct().ToList();
            return list;
        }

        public List<IndicatorsReportModel> SearchIndicatorsPerResort(IndicatorsModel.SearchIndicatorsModel model)
        {
            List<IndicatorsReportModel> list = new List<IndicatorsReportModel>();
            ePlatEntities db = new ePlatEntities();

            List<int?> listLeadStatus = new List<int?>();

            //lead status not permitted in query results
            listLeadStatus.Add(3);//Banked
            listLeadStatus.Add(4);//Cancelled
            listLeadStatus.Add(10);//Duplicate
            listLeadStatus.Add(11);//International
            listLeadStatus.Add(14);//Last Minute
            listLeadStatus.Add(15);//Diamante

            #region"variables declaration"
            float totalArrivals = 0;
            float totalBookings = 0;
            float totalBookingsPer = 0;
            float totalTours = 0;
            float totalToursPer = 0;
            float totalCapturePer = 0;
            float totalQualified = 0;
            float totalQFactor = 0;
            float totalVolume = 0;
            float totalVPG = 0;
            float totalMissedSales = 0;
            float totalMissedSalesVolume = 0;
            float totalMVPG = 0;

            var iArrDate = model.SearchIndicator_I_ArrivalDate != null ? DateTime.Parse(model.SearchIndicator_I_ArrivalDate, CultureInfo.InvariantCulture) : (DateTime?)null;
            var fArrDate = model.SearchIndicator_F_ArrivalDate != null ? DateTime.Parse(model.SearchIndicator_F_ArrivalDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var iTourDate = model.SearchIndicator_I_TourDate != null ? DateTime.Parse(model.SearchIndicator_I_TourDate, CultureInfo.InvariantCulture) : (DateTime?)null;
            var fTourDate = model.SearchIndicator_F_TourDate != null ? DateTime.Parse(model.SearchIndicator_F_TourDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var _leadSources = model.SearchIndicator_LeadSource ?? LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _leadStatus = LeadStatusDataModel.GetLeadStatusByTerminal().Select(m => (int?)int.Parse(m.Value)).ToArray();
            _leadStatus = _leadStatus.Where(m => !listLeadStatus.Contains(m)).ToArray();
            var _resorts = model.SearchIndicator_Resort ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            #endregion

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.SearchIndicator_DrpResorts;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {
                foreach (var resort in _resorts)
                {
                    float arrivals = 0;
                    float bookings = 0;
                    float tours = 0;
                    float qualified = 0;
                    float volume = 0;
                    float missedSales = 0;
                    float missedSalesVolume = 0;
                    float bookingPercentage = 0;
                    float qFactor = 0;
                    float capturePercentage = 0;
                    float tourPercentage = 0;
                    float vpg = 0;
                    float mvpg = 0;
                    float _totalPaidVolume = 0;

                    var q = from lead in db.tblLeads
                            join rsv in db.tblReservations on lead.leadID equals rsv.leadID into lead_rsv
                            from rsv in lead_rsv.DefaultIfEmpty()
                            join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                            from pst in rsv_pst.DefaultIfEmpty()
                            where rsv.placeID == resort
                            && terminals.Contains(lead.terminalID)
                            //&& !listLeadStatus.Contains(lead.leadStatusID)
                            && _leadStatus.Contains(lead.leadStatusID)
                            && (iArrDate == null || (rsv.arrivalDate >= iArrDate && rsv.arrivalDate <= fArrDate))
                            && (iTourDate == null || (pst.realTourDate >= iTourDate && pst.realTourDate <= fTourDate))
                            && _leadSources.Contains(lead.leadSourceID)
                            select new
                            {
                                arrivalDate = rsv.arrivalDate,
                                realTourDate = pst.realTourDate,
                                resort = rsv.placeID,
                                resortName = rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination,
                                leadSource = lead.leadSourceID,
                                leadStatus = lead.leadStatusID,
                                user = lead.assignedToUserID,
                                bookingStatus = lead.bookingStatusID,
                                finalTourStatus = pst.finalTourStatusID,
                                finalBookingStatus = pst.finalBookingStatusID,
                                tourStatus = pst.tourStatusID,
                                salesVolume = pst.tblContractsHistory.FirstOrDefault().salesVolume,
                                canceled = rsv.reservationStatusID == 3 ? true : false,
                                totalPaid = rsv.totalPaid
                            };

                    foreach (var i in q)
                    {
                        arrivals++;
                        if (i.bookingStatus != null && (i.bookingStatus == 1 || i.bookingStatus == 26))//Pre-Book
                        {
                            bookings++;
                            if (i.finalTourStatus != null && i.finalTourStatus == 3 || i.finalTourStatus == 5)//Qualified Tour || GI
                            {
                                tours++;
                                if (i.finalTourStatus == 3)//Qualified Tour
                                    qualified++;
                            }
                            if (i.salesVolume != null && i.salesVolume != 0)
                            {
                                if (i.canceled == false)
                                    volume = volume + (float)i.salesVolume;
                            }
                        }
                        else
                        {
                            if (i.salesVolume != null && i.salesVolume != 0)
                            {
                                if (i.canceled == false)
                                {
                                    missedSales++;
                                    missedSalesVolume = missedSalesVolume + (float)i.salesVolume;
                                }
                            }
                        }
                        _totalPaidVolume += (i.totalPaid != null ? (float)i.totalPaid : 0);
                    }
                    if (arrivals > 0)
                    {
                        bookingPercentage = bookings / arrivals * 100;
                        qFactor = qualified / arrivals * 100;
                        capturePercentage = tours / arrivals * 100;
                    }
                    if (bookings > 0)
                        tourPercentage = tours / bookings * 100;
                    if (qualified > 0)
                    {
                        vpg = volume / qualified;
                        mvpg = (volume + missedSalesVolume) / qualified;
                    }

                    var bookingsPercentage = ReportsCatalogs.Truncate(bookingPercentage, 2).ToString();
                    var toursPercentage = ReportsCatalogs.Truncate(tourPercentage, 2).ToString();
                    var capturesPercentage = ReportsCatalogs.Truncate(capturePercentage, 2).ToString();
                    var qFactors = ReportsCatalogs.Truncate(qFactor, 2).ToString();
                    var volumes = ReportsCatalogs.Truncate(volume, 2).ToString();
                    var VPGs = ReportsCatalogs.Truncate(vpg, 2).ToString();
                    var missedSale = ReportsCatalogs.Truncate(missedSales, 2).ToString();
                    var missedSalesVolumes = ReportsCatalogs.Truncate(missedSalesVolume, 2).ToString();
                    var MVPGs = ReportsCatalogs.Truncate(mvpg, 2).ToString();
                    var queryCount = q.Count();
                    var totalPaidCount = q.Where(m => m.totalPaid != null).Count();
                    float result = queryCount > 0 ? (float)totalPaidCount / queryCount : 0;
                    var perc = result * 100;
                    var totalPaidPercentage = q.Count() > 0 ? ReportsCatalogs.Truncate((((float)totalPaidCount / queryCount) * 100), 2) : 0;
                    var totalPaidVolume = ReportsCatalogs.Truncate(_totalPaidVolume, 2);
                    var totalPaidPerArrival = totalPaidVolume > 0 ? ReportsCatalogs.Truncate((totalPaidVolume / arrivals), 2).ToString() : "0";

                    list.Add(new IndicatorsReportModel()
                    {
                        IndicatorsReport_Resort = resorts.FirstOrDefault(m => long.Parse(m.Value) == resort).Text,
                        IndicatorsReport_Arrivals = arrivals.ToString(),
                        IndicatorsReport_Bookings = bookings.ToString(),
                        IndicatorsReport_BookingsPercentage = bookingsPercentage,
                        IndicatorsReport_Tours = tours.ToString(),
                        IndicatorsReport_ToursPercentage = toursPercentage,
                        IndicatorsReport_CapturePercentage = capturesPercentage,
                        IndicatorsReport_Qualified = qualified.ToString(),
                        IndicatorsReport_QFactor = qFactors,
                        IndicatorsReport_Volume = volumes,
                        IndicatorsReport_VPG = VPGs,
                        IndicatorsReport_MissedSales = missedSale,
                        IndicatorsReport_MissedSalesVolume = missedSalesVolumes,
                        IndicatorsReport_MVPG = MVPGs,
                        IndicatorsReport_TotalPaidPercentage = totalPaidPercentage.ToString(),
                        IndicatorsReport_TotalPaidVolume = totalPaidVolume.ToString(),
                        IndicatorsReport_TotalPaidPerArrival = totalPaidPerArrival.ToString()
                    });

                    totalArrivals += arrivals;
                    totalBookings += bookings;
                    totalTours += tours;
                    totalQualified += qualified;
                    totalVolume += volume;
                    totalMissedSales += missedSales;
                    totalMissedSalesVolume += missedSalesVolume;
                    totalMVPG += mvpg;
                }

                if (totalArrivals > 0)
                {
                    totalBookingsPer = (totalBookings / totalArrivals) * 100;
                    totalQFactor = (totalQualified / totalArrivals) * 100;
                    totalCapturePer = (totalTours / totalArrivals) * 100;
                }
                if (totalBookings > 0)
                    totalToursPer = (totalTours / totalBookings) * 100;
                if (totalQualified > 0)
                    totalVPG = totalVolume / totalQualified;

                var totalBookingsPercentage = ReportsCatalogs.Truncate(totalBookingsPer, 2).ToString();
                var totalToursPercentage = ReportsCatalogs.Truncate(totalToursPer, 2).ToString();
                var totalCapturesPercentage = ReportsCatalogs.Truncate(totalCapturePer, 2).ToString();
                var totalQFactors = ReportsCatalogs.Truncate(totalQFactor, 2).ToString();
                var totalVolumes = ReportsCatalogs.Truncate(totalVolume, 2).ToString();
                var totalVPGs = ReportsCatalogs.Truncate(totalVPG, 2).ToString();
                var totalMissedSale = ReportsCatalogs.Truncate(totalMissedSales, 2).ToString();
                var totalMissedSalesVolumes = ReportsCatalogs.Truncate(totalMissedSalesVolume, 2).ToString();
                var totalMVPGs = ReportsCatalogs.Truncate(totalMVPG, 2).ToString();

                list.Add(new IndicatorsReportModel()
                {
                    IndicatorsReport_FirstName = "Total",
                    IndicatorsReport_Arrivals = totalArrivals.ToString(),
                    IndicatorsReport_Bookings = totalBookings.ToString(),
                    IndicatorsReport_BookingsPercentage = totalBookingsPercentage,
                    IndicatorsReport_Tours = totalTours.ToString(),
                    IndicatorsReport_ToursPercentage = totalToursPercentage,
                    IndicatorsReport_CapturePercentage = totalCapturesPercentage,
                    IndicatorsReport_Qualified = totalQualified.ToString(),
                    IndicatorsReport_QFactor = totalQFactors,
                    IndicatorsReport_Volume = totalVolumes,
                    IndicatorsReport_VPG = totalVPGs,
                    IndicatorsReport_MissedSales = totalMissedSale,
                    IndicatorsReport_MissedSalesVolume = totalMissedSalesVolumes,
                    IndicatorsReport_MVPG = totalMVPGs
                });

                scope.Complete();
                return list;
            }
        }

        public List<IndicatorsReportModel> SearchIndicators(IndicatorsModel.SearchIndicatorsModel model)
        {
            List<IndicatorsReportModel> list = new List<IndicatorsReportModel>();
            ePlatEntities db = new ePlatEntities();

            List<int?> listLeadStatus = new List<int?>();
            var filePath = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
            var fileRoute = Path.Combine(filePath, "Indicators_Report.csv");
            var fileWriter = new StreamWriter(fileRoute);
            var headerLine = "Name,Arrivals,Bookings,Booking Percentage,Tours,Tour Percentage,Capture Percentage,Qualified,Q Factor,Volume,VPG,Missed Sales,Missed Sales Volume,M-VPG,Total Paid Percentage,Total Paid Volume,Total Paid Per Arrival";

            //lead status not permitted in query results
            listLeadStatus.Add(3);//Banked
            listLeadStatus.Add(4);//Cancelled
            listLeadStatus.Add(10);//Duplicate
            listLeadStatus.Add(11);//Spanish
            //listLeadStatus.Add(13);//Pushed to Onsite
            listLeadStatus.Add(14);//Last Minute
            listLeadStatus.Add(15);//Diamante

            #region "query to get agents filtered by workgroup and not administrator"
            var currentUser = session.UserID;
            IQueryable<tblUserProfiles> sqlAgentsQuery;

            if (model.SearchIndicator_AssignedToUser != null)
            {
                var userIds = model.SearchIndicator_AssignedToUser.Select(m => Guid.Parse(m)).ToArray();

                sqlAgentsQuery = from profile in db.tblUserProfiles
                                 where userIds.Contains(profile.userID)
                                 select profile;
            }
            else
            {
                var userIds = new Guid[] { };
                if (GeneralFunctions.IsUserInRole("Agent", null, true))
                {
                    userIds = UserDataModel.GetUsersBySupervisor(currentUser, false, false, true).Select(m => Guid.Parse(m.Value)).ToArray();
                }
                else
                {
                    userIds = UserDataModel.GetUsersBySupervisor(currentUser, true, false, true).Select(m => Guid.Parse(m.Value)).ToArray();
                }

                sqlAgentsQuery = from profile in db.tblUserProfiles
                                 where userIds.Contains(profile.userID)
                                 select profile;
            }

            if (GeneralFunctions.IsUserInRole("Agent", null, true))
            {
                sqlAgentsQuery = sqlAgentsQuery.Where(m => m.userID == currentUser);
            }


            #endregion

            #region"variables declaration"
            float totalArrivals = 0;
            float totalBookings = 0;
            float totalBookingsPer = 0;
            float totalTours = 0;
            float totalToursPer = 0;
            float totalCapturePer = 0;
            float totalQualified = 0;
            float totalQFactor = 0;
            float totalVolume = 0;
            float totalVPG = 0;
            float totalMissedSales = 0;
            float totalMissedSalesVolume = 0;
            float totalMVPG = 0;
            //float totalPaidVolume = 0;

            var iArrDate = model.SearchIndicator_I_ArrivalDate != null ? DateTime.Parse(model.SearchIndicator_I_ArrivalDate, CultureInfo.InvariantCulture) : (DateTime?)null;
            var fArrDate = model.SearchIndicator_F_ArrivalDate != null ? DateTime.Parse(model.SearchIndicator_F_ArrivalDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var iTourDate = model.SearchIndicator_I_TourDate != null ? DateTime.Parse(model.SearchIndicator_I_TourDate, CultureInfo.InvariantCulture) : (DateTime?)null;
            var fTourDate = model.SearchIndicator_F_TourDate != null ? DateTime.Parse(model.SearchIndicator_F_TourDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var _leadSources = model.SearchIndicator_LeadSource ?? LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.SearchIndicator_Resort ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            #endregion

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var isUserAuthorized = false;
            if (session.WorkGroupID == 8 && Utils.GeneralFunctions.IsUserInRole("Department Administrator", null, false, db)) //temporary user validation to export permissions
            {
                fileWriter.WriteLine(headerLine);
                isUserAuthorized = true;
            }

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {
                foreach (var user in sqlAgentsQuery)
                {
                    #region"variables declaration"
                    Guid? agentID = user.userID;
                    float arrivals = 0;
                    float bookings = 0;
                    float tours = 0;
                    float qualified = 0;
                    float volume = 0;
                    float missedSales = 0;
                    float missedSalesVolume = 0;
                    float bookingPercentage = 0;
                    float qFactor = 0;
                    float capturePercentage = 0;
                    float tourPercentage = 0;
                    float vpg = 0;
                    float mvpg = 0;
                    float _totalPaidVolume = 0;
                    #endregion

                    #region"query to get info for each agent
                    var q = from lead in db.tblLeads
                            join rsv in db.tblReservations on lead.leadID equals rsv.leadID into lead_rsv
                            from rsv in lead_rsv.DefaultIfEmpty()
                            join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                            from pst in rsv_pst.DefaultIfEmpty()
                            where lead.assignedToUserID == agentID
                            && terminals.Contains(lead.terminalID)
                            && !listLeadStatus.Contains(lead.leadStatusID)
                            && (iArrDate == null || (rsv.arrivalDate >= iArrDate && rsv.arrivalDate <= fArrDate))
                            && (iTourDate == null || (pst.realTourDate >= iTourDate && pst.realTourDate <= fTourDate))
                            && _leadSources.Contains(lead.leadSourceID)
                            && _resorts.Contains(rsv.placeID)
                            select new
                            {
                                arrivalDate = rsv.arrivalDate,
                                realTourDate = pst.realTourDate,
                                resort = rsv.placeID,
                                leadSource = lead.leadSourceID,
                                leadStatus = lead.leadStatusID,
                                user = lead.assignedToUserID,
                                //bookingStatus = lead.bookingStatusID,
                                bookingStatus = lead.secondaryBookingStatusID,
                                finalTourStatus = pst.finalTourStatusID,
                                finalBookingStatus = pst.finalBookingStatusID,
                                tourStatus = pst.tourStatusID,
                                salesVolume = pst.tblContractsHistory.FirstOrDefault().salesVolume,
                                canceled = rsv.reservationStatusID == 3 ? true : false,
                                totalPaid = rsv.totalPaid
                            };
                    #endregion

                    #region"get summatory of current agent
                    foreach (var i in q)
                    {
                        arrivals++;
                        if (i.bookingStatus != null && (i.bookingStatus == 1 || i.bookingStatus == 26))//Pre-Book
                        {
                            bookings++;
                            if (i.finalTourStatus != null && i.finalTourStatus == 3 || i.finalTourStatus == 5)//Qualified Tour || GI
                            {
                                tours++;
                                if (i.finalTourStatus == 3)//Qualified Tour
                                    qualified++;
                            }
                            if (i.salesVolume != null && i.salesVolume != 0)
                            {
                                if (i.canceled == false)
                                    volume = volume + (float)i.salesVolume;
                            }
                        }
                        else
                        {
                            if (i.salesVolume != null && i.salesVolume != 0)
                            {
                                if (i.canceled == false)
                                {
                                    missedSales++;
                                    missedSalesVolume = missedSalesVolume + (float)i.salesVolume;
                                }
                            }
                        }
                        _totalPaidVolume += (i.totalPaid != null ? (float)i.totalPaid : 0);
                    }
                    if (arrivals > 0)
                    {
                        bookingPercentage = bookings / arrivals * 100;
                        qFactor = qualified / arrivals * 100;
                        capturePercentage = tours / arrivals * 100;
                    }
                    if (bookings > 0)
                        tourPercentage = tours / bookings * 100;
                    if (qualified > 0)
                    {
                        vpg = volume / qualified;
                        mvpg = (volume + missedSalesVolume) / qualified;
                    }
                    #endregion

                    var bookingsPercentage = ReportsCatalogs.Truncate(bookingPercentage, 2).ToString();
                    var toursPercentage = ReportsCatalogs.Truncate(tourPercentage, 2).ToString();
                    var capturesPercentage = ReportsCatalogs.Truncate(capturePercentage, 2).ToString();
                    var qFactors = ReportsCatalogs.Truncate(qFactor, 2).ToString();
                    var volumes = ReportsCatalogs.Truncate(volume, 2).ToString();
                    var VPGs = ReportsCatalogs.Truncate(vpg, 2).ToString();
                    var missedSale = ReportsCatalogs.Truncate(missedSales, 2).ToString();
                    var missedSalesVolumes = ReportsCatalogs.Truncate(missedSalesVolume, 2).ToString();
                    var MVPGs = ReportsCatalogs.Truncate(mvpg, 2).ToString();
                    var queryCount = q.Count();
                    var totalPaidCount = q.Where(m => m.totalPaid != null).Count();
                    float result = queryCount > 0 ? (float)totalPaidCount / queryCount : 0;
                    var perc = result * 100;
                    var totalPaidPercentage = q.Count() > 0 ? ReportsCatalogs.Truncate((((float)totalPaidCount / queryCount) * 100), 2) : 0;
                    var totalPaidVolume = ReportsCatalogs.Truncate(_totalPaidVolume, 2);
                    var totalPaidPerArrival = totalPaidVolume > 0 ? ReportsCatalogs.Truncate((totalPaidVolume / arrivals), 2).ToString() : "0";

                    list.Add(new IndicatorsReportModel()
                    {
                        IndicatorsReport_FirstName = user.firstName,
                        IndicatorsReport_LastName = user.lastName,
                        IndicatorsReport_Arrivals = arrivals.ToString(),
                        IndicatorsReport_Bookings = bookings.ToString(),
                        IndicatorsReport_BookingsPercentage = bookingsPercentage,
                        IndicatorsReport_Tours = tours.ToString(),
                        IndicatorsReport_ToursPercentage = toursPercentage,
                        IndicatorsReport_CapturePercentage = capturesPercentage,
                        IndicatorsReport_Qualified = qualified.ToString(),
                        IndicatorsReport_QFactor = qFactors,
                        IndicatorsReport_Volume = volumes,
                        IndicatorsReport_VPG = VPGs,
                        IndicatorsReport_MissedSales = missedSale,
                        IndicatorsReport_MissedSalesVolume = missedSalesVolumes,
                        IndicatorsReport_MVPG = MVPGs,
                        IndicatorsReport_TotalPaidPercentage = totalPaidPercentage.ToString(),
                        IndicatorsReport_TotalPaidVolume = totalPaidVolume.ToString(),
                        IndicatorsReport_TotalPaidPerArrival = totalPaidPerArrival.ToString()
                    });
                    if (isUserAuthorized)
                    {
                        var lineBuilder = user.firstName + " " + user.lastName + "," + arrivals.ToString() + "," + bookings.ToString() + "," + bookingsPercentage
                             + "," + tours.ToString() + "," + toursPercentage + "," + capturesPercentage + "," + qualified.ToString() + "," + qFactors + "," + volumes
                              + "," + VPGs + "," + missedSale + "," + missedSalesVolumes + "," + MVPGs + "," + totalPaidPercentage + "," + totalPaidVolume + "," + totalPaidPercentage;
                        fileWriter.WriteLine(lineBuilder);
                    }


                    totalArrivals += arrivals;
                    totalBookings += bookings;
                    totalTours += tours;
                    totalQualified += qualified;
                    totalVolume += volume;
                    totalMissedSales += missedSales;
                    totalMissedSalesVolume += missedSalesVolume;
                    totalMVPG += mvpg;
                }

                if (totalArrivals > 0)
                {
                    totalBookingsPer = (totalBookings / totalArrivals) * 100;
                    totalQFactor = (totalQualified / totalArrivals) * 100;
                    totalCapturePer = (totalTours / totalArrivals) * 100;
                }
                if (totalBookings > 0)
                    totalToursPer = (totalTours / totalBookings) * 100;
                if (totalQualified > 0)
                    totalVPG = totalVolume / totalQualified;

                var totalBookingsPercentage = ReportsCatalogs.Truncate(totalBookingsPer, 2).ToString();
                var totalToursPercentage = ReportsCatalogs.Truncate(totalToursPer, 2).ToString();
                var totalCapturesPercentage = ReportsCatalogs.Truncate(totalCapturePer, 2).ToString();
                var totalQFactors = ReportsCatalogs.Truncate(totalQFactor, 2).ToString();
                var totalVolumes = ReportsCatalogs.Truncate(totalVolume, 2).ToString();
                var totalVPGs = ReportsCatalogs.Truncate(totalVPG, 2).ToString();
                var totalMissedSale = ReportsCatalogs.Truncate(totalMissedSales, 2).ToString();
                var totalMissedSalesVolumes = ReportsCatalogs.Truncate(totalMissedSalesVolume, 2).ToString();
                var totalMVPGs = ReportsCatalogs.Truncate(totalMVPG, 2).ToString();

                list.Add(new IndicatorsReportModel()
                {
                    IndicatorsReport_FirstName = "Total",
                    IndicatorsReport_Arrivals = totalArrivals.ToString(),
                    IndicatorsReport_Bookings = totalBookings.ToString(),
                    IndicatorsReport_BookingsPercentage = totalBookingsPercentage,
                    IndicatorsReport_Tours = totalTours.ToString(),
                    IndicatorsReport_ToursPercentage = totalToursPercentage,
                    IndicatorsReport_CapturePercentage = totalCapturesPercentage,
                    IndicatorsReport_Qualified = totalQualified.ToString(),
                    IndicatorsReport_QFactor = totalQFactors,
                    IndicatorsReport_Volume = totalVolumes,
                    IndicatorsReport_VPG = totalVPGs,
                    IndicatorsReport_MissedSales = totalMissedSale,
                    IndicatorsReport_MissedSalesVolume = totalMissedSalesVolumes,
                    IndicatorsReport_MVPG = totalMVPGs
                });
                if (isUserAuthorized)
                {
                    var totalBuilder = "Total" + "," + totalArrivals.ToString() + "," + totalBookings + "," + totalBookingsPercentage + "," + totalTours
                        + "," + totalToursPercentage + "," + totalCapturesPercentage + "," + totalQualified.ToString() + "," + totalQFactors
                         + "," + totalVolumes + "," + totalVPGs + "," + totalMissedSale + "," + totalMissedSalesVolume + "," + totalMVPGs + ",,,";
                    fileWriter.WriteLine(totalBuilder);
                }
                fileWriter.Close();
                scope.Complete();
                return list;
            }
        }

        public List<PipelineReportModel> SearchPipeline(PipelineModel.SearchPipelineModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PipelineReportModel> list = new List<PipelineReportModel>();
            var userID = session.UserID;
            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _leadSources = model.SearchPipeline_LeadSource != null ? model.SearchPipeline_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.SearchPipeline_Resort != null ? model.SearchPipeline_Resort.Select(m => (long?)long.Parse(m)).ToArray() : PlaceDataModel.GetResortsByProfile(db).Select(m => (long?)long.Parse(m.Value)).ToArray();

            var sqlAgentsQuery = model.SearchPipeline_AssignedToUser != null ? model.SearchPipeline_AssignedToUser.Select(m => (Guid?)Guid.Parse(m)).ToArray() : UserDataModel.GetUsersBySupervisor(userID, false, false, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            if (!GeneralFunctions.IsUserInRole("Administrator", null, true) && !GeneralFunctions.IsUserInRole("Supervisor", null, false) && !GeneralFunctions.IsUserInRole("Team Leader", null, true))
            {
                sqlAgentsQuery = new Guid?[] { userID };
            }

            var users = sqlAgentsQuery;
            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {
                var _status = new string[] { "New", "Assigned", "Banked", "Cancelled", "Dead", "In Process", "Duplicate", "International", "Pushed to Onsite" };
                var _leadStatus = db.tblLeadStatus.Where(m => _status.Contains(m.leadStatus)).Select(m => (int?)m.leadStatusID).ToArray();

                var query = (from lead in db.tblLeads
                             join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                             join profile in db.tblUserProfiles on lead.assignedToUserID equals profile.userID into lead_profile
                             from profile in lead_profile.DefaultIfEmpty()
                             join leadSource in db.tblLeadSources on lead.leadSourceID equals leadSource.leadSourceID into lead_source
                             from leadSource in lead_source.DefaultIfEmpty()
                             join leadStatus in db.tblLeadStatus on lead.leadStatusID equals leadStatus.leadStatusID into lead_status
                             from leadStatus in lead_status.DefaultIfEmpty()
                             join place in db.tblPlaces on rsv.placeID equals place.placeID into rsv_place
                             from place in rsv_place.DefaultIfEmpty()
                             join destination in db.tblDestinations on place.destinationID equals destination.destinationID into place_destination
                             from destination in place_destination.DefaultIfEmpty()
                             join clasification in db.tblCallClasifications on lead.callClasificationID equals clasification.callClasificationID into lead_call
                             from clasification in lead_call.DefaultIfEmpty()
                             where terminals.Contains(lead.terminalID)
                             && _leadSources.Contains(lead.leadSourceID)
                             && users.Contains(lead.assignedToUserID)
                             select new
                             {
                                 lead.leadID,
                                 firstName = lead.firstName,
                                 lastName = lead.lastName,
                                 agentName = profile.firstName + " " + profile.lastName,
                                 leadSourceID = lead.leadSourceID,
                                 leadSource = leadSource.leadSource,
                                 leadStatus = leadStatus.leadStatus,
                                 arrivalDate = rsv.arrivalDate,
                                 resortID = rsv.placeID,
                                 resort = place.place + " " + destination.destination,
                                 assignedToUser = lead.assignedToUserID,
                                 callClasificationID = lead.callClasificationID,
                                 callClasification = clasification.callClasification,
                                 profile.userID
                             }).Distinct();

                var iDate = (DateTime?)DateTime.Parse(model.SearchPipeline_I_ArrivalDate);
                var fDate = (DateTime?)DateTime.Parse(model.SearchPipeline_F_ArrivalDate).AddDays(1).AddSeconds(-1);

                query = query.Where(m => iDate <= m.arrivalDate && m.arrivalDate <= fDate);

                query = query.Where(m => _resorts.Contains(m.resortID));

                //foreach (var user in _users)
                foreach (var user in users)
                {
                    var _leads = query.Where(m => m.assignedToUser == user);
                    var leadsCount = _leads.Count();

                    list.Add(new PipelineReportModel()
                    {
                        PipelineReport_AgentName = leadsCount > 0 ? _leads.FirstOrDefault().agentName : db.tblUserProfiles.Single(m => m.userID == user).firstName + " " + db.tblUserProfiles.Single(m => m.userID == user).lastName,
                        PipelineReport_CombinedLeads = leadsCount.ToString(),
                        PipelineReport_NewLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "New").Count().ToString() : "0",
                        PipelineReport_NewLeadsPercentage = leadsCount > 0 ? Decimal.Round(((decimal)_leads.Where(m => m.leadStatus == "New").Count() / leadsCount) * 100, 2).ToString() : "0.00",
                        PipelineReport_AssignedLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Assigned").Count().ToString() : "0",
                        PipelineReport_BankedLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Banked").Count().ToString() : "0",
                        PipelineReport_CancelledLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Cancelled").Count().ToString() : "0",
                        PipelineReport_DeadLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Dead").Count().ToString() : "0",
                        PipelineReport_InProcessLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "In Process").Count().ToString() : "0",
                        PipelineReport_DuplicateLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Duplicate").Count().ToString() : "0",
                        PipelineReport_InternationalLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "International").Count().ToString() : "0",
                        PipelineReport_PushedLeads = leadsCount > 0 ? _leads.Where(m => m.leadStatus == "Pushed to Onsite").Count().ToString() : "0",
                        PipelineReport_LastMinuteLeads = leadsCount > 0 ? _leads.Count(m => m.leadStatus == "Last Minute").ToString() : "0",
                        PipelineReport_CallClasification = leadsCount > 0 ? _leads.Where(m => m.callClasificationID == 7).Count().ToString() : "0"
                    });
                }

                list.Add(new PipelineReportModel()
                {
                    PipelineReport_AgentName = "Total",
                    PipelineReport_CombinedLeads = list.Sum(m => int.Parse(m.PipelineReport_CombinedLeads)).ToString(),
                    PipelineReport_NewLeads = list.Sum(m => int.Parse(m.PipelineReport_NewLeads)).ToString(),
                    PipelineReport_NewLeadsPercentage = list.Sum(m => int.Parse(m.PipelineReport_CombinedLeads)) > 0 ? Decimal.Round(((decimal)list.Sum(m => int.Parse(m.PipelineReport_NewLeads)) / list.Sum(m => int.Parse(m.PipelineReport_CombinedLeads))) * 100, 2).ToString() : "0",
                    PipelineReport_AssignedLeads = list.Sum(m => int.Parse(m.PipelineReport_AssignedLeads)).ToString(),
                    PipelineReport_BankedLeads = list.Sum(m => int.Parse(m.PipelineReport_BankedLeads)).ToString(),
                    PipelineReport_CancelledLeads = list.Sum(m => int.Parse(m.PipelineReport_CancelledLeads)).ToString(),
                    PipelineReport_DeadLeads = list.Sum(m => int.Parse(m.PipelineReport_DeadLeads)).ToString(),
                    PipelineReport_InProcessLeads = list.Sum(m => int.Parse(m.PipelineReport_InProcessLeads)).ToString(),
                    PipelineReport_DuplicateLeads = list.Sum(m => int.Parse(m.PipelineReport_DuplicateLeads)).ToString(),
                    PipelineReport_InternationalLeads = list.Sum(m => int.Parse(m.PipelineReport_InternationalLeads)).ToString(),
                    PipelineReport_PushedLeads = list.Sum(m => int.Parse(m.PipelineReport_PushedLeads)).ToString(),
                    PipelineReport_LastMinuteLeads = list.Sum(m => int.Parse(m.PipelineReport_LastMinuteLeads)).ToString(),
                    PipelineReport_CallClasification = list.Sum(m => int.Parse(m.PipelineReport_CallClasification)).ToString()
                });
                scope.Complete();
                return list;
            }
        }

        public List<ExchangeTourReportModel> SearchExchangeTours(ExchangeTourModel.SearchExchangeTourModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<ExchangeTourReportModel> list = new List<ExchangeTourReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //var _bookingStatus = model.GenericSearchFieldsReport_BookingStatus != null ? model.GenericSearchFieldsReport_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _bookingStatus = model.GenericSearchFieldsReport_BookingStatus != null ? model.GenericSearchFieldsReport_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.GenericSearchFieldsReport_Resort != null ? model.GenericSearchFieldsReport_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                        from pst in rsv_pst.DefaultIfEmpty()
                        join cth in db.tblContractsHistory on pst.presentationID equals cth.presentationID into pst_cth
                        from cth in pst_cth.DefaultIfEmpty()
                        where terminals.Contains(lead.terminalID)
                        //&& _bookingStatus.Contains(lead.bookingStatusID)
                        && _bookingStatus.Contains(lead.secondaryBookingStatusID)
                        && _leadSources.Contains(lead.leadSourceID)
                        && _resorts.Contains(rsv.placeID)
                        select new
                        {
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            userName = lead.aspnet_Users1.UserName,
                            leadSourceID = lead.leadSourceID,
                            leadSource = lead.tblLeadSources.leadSource,
                            arrivalDate = rsv.arrivalDate,
                            realTourDate = pst.realTourDate,
                            bookingStatusID = lead.secondaryBookingStatusID,
                            bookingStatus = lead.tblBookingStatus1.bookingStatus,
                            totalPaid = rsv.totalPaid,
                            resortID = rsv.placeID,
                            resort = rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination,
                            finalTourStatus = pst.tblTourStatus1.tourStatus,
                            finalBookingStatus = pst.tblBookingStatus.bookingStatus,
                            hostessComments = pst.hostessComments,
                            salesVolume = cth.salesVolume
                        };

            if (model.GenericSearchFieldsReport_I_ArrivalDate != null && model.GenericSearchFieldsReport_F_ArrivalDate != null)
            {
                var i_date = DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate);
                var f_date = DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
            }

            if (model.SearchExchangeTour_I_FinalTourDate != null && model.SearchExchangeTour_F_FinalTourDate != null)
            {
                var iDate = DateTime.Parse(model.SearchExchangeTour_I_FinalTourDate);
                var fDate = DateTime.Parse(model.SearchExchangeTour_F_FinalTourDate).AddDays(1).AddSeconds(-1);
                //query = query.Where(m => (m.realTourDate == null || (m.realTourDate >= iDate && m.realTourDate <= fDate)));
                query = query.Where(m => m.realTourDate >= iDate && m.realTourDate <= fDate);
            }

            foreach (var i in query)
            {
                list.Add(new ExchangeTourReportModel()
                {
                    ExchangeTourReport_FirstName = i.firstName,
                    ExchangeTourReport_LastName = i.lastName,
                    ExchangeTourReport_UserName = i.userName,
                    ExchangeTourReport_LeadSource = i.leadSource,
                    ExchangeTourReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    //ExchangeTourReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture) : "",
                    ExchangeTourReport_BookingStatus = i.bookingStatus,
                    ExchangeTourReport_TotalPaid = i.totalPaid.ToString(),
                    ExchangeTourReport_Resort = i.resort,
                    ExchangeTourReport_FinalTourDate = i.realTourDate != null ? ((DateTime)i.realTourDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    ExchangeTourReport_FinalTourStatus = i.finalTourStatus,
                    ExchangeTourReport_FinalBookingStatus = i.finalBookingStatus,
                    ExchangeTourReport_HostessComments = i.hostessComments,
                    ExchangeTourReport_SalesVolume = (i.salesVolume != null ? i.salesVolume.ToString() : "")
                });
            }
            return list;
        }

        public List<PreBookedArrivalsReportModel> SearchPreBookedArrivals(PreBookedArrivalsModel.SearchPreBookedArrivalsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreBookedArrivalsReportModel> list = new List<PreBookedArrivalsReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

            var leadSources = model.GenericSearchFieldsReport_DrpLeadSources;
            //var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : leadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.GenericSearchFieldsReport_Resort != null ? model.GenericSearchFieldsReport_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var fromDate = model.GenericSearchFieldsReport_I_ArrivalDate != null ? DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate) : (DateTime?)null;
            var toDate = model.GenericSearchFieldsReport_F_ArrivalDate != null ? DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var piDate = model.SearchPreBooked_I_PurchaseDate != null ? DateTime.Parse(model.SearchPreBooked_I_PurchaseDate) : (DateTime?)null;
            var pfDate = model.SearchPreBooked_F_PurchaseDate != null ? DateTime.Parse(model.SearchPreBooked_F_PurchaseDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var reservationStatusExluded = new int?[] { 3 };
            var leadStatusExcluded = new int?[] { 4, 10 };
            var preBookingStatus = new int?[] { 1, 2, 5, 14 };

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join usr in db.aspnet_Users on lead.assignedToUserID equals usr.UserId
                         join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                         from pst in rsv_pst.DefaultIfEmpty()
                         join opt in db.tblOptionsSold on rsv.reservationID equals opt.reservationID into rsv_opt
                         from opt in rsv_opt.DefaultIfEmpty()
                         join arr in db.tblArrivals on new { resort = rsv.tblLeads.frontOfficeResortID, reservation = rsv.frontOfficeReservationID } equals new { resort = (int?)arr.frontOfficeResortID, reservation = (long?)arr.frontOfficeReservationID } into rsv_arr
                         from arr in rsv_arr.DefaultIfEmpty()
                         join man in db.tblSPIManifest on arr.arrivalID equals man.arrivalID into arr_man
                         from man in arr_man.DefaultIfEmpty()
                         join bs in db.tblBookingStatus on lead.secondaryBookingStatusID equals bs.bookingStatusID into lead_bs
                         from bs in lead_bs.DefaultIfEmpty()
                         join up in db.tblUserProfiles on lead.secondaryBookingStatusModifiedByUserID equals up.userID into lead_up
                         from up in lead_up.DefaultIfEmpty()
                         join ls in db.tblLeadStatus on lead.leadStatusID equals ls.leadStatusID into lead_ls
                         from ls in lead_ls.DefaultIfEmpty()
                         where _terminals.Contains(lead.terminalID)
                         && _resorts.Contains(rsv.placeID)
                         && (fromDate == null || (fromDate <= rsv.arrivalDate && rsv.arrivalDate <= toDate))
                         && (piDate == null || (piDate <= opt.dateSaved && opt.dateSaved <= pfDate))
                         && !leadStatusExcluded.Contains(lead.leadStatusID)
                         && _leadSources.Contains(lead.leadSourceID)
                         && !reservationStatusExluded.Contains(rsv.reservationStatusID)
                         && preBookingStatus.Contains(lead.secondaryBookingStatusID)
                         && ((model.SearchPreBooked_HasOptions == false && rsv.tblOptionsSold.Count(x => x.deleted != true) == 0) || (model.SearchPreBooked_HasOptions == true && rsv.tblOptionsSold.Count(x => x.deleted != true) > 0))
                         //&& ((model.SearchPreBooked_HasOptions == false && (rsv.tblOptionsSold.Count() == 0 || rsv.tblOptionsSold.Count(x => x.deleted != true) == 0)) || (model.SearchPreBooked_HasOptions == true && rsv.tblOptionsSold.Count(x => x.deleted != true) > 0))
                         //&& ((model.SearchPreBooked_HasOptions == false && (opt.reservationID == null || rsv.tblOptionsSold.Count(x => x.deleted != true) == 0)) || (model.SearchPreBooked_HasOptions == true && rsv.tblOptionsSold.Count(x => x.deleted != true) > 0))
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             userName = usr.UserName,
                             lead.leadSourceID,
                             rsv.arrivalDate,
                             rsv.hotelConfirmationNumber,
                             rsv.frontOfficeCertificateNumber,
                             lead.frontOfficeGuestID,
                             pst.datePresentation,
                             pst.timePresentation,
                             man.volume,
                             bs.bookingStatus,
                             modifiedByUser = lead.secondaryBookingStatusModifiedByUserID != null ? up.firstName + " " + up.lastName : "",
                             lead.secondaryBookingStatusLastModificationDate,
                             resortID = rsv.placeID,
                             ls.leadStatus
                         }).ToList();

            var groupedByResort = query.GroupBy(m => m.resortID);

            foreach (var a in groupedByResort)
            {

                //var items = a.GroupBy(m => m.hotelConfirmationNumber);
                var items = a.GroupBy(m => m.frontOfficeGuestID);
                foreach (var item in items)
                {
                    var i = item.Where(m => m.datePresentation != null).Concat(item.Where(m => m.datePresentation == null)).FirstOrDefault();
                    list.Add(new PreBookedArrivalsReportModel()
                    {
                        PreBookedArrivalsReport_FirstName = i.firstName,
                        PreBookedArrivalsReport_LastName = i.lastName,
                        PreBookedArrivalsReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                        PreBookedArrivalsReport_HotelConfirmationNumber = i.hotelConfirmationNumber,
                        PreBookedArrivalsReport_FrontOfficeCertificateNumber = i.frontOfficeCertificateNumber,
                        PreBookedArrivalsReport_Resort = model.GenericSearchFieldsReport_DrpResorts.Single(m => (long?)long.Parse(m.Value) == a.Key).Text,
                        PreBookedArrivalsReport_BookingStatus = i.bookingStatus,
                        PreBookedArrivalsReport_PreBookedByUser = i.modifiedByUser,//i.modifiedByUser != null ? i.modifiedByUser.FirstOrDefault().firstName + " " + i.modifiedByUser.FirstOrDefault().lastName : "",
                        PreBookedArrivalsReport_BookingStatusDate = i.modifiedByUser != "" ? i.secondaryBookingStatusLastModificationDate != null ? i.secondaryBookingStatusLastModificationDate.Value.ToString("yyyy-MM-dd hh:mm") : "" : "",
                        PreBookedArrivalsReport_PresentationDateTime = (i.datePresentation != null ? i.datePresentation.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "") + (i.timePresentation != null ? " " + i.timePresentation.Value.ToString(@"hh\:mm") : ""),
                        PreBookedArrivalsReport_LeadSource = leadSources.Single(m => long.Parse(m.Value) == i.leadSourceID).Text,// i.leadSource,
                        PreBookedArrivalsReport_UserName = i.userName,
                        PreBookedArrivalsReport_Status = i.leadStatus,//i.status,
                        //PreBookedArrivalsReport_TotalPaid = i.totalPaid.ToString(),//verificar si este dato es necesario
                        //PreBookedArrivalsReport_SalesVolume = db.tblArrivals.Where(m => m.frontOfficeResortID == i.frontOfficeResortID && m.frontOfficeReservationID == i.frontOfficeReservationID).Sum(m => m.tblSPIManifest.Sum(x => x.volume)).ToString()
                        PreBookedArrivalsReport_SalesVolume = i.volume.ToString()
                    });
                }
            }

            return list;
        }

        public List<NewReferralsReportModel> SearchNewReferrals(NewReferralsModel.SearchNewReferralsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<NewReferralsReportModel> list = new List<NewReferralsReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var isUserAuthorized = false;
            var filePath = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
            var fileRoute = Path.Combine(filePath, "New_Referrals_Report.csv");
            var fileWriter = new StreamWriter(fileRoute);
            var headerLine = "User,Lead Source,First Name,Last Name,Email,Address,City,State,Postal Code,Country,Date Created,"
                + "Home Phone,Referred By,Comments,Office Phone,Mobile Phone";

            #region "query"
            var query = from lead in db.tblLeads
                        where lead.referredByID != null
                        && _terminals.Contains(lead.terminalID)
                        select new
                        {
                            lead.inputByUserID,
                            lead.aspnet_Users.UserName,
                            lead.tblLeadSources.leadSource,
                            lead.firstName,
                            lead.lastName,
                            lead.tblLeadEmails.FirstOrDefault().email,
                            lead.address,
                            lead.city,
                            lead.state,
                            lead.zipcode,
                            lead.tblCountries.country,
                            lead.inputDateTime,
                            homePhone = lead.tblPhones.FirstOrDefault(m => m.phoneTypeID == 3).phone,
                            referralFirstName = lead.tblLeads2.firstName,
                            referralLastName = lead.tblLeads2.lastName,
                            lead.leadComments,
                            workPhone = lead.tblPhones.FirstOrDefault(m => m.phoneTypeID == 2).phone,
                            mobilePhone = lead.tblPhones.FirstOrDefault(m => m.phoneTypeID == 1).phone
                        };

            if (model.SearchNewReferrals_I_DateRange != null && model.SearchNewReferrals_F_DateRange != null)
            {
                var i_date = DateTime.Parse(model.SearchNewReferrals_I_DateRange);
                var f_date = DateTime.Parse(model.SearchNewReferrals_F_DateRange).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.inputDateTime >= i_date && m.inputDateTime <= f_date);
            }

            var inputByUsers = model.SearchNewReferrals_InputByUser != null ? model.SearchNewReferrals_InputByUser : UserDataModel.GetUsersBySupervisor().Select(m => Guid.Parse(m.Value)).ToArray();
            query = query.Where(m => inputByUsers.Contains(m.inputByUserID));
            #endregion

            if (session.WorkGroupID == 8 && GeneralFunctions.IsUserInRole("Department Administrator"))
            {
                isUserAuthorized = true;
                fileWriter.WriteLine(headerLine);
            }

            #region "iteration to fill list"
            foreach (var i in query)
            {
                var dateCreated = i.inputDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                var email = "";
                var homePhone = "";
                var leadComments = i.leadComments ?? "";
                var workPhone = "";
                var mobilePhone = "";
                list.Add(new NewReferralsReportModel()
                {
                    NewReferralsReport_User = i.UserName,
                    NewReferralsReport_LeadSource = i.leadSource,
                    NewReferralsReport_ReferredFirstName = i.firstName,
                    NewReferralsReport_ReferredLastName = i.lastName,
                    NewReferralsReport_ReferredEmail = "",
                    NewReferralsReport_ReferredAddress = i.address,
                    NewReferralsReport_ReferredCity = i.city,
                    NewReferralsReport_ReferredState = i.state,
                    NewReferralsReport_ReferredZipCode = i.zipcode,
                    NewReferralsReport_ReferredCountry = i.country,
                    NewReferralsReport_ReferredDateCreated = dateCreated,
                    NewReferralsReport_ReferredHomePhone = "",
                    NewReferralsReport_ReferredByLead = i.referralFirstName + " " + i.referralLastName,
                    NewReferralsReport_ReferredComments = leadComments,
                    NewReferralsReport_ReferredWorkPhone = "",
                    NewReferralsReport_ReferredMobilePhone = ""
                });
                if (isUserAuthorized)
                {
                    var lineBuilder = i.UserName + "," + i.leadSource + "," + i.firstName + "," + i.lastName + "," + email + "," + i.address + "," + i.city + "," + i.state + "," + i.zipcode + "," + i.country + "," + dateCreated + "," + homePhone + "," + i.referralFirstName + " " + i.referralLastName + "," + leadComments + "," + workPhone + "," + mobilePhone;
                    fileWriter.WriteLine(lineBuilder);
                }
            }
            #endregion

            fileWriter.Close();
            return list;
        }

        public List<WeeklyReportModel> SearchWeekly(WeeklyModel.SearchWeeklyModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<WeeklyReportModel> list = new List<WeeklyReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var isUserAuthorized = false;
            var filePath = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
            var fileRoute = Path.Combine(filePath, "Weekly_Report.csv");
            var fileWriter = new StreamWriter(fileRoute);
            var headerLine = "Name,Lead Source,User,Member Number,Tour Status,Final Tour Status,Tour Date,Real Tour Date,"
            + "Sales Volume,Arrival Date,Booking Status,Resort,Total Paid";

            #region "query"
            //var _bookingStatus = model.SearchWeekly_BookingStatus != null ? model.SearchWeekly_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _bookingStatus = model.SearchWeekly_BookingStatus != null ? model.SearchWeekly_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _leadSources = model.SearchWeekly_LeadSource != null ? model.SearchWeekly_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.SearchWeekly_Resort != null ? model.SearchWeekly_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _users = model.SearchWeekly_AssignedToUser != null ? model.SearchWeekly_AssignedToUser.Select(m => (Guid?)Guid.Parse(m)).ToArray() : UserDataModel.GetUsersBySupervisor(session.UserID, false, false, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();

            var query = from lead in db.tblLeads
                        join member in db.tblMemberInfo on lead.leadID equals member.leadID into lead_member
                        from member in lead_member.DefaultIfEmpty()
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID
                        join profile in db.tblUserProfiles on lead.assignedToUserID equals profile.userID
                        join ls in db.tblLeadSources on lead.leadSourceID equals ls.leadSourceID
                        join ts in db.tblTourStatus on pst.tourStatusID equals ts.tourStatusID
                        join fts in db.tblTourStatus on pst.finalTourStatusID equals fts.tourStatusID into pst_fts
                        from fts in pst_fts.DefaultIfEmpty()
                        join user in db.aspnet_Users on lead.assignedToUserID equals user.UserId
                        join fbs in db.tblBookingStatus on pst.finalBookingStatusID equals fbs.bookingStatusID into pst_fbs
                        from fbs in pst_fbs.DefaultIfEmpty()
                        join cth in db.tblContractsHistory on pst.presentationID equals cth.presentationID into pst_cth
                        from cth in pst_cth.DefaultIfEmpty()
                        join place in db.tblPlaces on rsv.placeID equals place.placeID
                        join dest in db.tblDestinations on place.destinationID equals dest.destinationID
                        where _terminals.Contains(lead.terminalID)
                        && _bookingStatus.Contains(pst.finalBookingStatusID)
                        && _leadSources.Contains(lead.leadSourceID)
                        && _resorts.Contains(rsv.placeID)
                        && _users.Contains(lead.assignedToUserID)
                        select new
                        {
                            pst.finalBookingStatusID,
                            lead.firstName,
                            lead.lastName,
                            ls.leadSource,
                            user.UserName,
                            assignedToUser = profile.firstName + " " + profile.lastName,
                            member.memberNumber,
                            tourStatus = ts.tourStatus,
                            finalTourStatus = fts.tourStatus,
                            pst.datePresentation,
                            pst.realTourDate,
                            cth.salesVolume,
                            rsv.arrivalDate,
                            fbs.bookingStatus,
                            place.place,
                            dest.destination,
                            rsv.totalPaid
                        };

            if (model.SearchWeekly_I_PresentationDate != null && model.SearchWeekly_F_PresentationDate != null)
            {
                var i_date = DateTime.Parse(model.SearchWeekly_I_PresentationDate);
                var f_date = DateTime.Parse(model.SearchWeekly_F_PresentationDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.realTourDate >= i_date && m.realTourDate <= f_date);
            }
            #endregion

            if (session.WorkGroupID == 8 && GeneralFunctions.IsUserInRole("Department Administrator"))
            {
                isUserAuthorized = true;
                fileWriter.WriteLine(headerLine);
            }

            foreach (var i in query.Distinct())
            {
                var datePresentation = i.datePresentation != null ? DateTime.Parse(i.datePresentation.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                var realTourDate = i.realTourDate != null ? DateTime.Parse(i.realTourDate.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                var salesVolume = i.salesVolume != null ? i.salesVolume.ToString() : "";
                var arrivalDate = i.arrivalDate != null ? DateTime.Parse(i.arrivalDate.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
                var leadSource = i.leadSource ?? "";
                var memberNumber = i.memberNumber ?? "";
                var tourStatus = i.tourStatus ?? "";
                var finalTourStatus = i.finalTourStatus ?? "";

                list.Add(new WeeklyReportModel()
                {
                    WeeklyReport_Name = i.firstName + " " + i.lastName,
                    WeeklyReport_LeadSource = leadSource,
                    WeeklyReport_User = i.assignedToUser,
                    WeeklyReport_MemberNumber = memberNumber,
                    WeeklyReport_TourStatus = tourStatus,
                    WeeklyReport_FinalTourStatus = finalTourStatus,
                    WeeklyReport_TourDate = datePresentation,
                    WeeklyReport_RealTourDate = realTourDate,
                    WeeklyReport_SalesVolume = salesVolume,
                    WeeklyReport_ArrivalDate = arrivalDate,
                    WeeklyReport_BookingStatus = i.bookingStatus,
                    WeeklyReport_Resort = i.place + " " + i.destination,
                    WeeklyReport_TotalPaid = i.totalPaid != null ? i.totalPaid.ToString() : ""
                });
                if (isUserAuthorized)
                {
                    //var lineBuilder = i.firstName + " " + i.lastName + "," + leadSource + "," + i.assignedToUser.firstName + " " + i.assignedToUser.lastName + "," + memberNumber + "," + tourStatus + "," + finalTourStatus + "," + datePresentation + "," + realTourDate + "," + salesVolume + "," + arrivalDate + "," + i.bookingStatus + "," + i.place + " " + i.destination + "," + (i.totalPaid != null ? i.totalPaid.ToString() : "");
                    var lineBuilder = i.firstName + " " + i.lastName + "," + leadSource + "," + i.assignedToUser + "," + memberNumber + "," + tourStatus + "," + finalTourStatus + "," + datePresentation + "," + realTourDate + "," + salesVolume + "," + arrivalDate + "," + i.bookingStatus + "," + i.place + " " + i.destination + "," + (i.totalPaid != null ? i.totalPaid.ToString() : "");
                    fileWriter.WriteLine(lineBuilder);
                }
            }
            fileWriter.Close();
            return list;
        }

        public List<ReservationsMadeReportModel> SearchReservationsMade(ReservationsMadeModel.SearchReservationsMadeModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<ReservationsMadeReportModel> list = new List<ReservationsMadeReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

            var query = from lead in db.tblLeads
                        where lead.leadSourceID == 18 //Trial
                        && lead.inputMethodID == 2 //import
                        && _terminals.Contains(lead.terminalID)
                        select new
                        {
                            lead.leadID,
                            lead.firstName,
                            lead.lastName,
                            lead.inputDateTime,
                            lead.assignedToUserID,
                            lead.reservationMadeDate
                        };
            if (model.SearchReservationsMade_I_InputDate != null && model.SearchReservationsMade_F_InputDate != null)
            {
                var iDate = DateTime.Parse(model.SearchReservationsMade_I_InputDate);
                var fDate = DateTime.Parse(model.SearchReservationsMade_F_InputDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.inputDateTime >= iDate && m.inputDateTime <= fDate);
            }

            if (model.SearchReservationsMade_I_ReservationMadeDate != null && model.SearchReservationsMade_F_ReservationMadeDate != null)
            {
                var iDate = DateTime.Parse(model.SearchReservationsMade_I_ReservationMadeDate);
                var fDate = DateTime.Parse(model.SearchReservationsMade_F_ReservationMadeDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.reservationMadeDate >= iDate && m.reservationMadeDate <= fDate);
            }

            foreach (var i in query)
            {
                list.Add(new ReservationsMadeReportModel()
                {
                    ReservationsMade_LeadID = i.leadID.ToString(),
                    ReservationsMade_FirstName = i.firstName,
                    ReservationsMade_LastName = i.lastName,
                    ReservationsMade_InputDate = i.inputDateTime.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                    ReservationsMade_ReservationDate = i.reservationMadeDate != null ? ((DateTime)i.reservationMadeDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : ""
                });
            }
            return list;
        }

        //public List<NewReferralLeadsReportModel> SearchNewReferralLeads(NewReferralLeadsModel.SearchNewReferralLeadsModel model)
        //{
        //    ePlatEntities db = new ePlatEntities();
        //    List<NewReferralLeadsReportModel> list = new List<NewReferralLeadsReportModel>();
        //    List<NewReferralLeadsReportModel> list2 = new List<NewReferralLeadsReportModel>();

        //    var query = from lead in db.tblLeads
        //                where lead.referredByID != null
        //                select new
        //                {
        //                    userID = lead.inputByUserID,
        //                    firstName = lead.aspnet_Users.tblUserProfiles.FirstOrDefault(m => m.userID == lead.aspnet_Users.UserId).firstName,
        //                    lastName = lead.aspnet_Users.tblUserProfiles.FirstOrDefault(m => m.userID == lead.aspnet_Users.UserId).lastName,
        //                    leadFirstName = lead.firstName,
        //                    leadLastName = lead.lastName,
        //                    leadSource = lead.tblLeadSources.leadSource,
        //                    inputByUser = lead.inputByUserID,
        //                    inputDate = lead.inputDateTime
        //                };

        //    if (model.SearchNewReferralLeads_I_DateRange != null && model.SearchNewReferralLeads_F_DateRange != null)
        //    {
        //        var i_date = DateTime.Parse(model.SearchNewReferralLeads_I_DateRange);
        //        var f_date = DateTime.Parse(model.SearchNewReferralLeads_F_DateRange).AddDays(1).AddSeconds(-1);
        //        query = query.Where(m => m.inputDate >= i_date && m.inputDate <= f_date);
        //    }

        //    if (model.SearchNewReferralLeads_InputByUser != null)
        //    {
        //        var inputByUsers = new List<Guid?>();
        //        foreach (var i in model.SearchNewReferralLeads_InputByUser)
        //        {
        //            inputByUsers.Add(Guid.Parse(i));
        //        }
        //        query = query.Where(m => inputByUsers.Contains(m.inputByUser));
        //    }
        //    //new code
        //    var referrals = new List<KeyValuePair<string, GenericStringModel>>();
        //    foreach (var i in query)
        //    {
        //        var referral = new GenericStringModel()
        //        {
        //            Generic_Property1 = i.leadFirstName,
        //            Generic_Property2 = i.leadLastName,
        //            Generic_Property3 = i.leadSource ?? "",
        //            Generic_Property4 = i.inputDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
        //        };
        //        referrals.Add(new KeyValuePair<string, GenericStringModel>(i.inputByUser.ToString(), referral));
        //    }

        //    var distinctUsers = query.Select(m => new { m.inputByUser, m.firstName, m.lastName }).Distinct();
        //    var totalReferrals = new List<NewReferralLeadsReportModel>();
        //    foreach (var i in distinctUsers)
        //    {
        //        var referralsPerUser = new List<NewReferralLeadsReportModel>();
        //        foreach (var a in query)
        //        {
        //            if (i.inputByUser == a.inputByUser)
        //            {
        //                referralsPerUser.Add(new NewReferralLeadsReportModel()
        //                {
        //                    NewReferralLeadsReport_AgentID = i.inputByUser.ToString(),
        //                    NewReferralLeadsReport_Agent = i.firstName + " " + i.lastName,
        //                    NewReferralLeadsReport_InputDate = a.inputDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
        //                });
        //            }
        //        }
        //        var referralsPerUserPerDate = referralsPerUser.GroupBy(m => m.NewReferralLeadsReport_InputDate, m => m.NewReferralLeadsReport_AgentID, (dates, users) => new { fechas = dates, usuarios = users.ToList() });
        //        foreach (var x in referralsPerUserPerDate)
        //        {
        //            var referralsList = new List<GenericStringModel>();
        //            foreach (var a in referrals.Where(m => m.Key == x.usuarios.FirstOrDefault().ToString()))
        //            {
        //                var cosa = x.fechas;
        //                if (x.fechas == a.Value.Generic_Property4)
        //                {
        //                    referralsList.Add(a.Value);
        //                }
        //            }
        //            totalReferrals.Add(new NewReferralLeadsReportModel()
        //            {
        //                NewReferralLeadsReport_AgentID = x.usuarios.FirstOrDefault(),
        //                NewReferralLeadsReport_Agent = i.firstName + " " + i.lastName,
        //                NewReferralLeadsReport_InputDate = x.fechas,
        //                NewReferralLeadsReport_ReferralsNumber = x.usuarios.Count().ToString(),
        //                NewReferralLeadsReport_Referrals = new JavaScriptSerializer().Serialize(referralsList)
        //            });
        //        }
        //    }
        //    return totalReferrals;
        //    //new code
        //}

        public List<PreBookedContactedLeadsReportModel> SearchPreBookedContactedLeads(PreBookedContactedLeadsModel.SearchPreBookedContactedLeadsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreBookedContactedLeadsReportModel> list = new List<PreBookedContactedLeadsReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.GenericSearchFieldsReport_Resort != null ? model.GenericSearchFieldsReport_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _leadStatus = new List<int?> { 1, 2, 5, 6, 10, 13 };//New, Assigned, Dead, In Process, Duplicate, Pushed to Onsite

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        where _terminals.Contains(lead.terminalID)
                        && _leadSources.Contains(lead.leadSourceID)
                        && _resorts.Contains(rsv.placeID)
                        orderby lead.firstName, lead.lastName ascending
                        select new
                        {
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            resort = rsv.placeID,
                            hasEmail = lead.tblLeadEmails.Count() > 0,
                            hasPhone = lead.tblPhones.Count() > 0,
                            leadSource = lead.leadSourceID,
                            leadStatus = lead.leadStatusID,
                            modified = lead.modificationDate != null,
                            arrivalDate = rsv.arrivalDate,
                            //bookingStatus = lead.bookingStatusID,
                            bookingStatus = lead.secondaryBookingStatusID,
                            assignedToUserID = lead.assignedToUserID
                        };

            if (model.GenericSearchFieldsReport_I_ArrivalDate != null && model.GenericSearchFieldsReport_F_ArrivalDate != null)
            {
                var i_date = DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate);
                var f_date = DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
            }
            //process to totals by resort {1}
            foreach (var resort in _resorts)
            {
                var preBooked = 0;
                var contacted = 0;
                var firstName = "";
                var lastName = "";
                foreach (var i in query)
                {
                    if ((i.bookingStatus == 1 || i.bookingStatus == 26) && i.resort == resort)//Pre-Booked
                    {
                        preBooked++;
                    }
                    if (i.resort == resort && _leadStatus.Contains(i.leadStatus) && (i.modified || i.hasEmail || i.hasPhone || i.leadStatus == 10 || i.assignedToUserID == (Guid?)Guid.Parse("244874AD-123E-4F4A-8F80-187768CFED21")))
                    //if (i.resort == resort && _leadStatus.Contains(i.leadStatus) && (i.modified || i.assignedToUserID == (Guid?)Guid.Parse("244874AD-123E-4F4A-8F80-187768CFED21")) && (i.hasEmail || i.hasPhone || i.assignedToUserID == (Guid?)Guid.Parse("244874AD-123E-4F4A-8F80-187768CFED21")))//Contacted
                    {
                        contacted++;
                    }
                }
                list.Add(new PreBookedContactedLeadsReportModel()
                {
                    PreBookedContactedLeadsReport_Resort = db.tblPlaces.Single(m => m.placeID == resort).place + " " + db.tblPlaces.Single(m => m.placeID == resort).tblDestinations.destination,
                    PreBookedContactedLeadsReport_PreBookedLeads = preBooked.ToString(),
                    PreBookedContactedLeadsReport_ContactedLeads = contacted.ToString()
                });
            }
            //end {1}
            return list;
        }

        //public List<PreBookedContactedLeadsReportModel> SearchPreBookedContactedLeads(PreBookedContactedLeadsModel.SearchPreBookedContactedLeadsModel model)
        //{
        //    ePlatEntities db = new ePlatEntities();
        //    List<PreBookedContactedLeadsReportModel> list = new List<PreBookedContactedLeadsReportModel>();

        //    var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
        //    var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
        //    var _resorts = model.GenericSearchFieldsReport_Resort != null ? model.GenericSearchFieldsReport_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();

        //    var query = from lead in db.tblLeads
        //                join rsv in db.tblReservations on lead.leadID equals rsv.leadID
        //                where (lead.bookingStatusID == 1 | lead.bookingStatusID == 6)//Pre-Booked | Contacted
        //                && _terminals.Contains(lead.terminalID)
        //                && _leadSources.Contains(lead.leadSourceID)
        //                && _resorts.Contains(rsv.placeID)
        //                orderby lead.firstName, lead.lastName ascending
        //                select new
        //                {
        //                    firstName = lead.firstName,
        //                    lastName = lead.lastName,
        //                    resort = rsv.placeID,
        //                    leadSource = lead.leadSourceID,
        //                    arrivalDate = rsv.arrivalDate,
        //                    bookinStatus = lead.bookingStatusID
        //                };

        //    if (model.GenericSearchFieldsReport_I_ArrivalDate != null && model.GenericSearchFieldsReport_F_ArrivalDate != null)
        //    {
        //        var i_date = DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate);
        //        var f_date = DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1);
        //        query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
        //    }

        //    //process to totals by resort {1}
        //    foreach (var resort in _resorts)
        //    {
        //        var preBooked = 0;
        //        var contacted = 0;
        //        var firstName = "";
        //        var lastName = "";
        //        foreach (var i in query)
        //        {
        //            if (model.SearchPreBookedContactedLeads_ExcludeDuplicated)
        //            {
        //                if (firstName == i.firstName && lastName == i.lastName && i.resort == resort)
        //                {
        //                }
        //                else
        //                {
        //                    if (i.bookinStatus == 1 && i.resort == resort)//Pre-Booked
        //                    {
        //                        preBooked++;
        //                    }
        //                    if (i.bookinStatus == 6 && i.resort == resort)//Contacted
        //                    {
        //                        contacted++;
        //                    }
        //                    firstName = i.firstName;
        //                    lastName = i.lastName;
        //                }
        //            }
        //            else
        //            {
        //                if (i.bookinStatus == 1 && i.resort == resort)//Pre-Booked
        //                    preBooked++;
        //                if (i.bookinStatus == 6 && i.resort == resort)//Contacted
        //                    contacted++;
        //            }
        //        }
        //        list.Add(new PreBookedContactedLeadsReportModel()
        //        {
        //            PreBookedContactedLeadsReport_Resort = db.tblPlaces.Single(m => m.placeID == resort).place + " " + db.tblPlaces.Single(m => m.placeID == resort).tblDestinations.destination,
        //            PreBookedContactedLeadsReport_PreBookedLeads = preBooked.ToString(),
        //            PreBookedContactedLeadsReport_ContactedLeads = contacted.ToString()
        //        });
        //    }
        //    //end {1}
        //    return list;
        //}

        public List<OptionsSoldReportModel> SearchOptionsSold(OptionsSoldModel.SearchOptionsSoldModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<OptionsSoldReportModel> list = new List<OptionsSoldReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var resorts = model.GenericSearchFieldsReport_Resort != null ? model.GenericSearchFieldsReport_Resort.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();

            //change in query requested by Carrie Wootan
            var query = from rsv in db.tblReservations
                        where _terminals.Contains(rsv.tblLeads.terminalID)
                        && leadSources.Contains(rsv.tblLeads.leadSourceID)
                        && resorts.Contains(rsv.placeID)
                        select new
                        {
                            totalPaid = rsv.totalPaid,
                            arrivalDate = rsv.arrivalDate,
                            leadSourceID = rsv.tblLeads.leadSourceID,
                            leadStatusID = rsv.tblLeads.leadStatusID,
                            resort = rsv.placeID,
                            firstName = rsv.tblLeads.firstName,
                            lastName = rsv.tblLeads.lastName,
                            leadSource = rsv.tblLeads.tblLeadSources.leadSource,
                            userID = rsv.tblLeads.assignedToUserID,
                            userName = rsv.tblLeads.aspnet_Users1.UserName,
                            totalNights = rsv.totalNights
                        };

            if (model.GenericSearchFieldsReport_I_ArrivalDate != null && model.GenericSearchFieldsReport_F_ArrivalDate != null)
            {
                var i_date = DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate);
                var f_date = DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
            }

            if (model.GenericSearchFieldsReport_LeadStatus != null)
            {
                var leadStatus = model.GenericSearchFieldsReport_LeadStatus.Select(m => (int?)int.Parse(m)).ToArray();
                query = query.Where(m => leadStatus.Contains(m.leadStatusID));
            }

            foreach (var resort in resorts)
            {
                var leads = new List<GenericStringModel>();

                int arrivalsWithOptions = query.Where(m => m.resort == resort && m.totalPaid > 0 && m.totalPaid != null).Count();
                int arrivals = query.Where(m => m.resort == resort).Count();
                float optionsCapturePerc = arrivals > 0 ? ((float)arrivalsWithOptions / arrivals) * 100 : 0;
                var optionsCapture = String.Format("{0:0.000}", optionsCapturePerc);
                var totalPaid = query.Where(m => m.resort == resort && m.totalPaid > 0 && m.totalPaid != null).Sum(m => m.totalPaid);
                var totalNights = query.Where(m => m.resort == resort && m.totalPaid > 0 && m.totalPaid != null).Sum(m => m.totalNights);
                #region "list info by agent"
                var listAgents = query.Where(m => m.resort == resort).Select(m => new { userID = m.userID, userName = m.userName }).Distinct().ToList();
                foreach (var agent in listAgents)
                {
                    var _arrivals = query.Where(m => m.userID == agent.userID && m.resort == resort);
                    int number_arrivals = _arrivals.Count();
                    int arrWOpt = _arrivals.Where(m => m.totalPaid > 0 && m.totalPaid != null).Count();
                    int? _totalNights = _arrivals.Where(m => m.totalPaid > 0 && m.totalPaid != null).Sum(m => m.totalNights);
                    float optCapture = number_arrivals > 0 ? ((float)arrWOpt / number_arrivals) * 100 : 0;
                    var _optionsCapture = String.Format("{0:0.000}", optCapture);
                    var _totalPaid = _arrivals.Where(m => m.totalPaid > 0 && m.totalPaid != null).Sum(m => m.totalPaid);
                    var user = new GenericStringModel()
                    {
                        Generic_Property1 = agent.userName,//user
                        Generic_Property2 = number_arrivals.ToString(),//arrivals
                        Generic_Property3 = arrWOpt.ToString(),//arrivals with options
                        Generic_Property4 = _optionsCapture,//options capture
                        Generic_Property5 = _totalPaid.ToString(),
                        Generic_Property6 = _totalNights.ToString()
                    };
                    leads.Add(user);
                }
                #endregion
                list.Add(new OptionsSoldReportModel()
                {
                    OptionsSoldReport_Resort = db.tblPlaces.Single(m => m.placeID == resort).place + " " + db.tblPlaces.Single(m => m.placeID == resort).tblDestinations.destination,
                    OptionsSoldReport_Arrivals = arrivals.ToString(),
                    OptionsSoldReport_ArrivalsWithOptions = arrivalsWithOptions.ToString(),
                    OptionsSoldReport_LeadsWithOptions = new JavaScriptSerializer().Serialize(leads),
                    OptionsSoldReport_OptionsCapture = optionsCapture,
                    OptionsSoldReport_TotalPaidVolume = totalPaid.ToString(),
                    OptionsSoldReport_TotalNights = totalNights.ToString()
                });
            }
            return list;
        }

        public List<ConfirmedLeadsReportModel> SearchConfirmedLeads(ConfirmedLeadsModel.SearchConfirmedLeadsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<ConfirmedLeadsReportModel> list = new List<ConfirmedLeadsReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            //var _bookingStatus = model.GenericSearchFieldsReport_BookingStatus != null ? model.GenericSearchFieldsReport_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _bookingStatus = model.GenericSearchFieldsReport_BookingStatus != null ? model.GenericSearchFieldsReport_BookingStatus.Select(m => (int?)int.Parse(m)).ToArray() : BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _leadSources = model.GenericSearchFieldsReport_LeadSource != null ? model.GenericSearchFieldsReport_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : ReportsCatalogs.FillDrpLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID
                        where _terminals.Contains(lead.terminalID)
                        //&& _bookingStatus.Contains(lead.bookingStatusID)
                        && _bookingStatus.Contains(lead.secondaryBookingStatusID)
                        && _leadSources.Contains(lead.leadSourceID)
                        select new
                        {
                            assignedToUserID = lead.assignedToUserID,
                            userName = lead.aspnet_Users1.UserName,//assignedToUserID
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            arrivalDate = rsv.arrivalDate,
                            //bookingStatusID = lead.bookingStatusID,
                            //bookingStatus = lead.tblBookingStatus.bookingStatus,
                            bookingStatusID = lead.secondaryBookingStatusID,
                            bookingStatus = lead.tblBookingStatus1.bookingStatus,
                            leadSourceID = lead.leadSourceID,
                            tourStatusID = pst.tourStatusID,
                            tourStatus = pst.tblTourStatus.tourStatus,
                            finalTourStatusID = pst.finalTourStatusID,
                            finalTourStatus = pst.tblTourStatus1.tourStatus
                        };

            if (model.GenericSearchFieldsReport_I_ArrivalDate != null && model.GenericSearchFieldsReport_F_ArrivalDate != null)
            {
                var i_date = DateTime.Parse(model.GenericSearchFieldsReport_I_ArrivalDate);
                var f_date = DateTime.Parse(model.GenericSearchFieldsReport_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
            }

            if (model.SearchConfirmedLeads_TourStatus != null)
            {
                var tourStatus = new List<int?>();
                foreach (var i in model.SearchConfirmedLeads_TourStatus)
                {
                    tourStatus.Add(int.Parse(i));
                }
                query = query.Where(m => tourStatus.Contains(m.tourStatusID));
            }

            if (model.SearchConfirmedLeads_User != null)
            {
                var inputByUsers = new List<Guid?>();
                foreach (var i in model.SearchConfirmedLeads_User)
                {
                    inputByUsers.Add(Guid.Parse(i));
                }
                query = query.Where(m => inputByUsers.Contains(m.assignedToUserID));
            }

            foreach (var i in query)
            {
                list.Add(new ConfirmedLeadsReportModel()
                {
                    ConfirmedLeadsReport_UserName = i.userName,
                    ConfirmedLeadsReport_FirstName = i.firstName,
                    ConfirmedLeadsReport_LastName = i.lastName,
                    ConfirmedLeadsReport_ArrivalDate = i.arrivalDate != null ? DateTime.Parse(i.arrivalDate.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    ConfirmedLeadsReport_BookingStatus = i.bookingStatus,
                    ConfirmedLeadsReport_TourStatus = i.tourStatus,
                    ConfirmedLeadsReport_FinalTourStatus = i.finalTourStatus
                });
            }
            return list;
        }

        public List<DiamanteModel.DiamanteReportModel> SearchDiamanteReport(DiamanteModel.SearchDiamante model)
        {
            ePlatEntities db = new ePlatEntities();
            List<DiamanteModel.DiamanteReportModel> list = new List<DiamanteModel.DiamanteReportModel>();
            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var fromDate = DateTime.Parse(model.SearchDiamante_I_ArrivalDate, CultureInfo.InvariantCulture);
            var toDate = DateTime.Parse(model.SearchDiamante_F_ArrivalDate, CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1);
            var leadStatusExcluded = new int?[] { 4, 10, 11 };//canceled, duplicate, international
            var oppBookingStatus = new int?[] { 2, 5 };//not booked, not interested
            var leadStatus = new int?[] { 1, 2, 6, 13, 14 };//new, assigned, in process, pushed to onsite, last minute
            var missedToursBookingStatus = new int?[] { 2, 5 };

            //model params
            var _leadSources = model.SearchDiamante_LeadSources != null ? model.SearchDiamante_LeadSources : LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _resorts = model.SearchDiamante_Resorts != null ? model.SearchDiamante_Resorts : ReportDataModel.ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _users = model.SearchDiamante_AssignedToUser != null ? model.SearchDiamante_AssignedToUser : UserDataModel.GetUsersBySupervisor(null, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {

                var query = from lead in db.tblLeads
                            join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                            join pst in db.tblPresentations on lead.leadID equals pst.leadID into lead_pst
                            from pst in lead_pst.DefaultIfEmpty()
                            where terminals.Contains(lead.terminalID)
                            && _leadSources.Contains(lead.leadSourceID)
                            && _resorts.Contains(rsv.placeID)
                            && _users.Contains(lead.assignedToUserID)
                            && (fromDate <= rsv.arrivalDate && rsv.arrivalDate <= toDate)
                            && !leadStatusExcluded.Contains(lead.leadStatusID)
                            select new
                            {
                                lead.leadID,
                                lead.assignedToUserID,
                                lead.leadStatusID,
                                //lead.bookingStatusID,
                                bookingStatusID = lead.secondaryBookingStatusID,
                                pst.finalTourStatusID,
                                lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName,
                                lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                                pst.tblContractsHistory.FirstOrDefault().salesVolume,
                                realTourDate = pst.realTourDate,
                                rsv.diamanteTotalPaid,
                                pst.tblContractsHistory.FirstOrDefault().salesDate
                            };

                foreach (var i in query.GroupBy(m => m.assignedToUserID))
                {
                    var name = i.FirstOrDefault().firstName + " " + i.FirstOrDefault().lastName;
                    decimal totalLeads = i.Count();
                    decimal opportunities = i.Where(m => oppBookingStatus.Contains(m.bookingStatusID) && leadStatus.Contains(m.leadStatusID)).Count();
                    decimal toursBooked = i.Where(m => m.leadStatusID == 15 && (m.bookingStatusID == 1 || m.bookingStatusID == 26)).Count();//ls diamante, bs prebooked
                    decimal toursBookedShowed = i.Where(m => m.leadStatusID == 15 && (m.bookingStatusID == 1 || m.bookingStatusID == 26) && m.realTourDate != null).Count();
                    decimal optionsVolume = (decimal)i.Sum(m => m.diamanteTotalPaid);
                    decimal timeshareVolume = (decimal)i.Where(m => m.leadStatusID == 15 && (m.bookingStatusID == 1 || m.bookingStatusID == 26)).Sum(m => m.salesVolume);
                    decimal qs = i.Where(m => m.finalTourStatusID == 3).Count();
                    decimal qFactor = ((qs / i.Count()) * 100);
                    decimal qualifiedTours = i.Where(m => m.finalTourStatusID == 3 || m.finalTourStatusID == 5).Count();
                    decimal capturePerc = (qualifiedTours / i.Count() * 100);

                    list.Add(new DiamanteModel.DiamanteReportModel()
                    {
                        DiamanteReport_AssignedToUser = name,
                        DiamanteReport_TotalLeads = totalLeads.ToString(),
                        DiamanteReport_NumberOpportunities = opportunities.ToString(),
                        DiamanteReport_NumberToursBooked = toursBooked.ToString(),
                        DiamanteReport_BookingPercentage = opportunities != 0 ? Decimal.Round(((toursBooked / opportunities) * 100), 2).ToString() : "0",
                        DiamanteReport_NumberToursShowed = toursBookedShowed.ToString(),
                        DiamanteReport_ToursPercentage = toursBooked != 0 ? Decimal.Round(((toursBookedShowed / toursBooked) * 100), 2).ToString() : "0",
                        DiamanteReport_OptionsVolume = optionsVolume.ToString(),
                        DiamanteReport_TimeshareVolume = timeshareVolume.ToString(),
                        DiamanteReport_Qs = qs.ToString(),
                        DiamanteReport_QualifiedTours = qualifiedTours.ToString(),
                        DiamanteReport_CapturePercentage = Decimal.Round(capturePerc, 2).ToString(),
                        DiamanteReport_QFactor = Decimal.Round(qFactor, 2).ToString()
                    });
                }

                list.Add(new DiamanteModel.DiamanteReportModel()
                {
                    DiamanteReport_AssignedToUser = "Total",
                    DiamanteReport_TotalLeads = list.Sum(m => int.Parse(m.DiamanteReport_TotalLeads)).ToString(),
                    DiamanteReport_NumberOpportunities = list.Sum(m => decimal.Parse(m.DiamanteReport_NumberOpportunities)).ToString(),
                    DiamanteReport_NumberToursBooked = list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursBooked)).ToString(),
                    DiamanteReport_BookingPercentage = list.Sum(m => decimal.Parse(m.DiamanteReport_NumberOpportunities)) > 0 ? Decimal.Round(((decimal)list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursBooked)) / list.Sum(m => decimal.Parse(m.DiamanteReport_NumberOpportunities))) * 100, 2).ToString() : "0",
                    DiamanteReport_NumberToursShowed = list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursShowed)).ToString(),
                    DiamanteReport_ToursPercentage = list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursBooked)) > 0 ? Decimal.Round(((decimal)list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursShowed)) / list.Sum(m => decimal.Parse(m.DiamanteReport_NumberToursBooked))) * 100, 2).ToString() : "0",
                    DiamanteReport_OptionsVolume = list.Sum(m => decimal.Parse(m.DiamanteReport_OptionsVolume)).ToString(),
                    DiamanteReport_TimeshareVolume = list.Sum(m => decimal.Parse(m.DiamanteReport_TimeshareVolume)).ToString(),
                    DiamanteReport_QualifiedTours = list.Sum(m => decimal.Parse(m.DiamanteReport_QualifiedTours)).ToString(),
                    DiamanteReport_CapturePercentage = Decimal.Round((list.Sum(m => decimal.Parse(m.DiamanteReport_QualifiedTours)) / list.Sum(m => decimal.Parse(m.DiamanteReport_TotalLeads)) * 100), 2).ToString(),
                    DiamanteReport_QFactor = Decimal.Round(list.Sum(m => decimal.Parse(m.DiamanteReport_Qs)) / list.Sum(m => decimal.Parse(m.DiamanteReport_TotalLeads)) * 100, 2).ToString()
                });

                scope.Complete();
                return list;
            }
        }

        public List<RoomUpgradeReportModel> SearchRoomUpgrades(RoomUpgradesModel.SearchRoomUpgradesModel model)
        {
            var list = new List<RoomUpgradeReportModel>();

            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _resorts = model.SearchRoomUpgrades_Resort != null ? model.SearchRoomUpgrades_Resort.Select(m => (long?)m).ToArray() : ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID
                        where rsv.roomUpgraded == true
                        && _terminals.Contains(lead.terminalID)
                        && _resorts.Contains(rsv.placeID)
                        select new
                        {
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            userName = lead.aspnet_Users1.UserName,
                            arrivalDate = rsv.arrivalDate,
                            bookingStatusID = lead.secondaryBookingStatusID,
                            bookingStatus = lead.tblBookingStatus1.bookingStatus,
                            totalPaid = rsv.totalPaid,
                            resortID = rsv.placeID,
                            resort = rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination,
                            finalTourStatusID = pst.finalTourStatusID,
                            finalTourStatus = pst.tblTourStatus1.tourStatus,
                            realTourDate = pst.realTourDate,
                            salesVolume = pst.tblContractsHistory.FirstOrDefault(m => m.presentationID == pst.presentationID).salesVolume
                        };

            if (model.SearchRoomUpgrades_I_ArrivalDate != null && model.SearchRoomUpgrades_F_ArrivalDate != null)
            {
                var i_date = DateTime.Parse(model.SearchRoomUpgrades_I_ArrivalDate);
                var f_date = DateTime.Parse(model.SearchRoomUpgrades_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= i_date && m.arrivalDate <= f_date);
            }

            foreach (var i in query)
            {
                list.Add(new RoomUpgradeReportModel()
                {
                    RoomUpgradeReport_Name = i.firstName + " " + i.lastName,
                    RoomUpgradeReport_Resort = i.resort,
                    RoomUpgradeReport_ArrivalDate = i.arrivalDate != null ? DateTime.Parse(i.arrivalDate.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    RoomUpgradeReport_AssignedToUser = i.userName,
                    RoomUpgradeReport_BookingStatus = i.bookingStatus,
                    RoomUpgradeReport_RealTourDate = i.realTourDate != null ? DateTime.Parse(i.realTourDate.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    RoomUpgradeReport_FinalTourStatus = i.finalTourStatus,
                    RoomUpgradeReport_SalesVolume = i.salesVolume != null ? i.salesVolume.ToString() : ""
                });
            }
            return list;
        }

        public List<PreCheckInReportModel> SearchPreCheckIn(PreCheckInModel.SearchPreCheckInModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreCheckInReportModel> list = new List<PreCheckInReportModel>();

            var _userID = session.UserID;
            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _users = UserDataModel.GetUsersBySupervisor(null, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var _resorts = model.SearchPreCheckIn_Resort ?? ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var _leadSources = model.SearchPreCheckIn_LeadSource != null ? model.SearchPreCheckIn_LeadSource.Select(m => (long?)long.Parse(m)).ToArray() : LeadSourceDataModel.GetLeadSourcesByWorkGroup().Select(m => (long?)long.Parse(m.Value)).ToArray();

            var sqlAgentsQuery = db.aspnet_Users.Where(m => _users.Contains(m.UserId)
                && m.aspnet_Membership.IsApproved
                && m.tblUsers_SysWorkGroups1.FirstOrDefault().sysWorkGroupID == 8)
                .Select(m => new { userID = m.UserId, firstName = m.tblUserProfiles.FirstOrDefault().firstName, lastName = m.tblUserProfiles.FirstOrDefault().lastName, isLockedOut = m.aspnet_Membership.IsLockedOut });

            if (model.SearchPreCheckIn_User != null)
            {
                //get model
                var modelUsers = model.SearchPreCheckIn_User.Select(m => Guid.Parse(m)).ToArray();
                sqlAgentsQuery = sqlAgentsQuery.Where(m => modelUsers.Contains(m.userID));
            }
            else
            {
                //get rules based on profile
                if (GeneralFunctions.IsUserInRole("Administrator", null, true) || GeneralFunctions.IsUserInRole("Supervisor", null, false) || GeneralFunctions.IsUserInRole("Team Leader", null, true) || GeneralFunctions.IsUserInRole("Concierge", null, true))
                {
                    sqlAgentsQuery = sqlAgentsQuery.Where(m => !m.isLockedOut);
                }
                else
                {
                    sqlAgentsQuery = sqlAgentsQuery.Where(m => m.userID == (Guid)_userID);
                }
            }

            var users = sqlAgentsQuery.Select(m => (Guid?)m.userID).ToArray();

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        where _terminals.Contains(lead.terminalID)
                        && users.Contains(lead.assignedToUserID)
                        && _resorts.Contains(rsv.placeID)
                        && _leadSources.Contains(lead.leadSourceID)
                        select new
                        {
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            email = lead.tblLeadEmails.Count() > 0 ? lead.tblLeadEmails.FirstOrDefault(m => m.main).email : "",
                            phone = lead.tblPhones.Count() > 0 ? lead.tblPhones.FirstOrDefault(m => m.main).phone : "",
                            arrivalDate = rsv.arrivalDate,
                            //bookingStatusID = lead.bookingStatusID,
                            //bookingStatus = lead.tblBookingStatus.bookingStatus,
                            bookingStatusID = lead.secondaryBookingStatusID,
                            bookingStatus = lead.tblBookingStatus1.bookingStatus,
                            leadSourceID = lead.leadSourceID,
                            leadSource = lead.tblLeadSources.leadSource,
                            resortID = rsv.placeID,
                            resort = rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination
                        };

            if (model.SearchPreCheckIn_I_ArrivalDate != null && model.SearchPreCheckIn_F_ArrivalDate != null)
            {
                var iDate = DateTime.Parse(model.SearchPreCheckIn_I_ArrivalDate);
                var fDate = DateTime.Parse(model.SearchPreCheckIn_F_ArrivalDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.arrivalDate >= iDate && m.arrivalDate <= fDate);
            }

            foreach (var i in query)
            {
                list.Add(new PreCheckInReportModel()
                {
                    PreCheckInReport_FirstName = i.firstName,
                    PreCheckInReport_LastName = i.lastName,
                    PreCheckInReport_Email = "",
                    PreCheckInReport_Phone = "",
                    PreCheckInReport_BookingStatus = i.bookingStatus,
                    PreCheckInReport_LeadSource = i.leadSource,
                    PreCheckInReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    PreCheckInReport_Resort = i.resort
                });
            }

            return list;
        }

        public List<ConciergeReportModel> SearchConcierges(ConciergesModel.SearchConciergesModel model)
        {
            ePlatEntities db = new ePlatEntities();

            var list = new List<ConciergeReportModel>();
            var leadStatus = new int?[] { 1, 2, 5, 6, 11, 13, 14 };//new, assigned, dead, in process, International, pushed to onsite, Last Minute
            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var _users = UserDataModel.GetUsersBySupervisor(null, true).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var _resorts = model.SearchConcierges_Resort ?? ReportsCatalogs.FillDrpResorts().Select(m => (long?)long.Parse(m.Value)).ToArray();
            //var _bookingStatus = model.SearchConcierges_BookingStatus ?? BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _bookingStatus = model.SearchConcierges_BookingStatus ?? BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var _leadSources = model.SearchConcierges_LeadSources ?? LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = model.SearchConcierges_I_ArrivalDate != null ? DateTime.Parse(model.SearchConcierges_I_ArrivalDate) : DateTime.MinValue;
            var fDate = model.SearchConcierges_F_ArrivalDate != null ? DateTime.Parse(model.SearchConcierges_F_ArrivalDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                        join member in db.tblMemberInfo on lead.leadID equals member.leadID into lead_member
                        from member in lead_member.DefaultIfEmpty()
                        where leadStatus.Contains(lead.leadStatusID)
                        && _terminals.Contains(lead.terminalID)
                        && _users.Contains(lead.assignedToUserID)
                        && _resorts.Contains(rsv.placeID)
                        //&& _bookingStatus.Contains(lead.bookingStatusID)
                        && _bookingStatus.Contains(lead.secondaryBookingStatusID)
                        && _leadSources.Contains(lead.leadSourceID)
                        && (rsv.arrivalDate >= iDate && rsv.arrivalDate <= fDate)
                        select new
                        {
                            firstName = lead.firstName,
                            lastName = lead.lastName,
                            //contractNumber = contract.contractNumber,
                            contractNumber = member.contractNumber,
                            leadSource = lead.leadSourceID != null ? lead.tblLeadSources.leadSource : "",
                            clubType = member.clubType,
                            coowner = member.coOwner,
                            numberAdults = rsv.numberAdults,
                            numberChildren = rsv.numberChildren,
                            flights = rsv.tblFlights,
                            arrivalDate = rsv.arrivalDate,
                            assignedToUserID = lead.assignedToUserID,
                            assignedToUser = lead.aspnet_Users1.UserName,
                            bookingStatusID = lead.secondaryBookingStatusID,
                            bookingStatus = lead.tblBookingStatus1.bookingStatus,
                            resortID = rsv.placeID,
                            resort = rsv.placeID != null ? rsv.tblPlaces.place + " " + rsv.tblPlaces.tblDestinations.destination : "",
                            totalPaid = rsv.totalPaid,
                            conciergeComments = rsv.conciergeComments
                        };

            foreach (var i in query)
            {
                var flights = "";
                if (i.flights != null)
                {
                    var _flights = i.flights.Where(m => m.flightTypeID == 1).OrderByDescending(m => m.flightDateTime).Take(1);
                    foreach (var a in _flights)
                    {
                        flights += (flights == "" ? "- " : "<br />- ") + a.tblAirLines.airLine + " " + ((DateTime)a.flightDateTime).ToString("yyyy-MM-dd hh:mm tt", CultureInfo.InvariantCulture);
                    }
                }
                list.Add(new ConciergeReportModel()
                {
                    ConciergeReport_Name = i.firstName + " " + i.lastName,
                    ConciergeReport_ContractNumber = i.contractNumber,
                    ConciergeReport_LeadSource = i.leadSource,
                    ConciergeReport_CoOwner = i.coowner,
                    ConciergeReport_ClubType = i.clubType,
                    ConciergeReport_NumberAdults = i.numberAdults,
                    ConciergeReport_NumberChildren = i.numberChildren,
                    ConciergeReport_FlightInfo = flights,
                    ConciergeReport_ArrivalDate = i.arrivalDate != null ? ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                    ConciergeReport_AssignedToUser = i.assignedToUser,
                    ConciergeReport_BookingStatus = i.bookingStatus,
                    ConciergeReport_Resort = i.resort,
                    ConciergeReport_TotalPaid = i.totalPaid != null ? i.totalPaid.ToString() : "",
                    ConciergeReport_ConciergeComments = i.conciergeComments
                });
            }

            return list;
        }

        public List<IncorrectlyPreBookedToursReportModel> SearchIncorrectlyPreBookedTours(IncorrectlyPreBookedToursModel.SearchIncorrectPreBookedTours model)
        {
            ePlatEntities db = new ePlatEntities();

            var list = new List<IncorrectlyPreBookedToursReportModel>();
            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts != null ? model.Search_Resorts : PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadSources = model.Search_LeadSources != null ? model.Search_LeadSources : LeadSourceDataModel.GetLeadSourcesByTerminal().Select(m => int.Parse(m.Value)).ToArray();
            var agents = model.Search_Agents != null ? model.Search_Agents : UserDataModel.GetUsersBySupervisor(session.UserID).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var leadStatus = new int?[] { 1, 2, 6, 13, 15 };//New, Assigned, In Process, Pushed to Onsite, Diamante //by Chelsea on email from 2017-02-17
            //var bookingStatus = BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var bookingStatus = BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();
            var iDate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_I_ArrivalDate) : DateTime.MinValue;
            var fDate = model.Search_F_ArrivalDate != null ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;

            var arrivals = from lead in db.tblLeads
                           join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                           where terminals.Contains(lead.terminalID)
                           && leadStatus.Contains(lead.leadStatusID)
                           //&& bookingStatus.Contains(lead.bookingStatusID)
                           && bookingStatus.Contains(lead.secondaryBookingStatusID)
                           && resorts.Contains(rsv.placeID)
                           && agents.Contains(lead.assignedToUserID)
                           && (iDate <= rsv.arrivalDate && rsv.arrivalDate <= fDate)
                           select lead;

            //var groupedByBS = arrivals.GroupBy(m => m.bookingStatusID);

            foreach (var lead in arrivals)
            {
                if (((lead.secondaryBookingStatusID == 1 || lead.secondaryBookingStatusID == 26) && lead.leadStatusID == 2 && (lead.tblPresentations.Count() == 0 || lead.tblPresentations.Count(x => x.datePresentation == null) > 0 || lead.tblPresentations.Count(x => x.datePresentation <= lead.tblReservations.OrderByDescending(z => z.arrivalDate).FirstOrDefault().arrivalDate) > 0 || lead.tblPresentations.Count(m => m.timePresentation == null) > 0))//prebooked,assigned & issue with presentationDate
                    || ((lead.secondaryBookingStatusID == 1 || lead.secondaryBookingStatusID == 26) && lead.leadStatusID != 2)
                    || (lead.tblPresentations.Count() > 0 && lead.tblPresentations.Count(m => m.datePresentation != null) > 0 && ((lead.secondaryBookingStatusID != 1 && lead.secondaryBookingStatusID != 26) || lead.leadStatusID != 2))//presentationDate & BS distinct of prebooked or leadstatus distinct of assigned
                    || (lead.leadStatusID == 2 && (lead.secondaryBookingStatusID == 5 || lead.secondaryBookingStatusID == 14) && (lead.tblPresentations.Count() > 0 && lead.tblPresentations.Count(m => m.datePresentation != null) > 0))//LS is assigned & BS distinct of prebooked, not interested & pushed to onsite
                    || ((lead.secondaryBookingStatusID != 1 && lead.secondaryBookingStatusID != 26) && lead.leadStatusID != 2 && (lead.tblPresentations.Count() > 0 && lead.tblPresentations.Count(m => m.datePresentation != null) > 0))//BS is not prebooked and LS is not assigned but it has presentation information
                    )
                {
                    list.Add(new IncorrectlyPreBookedToursReportModel()
                    {
                        LeadID = lead.leadID.ToString(),
                        Name = lead.firstName + " " + lead.lastName,
                        AccountNumber = lead.tblMemberInfo.Count() > 0 ? lead.tblMemberInfo.OrderByDescending(m => m.memberInfoID).FirstOrDefault().memberNumber : "",
                        ArrivalDate = lead.tblReservations.OrderByDescending(m => m.arrivalDate).FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd"),
                        Resort = lead.tblReservations.OrderByDescending(m => m.arrivalDate).FirstOrDefault().tblPlaces.place + " " + lead.tblReservations.OrderByDescending(m => m.arrivalDate).FirstOrDefault().tblPlaces.tblDestinations.destination,
                        //BookingStatus = lead.tblBookingStatus.bookingStatus,
                        BookingStatus = lead.tblBookingStatus1.bookingStatus,
                        LeadStatus = lead.tblLeadStatus.leadStatus,
                        PresentationDate = lead.tblPresentations.Count() > 0 ? (lead.tblPresentations.Count(m => m.datePresentation != null) > 0 ? lead.tblPresentations.FirstOrDefault().datePresentation.Value.ToString("yyyy-MM-dd") : "") + " " + (lead.tblPresentations.Count(m => m.timePresentation != null) > 0 ? lead.tblPresentations.FirstOrDefault().timePresentation.Value.ToString("c") : "") : "",
                        LeadSource = lead.tblLeadSources.leadSource,
                        AssignedToUser = lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName + " " + lead.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName
                    });
                }
            }


            return list;
        }

        public object aSearchDynamic(aDynamicModel.aSearchDynamicModel model)
        {
            ePlatEntities db = new ePlatEntities();
            object list = new object();
            var _terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

            IQueryable<tblLeads> query = db.tblLeads.Where(m => _terminals.Contains(m.terminalID));

            if (model.SearchDynamic_FirstName != null)
                query = query.Where(m => m.firstName.Contains(model.SearchDynamic_FirstName));

            if (model.SearchDynamic_LastName != null)
                query = query.Where(m => m.lastName.Contains(model.SearchDynamic_LastName));

            if (model.SearchDynamic_BookingStatus != null)
            {
                var bookingStatus = new List<int?>();
                foreach (var i in model.SearchDynamic_BookingStatus)
                    bookingStatus.Add(int.Parse(i));
                query = query.Where(m => bookingStatus.Contains(m.bookingStatusID));
            }

            if (model.SearchDynamic_LeadStatus != null)
            {
                var leadStatus = new List<int?>();
                foreach (var i in model.SearchDynamic_LeadStatus)
                    leadStatus.Add(int.Parse(i));
                query = query.Where(m => leadStatus.Contains(m.leadStatusID));
            }

            if (model.SearchDynamic_AssignedToUser != null)
            {
                var assignedToUser = new List<Guid?>();
                foreach (var i in model.SearchDynamic_AssignedToUser)
                    assignedToUser.Add(Guid.Parse(i));
                query = query.Where(m => assignedToUser.Contains(m.assignedToUserID));
            }

            if (model.SearchDynamic_MemberNumber != null)
                query = query.Where(m => m.tblMemberInfo.FirstOrDefault(x => x.leadID == m.leadID).memberNumber == model.SearchDynamic_MemberNumber);

            if (model.SearchDynamic_I_InputDateTime != null && model.SearchDynamic_F_InputDateTime != null)
            {
                var i_date = DateTime.Parse(model.SearchDynamic_I_InputDateTime);
                var f_date = DateTime.Parse(model.SearchDynamic_F_InputDateTime).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.inputDateTime >= i_date && m.inputDateTime <= f_date);
            }

            if (model.SearchDynamic_InputByUser != null)
            {
                var inputByUser = new List<Guid?>();
                foreach (var i in model.SearchDynamic_InputByUser)
                    inputByUser.Add(Guid.Parse(i));
                query = query.Where(m => inputByUser.Contains(m.inputByUserID));
            }

            if (model.SearchDynamic_I_PresentationDate != null && model.SearchDynamic_F_PresentationDate != null)
            {
                var i_date = DateTime.Parse(model.SearchDynamic_I_PresentationDate);
                var f_date = DateTime.Parse(model.SearchDynamic_F_PresentationDate).AddDays(1).AddSeconds(-1);
                query = query.Where(m => m.tblPresentations.FirstOrDefault(x => x.datePresentation >= i_date && x.datePresentation <= f_date).presentationID != null);
            }

            if (model.SearchDynamic_TourStatus != null)
            {
                var tourStatus = new List<int?>();
                foreach (var i in model.SearchDynamic_TourStatus)
                    tourStatus.Add(int.Parse(i));
                query = query.Where(m => m.tblPresentations.FirstOrDefault(x => tourStatus.Contains(x.tourStatusID)).presentationID != null);
            }

            if (model.SearchDynamic_SalesVolume != null)
            {
                int salesVolume = int.Parse(model.SearchDynamic_SalesVolume);
                query = query.Where(m => m.tblPresentations.FirstOrDefault(x => x.tblContractsHistory.FirstOrDefault(y => y.salesVolume == salesVolume).contractHistoryID != null).presentationID != null);
            }

            if (model.SearchDynamic_I_PresentationTime != null && model.SearchDynamic_F_PresentationTime != null)
            {
                var i_time = TimeSpan.ParseExact(model.SearchDynamic_I_PresentationTime, "c", null);
                var f_time = TimeSpan.ParseExact(model.SearchDynamic_F_PresentationTime, "c", null);
                query = query.Where(m => m.tblPresentations.FirstOrDefault(x => x.timePresentation >= i_time && x.timePresentation <= f_time).presentationID != null);
            }

            if (model.SearchDynamic_ConfirmationLetterOnArrival != "0")
            {
                var confirmationLetter = bool.Parse(model.SearchDynamic_ConfirmationLetterOnArrival);
                query = query.Where(m => m.tblReservations.FirstOrDefault(x => x.confirmationLetterOnArrival == confirmationLetter).reservationID != null);
            }

            return list;
        }

        public DynamicModel.DynamicResults SearchDynamic(DynamicModel.SearchDynamicModel model)
        {
            #region "variables and instances"
            var select_query = @"SELECT ";
            var from_query = "FROM tblLeads";
            var where_query = " WHERE ";
            var properties = model.GetType().GetProperties();
            var fields = model.SearchDynamic_Columns.Split(',');
            var filePath = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
            var fileRoute = Path.Combine(filePath, "Dynamic_Search_Results.csv");
            var leadSourceFlag = false;
            File.Delete(fileRoute);

            DataTable dt = new DataTable();
            var listTables = new List<string>();
            var listTabless = new List<KeyValuePair<string, int>>();
            var fileWriter = new StreamWriter(fileRoute);
            var listTableJoin = new List<KeyValuePair<string, string>>();
            DynamicModel.DynamicResults resultModel = new DynamicModel.DynamicResults();
            List<List<KeyValuePair<string, string>>> listRows = new List<List<KeyValuePair<string, string>>>();
            #endregion

            #region "columns to display and select_query"
            //-----code to check if leadsource is in query or add it
            if (model.SearchDynamic_Columns.IndexOf("leadSourceID") == -1)
            {
                model.SearchDynamic_Columns = model.SearchDynamic_Columns + ",leadSourceID*tblLeads-leadSourceID/tblLeadSources.leadSource+Lead Source";
                leadSourceFlag = true;
            }
            //-----
            foreach (var i in model.SearchDynamic_Columns.Split(','))
            {
                var fieldtoSelect = i.IndexOf('/') > 0 ? i.Substring(i.IndexOf('/') + 1, i.IndexOf('+') - (i.IndexOf('/') + 1)) : i.Substring(0, i.IndexOf('+'));
                var alias = "";

                if (fieldtoSelect.IndexOf('.') > 0)//this is a foreign key and will need a join
                {
                    var table = fieldtoSelect.Substring(0, fieldtoSelect.IndexOf('.'));
                    listTables.Add(table);
                    alias = table;
                    if (i.IndexOf("/") > 0)
                    {
                        alias = table + listTables.Where(m => m == table).Count().ToString();
                    }
                    var join = " left outer join " + table + " AS " + alias + " ON " + i.Substring(i.IndexOf('*') + 1, i.IndexOf('-') - (i.IndexOf('*') + 1)) + "." + i.Substring(i.IndexOf('-') + 1, i.IndexOf('/') - (i.IndexOf('-') + 1)) + " = " + alias + "." + i.Substring(0, i.IndexOf('*'));
                    //fieldtoSelect.Substring(0, fieldtoSelect.IndexOf('.'))

                    //if (listTableJoin.Where(m => m.Key == table).Count() == 0)
                    {
                        listTableJoin.Add(new KeyValuePair<string, string>(table, join));
                    }
                }
                else
                {
                    listTables.Add(i.Substring(0, i.IndexOf('-')));
                }
                if (fieldtoSelect.IndexOf(".") > 0)
                {
                    var cosa = fieldtoSelect.IndexOf(".");
                    var coas1 = fieldtoSelect.Length - cosa;
                    select_query += alias + fieldtoSelect.Substring(fieldtoSelect.IndexOf("."), (fieldtoSelect.Length - fieldtoSelect.IndexOf("."))) + ",";
                }
                else
                {
                    select_query += fieldtoSelect + ",";
                }
            }
            select_query = select_query.Substring(0, select_query.Length - 1) + " ";
            select_query = select_query.Replace('-', '.');
            #endregion

            #region "iteration for from_query and where_query"
            foreach (var i in properties)
            {
                if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i))
                {
                    dynamic value = i.GetValue(model, null);
                    if (i.GetValue(model, null) != null)
                    {
                        var dataBaseInfoAttribute = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i);
                        var tableName = dataBaseInfoAttribute.Name;
                        var propertyName = i.Name;
                        var fieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
                        listTables.Add(tableName);
                        if (propertyName.IndexOf("_I_") > 0)
                        {
                            var dateType = propertyName.Substring(propertyName.LastIndexOf("_"), propertyName.Length - propertyName.LastIndexOf("_"));
                            var initialDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_I" + dateType).GetValue(model, null).ToString(), CultureInfo.InvariantCulture).ToString("yyyy-MM-dd HH:mm:ss");
                            var _finalDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_F" + dateType).GetValue(model, null).ToString(), CultureInfo.InvariantCulture);
                            _finalDate = _finalDate.AddDays(1).AddSeconds(-1);
                            var finalDate = _finalDate.ToString("yyyy-MM-dd HH:mm:ss");
                            if (where_query != " WHERE ")
                            {
                                where_query += " AND ";
                            }
                            where_query += tableName + "." + fieldName + " BETWEEN '" + initialDate + "' AND '" + finalDate + "' ";
                        }
                        else
                        {
                            if (propertyName.IndexOf("_F_") < 0)
                            {
                                if (i.PropertyType.Name == "Boolean" | fieldName == "referredByID")
                                {
                                    value = ReportsCatalogs.SafeDataBaseValue(value);
                                    var finalValue = fieldName == "referredByID" ? value == "True" ? " IS NOT NULL" : " IS NULL" : "=" + value;
                                    if (where_query != " WHERE ")
                                    {
                                        where_query += " AND ";
                                    }
                                    where_query += tableName + "." + fieldName + finalValue;
                                }
                                else
                                {
                                    var listValues = new List<object>();
                                    var builder = "";
                                    if (i.PropertyType.BaseType.Name == "Array")
                                    {
                                        foreach (var a in value)
                                        {
                                            listValues.Add(a);
                                        }
                                    }
                                    else
                                    {
                                        listValues.Add(value);
                                    }
                                    foreach (var a in listValues)
                                    {
                                        builder += "'" + ReportsCatalogs.SafeDataBaseValue(a) + "',";
                                    }
                                    builder = builder != "" ? builder.Substring(0, builder.Length - 1) : "";
                                    if (builder != "")
                                    {
                                        if (where_query != " WHERE ")
                                        {
                                            where_query += " AND ";
                                        }
                                        where_query += tableName + "." + fieldName + " IN(" + builder + ")";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var tablesToJoin = listTables.Distinct();
            #region "joins assignation to from_query"
            if (tablesToJoin.Where(m => m.ToString() == "tblReservations").Count() > 0)
                from_query += " left outer join tblReservations on tblLeads.leadID = tblReservations.leadID";
            if (tablesToJoin.Where(m => m.ToString() == "tblPresentations").Count() > 0)
            {
                if (from_query.IndexOf("join tblReservations") > 0)
                {
                    from_query += " left outer join tblPresentations on tblReservations.reservationID = tblPresentations.reservationID";
                }
                else
                {
                    from_query += " left outer join tblReservations on tblLeads.leadID = tblReservations.leadID"
                        + " left outer join tblPresentations on tblReservations.reservationID = tblPresentations.reservationID";
                }
            }
            if (tablesToJoin.Where(m => m.ToString() == "tblLeadEmails").Count() > 0)
                from_query += " left outer join tblLeadEmails on tblLeads.leadID = tblLeadEmails.leadID";
            if (tablesToJoin.Where(m => m.ToString() == "tblContractsHistory").Count() > 0)
            {
                if (from_query.IndexOf("join tblPresentations") > 0)
                {
                    from_query += " left outer join tblContractsHistory on tblPresentations.presentationID = tblContractsHistory.presentationID";
                }
                else
                {
                    from_query += " left outer join tblPresentations on tblReservations.reservationID = tblPresentations.reservationID"
                        + " left outer join tblContractsHistory on tblPresentations.presentationID = tblContractsHistory.presentationID";
                }
            }
            if (tablesToJoin.Where(m => m.ToString() == "tblPhones").Count() > 0)
                from_query += " left outer join tblPhones on tblLeads.leadID = tblPhones.leadID";
            if (tablesToJoin.Where(m => m.ToString() == "tblMemberInfo").Count() > 0)
                from_query += " left outer join tblMemberInfo on tblLeads.leadID = tblMemberInfo.leadID";
            foreach (var i in listTableJoin)
            {
                from_query += i.Value;
            }
            #endregion
            #endregion

            #region "execute query and manage results"
            var sqlQuery = select_query + from_query + where_query;
            if (where_query != " WHERE ")
            {
                //var connectionString = "server=189.254.220.172;database=ePlat;User ID=sa;Password=dc07cdff-d2c0-4446-9cc3-c6e0ffa403ca;";
                //var connectionString = "server=162.252.82.226;database=ePlat;User ID=sa;Password=dc07cdff-d2c0-4446-9cc3-c6e0ffa403ca;";
                var connectionString = "server=66.165.226.106;database=ePlat;User ID=sa;Password=dc07cdff-d2c0-4446-9cc3-c6e0ffa403ca;";
                var headerBuilder = "";
                foreach (var header in model.SearchDynamic_Columns.Split(','))
                {
                    headerBuilder += header.Substring(header.IndexOf('+') + 1, header.Length - (header.IndexOf('+') + 1)) + ",";
                }
                headerBuilder = headerBuilder.Substring(0, headerBuilder.Length - 1);
                if (!leadSourceFlag)
                {
                    fileWriter.WriteLine(headerBuilder);
                }
                else
                {
                    headerBuilder = headerBuilder.Replace("Lead Source,", "");
                    fileWriter.WriteLine(headerBuilder);
                }
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    try
                    {
                        conn.Open();
                        ePlatEntities db = new ePlatEntities();
                        var sqlCommand = new SqlCommand(sqlQuery, conn);
                        SqlDataAdapter dataAdapter = new SqlDataAdapter(sqlCommand);
                        dataAdapter.Fill(dt);
                        var displayedRowsCounter = 0;
                        var headers = headerBuilder.Split(',');
                        var sessionRole = Guid.Parse(session.RoleID.ToString());
                        var role = db.aspnet_Roles.Single(m => m.RoleId == sessionRole).RoleName;
                        foreach (DataRow row in dt.Rows)
                        {
                            var rowBuilder = "";
                            var headerCounter = 0;
                            var listColumnsToDisplay = new List<KeyValuePair<string, string>>();
                            var columns = dt.Columns;
                            var index = row.Table.Columns["leadSource"].Ordinal;
                            foreach (DataColumn column in dt.Columns)
                            {
                                //var type = row[column].GetType().Name;
                                var item = row[column].GetType().Name == "DateTime" ? DateTime.Parse(row[column].ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : row[column].ToString();
                                item = item.Replace(',', ';');//line to prevent commas in text cells

                                //--prevent export of member's contact information
                                var safeItem = item;
                                if (column.ColumnName == "phone" | column.ColumnName == "email")
                                {
                                    //if (row[index].ToString() == "Member")//commented to hide sensitive data to all users 
                                    {
                                        safeItem = "";
                                        item = "";//mike
                                    }
                                }
                                //--
                                if (column.ColumnName == "leadSource")
                                {
                                    if (!leadSourceFlag)
                                    {
                                        rowBuilder += safeItem + ",";
                                        listColumnsToDisplay.Add(new KeyValuePair<string, string>(headers[headerCounter], item));
                                        headerCounter++;
                                    }
                                }
                                else
                                {
                                    rowBuilder += safeItem + ",";
                                    listColumnsToDisplay.Add(new KeyValuePair<string, string>(headers[headerCounter], item));
                                    headerCounter++;
                                }
                                //rowBuilder += safeItem + ",";
                                //listColumnsToDisplay.Add(new KeyValuePair<string, string>(headers[headerCounter], item));
                                //headerCounter++;
                            }
                            rowBuilder = rowBuilder.Substring(0, rowBuilder.Length - 1);
                            fileWriter.WriteLine(rowBuilder);
                            if (role.Contains("On Site") || role.Contains("Concierge"))
                            {
                                listRows.Add(new List<KeyValuePair<string, string>>(listColumnsToDisplay));
                            }
                            else
                            {
                                if (displayedRowsCounter < 100)
                                {
                                    listRows.Add(new List<KeyValuePair<string, string>>(listColumnsToDisplay));
                                }
                            }
                            displayedRowsCounter++;
                        }
                    }
                    catch
                    {

                    }
                    finally
                    {
                        conn.Close();
                        dt.Dispose();
                        fileWriter.Close();
                    }
                }
            }
            resultModel.ListDynamicResults = listRows;
            resultModel.SearchTotalRows = dt.Rows.Count.ToString();
            #endregion

            return resultModel;
        }

        public void SearchRenters(RentersModel.SearchRenters model)
        {
            ePlatEntities db = new ePlatEntities();
            var list = new List<RentersModel.RentersResults>();
            var iDate = DateTime.Today;
            var fDate = DateTime.Today.AddDays(1).AddSeconds(-1);
            var resorts = model.SearchRenter_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadStatusExcluded = new int?[] { 10, 11, 12, 14, 15, 16, 18 };
            var bookingStatus = model.SearchRenter_BookingStatus ?? BookingStatusDataModel.GetBookingStatusByCurrentWorkGroup().Select(m => (int?)int.Parse(m.Value)).ToArray();
            //var bookingStatus = model.SearchRenter_BookingStatus ?? BookingStatusDataModel.GetSecondaryBookingStatus().Select(m => (int?)int.Parse(m.Value)).ToArray();

            var query = from rsv in db.tblReservations
                        join lead in db.tblLeads on rsv.leadID equals lead.leadID
                        join users in db.tblUserProfiles on lead.assignedToUserID equals users.userID into lead_users
                        from users in lead_users.DefaultIfEmpty()
                        where resorts.Contains(rsv.placeID)
                        && (rsv.arrivalDate >= iDate && rsv.arrivalDate <= fDate)
                        //&& lead.bookingStatusID == 1//prebooked
                        && !leadStatusExcluded.Contains(lead.leadStatusID)
                        && bookingStatus.Contains(lead.bookingStatusID)
                        //&& bookingStatus.Contains(lead.secondaryBookingStatusID)
                        select new
                        {
                            lead.assignedToUserID,
                            assignedToUser = users.firstName + " " + users.lastName,
                            lead.leadID,
                            lead.leadStatusID,
                            lead.tblLeadStatus.leadStatus,
                            lead.callClasificationID,
                            lead.tblCallClasifications.callClasification,
                            //bookingStatusID = lead.secondaryBookingStatusID,
                            lead.bookingStatusID,
                            lead.tblBookingStatus.bookingStatus,
                            //lead.tblBookingStatus1.bookingStatus
                            rsv.totalPaid
                        };

            int prebooked = 0;
            int contacted = 0;
            int leads = query.Select(m => m.leadID).Distinct().Count();
            decimal totalPaid = 0;
            var groupedByAgent = query.GroupBy(m => m.assignedToUserID);
            foreach (var rsv in groupedByAgent)
            {

                prebooked += rsv.Count(m => m.bookingStatusID == 1);
                contacted += rsv.Count(m => m.callClasificationID == 7);
                totalPaid += rsv.Where(m => m.totalPaid != null).Sum(m => (decimal)m.totalPaid);

            }

        }

        public SweepstakesReportModel SearchSweepstakes(SweepstakesReportModel.SearchSweepstakes model)
        {
            SweepstakesReportModel results = new SweepstakesReportModel();
            results.Sweepstakes = new List<SweepstakesReportModel.SweepstakeItem>();
            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));

            var sweepstakesQ = from r in db.vw_Sweepstakes
                               where r.Date >= fDate && r.Date < tDate
                               && r.terminalID == model.Search_TerminalID
                               select r;

            foreach (var q in sweepstakesQ)
            {
                SweepstakesReportModel.SweepstakeItem item = new SweepstakesReportModel.SweepstakeItem();
                item.TransactionID = q.transactionID;
                item.Date = q.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                item.FirstName = q.firstName;
                item.LastName = q.lastName;
                item.Email = q.email;
                item.Phone = q.phone;
                item.Terminal = model.Search_Terminals.Single(x => x.Value == q.terminalID.ToString()).Text;
                results.Sweepstakes.Add(item);
            }

            results.Terminal = model.Search_Terminals.Single(x => x.Value == model.Search_TerminalID.ToString()).Text;
            results.Dates = model.Search_I_FromDate + " - " + model.Search_F_ToDate;
            results.Json = new JavaScriptSerializer().Serialize(results.Sweepstakes);

            return results;
        }

        public QuoteRequestsReportModel SearchQuoteRequests(QuoteRequestsReportModel.SearchQuoteRequests model)
        {
            QuoteRequestsReportModel results = new QuoteRequestsReportModel();
            results.QuoteRequests = new List<QuoteRequestsReportModel.QuoteRequestItem>();
            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));

            var quoteRequestsQ = from r in db.vw_QuoteRequests
                                 where r.dateSaved >= fDate && r.dateSaved < tDate
                                 && r.terminalID == model.Search_TerminalID
                                 select r;

            foreach (var q in quoteRequestsQ)
            {
                QuoteRequestsReportModel.QuoteRequestItem item = new QuoteRequestsReportModel.QuoteRequestItem();
                item.TransactionID = q.transactionID;
                item.DateSaved = q.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                item.FirstName = q.firstName;
                item.LastName = q.lastName;
                item.Email = q.email;
                item.Phone = q.phone;
                item.Destination = (q.destination != "0" ? q.destination : "Open");
                item.Resort = q.resort;
                item.Arrival = q.arrival;
                item.Departure = q.departure;
                item.Adults = q.adults;
                item.Children = q.children;
                item.Comments = q.comments;
                item.TimeToBeReached = q.timeToBeReached;
                item.Terminal = model.Search_Terminals.Single(x => x.Value == q.terminalID.ToString()).Text;
                results.QuoteRequests.Add(item);
            }

            results.Terminal = model.Search_Terminals.Single(x => x.Value == model.Search_TerminalID.ToString()).Text;
            results.Dates = model.Search_I_FromDate + " - " + model.Search_F_ToDate;
            results.Json = new JavaScriptSerializer().Serialize(results.QuoteRequests);

            return results;
        }

        public List<ActivityPricesReportModel> GetActivityPrices(PricesModel.SearchPricesModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<ActivityPricesReportModel> list = new List<ActivityPricesReportModel>();

            long[] activities = { };
            if (model.Search_Activity == 0)
            {
                if (model.Search_Provider > 0)
                {
                    activities = (from s in db.tblServices
                                  where s.providerID == model.Search_Provider
                                  && s.deleted != true
                                  select s.serviceID).ToArray();
                }
                else
                {
                    long[] terminals = session.Terminals.Split(',').Select(x => long.Parse(x)).ToArray();
                    activities = (from s in db.tblServices
                                  where terminals.Contains(s.originalTerminalID)
                                  && s.deleted != true
                                  select s.serviceID).ToArray();
                }
            }
            else
            {
                List<long> activityList = new List<long>();
                activityList.Add(model.Search_Activity);
                activities = activityList.ToArray();
            }

            DateTime date = DateTime.Parse(model.SearchPrices_Date);
            IEnumerable<ComputedPriceModel> activityPricesQ = new List<ComputedPriceModel>();
            for (var i = 0; i < activities.Length; i++)
            {
                //var prices = PriceDataModel.GetComputedPrices(activities[i], date, null, true, DateTime.Now);
                var prices = PriceDataModel.GetComputedPrices(activities[i], date, 99999, null, DateTime.Now);
                activityPricesQ = activityPricesQ.Concat(prices);
            }

            //var activityPricesQ = from a in db.tblPrices
            //                      where activities.Contains(a.itemID)
            //                      && a.sysItemTypeID == 1
            //                      && a.priceTypeID != 3
            //                      && (a.permanent_ == true
            //                      || (a.permanent_ == false &&
            //                      a.fromDate <= date && a.toDate >= date))
            //                      select a;

            if (model.Search_Currency > 0)
            {
                activityPricesQ = activityPricesQ.Where(x => x.CurrencyID == model.Search_Currency);
            }

            activityPricesQ = activityPricesQ.OrderBy(a => a.ServiceID).OrderBy(a => a.FullUnit);

            string unit = "";
            string provider = "";
            string activity = "";
            long lastActivityID = 0;
            decimal p1 = 0;
            decimal p2 = 0;
            decimal p3 = 0;
            decimal p4 = 0;
            decimal p5 = 0;
            decimal p6 = 0;
            decimal p7 = 0;
            decimal p8 = 0;
            decimal p9 = 0;
            decimal p10 = 0;
            string p1Rule = "";
            string p2Rule = "";
            string p3Rule = "";
            string p4Rule = "";
            string p5Rule = "";
            string p6Rule = "";
            string p7Rule = "";
            string p8Rule = "";
            string p9Rule = "";
            string p10Rule = "";

            foreach (var price in activityPricesQ)
            {

                if ((unit != "" && price.FullUnit != unit) || activity != "" && price.ServiceID != lastActivityID)
                {
                    ActivityPricesReportModel newActivity = new ActivityPricesReportModel();
                    newActivity.Prices_Provider = provider;
                    newActivity.Prices_Activity = activity;
                    newActivity.Prices_Unit = unit;
                    newActivity.Prices_Currency_1_PriceType_1 = (p1 > 0 ? "$" + p1.ToString("0.00") + " USD" : "-");
                    newActivity.Prices_Currency_1_PriceType_2 = (p2 > 0 ? "$" + p2.ToString("0.00") + " USD" : "-");
                    newActivity.Prices_Currency_1_PriceType_3 = (p3 > 0 ? "$" + p3.ToString("0.00") + " USD" : "-");
                    newActivity.Prices_Currency_1_PriceType_4 = (p4 > 0 ? "$" + p4.ToString("0.00") + " USD" : "-");
                    newActivity.Prices_Currency_1_PriceType_5 = (p5 > 0 ? "$" + p5.ToString("0.00") + " USD" : "-");
                    newActivity.Prices_Currency_2_PriceType_1 = (p6 > 0 ? "$" + p6.ToString("0.00") + " MXN" : "-");
                    newActivity.Prices_Currency_2_PriceType_2 = (p7 > 0 ? "$" + p7.ToString("0.00") + " MXN" : "-");
                    newActivity.Prices_Currency_2_PriceType_3 = (p8 > 0 ? "$" + p8.ToString("0.00") + " MXN" : "-");
                    newActivity.Prices_Currency_2_PriceType_4 = (p9 > 0 ? "$" + p9.ToString("0.00") + " MXN" : "-");
                    newActivity.Prices_Currency_2_PriceType_5 = (p10 > 0 ? "$" + p10.ToString("0.00") + " MXN" : "-");
                    newActivity.Prices_Currency_1_PriceType_1_Rule = p1Rule;
                    newActivity.Prices_Currency_1_PriceType_2_Rule = p2Rule;
                    newActivity.Prices_Currency_1_PriceType_3_Rule = p3Rule;
                    newActivity.Prices_Currency_1_PriceType_4_Rule = p4Rule;
                    newActivity.Prices_Currency_1_PriceType_5_Rule = p5Rule;
                    newActivity.Prices_Currency_2_PriceType_1_Rule = p6Rule;
                    newActivity.Prices_Currency_2_PriceType_2_Rule = p7Rule;
                    newActivity.Prices_Currency_2_PriceType_3_Rule = p8Rule;
                    newActivity.Prices_Currency_2_PriceType_4_Rule = p9Rule;
                    newActivity.Prices_Currency_2_PriceType_5_Rule = p10Rule;

                    list.Add(newActivity);
                    provider = "";
                    activity = "";
                    p1 = 0;
                    p2 = 0;
                    p3 = 0;
                    p4 = 0;
                    p5 = 0;
                    p6 = 0;
                    p7 = 0;
                    p8 = 0;
                    p9 = 0;
                    p10 = 0;
                }
                provider = db.tblServices.Where(x => x.serviceID == price.ServiceID).FirstOrDefault().tblProviders.comercialName;
                activity = db.tblServices.Where(x => x.serviceID == price.ServiceID).FirstOrDefault().service;
                lastActivityID = price.ServiceID;
                //1,10,2,9,3
                if (price.PriceTypeID == 1 && price.CurrencyID == 1)
                {
                    p1 = price.Price;
                    p1Rule = price.Rule;
                }
                if (price.PriceTypeID == 10 && price.CurrencyID == 1)
                {
                    p2 = price.Price;
                    p2Rule = price.Rule;
                }
                if (price.PriceTypeID == 2 && price.CurrencyID == 1)
                {
                    p3 = price.Price;
                    p3Rule = price.Rule;
                }
                if (price.PriceTypeID == 9 && price.CurrencyID == 1)
                {
                    p4 = price.Price;
                    p4Rule = price.Rule;
                }
                if (price.PriceTypeID == 3 && price.CurrencyID == 1)
                {
                    p5 = price.Price;
                    p5Rule = price.Rule;
                }
                if (price.PriceTypeID == 1 && price.CurrencyID == 2)
                {
                    p6 = price.Price;
                    p6Rule = price.Rule;
                }
                if (price.PriceTypeID == 10 && price.CurrencyID == 2)
                {
                    p7 = price.Price;
                    p7Rule = price.Rule;
                }
                if (price.PriceTypeID == 2 && price.CurrencyID == 2)
                {
                    p8 = price.Price;
                    p8Rule = price.Rule;
                }
                if (price.PriceTypeID == 9 && price.CurrencyID == 2)
                {
                    p9 = price.Price;
                    p9Rule = price.Rule;
                }
                if (price.PriceTypeID == 3 && price.CurrencyID == 2)
                {
                    p10 = price.Price;
                    p10Rule = price.Rule;
                }

                unit = price.FullUnit;

            }
            ActivityPricesReportModel nuevaActivity = new ActivityPricesReportModel();
            nuevaActivity.Prices_Provider = provider;
            nuevaActivity.Prices_Activity = activity;
            nuevaActivity.Prices_Unit = unit;
            nuevaActivity.Prices_Currency_1_PriceType_1 = (p1 > 0 ? "$" + p1.ToString("0.00") + " USD" : "-");
            nuevaActivity.Prices_Currency_1_PriceType_2 = (p2 > 0 ? "$" + p2.ToString("0.00") + " USD" : "-");
            nuevaActivity.Prices_Currency_1_PriceType_3 = (p3 > 0 ? "$" + p3.ToString("0.00") + " USD" : "-");
            nuevaActivity.Prices_Currency_1_PriceType_4 = (p4 > 0 ? "$" + p4.ToString("0.00") + " USD" : "-");
            nuevaActivity.Prices_Currency_1_PriceType_5 = (p5 > 0 ? "$" + p5.ToString("0.00") + " USD" : "-");
            nuevaActivity.Prices_Currency_2_PriceType_1 = (p6 > 0 ? "$" + p6.ToString("0.00") + " MXN" : "-");
            nuevaActivity.Prices_Currency_2_PriceType_2 = (p7 > 0 ? "$" + p7.ToString("0.00") + " MXN" : "-");
            nuevaActivity.Prices_Currency_2_PriceType_3 = (p8 > 0 ? "$" + p8.ToString("0.00") + " MXN" : "-");
            nuevaActivity.Prices_Currency_2_PriceType_4 = (p9 > 0 ? "$" + p9.ToString("0.00") + " MXN" : "-");
            nuevaActivity.Prices_Currency_2_PriceType_5 = (p10 > 0 ? "$" + p10.ToString("0.00") + " MXN" : "-");
            nuevaActivity.Prices_Currency_1_PriceType_1_Rule = p1Rule;
            nuevaActivity.Prices_Currency_1_PriceType_2_Rule = p2Rule;
            nuevaActivity.Prices_Currency_1_PriceType_3_Rule = p3Rule;
            nuevaActivity.Prices_Currency_1_PriceType_4_Rule = p4Rule;
            nuevaActivity.Prices_Currency_1_PriceType_5_Rule = p5Rule;
            nuevaActivity.Prices_Currency_2_PriceType_1_Rule = p6Rule;
            nuevaActivity.Prices_Currency_2_PriceType_2_Rule = p7Rule;
            nuevaActivity.Prices_Currency_2_PriceType_3_Rule = p8Rule;
            nuevaActivity.Prices_Currency_2_PriceType_4_Rule = p9Rule;
            nuevaActivity.Prices_Currency_2_PriceType_5_Rule = p10Rule;

            list.Add(nuevaActivity);

            return list.OrderBy(x => x.Prices_Provider).ThenBy(y => y.Prices_Activity).ToList();
        }

        string GetProviderExchangeRates(long terminalid, int providerid, DateTime? date, int pointOfSaleID)
        {
            string rate = "";

            var exchangeRateQ = from r in db.tblExchangeRates
                                where r.terminalID == terminalid
                                && r.providerID == providerid
                                && r.toCurrencyID == 2
                                && (r.permanent_ == true && r.fromDate <= (date ?? DateTime.Now) || (r.fromDate <= (date ?? DateTime.Now) && r.toDate >= (date ?? DateTime.Now)))
                                && (r.tblExchangeRates_PointsOfSales.Count(
                                    p => p.pointOfSaleID == pointOfSaleID
                                    && p.dateAdded <= date
                                    && (p.dateDeleted == null || p.dateDeleted > date)
                                ) > 0 || r.tblExchangeRates_PointsOfSales.Count() == 0)
                                select r;

            foreach (var er in exchangeRateQ)
            {
                if (exchangeRateQ.Count(x => x.fromCurrencyID == er.fromCurrencyID) > 1)
                {
                    if (er.tblExchangeRates_PointsOfSales.Count() > 0)
                    {
                        rate += (rate != "" ? ", " : "");
                        rate += er.tblCurrencies.currencyCode + " = " + er.exchangeRate;
                    }
                }
                else
                {
                    rate += (rate != "" ? ", " : "");
                    rate += er.tblCurrencies.currencyCode + " = " + er.exchangeRate;
                }

            }

            return rate;
        }

        public PricesModel.PricesCustomModel SearchPricesReport(PricesModel.SearchPricesModel model)
        {
            DateTime date = DateTime.Parse(model.SearchPrices_Date);
            DateTime bookingdate = DateTime.Parse(model.SearchPrices_BookingDate);
            if (bookingdate.Date == DateTime.Today.Date)
            {
                bookingdate = DateTime.Now;
            }
            PricesModel.PricesCustomModel report = new PricesModel.PricesCustomModel();
            report.ReportLayoutName = "Activities Prices";
            report.Date = model.SearchPrices_Date;
            MasterChartDataModel.Purchases pu = new MasterChartDataModel.Purchases();
            report.ExchangeRate = pu.GetExchangeRates(bookingdate, model.Search_TerminalID, model.Search_PointOfSaleID);
            if (model.Search_Provider != null)
            {
                report.ProviderExchangeRate = GetProviderExchangeRates(model.Search_TerminalID, (int)model.Search_Provider, bookingdate, model.Search_PointOfSaleID);
            }

            report.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID,
                (Utils.GeneralFunctions.IsUserInRole("Administrator", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Accounting", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Comptroller", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Auditor", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Operation Manager", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Department Administrator", session.UserID, true)
                || Utils.GeneralFunctions.IsUserInRole("Online Reservations Agent", session.UserID) ? true : false),
                model.Search_Activity, bookingdate, bookingdate);

            List<PricesModel.CurrencyType> currencies = new List<PricesModel.CurrencyType>();
            if (model.Search_Currency == null)
            {
                foreach (var c in db.tblCurrencies.Where(x => x.currencyID < 3))
                {
                    PricesModel.CurrencyType ctype = new PricesModel.CurrencyType();
                    ctype.CurrencyID = c.currencyID;
                    ctype.CurrencyCode = c.currencyCode;
                    currencies.Add(ctype);
                }
            }
            else
            {
                PricesModel.CurrencyType ctype = new PricesModel.CurrencyType();
                ctype.CurrencyID = (int)model.Search_Currency;
                ctype.CurrencyCode = db.tblCurrencies.Single(x => x.currencyID == model.Search_Currency).currencyCode;
                currencies.Add(ctype);
            }

            int[] currenciesArr = currencies.Select(x => x.CurrencyID).ToArray();
            report.Currencies = currencies;

            List<PricesModel.PriceItem> prices = new List<PricesModel.PriceItem>();

            long[] activities = { };
            if (model.Search_Activity == 0)
            {
                if (model.Search_Provider != null && model.Search_Provider > 0)
                {
                    activities = (from s in db.tblServices
                                  where s.providerID == model.Search_Provider
                                  && s.deleted != true
                                  select s.serviceID).ToArray();
                }
                else
                {
                    activities = (from s in db.tblServices
                                  where s.originalTerminalID == model.Search_TerminalID
                                  && s.tblProviders.isActive == true
                                  && s.deleted != true
                                  select s.serviceID).ToArray();
                }
            }
            else
            {
                List<long> activityList = new List<long>();
                activityList.Add(model.Search_Activity);
                activities = activityList.ToArray();
            }

            bool isOnline = db.tblPointsOfSale.FirstOrDefault(x => x.pointOfSaleID == model.Search_PointOfSaleID).online;

            var Services = from s in db.tblServices
                           join provider in db.tblProviders on s.providerID equals provider.providerID
                           where activities.Contains(s.serviceID)
                           select new
                           {
                               ServiceID = s.serviceID,
                               Service = s.service,
                               Provider = provider.comercialName,
                               Category = s.tblCategories_Services.FirstOrDefault().tblCategories.category
                           };

            foreach (var service in Services)
            {
                if (model.Search_UpdateCache == true)
                {
                    db.tblServices_PricesCache
                        .Where(x => x.serviceID == service.ServiceID)
                        .ToList()
                        .ForEach(db.tblServices_PricesCache.DeleteObject);
                }

                //List<ComputedPriceModel> computedPrices = PriceDataModel.GetComputedPrices(service.ServiceID, date, model.Search_TerminalID, isOnline, bookingdate, model.Search_Culture);
                List<ComputedPriceModel> computedPrices = PriceDataModel.GetComputedPrices(service.ServiceID, date, model.Search_PointOfSaleID, model.Search_TerminalID, bookingdate, model.Search_Culture);
                computedPrices = computedPrices.Where(p => currenciesArr.Contains(p.CurrencyID)).ToList();
                foreach (var unit in computedPrices.Select(x => x.FullUnit).Distinct())
                {
                    PricesModel.PriceItem activityPrices = new PricesModel.PriceItem();
                    activityPrices.ServiceID = service.ServiceID;
                    activityPrices.Category = service.Category;
                    activityPrices.Provider = service.Provider;
                    activityPrices.Activity = service.Service;
                    activityPrices.Unit = unit;
                    List<PricesModel.PriceDetail> pricesPerType = new List<PricesModel.PriceDetail>();
                    foreach (var c in currencies)
                    {
                        foreach (var t in report.PriceTypes)
                        {
                            var price = (from p in computedPrices
                                         where p.CurrencyID == c.CurrencyID
                                         && p.PriceTypeID == t.PriceTypeID
                                         && p.FullUnit == unit
                                         select p).FirstOrDefault();

                            PricesModel.PriceDetail priceDetail = new PricesModel.PriceDetail();
                            if (price != null)
                            {
                                priceDetail.Amount = decimal.Round(price.Price, 2, MidpointRounding.AwayFromZero);
                                priceDetail.Currency = price.CurrencyCode;
                                priceDetail.Rule = price.Rule;
                                priceDetail.DependingOnPriceID = price.DependingOnPriceID;
                            }
                            else
                            {
                                priceDetail.Amount = 0;
                                priceDetail.Currency = c.CurrencyCode;
                                priceDetail.Rule = "";
                            }
                            pricesPerType.Add(priceDetail);

                            if (model.Search_UpdateCache == true && price != null)
                            {
                                //nuevo
                                tblServices_PricesCache newPriceCache = new tblServices_PricesCache();
                                newPriceCache.serviceID = service.ServiceID;
                                newPriceCache.priceTypeID = t.PriceTypeID;
                                newPriceCache.price = priceDetail.Amount;
                                newPriceCache.currencyID = c.CurrencyID;
                                var unitCulture = PriceDataModel.GetUnit(price.PriceID, (c.CurrencyID == 1 ? "en-US" : "es-MX"));
                                newPriceCache.unit = unitCulture.unit + (unitCulture.additionalInfo != null && unitCulture.additionalInfo != "" ? " (" + unitCulture.additionalInfo + ")" : "");
                                newPriceCache.dateLastUpdate = DateTime.Now;
                                newPriceCache.updatedByUserID = session.UserID;
                                if (priceDetail.DependingOnPriceID != null)
                                {
                                    newPriceCache.dependingOnPriceID = priceDetail.DependingOnPriceID;
                                }
                                db.tblServices_PricesCache.AddObject(newPriceCache);
                            }
                        }
                    }
                    activityPrices.PricesPerType = pricesPerType;

                    prices.Add(activityPrices);
                }
            }
            db.SaveChanges();

            report.Prices = prices;

            return report;
        }

        public PricesModel.PricesCustomModel SearchPricesCustomReport(PricesModel.SearchPricesCustomModel model)
        {
            PricesModel.PricesCustomModel report = new PricesModel.PricesCustomModel();
            if (model.Search_Layout > 0)
            {
                var LayoutQuery = (from l in db.tblPricesReportLayouts
                                   where l.priceReportLayoutID == model.Search_Layout
                                   select l).FirstOrDefault();

                long terminalID = LayoutQuery.terminalID;
                report.ReportLayoutName = LayoutQuery.priceReportLayout;
                report.Date = model.Search_Date;
                bool isOnline = false;
                if (LayoutQuery.pointOfSaleID != null)
                {
                    isOnline = LayoutQuery.tblPointsOfSale.online;
                }

                List<PriceType> types = new List<PriceType>();
                foreach (var t in LayoutQuery.tblPricesReportLayouts_PriceTypes)
                {
                    PriceType ptype = new PriceType();
                    ptype.PriceTypeID = t.priceTypeID;
                    ptype.Type = t.tblPriceTypes.priceType;
                    ptype.Order = t.tblPriceTypes.order_;
                    types.Add(ptype);
                }
                report.PriceTypes = types;

                List<PricesModel.CurrencyType> currencies = new List<PricesModel.CurrencyType>();
                int[] currenciesArr = new int[] { };
                if (LayoutQuery.tblPricesReportLayouts_Currencies.Count() > 0)
                {
                    foreach (var c in LayoutQuery.tblPricesReportLayouts_Currencies)
                    {
                        PricesModel.CurrencyType ctype = new PricesModel.CurrencyType();
                        ctype.CurrencyID = c.currencyID;
                        ctype.CurrencyCode = c.tblCurrencies.currencyCode;
                        currencies.Add(ctype);
                    }
                }
                else
                {
                    foreach (SelectListItem c in MasterChartDataModel.LeadsCatalogs.FillDrpCurrenciesNoCAD())
                    {
                        PricesModel.CurrencyType ctype = new PricesModel.CurrencyType();
                        ctype.CurrencyID = int.Parse(c.Value);
                        ctype.CurrencyCode = c.Text;
                        currencies.Add(ctype);
                    }
                }
                currenciesArr = currencies.Select(x => x.CurrencyID).ToArray();
                report.Currencies = currencies;

                DateTime date = DateTime.Parse(model.Search_Date);

                List<PricesModel.PriceItem> prices = new List<PricesModel.PriceItem>();

                foreach (var service in LayoutQuery.tblPricesReportLayouts_Services.Where(x => x.tblServices.deleted == false && x.tblServices.tblProviders.isActive == true))
                {
                    //List<ComputedPriceModel> computedPrices = PriceDataModel.GetComputedPrices(service.serviceID, date, terminalID, isOnline, DateTime.Now, LayoutQuery.culture);
                    List<ComputedPriceModel> computedPrices = PriceDataModel.GetComputedPrices(service.serviceID, date, (LayoutQuery.pointOfSaleID ?? 0), terminalID, DateTime.Now, LayoutQuery.culture);
                    computedPrices = computedPrices.Where(p => currenciesArr.Contains(p.CurrencyID)).ToList();
                    foreach (var unit in computedPrices.Select(x => x.FullUnit).Distinct())
                    {
                        PricesModel.PriceItem activityPrices = new PricesModel.PriceItem();
                        activityPrices.ServiceID = service.serviceID;
                        if (service.tblServices.tblCategories_Services.Count() > 0)
                        {
                            activityPrices.Category = service.tblServices.tblCategories_Services.FirstOrDefault().tblCategories.category;
                        }
                        activityPrices.Provider = service.tblServices.tblProviders.comercialName;
                        activityPrices.Activity = service.tblServices.service;
                        activityPrices.Unit = unit;
                        List<PricesModel.PriceDetail> pricesPerType = new List<PricesModel.PriceDetail>();
                        foreach (var c in currencies)
                        {
                            foreach (var t in types)
                            {
                                var price = (from p in computedPrices
                                             where p.CurrencyID == c.CurrencyID
                                             && p.PriceTypeID == t.PriceTypeID
                                             && p.FullUnit == unit
                                             select p).FirstOrDefault();

                                PricesModel.PriceDetail priceDetail = new PricesModel.PriceDetail();
                                if (price != null)
                                {
                                    priceDetail.Amount = decimal.Round(price.Price, 2, MidpointRounding.AwayFromZero);
                                    priceDetail.Currency = price.CurrencyCode;
                                    priceDetail.Rule = price.Rule;
                                }
                                else
                                {
                                    priceDetail.Amount = 0;
                                    priceDetail.Currency = c.CurrencyCode;
                                    priceDetail.Rule = "";
                                }
                                pricesPerType.Add(priceDetail);
                            }
                        }
                        activityPrices.PricesPerType = pricesPerType;

                        prices.Add(activityPrices);
                    }
                }

                report.Prices = prices;

            }

            return report;
        }

        public static AttemptResponse DeleteReportLayout(int id)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse response = new AttemptResponse();
            try
            {
                db.tblPricesReportLayouts.DeleteObject(db.tblPricesReportLayouts.Single(x => x.priceReportLayoutID == id));
                db.SaveChanges();
                response.Type = Attempt_ResponseTypes.Ok;
                response.Message = "Layout Deleted!";
            }
            catch (Exception e)
            {
                response.Type = Attempt_ResponseTypes.Error;
                response.Message = e.ToString();
            }

            return response;
        }

        public static AttemptResponse SaveReportLayout(PricesModel.PricesReportLayout model)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse response = new AttemptResponse();
            tblPricesReportLayouts layout = new tblPricesReportLayouts();
            if (model.LayoutID != null)
            {
                //editar
                layout = db.tblPricesReportLayouts.Single(x => x.priceReportLayoutID == model.LayoutID);

                var dbCurrencies = layout.tblPricesReportLayouts_Currencies.Select(m => m.priceReportLayour_CurrencyID).ToArray();
                if (dbCurrencies.Count() > 0)
                {
                    foreach (var i in dbCurrencies)
                    {
                        db.DeleteObject(db.tblPricesReportLayouts_Currencies.Single(c => c.priceReportLayour_CurrencyID == i));
                    }
                }

                var dbServices = layout.tblPricesReportLayouts_Services.Select(s => s.priceReportLayout_ServiceID).ToArray();
                if (dbServices.Count() > 0)
                {
                    foreach (var i in dbServices)
                    {
                        db.DeleteObject(db.tblPricesReportLayouts_Services.Single(s => s.priceReportLayout_ServiceID == i));
                    }
                }

                var dbPriceTypes = layout.tblPricesReportLayouts_PriceTypes.Select(p => p.priceReportLayout_PriceTypeID).ToArray();
                if (dbPriceTypes.Count() > 0)
                {
                    foreach (var i in dbPriceTypes)
                    {
                        db.DeleteObject(db.tblPricesReportLayouts_PriceTypes.Single(p => p.priceReportLayout_PriceTypeID == i));
                    }
                }

                var dbRoles = layout.tblPricesReportLayouts_Roles.Select(r => r.priceReportLayout_RoleID).ToArray();
                if (dbRoles.Count() > 0)
                {
                    foreach (var i in dbRoles)
                    {
                        db.DeleteObject(db.tblPricesReportLayouts_Roles.Single(r => r.priceReportLayout_RoleID == i));
                    }
                }
                layout.dateModified = DateTime.Now;
                layout.modifiedByUserID = session.UserID;
                db.SaveChanges();
            }
            layout.culture = model.Culture;
            layout.dateSaved = DateTime.Today;
            layout.priceReportLayout = model.Layout;
            layout.terminalID = model.TerminalID;
            layout.categoryID = model.CategoryID;
            layout.userID = session.UserID;
            layout.pointOfSaleID = model.PointOfSaleID;
            if (model.SelectedCurrencies != null)
            {
                foreach (int currency in model.SelectedCurrencies)
                {
                    layout.tblPricesReportLayouts_Currencies.Add(new tblPricesReportLayouts_Currencies()
                    {
                        currencyID = currency
                    });
                }
            }
            else
            {
                List<SelectListItem> currenciesList = MasterChartDataModel.LeadsCatalogs.FillDrpCurrenciesNoCAD();
                foreach (var item in currenciesList)
                {
                    layout.tblPricesReportLayouts_Currencies.Add(new tblPricesReportLayouts_Currencies()
                    {
                        currencyID = int.Parse(item.Value)
                    });
                }
            }
            if (model.SelectedServices != null)
            {
                foreach (long serviceID in model.SelectedServices)
                {
                    layout.tblPricesReportLayouts_Services.Add(new tblPricesReportLayouts_Services()
                    {
                        serviceID = serviceID
                    });
                }
            }
            else
            {
                List<SelectListItem> servicesList = MasterChartDataModel.LeadsCatalogs.FillDrpServicesByCategory(model.CategoryID);
                foreach (var item in servicesList)
                {
                    layout.tblPricesReportLayouts_Services.Add(new tblPricesReportLayouts_Services()
                    {
                        serviceID = long.Parse(item.Value)
                    });
                }
            }

            if (model.SelectedPriceTypes != null)
            {
                foreach (int priceTypeID in model.SelectedPriceTypes)
                {
                    layout.tblPricesReportLayouts_PriceTypes.Add(new tblPricesReportLayouts_PriceTypes()
                    {
                        priceTypeID = priceTypeID
                    });
                }
            }
            else
            {
                List<SelectListItem> priceTypesList = MasterChartDataModel.LeadsCatalogs.FillDrpPriceTypesForTerminal(model.TerminalID);
                foreach (var item in priceTypesList)
                {
                    layout.tblPricesReportLayouts_PriceTypes.Add(new tblPricesReportLayouts_PriceTypes()
                    {
                        priceTypeID = int.Parse(item.Value)
                    });
                }
            }

            if (model.SelectedRoles != null)
            {
                foreach (Guid roleID in model.SelectedRoles)
                {
                    layout.tblPricesReportLayouts_Roles.Add(new tblPricesReportLayouts_Roles()
                    {
                        roleID = roleID
                    });
                }
            }
            else
            {
                layout.tblPricesReportLayouts_Roles.Add(new tblPricesReportLayouts_Roles()
                {
                    roleID = (Guid)session.RoleID
                });
            }

            try
            {
                if (model.LayoutID == null)
                {
                    //nuevo
                    db.tblPricesReportLayouts.AddObject(layout);
                }

                db.SaveChanges();
                response.Type = Attempt_ResponseTypes.Ok;
                response.ObjectID = layout.priceReportLayoutID;
            }
            catch (Exception e)
            {
                response.Type = Attempt_ResponseTypes.Error;
                response.Message = e.ToString();
            }

            return response;
        }

        public PricesModel.PricesReportLayout GetReportLayout(int id)
        {
            var layoutQuery = (from l in db.tblPricesReportLayouts
                               where l.priceReportLayoutID == id
                               select l).FirstOrDefault();

            PricesModel.PricesReportLayout layout = new PricesModel.PricesReportLayout();

            layout.LayoutID = layoutQuery.priceReportLayoutID;
            layout.Layout = layoutQuery.priceReportLayout;
            layout.TerminalID = layoutQuery.terminalID;
            layout.PointOfSaleID = layoutQuery.pointOfSaleID;
            layout.CategoryID = layoutQuery.categoryID;
            layout.UserID = layoutQuery.userID;
            tblUserProfiles profile = db.tblUserProfiles.Single(x => x.userID == layoutQuery.userID);
            layout.User = profile.firstName + " " + profile.lastName;
            layout.DateSaved = layoutQuery.dateSaved.ToString("yyyy-MM-dd");
            layout.Culture = layoutQuery.culture;
            layout.SelectedCurrencies = layoutQuery.tblPricesReportLayouts_Currencies.Select(x => x.currencyID).ToArray();
            layout.SelectedPriceTypes = layoutQuery.tblPricesReportLayouts_PriceTypes.Select(x => x.priceTypeID).ToArray();
            layout.SelectedRoles = layoutQuery.tblPricesReportLayouts_Roles.Select(x => x.roleID).ToArray();
            layout.SelectedServices = layoutQuery.tblPricesReportLayouts_Services.Select(x => x.serviceID).ToArray();

            return layout;
        }

        public static IncomeOutcomeModel.ExchangeRateItem getExchangeRateItem(long? exchangeRateID)
        {
            ePlatEntities db = new ePlatEntities();
            IncomeOutcomeModel.ExchangeRateItem newRate = new IncomeOutcomeModel.ExchangeRateItem();
            newRate.ExchangeRateID = exchangeRateID;
            tblExchangeRates er = db.tblExchangeRates.FirstOrDefault(x => x.exchangeRateID == exchangeRateID);
            newRate.ExchangeRate = er.exchangeRate;
            newRate.Vigency = er.fromDate.ToString("yyyy-MM-dd") + " - " + (er.permanent_ == true ? "permanent" : er.toDate.Value.ToString("yyyy-MM-dd"));
            newRate.Type = er.tblExchangeRateTypes.exchangeRateType;
            return newRate;
        }

        public bool ProcessCouponInfo(long id, string reason = "")
        {
            bool processed = true;
            tblCouponInfo newCoupon = new tblCouponInfo();
            List<ComputedPriceModel> Prices = new List<ComputedPriceModel>();
            List<IncomeOutcomeModel.ExchangeRateItem> Exchanges = new List<IncomeOutcomeModel.ExchangeRateItem>();

            //revisar si ya existe el registro
            newCoupon = (from c in db.tblCouponInfo
                         where c.purchase_ServiceID == id
                         select c).FirstOrDefault();

            bool isNew = false;
            if (newCoupon == null)
            {
                isNew = true;
                newCoupon = new tblCouponInfo();
                newCoupon.dateGenerated = DateTime.Now;
            }
            else
            {
                newCoupon.dateLastUpdate = DateTime.Now;
                newCoupon.reasonLastUpdate = reason;
            }

            var couponQ = (from c in db.tblPurchases_Services
                           where c.purchase_ServiceID == id
                           select c).FirstOrDefault();

            newCoupon.terminalID = couponQ.tblPurchases.terminalID;
            newCoupon.pointOfSaleID = couponQ.tblPurchases.pointOfSaleID;
            newCoupon.purchaseID = couponQ.purchaseID;
            newCoupon.leadID = couponQ.tblPurchases.leadID;
            newCoupon.currencyID = couponQ.currencyID;
            newCoupon.purchase_ServiceID = id;
            newCoupon.providerID = couponQ.tblServices.providerID;
            newCoupon.serviceID = couponQ.serviceID;
            newCoupon.serviceStatusID = couponQ.serviceStatusID;
            newCoupon.reservedByUserID = couponQ.tblPurchases.agentID;
            newCoupon.canceledByUserID = couponQ.canceledByUserID;
            newCoupon.providerInvoiceID = couponQ.providerInvoiceID;
            newCoupon.transportationZoneID = couponQ.transportationZoneID;
            if (couponQ.transportationZoneID != null)
            {
                newCoupon.transportationZone = couponQ.tblTransportationZones.transportationZone;
            }
            newCoupon.terminal = couponQ.tblPurchases.tblTerminals.terminal;
            newCoupon.pointOfSale = couponQ.tblPurchases.tblPointsOfSale.shortName + " - " + couponQ.tblPurchases.tblPointsOfSale.pointOfSale;
            if (couponQ.tblPurchases.tblLeads.personalTitleID != null)
            {
                newCoupon.customerTitle = couponQ.tblPurchases.tblLeads.tblPersonalTitles.personalTitle;
            }
            newCoupon.customerFirstName = couponQ.tblPurchases.tblLeads.firstName;
            newCoupon.customerLastName = couponQ.tblPurchases.tblLeads.lastName;
            if (couponQ.tblPurchaseServiceDetails.Count() > 0 && couponQ.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
            {
                newCoupon.folio = couponQ.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, couponQ.tblPurchaseServiceDetails.FirstOrDefault().coupon.LastIndexOf("-"));
                newCoupon.couponReference = couponQ.couponReference;
            }
            else
            {
                newCoupon.folio = "";
            }
            newCoupon.dateSaved = couponQ.dateSaved;
            newCoupon.dateConfirmed = couponQ.confirmationDateTime;
            newCoupon.dateCanceled = couponQ.cancelationDateTime;
            newCoupon.dateItem = couponQ.serviceDateTime;
            newCoupon.openCouponMonths = couponQ.openCouponMonths;
            newCoupon.provider = couponQ.tblServices.tblProviders.comercialName;
            newCoupon.providerUSDAvanceID = couponQ.tblServices.tblProviders.avanceProviderID;
            newCoupon.providerMXNAvanceID = couponQ.tblServices.tblProviders.mxnAvanceProviderID;
            newCoupon.item = couponQ.tblServices.service;
            newCoupon.status = couponQ.tblPurchaseServiceStatus.purchaseServiceStatus;
            newCoupon.currencyCode = couponQ.tblCurrencies.currencyCode;
            newCoupon.culture = couponQ.tblPurchases.culture;

            newCoupon.locationID = couponQ.tblPurchases.locationID;
            newCoupon.location = couponQ.tblPurchases.locationID != null ? ((couponQ.tblPurchases.tblLocations.locationCode != null ? (couponQ.tblPurchases.tblLocations.locationCode + " - ") : "") + couponQ.tblPurchases.tblLocations.locationCode) : null;

            long[] myexTIDs = { 5, 6, 7, 8 };
            if (couponQ.tblPurchases.tblPointsOfSale.online && myexTIDs.Contains(couponQ.tblPurchases.terminalID))
            {
                if (couponQ.tblPurchases.userID != null)
                {
                    tblUserProfiles agent = db.tblUserProfiles.Single(u => u.userID == couponQ.tblPurchases.userID);
                    newCoupon.purchaseUserID = couponQ.tblPurchases.userID;
                    newCoupon.purchaseBy = agent.firstName + " " + agent.lastName;
                    newCoupon.confirmedByUserID = couponQ.tblPurchases.userID;
                    newCoupon.confirmedBy = agent.firstName + " " + agent.lastName;
                }
                else
                {
                    newCoupon.purchaseUserID = null;
                    newCoupon.purchaseBy = "Website";
                    newCoupon.confirmedByUserID = null;
                    newCoupon.confirmedBy = "Website";
                }
            }
            else
            {
                if (couponQ.confirmedByUserID != null)
                {
                    tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == couponQ.confirmedByUserID);
                    newCoupon.confirmedBy = user.firstName + " " + user.lastName;
                    newCoupon.confirmedByUserID = couponQ.confirmedByUserID;

                    tblUserProfiles userPurchase = db.tblUserProfiles.Single(x => x.userID == couponQ.confirmedByUserID);
                    newCoupon.purchaseBy = userPurchase.firstName + " " + userPurchase.lastName;
                    newCoupon.purchaseUserID = couponQ.tblPurchases.userID;
                }
                else
                {
                    newCoupon.purchaseUserID = null;
                    newCoupon.purchaseBy = "Unassigned";
                    newCoupon.confirmedByUserID = null;
                    newCoupon.confirmedBy = "Unassigned";
                }
            }
            if (couponQ.tblPurchases.agentID != null)
            {
                tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == couponQ.tblPurchases.agentID);
                newCoupon.reservedBy = user.firstName + " " + user.lastName;
            }
            else
            {
                newCoupon.reservedBy = "Unassigned";
            }
            if (couponQ.canceledByUserID != null)
            {
                tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == couponQ.canceledByUserID);
                newCoupon.canceledBy = user.firstName + " " + user.lastName;
            }

            newCoupon.confirmationNumber = couponQ.confirmationNumber;
            if (couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.paid) != null)
            {
                newCoupon.paidCloseOutID = couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.paid).closeOutID;

                var closeout = couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.paid).tblCloseOuts;

                tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == closeout.salesAgentUserID);
                if (user != null)
                {
                    newCoupon.paidCloseOut = "<span class=\"block\">" + couponQ.tblPurchases.tblPointsOfSale.shortName + " " + user.firstName + " " + user.lastName + " " + closeout.closeOutDate.ToString("yyyy-MM-dd") + " paid</span>";
                }
                else
                {
                    newCoupon.paidCloseOut = "<span class=\"block\">" + couponQ.tblPurchases.tblPointsOfSale.shortName + " All Agents " + closeout.closeOutDate.ToString("yyyy-MM-dd") + " paid</span>";
                }
            }

            if (couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.canceled) != null)
            {
                newCoupon.canceledCloseOutID = couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.canceled).closeOutID;
                var closeout = couponQ.tblCloseOuts_Purchases.FirstOrDefault(x => x.canceled).tblCloseOuts;

                tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == closeout.salesAgentUserID);
                if (user != null)
                {
                    newCoupon.canceledCloseOut = "<span class=\"block\">" + couponQ.tblPurchases.tblPointsOfSale.shortName + " " + user.firstName + " " + user.lastName + " " + closeout.closeOutDate.ToString("yyyy-MM-dd") + " canceled</span>";
                }
                else
                {
                    newCoupon.canceledCloseOut = "<span class=\"block\">" + couponQ.tblPurchases.tblPointsOfSale.shortName + " All Agents " + closeout.closeOutDate.ToString("yyyy-MM-dd") + " canceled</span>";
                }
            }
            if (couponQ.replacementOf != null)
            {
                newCoupon.replacementOf = "On Replacement of ";
                if (couponQ.tblPurchases_Services2.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
                {
                    newCoupon.replacementOf += couponQ.tblPurchases_Services2.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, couponQ.tblPurchases_Services2.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                }
            }
            if (db.tblPurchases_Services.Count(x => x.replacementOf == couponQ.purchase_ServiceID) > 0)
            {
                var replacedBy = db.tblPurchases_Services.FirstOrDefault(x => x.replacementOf == couponQ.purchase_ServiceID).tblPurchaseServiceDetails.FirstOrDefault().coupon;
                if (replacedBy != null)
                {
                    newCoupon.replacedBy = "Replaced by " + replacedBy.Substring(0, replacedBy.IndexOf("-"));
                }
            }
            if (couponQ.promoID != null)
            {
                newCoupon.promo = couponQ.tblPromos.promo;
            }
            if (couponQ.audit == true)
            {
                newCoupon.audited = (couponQ.audit == true ? true : false);
                tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == couponQ.auditedByUserID);
                newCoupon.auditedBy = user.firstName + " " + user.lastName;
                newCoupon.auditedOnDate = couponQ.auditDate;
                newCoupon.auditedProviderInvoice = couponQ.auditInvoice;
            }
            if (couponQ.tblServices.excludeForCommission == true)
            {
                newCoupon.commissionPercentage = -1;
            }
            else
            {
                newCoupon.commissionPercentage = 0;
            }
            newCoupon.cancelationCharge = couponQ.cancelationCharge;

            //coupon totals           
            bool acer = db.tblServices.Single(x => x.serviceID == newCoupon.serviceID).tblTerminals.useCurrentCostER;

            //Prices = PriceDataModel.GetComputedPrices(newCoupon.serviceID, newCoupon.dateItem, newCoupon.terminalID, couponQ.tblPurchases.tblPointsOfSale.online, newCoupon.dateSaved, newCoupon.culture);
            Prices = PriceDataModel.GetComputedPrices(newCoupon.serviceID, newCoupon.dateItem, couponQ.tblPurchases.pointOfSaleID, newCoupon.terminalID, newCoupon.dateSaved, newCoupon.culture);

            newCoupon.totalUSD = 0;
            newCoupon.totalMXN = 0;

            //agregar a total cupon costo
            newCoupon.costUSD = 0;
            newCoupon.costMXN = 0;

            //units
            foreach (var unit in couponQ.tblPurchaseServiceDetails)
            {
                tblCouponInfoUnits newUnit = db.tblCouponInfoUnits.FirstOrDefault(x => x.purchaseServiceDetailID == unit.purchaseServiceDetailID);

                bool isNewUnit = false;
                if (newUnit == null)
                {
                    isNewUnit = true;
                    newUnit = new tblCouponInfoUnits();
                    newUnit.dateGenerated = DateTime.Now;
                }
                else
                {
                    newUnit.dateLastUpdate = DateTime.Now;
                    newUnit.reasonLastUpdate = reason;
                }

                newUnit.purchaseServiceID = couponQ.purchase_ServiceID;
                newUnit.purchaseServiceDetailID = unit.purchaseServiceDetailID;
                newUnit.priceTypeID = (int)unit.priceTypeID;
                newUnit.unitFolio = (unit.coupon != null ? unit.coupon : "");
                newUnit.quantity = unit.quantity;
                tblPriceUnits currentUnit = PriceDataModel.GetUnit((long)unit.netPriceID, newCoupon.culture);
                newUnit.unit = currentUnit.unit + (currentUnit.additionalInfo != null ? " (" + currentUnit.additionalInfo + ")" : "");
                newUnit.priceType = unit.tblPriceTypes.priceType;
                newUnit.isPromo = unit.promo;

                if (unit.netPriceID != null)
                {
                    //INCOME
                    //-precio de unidad en usd
                    ComputedPriceModel usdPrice = Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == 1 && x.PriceID == unit.netPriceID);

                    ComputedPriceModel mxnPrice = Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == 2 && x.PriceID == unit.netPriceID);

                    //exchange rate
                    if (Exchanges.Count(x => x.ExchangeRateID == usdPrice.ExchangeRateID) == 0 && usdPrice.ExchangeRateID != null)
                    {
                        Exchanges.Add(getExchangeRateItem(usdPrice.ExchangeRateID));
                    }
                    if (usdPrice.ExchangeRateID != null)
                    {
                        IncomeOutcomeModel.ExchangeRateItem currentER = Exchanges.FirstOrDefault(x => x.ExchangeRateID == usdPrice.ExchangeRateID);
                        newUnit.priceExchangeRateID = currentER.ExchangeRateID;
                        newUnit.priceExchangeRate = currentER.ExchangeRate;
                        newUnit.priceExchangeRateVigency = currentER.Vigency;
                        newUnit.priceExchangeRateType = currentER.Type;
                    }

                    //exchange rate
                    if (Exchanges.Count(x => x.ExchangeRateID == mxnPrice.ExchangeRateID) == 0 && mxnPrice.ExchangeRateID != null)
                    {
                        Exchanges.Add(getExchangeRateItem(mxnPrice.ExchangeRateID));
                    }
                    if (mxnPrice.ExchangeRateID != null)
                    {
                        IncomeOutcomeModel.ExchangeRateItem currentER = Exchanges.FirstOrDefault(x => x.ExchangeRateID == mxnPrice.ExchangeRateID);
                        newUnit.priceExchangeRateID = currentER.ExchangeRateID;
                        newUnit.priceExchangeRate = currentER.ExchangeRate;
                        newUnit.priceExchangeRateVigency = currentER.Vigency;
                        newUnit.priceExchangeRateType = currentER.Type;
                    }

                    if (usdPrice != null)
                    {
                        //total
                        newUnit.unitPriceUSDRule = usdPrice.Rule;
                        if (unit.dealPrice != null)
                        {
                            //deal price
                            if (couponQ.currencyID == 1)
                            {
                                newUnit.unitPriceUSD = decimal.Round((decimal)unit.dealPrice, 2);
                            }
                            else
                            {
                                if (newUnit.priceExchangeRate != null)
                                {
                                    newUnit.unitPriceUSD = decimal.Round((decimal)unit.dealPrice / (decimal)newUnit.priceExchangeRate, 2);
                                }
                                else
                                {

                                }
                            }
                        }
                        else
                        {
                            newUnit.unitPriceUSD = decimal.Round(usdPrice.Price, 2);
                        }

                        newUnit.unitPriceNoIVAUSD = decimal.Round(newUnit.unitPriceUSD / (1 + (IVA / 100)), 2);
                        newUnit.unitPriceIVAUSD = newUnit.unitPriceUSD - newUnit.unitPriceNoIVAUSD;
                    }

                    //-precio de unidad en mxn

                    if (mxnPrice != null)
                    {
                        //total
                        newUnit.unitPriceMXNRule = mxnPrice.Rule;
                        if (unit.dealPrice != null)
                        {
                            if (couponQ.currencyID == 2)
                            {
                                newUnit.unitPriceMXN = decimal.Round((decimal)unit.dealPrice, 2);
                            }
                            else
                            {
                                if (newUnit.priceExchangeRate != null)
                                {
                                    newUnit.unitPriceMXN = decimal.Round((decimal)unit.dealPrice * (decimal)newUnit.priceExchangeRate, 2);
                                }
                            }
                        }
                        else
                        {
                            newUnit.unitPriceMXN = decimal.Round(mxnPrice.Price, 2);
                        }
                        newUnit.unitPriceNoIVAMXN = decimal.Round(newUnit.unitPriceMXN / (1 + (IVA / 100)), 2);
                        newUnit.unitPriceIVAMXN = newUnit.unitPriceMXN - newUnit.unitPriceNoIVAMXN;
                    }

                    //-precio mínimo de unidad en usd
                    ComputedPriceModel usdMinimalPrice = new ComputedPriceModel();
                    if (Prices.Count(x => x.IsMinimal && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID) > 0)
                    {
                        usdMinimalPrice = Prices.FirstOrDefault(x => x.IsMinimal && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID);
                    }
                    else if (Prices.Count(x => x.IsMinimal && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                    {
                        usdMinimalPrice = Prices.FirstOrDefault(x => x.IsMinimal && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == null);
                    }
                    if (usdMinimalPrice.PriceID != 0)
                    {
                        //total
                        newUnit.unitMinimalUSD = decimal.Round(usdMinimalPrice.Price, 2);
                        newUnit.unitMinimalNoIVAUSD = decimal.Round((decimal)newUnit.unitMinimalUSD / (1 + (IVA / 100)), 2);
                        newUnit.unitMinimalIVAUSD = newUnit.minimalUSD - newUnit.minimalNoIVAUSD;

                        newUnit.unitDealDiffUSD = newUnit.totalUSD - newUnit.minimalUSD;
                        newUnit.unitDealDiffNoIVAUSD = newUnit.totalNoIVAUSD - newUnit.minimalNoIVAUSD;
                        newUnit.unitDealDiffIVAUSD = newUnit.totalIVAUSD - newUnit.minimalIVAUSD;
                    }

                    //-precio mínimo de unidad en mxn
                    ComputedPriceModel mxnMinimalPrice = new ComputedPriceModel();
                    if (Prices.Count(x => x.IsMinimal && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID) > 0)
                    {
                        mxnMinimalPrice = Prices.FirstOrDefault(x => x.IsMinimal && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID);
                    }
                    else if (Prices.Count(x => x.IsMinimal && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                    {
                        mxnMinimalPrice = Prices.FirstOrDefault(x => x.IsMinimal && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == null);
                    }
                    if (mxnMinimalPrice.PriceID != 0)
                    {
                        //total
                        newUnit.unitMinimalMXN = decimal.Round(mxnMinimalPrice.Price, 2);
                        newUnit.unitMinimalNoIVAMXN = decimal.Round((decimal)newUnit.unitMinimalMXN / (1 + (IVA / 100)), 2);
                        newUnit.unitMinimalIVAMXN = newUnit.minimalMXN - newUnit.minimalNoIVAMXN;

                        newUnit.unitDealDiffMXN = newUnit.totalMXN - newUnit.minimalMXN;
                        newUnit.unitDealDiffNoIVAMXN = newUnit.totalNoIVAMXN - newUnit.minimalNoIVAMXN;
                        newUnit.unitDealDiffIVAMXN = newUnit.totalIVAMXN - newUnit.minimalIVAMXN;
                    }

                    //acc acc income
                    BillingModel.AccAcc IAccAcc = GetApplicableAccountingAccount(newCoupon.serviceID, (int)newUnit.priceTypeID, newCoupon.currencyID, 1);
                    newUnit.incomeAccountID = IAccAcc.AccAccID;
                    newUnit.incomeAccountNumber = IAccAcc.AccAccNumber;
                    newUnit.incomeAccountName = IAccAcc.AccAccName;
                    newUnit.incomeAccountArticle = IAccAcc.AccAccArticle;

                    //OUTCOME
                    //-costo de unidad en usd
                    ComputedPriceModel usdCost = new ComputedPriceModel();
                    if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID) > 0)
                    {
                        usdCost = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID);
                    }
                    else if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                    {
                        usdCost = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == unit.netPriceID && x.PromoID == null);
                    }

                    if (usdCost.PriceID != 0)
                    {
                        //total
                        newUnit.unitCostUSDRule = usdCost.Rule;
                        newUnit.unitCostUSD = decimal.Round(usdCost.Price, 2);
                        newUnit.unitCostNoIVAUSD = decimal.Round(newUnit.unitCostUSD / (1 + (IVA / 100)), 2);
                        newUnit.unitCostIVAUSD = newUnit.unitCostUSD - newUnit.unitCostNoIVAUSD;

                        //exchange rate
                        if (Exchanges.Count(x => x.ExchangeRateID == usdCost.ExchangeRateID) == 0 && usdCost.ExchangeRateID != null)
                        {
                            Exchanges.Add(getExchangeRateItem(usdCost.ExchangeRateID));
                        }
                        if (usdCost.ExchangeRateID != null)
                        {
                            IncomeOutcomeModel.ExchangeRateItem currentER = Exchanges.FirstOrDefault(x => x.ExchangeRateID == usdPrice.ExchangeRateID);
                            newUnit.costExchangeRateID = currentER.ExchangeRateID;
                            newUnit.costExchangeRate = currentER.ExchangeRate;
                            newUnit.costExchangeRateVigency = currentER.Vigency;
                            newUnit.costExchangeRateType = currentER.Type;
                        }
                    }

                    //-costo de unidad en mxn
                    ComputedPriceModel mxnCost = new ComputedPriceModel();
                    if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID) > 0)
                    {
                        mxnCost = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == couponQ.promoID);
                    }
                    else if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                    {
                        mxnCost = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == unit.netPriceID && x.PromoID == null);
                    }

                    if (mxnCost.PriceID != 0)
                    {
                        //total
                        newUnit.unitCostMXNRule = mxnCost.Rule;
                        newUnit.unitCostMXN = decimal.Round(mxnCost.Price, 2);
                        newUnit.unitCostNoIVAMXN = decimal.Round(newUnit.unitCostMXN / (1 + (IVA / 100)), 2);
                        newUnit.unitCostIVAMXN = newUnit.unitCostMXN - newUnit.unitCostNoIVAMXN;

                        //exchange rate
                        if (Exchanges.Count(x => x.ExchangeRateID == mxnCost.ExchangeRateID) == 0 && mxnCost.ExchangeRateID != null)
                        {
                            Exchanges.Add(getExchangeRateItem(mxnCost.ExchangeRateID));
                        }
                        if (mxnCost.ExchangeRateID != null)
                        {
                            IncomeOutcomeModel.ExchangeRateItem currentER = Exchanges.FirstOrDefault(x => x.ExchangeRateID == mxnCost.ExchangeRateID);
                            newUnit.costExchangeRateID = currentER.ExchangeRateID;
                            newUnit.costExchangeRate = currentER.ExchangeRate;
                            newUnit.costExchangeRateVigency = currentER.Vigency;
                            newUnit.costExchangeRateType = currentER.Type;
                        }
                    }

                    //acc acc outcome
                    BillingModel.AccAcc OAccAcc = GetApplicableAccountingAccount(newCoupon.serviceID, (int)newUnit.priceTypeID, newCoupon.currencyID, 2);
                    newUnit.outcomeAccountID = OAccAcc.AccAccID;
                    newUnit.outcomeAccountNumber = OAccAcc.AccAccNumber;
                    newUnit.outcomeAccountName = OAccAcc.AccAccName;
                    newUnit.outcomeAccountArticle = OAccAcc.AccAccArticle;
                }

                //totales unidad precio
                newUnit.totalUSD = decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * newUnit.unitPriceUSD, unit.purchaseServiceDetailID), 2);
                newUnit.totalNoIVAUSD = decimal.Round(newUnit.totalUSD / (1 + (IVA / 100)), 2);
                newUnit.totalIVAUSD = newUnit.totalUSD - newUnit.totalNoIVAUSD;

                newUnit.totalMXN = decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * newUnit.unitPriceMXN, unit.purchaseServiceDetailID), 2);
                newUnit.totalNoIVAMXN = decimal.Round(newUnit.totalMXN / (1 + (IVA / 100)), 2);
                newUnit.totalIVAMXN = newUnit.totalMXN - newUnit.totalNoIVAMXN;

                //totales unidad minimal
                if (newUnit.unitMinimalUSD != null)
                {
                    newUnit.minimalUSD = decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (decimal)newUnit.unitMinimalUSD, unit.purchaseServiceDetailID), 2);
                    newUnit.minimalNoIVAUSD = decimal.Round((decimal)newUnit.minimalUSD / (1 + (IVA / 100)), 2);
                    newUnit.minimalIVAUSD = newUnit.minimalUSD - newUnit.minimalNoIVAUSD;

                    newUnit.minimalMXN = decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (decimal)newUnit.unitMinimalMXN, unit.purchaseServiceDetailID), 2);
                    newUnit.minimalNoIVAMXN = decimal.Round((decimal)newUnit.minimalMXN / (1 + (IVA / 100)), 2);
                    newUnit.minimalIVAMXN = newUnit.minimalMXN - newUnit.minimalNoIVAMXN;

                    //totales unidad dealDiff
                    newUnit.dealDiffUSD = newUnit.totalUSD - newUnit.minimalUSD;
                    newUnit.dealDiffNoIVAUSD = newUnit.totalNoIVAUSD - newUnit.minimalNoIVAUSD;
                    newUnit.dealDiffIVAUSD = newUnit.totalIVAUSD - newUnit.minimalIVAUSD;

                    newUnit.dealDiffMXN = newUnit.totalMXN - newUnit.minimalMXN;
                    newUnit.dealDiffNoIVAMXN = newUnit.totalNoIVAMXN - newUnit.minimalNoIVAMXN;
                    newUnit.dealDiffIVAMXN = newUnit.totalIVAMXN - newUnit.minimalIVAMXN;
                }

                //totales unidad costo
                if (unit.customCost != null && !acer)
                {
                    newUnit.customCost = true;
                    newUnit.costExchangeRateID = null;
                    newUnit.costExchangeRate = (decimal)unit.customCostExchangeRate;
                    newUnit.costExchangeRateVigency = "";
                    newUnit.costExchangeRateType = "Custom";

                    if (Prices.FirstOrDefault(x => x.Base == true).CurrencyID == 1)
                    {
                        newUnit.costUSD = (decimal)unit.customCost;
                        newUnit.costMXN = (decimal)unit.customCostAlt;
                    }
                    else
                    {
                        newUnit.costUSD = (decimal)unit.customCostAlt;
                        newUnit.costMXN = (decimal)unit.customCost;
                    }
                }
                else
                {
                    newUnit.customCost = false;
                    newUnit.costUSD = decimal.Round((couponQ.tblPromos != null && couponQ.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * newUnit.unitCostUSD, unit.purchaseServiceDetailID) : unit.quantity * newUnit.unitCostUSD), 2);

                    newUnit.costMXN = decimal.Round((couponQ.tblPromos != null && couponQ.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * newUnit.unitCostMXN, unit.purchaseServiceDetailID) : unit.quantity * newUnit.unitCostMXN), 2);
                }
                newUnit.costNoIVAUSD = decimal.Round(newUnit.costUSD / (1 + (IVA / 100)), 2);
                newUnit.costIVAUSD = newUnit.costUSD - newUnit.costNoIVAUSD;
                newUnit.costNoIVAMXN = decimal.Round(newUnit.costMXN / (1 + (IVA / 100)), 2);
                newUnit.costIVAMXN = newUnit.costMXN - newUnit.costNoIVAMXN;

                //agregar a total cupon precio
                newCoupon.totalUSD += newUnit.totalUSD;
                newCoupon.totalMXN += newUnit.totalMXN;

                //agregar a total cupon minimal
                if (newUnit.minimalUSD != null)
                {
                    if (newCoupon.minimalUSD == null)
                    {
                        newCoupon.minimalUSD = 0;
                        newCoupon.minimalNoIVAUSD = 0;
                        newCoupon.minimalIVAUSD = 0;

                        newCoupon.minimalMXN = 0;
                        newCoupon.minimalNoIVAMXN = 0;
                        newCoupon.minimalIVAMXN = 0;

                        newCoupon.dealDiffUSD = 0;
                        newCoupon.dealDiffNoIVAUSD = 0;
                        newCoupon.dealDiffIVAUSD = 0;

                        newCoupon.dealDiffMXN = 0;
                        newCoupon.dealDiffNoIVAMXN = 0;
                        newCoupon.dealDiffIVAMXN = 0;
                    }
                    newCoupon.minimalUSD += newUnit.minimalUSD;
                    newCoupon.minimalNoIVAUSD += newUnit.minimalNoIVAUSD;
                    newCoupon.minimalIVAUSD += newUnit.minimalIVAUSD;

                    newCoupon.minimalMXN += newUnit.minimalMXN;
                    newCoupon.minimalNoIVAMXN += newUnit.minimalNoIVAMXN;
                    newCoupon.minimalIVAMXN += newUnit.minimalIVAMXN;

                    newCoupon.dealDiffUSD += newUnit.dealDiffUSD;
                    newCoupon.dealDiffNoIVAUSD += newUnit.dealDiffNoIVAUSD;
                    newCoupon.dealDiffIVAUSD += newUnit.dealDiffIVAUSD;

                    newCoupon.dealDiffMXN += newUnit.dealDiffMXN;
                    newCoupon.dealDiffNoIVAMXN += newUnit.dealDiffNoIVAMXN;
                    newCoupon.dealDiffIVAMXN += newUnit.dealDiffIVAMXN;
                }

                //agregar a total cupon costo
                newCoupon.costUSD += newUnit.costUSD;
                newCoupon.costMXN += newUnit.costMXN;

                if (isNewUnit)
                {
                    newCoupon.tblCouponInfoUnits.Add(newUnit);
                }
            }

            newCoupon.totalNoIVAUSD = decimal.Round(newCoupon.totalUSD / (1 + (IVA / 100)), 2);
            newCoupon.totalIVAUSD = newCoupon.totalUSD - newCoupon.totalNoIVAUSD;

            newCoupon.totalNoIVAMXN = decimal.Round(newCoupon.totalMXN / (1 + (IVA / 100)), 2);
            newCoupon.totalIVAMXN = newCoupon.totalMXN - newCoupon.totalNoIVAMXN;

            newCoupon.costNoIVAUSD = decimal.Round(newCoupon.costUSD / (1 + (IVA / 100)), 2);
            newCoupon.costIVAUSD = newCoupon.costUSD - newCoupon.costNoIVAUSD;

            newCoupon.costNoIVAMXN = decimal.Round(newCoupon.costMXN / (1 + (IVA / 100)), 2);
            newCoupon.costIVAMXN = newCoupon.costMXN - newCoupon.costNoIVAMXN;

            newCoupon.profitUSD = newCoupon.totalUSD - newCoupon.costUSD;
            newCoupon.profitNoIVAUSD = newCoupon.totalNoIVAUSD - newCoupon.costNoIVAUSD;
            newCoupon.profitIVAUSD = newCoupon.totalIVAUSD - newCoupon.costIVAUSD;

            newCoupon.profitMXN = newCoupon.totalMXN - newCoupon.costMXN;
            newCoupon.profitNoIVAMXN = newCoupon.totalNoIVAMXN - newCoupon.costNoIVAMXN;
            newCoupon.profitIVAMXN = newCoupon.totalIVAMXN - newCoupon.costIVAMXN;


            if (newCoupon.currencyID == 1)
            {
                newCoupon.profitPercentage = (newCoupon.totalUSD > 0 ? decimal.Round(newCoupon.profitUSD * 100 / newCoupon.totalUSD, 2) : 0);
            }
            else
            {
                newCoupon.profitPercentage = (newCoupon.totalMXN > 0 ? decimal.Round(newCoupon.profitMXN * 100 / newCoupon.totalMXN, 2) : 0);
            }

            if (isNew)
            {
                db.tblCouponInfo.AddObject(newCoupon);
            }

            db.SaveChanges();

            if ((newCoupon.totalUSD == 0 || (newCoupon.costUSD == 0 && (couponQ.tblServices.noCost == false || couponQ.tblServices.noCost == null))) && couponQ.total > 0)
            {
                processed = false;
            }
            if (processed && couponQ.serviceStatusID != 4 && couponQ.serviceStatusID != 5 && couponQ.total > 0 && couponQ.total != (couponQ.currencyID == 1 ? newCoupon.totalUSD : newCoupon.totalMXN))
            {
                processed = false;
            }
            if (processed && ((newCoupon.currencyID == 1 && newCoupon.profitUSD < 0) || (newCoupon.currencyID == 2 && newCoupon.profitMXN < 0)))
            {
                processed = false;
            }

            return processed;
        }

        public MasterCloseOutModel.MasterCloseOutResults SearchMasterCloseOut(MasterCloseOutModel.SearchMasterCloseOutModel model)
        {
            MasterCloseOutModel.MasterCloseOutResults results = new MasterCloseOutModel.MasterCloseOutResults();

            DateTime fromDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime currentDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime toDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);
            results.CouponIDs = new List<long>();
            results.CloseOutsByDate = new List<MasterCloseOutModel.CloseOutsPerDay>();
            System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            var PointsOfSaleQ = from p in db.tblPointsOfSale
                                where p.terminalID == model.Search_TerminalID
                                &&
                                (pointsOfSaleLength == 0
                                    && !p.pointOfSale.Contains("Test")
                                    && !p.pointOfSale.Contains("Prueba"))
                                ||
                                (pointsOfSale.Contains(p.pointOfSaleID))
                                orderby p.shortName
                                select new
                                {
                                    p.pointOfSaleID,
                                    p.pointOfSale,
                                    p.shortName
                                };

            var CloseOutsQ = from c in db.tblCloseOuts
                             where c.terminalID == model.Search_TerminalID
                             && c.closeOutDate >= fromDate
                             && c.closeOutDate < toDate
                             && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                             select c;

            while (currentDate < toDate)
            {
                MasterCloseOutModel.CloseOutsPerDay closeOutByDate = new MasterCloseOutModel.CloseOutsPerDay();

                closeOutByDate.Date = currentDate;
                closeOutByDate.PointsOfSale = new List<MasterCloseOutModel.CloseOutsPerPos>();

                //llenado de puntos de venta
                foreach (var pos in PointsOfSaleQ)
                {
                    MasterCloseOutModel.CloseOutsPerPos coppos = new MasterCloseOutModel.CloseOutsPerPos();

                    coppos.PointOfSaleID = pos.pointOfSaleID;
                    coppos.PointOfSale = pos.shortName + " - " + pos.pointOfSale;
                    coppos.CloseOuts = new List<MasterCloseOutModel.CloseOutsPerAgent>();

                    //llenado de closeouts
                    if (CloseOutsQ.Count(x => x.closeOutDate == currentDate && x.pointOfSaleID == pos.pointOfSaleID) == 0)
                    {
                        closeOutByDate.NumberOfCoupons += 1;
                        coppos.NumberOfCoupons += 1;
                    }
                    foreach (var co in CloseOutsQ.Where(x => x.closeOutDate == currentDate && x.pointOfSaleID == pos.pointOfSaleID))
                    {
                        MasterCloseOutModel.CloseOutsPerAgent coa = new MasterCloseOutModel.CloseOutsPerAgent();
                        CloseOutModel jsonCo = js.Deserialize<CloseOutModel>(co.jsonModel);
                        coa.CloseOutID = co.closeOutID;
                        coa.Agent = jsonCo.Agent;
                        coa.SavedOn = co.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                        coa.Coupons = new List<MasterCloseOutModel.CouponBrief>();

                        //verificar si el cupón ya fue cachado
                        List<long> closeoutCouponIDs1 = new List<long>();
                        List<long> closeoutCouponIDs2 = new List<long>();

                        closeoutCouponIDs1 = jsonCo.ListSales.SelectMany(x => x.Coupons).Select(x => x.Purchase_ServiceID).ToList();

                        List<long> cachedSCouponIDs = (from c in db.tblCouponInfo
                                                       where closeoutCouponIDs1.Contains(c.purchase_ServiceID)
                                                       && c.paidCloseOutID != null
                                                       select c.purchase_ServiceID).ToList();

                        closeoutCouponIDs2 = jsonCo.ListCancelations.SelectMany(x => x.Coupons).Select(x => x.Purchase_ServiceID).ToList();

                        List<long> cachedCCouponIDs = (from c in db.tblCouponInfo
                                                       where closeoutCouponIDs2.Contains(c.purchase_ServiceID)
                                                       && c.canceledCloseOutID != null
                                                       select c.purchase_ServiceID).ToList();

                        //llenado de cupones
                        foreach (var pu in jsonCo.ListSales)
                        {
                            foreach (var coupon in pu.Coupons)
                            {
                                MasterCloseOutModel.CouponBrief newCoupon = new MasterCloseOutModel.CouponBrief();
                                newCoupon.PurchaseID = pu.PurchaseID;
                                newCoupon.Purchase_ServiceID = coupon.Purchase_ServiceID;
                                newCoupon.Folio = coupon.Coupon;
                                newCoupon.CouponReference = coupon.CouponReference;
                                newCoupon.Item = coupon.Activity;
                                newCoupon.Customer = pu.FirstName + " " + pu.LastName;
                                newCoupon.Status = coupon.Status;
                                if (cachedSCouponIDs.Count(x => x == coupon.Purchase_ServiceID) > 0)
                                {
                                    //comprobar la similitud de los datos
                                    var realCoupon = (from r in db.tblPurchases_Services
                                                      where r.purchase_ServiceID == coupon.Purchase_ServiceID
                                                      select new
                                                      {
                                                          r.serviceStatusID,
                                                          r.audit,
                                                          r.auditDate,
                                                          r.total,
                                                          r.currencyID,
                                                          r.tblPurchases.userID,
                                                          r.tblPurchases.agentID,
                                                          r.tblServices.noCost,
                                                          r.tblServices.tblServices_AccountingAccounts.FirstOrDefault(x => x.tblAccountingAccounts.priceTypeID == r.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).tblAccountingAccounts.accountName
                                                      }).FirstOrDefault();
                                    var cacheCoupon = (from r in db.tblCouponInfo
                                                       where r.purchase_ServiceID == coupon.Purchase_ServiceID
                                                       select new
                                                       {
                                                           r.serviceStatusID,
                                                           r.audited,
                                                           r.dateGenerated,
                                                           r.totalUSD,
                                                           r.totalMXN,
                                                           r.profitUSD,
                                                           r.profitMXN,
                                                           r.costUSD,
                                                           r.currencyID,
                                                           r.purchaseUserID,
                                                           r.reservedByUserID,
                                                           r.tblCouponInfoUnits.FirstOrDefault().incomeAccountName
                                                       }).FirstOrDefault();

                                    bool cached = true;
                                    if (realCoupon.serviceStatusID != cacheCoupon.serviceStatusID)
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "OUT OF DATE: due to Change of Status.";
                                        results.OutOfDate += 1;
                                    }
                                    if (cached && (realCoupon.userID != cacheCoupon.purchaseUserID || realCoupon.agentID != cacheCoupon.reservedByUserID))
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "OUT OF DATE: due to Change of Sales or Reservations Agent.";
                                        results.OutOfDate += 1;
                                    }
                                    if (cached && (realCoupon.serviceStatusID == 3 || realCoupon.serviceStatusID == 6) && ((cacheCoupon.currencyID == 1 && cacheCoupon.profitUSD < 0) || (cacheCoupon.currencyID == 2 && cacheCoupon.profitMXN < 0)) && (realCoupon.noCost == false || realCoupon.noCost == null))
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "ERROR: Profit is less than 0.";
                                        results.OutOfDate += 1;
                                    }
                                    if (cached && cacheCoupon.costUSD == 0 && realCoupon.total > 0 && (realCoupon.noCost == false || realCoupon.noCost == null))
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "ERROR: Cost is 0.";
                                        results.OutOfDate += 1;
                                    }
                                    if (cached && realCoupon.serviceStatusID != 4 && realCoupon.serviceStatusID != 5 && realCoupon.total > 0 && realCoupon.total != (realCoupon.currencyID == 1 ? cacheCoupon.totalUSD : cacheCoupon.totalMXN))
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "ERROR: Total in cache doesn't match with operation.";
                                        results.OutOfDate += 1;
                                    }
                                    if (cached && realCoupon.audit != cacheCoupon.audited)
                                    {
                                        if (realCoupon.audit == null && cacheCoupon.audited == false)
                                        {
                                            cached = true;
                                            newCoupon.StatusMessage = "OK";
                                        }
                                        else
                                        {
                                            cached = false;
                                            newCoupon.StatusMessage = "OUT OF DATE: due to Audit on " + realCoupon.auditDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                                            results.OutOfDate += 1;
                                        }
                                    }
                                    if (cached && (realCoupon.accountName != null ? realCoupon.accountName.Trim() : "") != (cacheCoupon.incomeAccountName != null ? cacheCoupon.incomeAccountName.Trim() : ""))
                                    {
                                        cached = false;
                                        newCoupon.StatusMessage = "OUT OF DATE: due to change in Accounting Account from '" + cacheCoupon.incomeAccountName + "' to '" + realCoupon.accountName + "'";
                                        results.OutOfDate += 1;
                                    }
                                    newCoupon.Closed = cached;
                                    if (cached)
                                    {
                                        results.Cached += 1;
                                        newCoupon.StatusMessage = "OK";
                                    }
                                    newCoupon.CachedOn = cacheCoupon.dateGenerated;
                                }
                                else
                                {
                                    newCoupon.Closed = false;
                                    newCoupon.StatusMessage = "Not Cached";
                                    results.NotCached += 1;
                                }

                                results.TotalCoupons += 1;
                                results.CouponIDs.Add(coupon.Purchase_ServiceID);

                                if (model.Search_Pending)
                                {
                                    if (!newCoupon.Closed)
                                    {
                                        closeOutByDate.NumberOfCoupons += 1;
                                        coppos.NumberOfCoupons += 1;
                                        coa.NumberOfCoupons += 1;
                                        coa.Coupons.Add(newCoupon);
                                    }
                                }
                                else
                                {
                                    closeOutByDate.NumberOfCoupons += 1;
                                    coppos.NumberOfCoupons += 1;
                                    coa.NumberOfCoupons += 1;
                                    coa.Coupons.Add(newCoupon);
                                }
                            }
                        }

                        foreach (var pu in jsonCo.ListCancelations)
                        {
                            foreach (var coupon in pu.Coupons)
                            {
                                if (results.CouponIDs.Count(x => x == coupon.Purchase_ServiceID) == 0)
                                {
                                    MasterCloseOutModel.CouponBrief newCoupon = new MasterCloseOutModel.CouponBrief();
                                    newCoupon.Purchase_ServiceID = coupon.Purchase_ServiceID;
                                    newCoupon.Folio = coupon.Coupon;
                                    newCoupon.CouponReference = coupon.CouponReference;
                                    newCoupon.Item = coupon.Activity;
                                    newCoupon.Customer = pu.FirstName + " " + pu.LastName;
                                    newCoupon.Status = coupon.Status;
                                    if (cachedCCouponIDs.Count(x => x == coupon.Purchase_ServiceID) > 0)
                                    {
                                        //comprobar la similitud de los datos
                                        var realCoupon = (from r in db.tblPurchases_Services
                                                          where r.purchase_ServiceID == coupon.Purchase_ServiceID
                                                          select new
                                                          {
                                                              r.serviceStatusID,
                                                              r.audit,
                                                              r.auditDate,
                                                              r.tblServices.tblServices_AccountingAccounts.FirstOrDefault().tblAccountingAccounts.accountName
                                                          }).FirstOrDefault();
                                        var cacheCoupon = (from r in db.tblCouponInfo
                                                           where r.purchase_ServiceID == coupon.Purchase_ServiceID
                                                           select new
                                                           {
                                                               r.serviceStatusID,
                                                               r.audited,
                                                               r.dateGenerated,
                                                               r.tblCouponInfoUnits.FirstOrDefault().incomeAccountName
                                                           }).FirstOrDefault();

                                        bool cached = true;
                                        if (realCoupon.serviceStatusID != cacheCoupon.serviceStatusID)
                                        {
                                            cached = false;
                                            newCoupon.StatusMessage = "Out of Date due to Change of Status.";
                                            results.OutOfDate += 1;
                                        }
                                        if (cached && realCoupon.audit != cacheCoupon.audited)
                                        {
                                            if (realCoupon.audit == null && cacheCoupon.audited == false)
                                            {
                                                cached = true;
                                                newCoupon.StatusMessage = "OK";
                                            }
                                            else
                                            {
                                                cached = false;
                                                newCoupon.StatusMessage = "Out of Date due to Audit on " + realCoupon.auditDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                                                results.OutOfDate += 1;
                                            }
                                        }
                                        if (cached && (realCoupon.accountName != null ? realCoupon.accountName.Trim() : "") != (cacheCoupon.incomeAccountName != null ? cacheCoupon.incomeAccountName.Trim() : ""))
                                        {
                                            cached = false;
                                            newCoupon.StatusMessage = "Out of Date due to change in Accounting Account from '" + cacheCoupon.incomeAccountName + "' to '" + realCoupon.accountName + "'";
                                            results.OutOfDate += 1;
                                        }
                                        newCoupon.Closed = cached;
                                        if (cached)
                                        {
                                            results.Cached += 1;
                                            newCoupon.StatusMessage = "OK";
                                        }
                                        newCoupon.CachedOn = cacheCoupon.dateGenerated;
                                    }
                                    else
                                    {
                                        newCoupon.Closed = false;
                                        newCoupon.StatusMessage = "Not Cached";
                                        results.NotCached += 1;
                                    }

                                    results.TotalCoupons += 1;
                                    results.CouponIDs.Add(coupon.Purchase_ServiceID);

                                    if (model.Search_Pending)
                                    {
                                        if (!newCoupon.Closed)
                                        {
                                            closeOutByDate.NumberOfCoupons += 1;
                                            coppos.NumberOfCoupons += 1;
                                            coa.NumberOfCoupons += 1;
                                            coa.Coupons.Add(newCoupon);
                                        }
                                    }
                                    else
                                    {
                                        closeOutByDate.NumberOfCoupons += 1;
                                        coppos.NumberOfCoupons += 1;
                                        coa.NumberOfCoupons += 1;
                                        coa.Coupons.Add(newCoupon);
                                    }
                                }
                            }
                        }

                        if (coa.Coupons.Count() == 0)
                        {
                            closeOutByDate.NumberOfCoupons += 1;
                            coppos.NumberOfCoupons += 1;
                            coa.NumberOfCoupons += 1;
                        }
                        else
                        {
                            coa.Coupons = coa.Coupons.OrderBy(x => x.Folio).ToList();
                        }

                        coppos.CloseOuts.Add(coa);
                    }

                    closeOutByDate.PointsOfSale.Add(coppos);
                }

                results.CloseOutsByDate.Add(closeOutByDate);
                currentDate = currentDate.AddDays(1);
            }

            return results;
        }

        public CloseOutHistoryModel.CloseOutsHistoryResults SearchCloseOutsHistory(CloseOutHistoryModel.SearchCloseOutsModel model)
        {
            ePlatEntities db = new ePlatEntities();
            DateTime fromDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime toDate = Convert.ToDateTime(model.Search_F_ToDate);
            CloseOutHistoryModel.CloseOutsHistoryResults closeouts = new CloseOutHistoryModel.CloseOutsHistoryResults();
            int numberOfCoupons = 0;
            List<Money> salesList = GetDefaultListOfMoney(true);
            List<Money> refundsList = GetDefaultListOfMoney(true);
            List<Money> totalsList = GetDefaultListOfMoney(true);
            List<Money> commissionsList = GetDefaultListOfMoney(true);

            closeouts.TotalDetails = new CloseOutModel.CloseOutTotals();
            closeouts.TotalDetails.Cash = GetDefaultListOfMoney(true);
            closeouts.TotalDetails.CreditCard = GetDefaultListOfMoney(true);
            closeouts.TotalDetails.ChargeBack = GetDefaultListOfMoney(true);
            closeouts.TotalDetails.TravelerCheck = GetDefaultListOfMoney(true);
            closeouts.TotalDetails.WireTransfer = GetDefaultListOfMoney(true);
            closeouts.TotalDetails.Certificate = GetDefaultListOfMoney(true);
            closeouts.Company = db.tblTerminals.FirstOrDefault(x => x.terminalID == model.Search_TerminalID).tblCompanies.company;

            closeouts.DatesRange = "From " + model.Search_I_FromDate + " to " + model.Search_F_ToDate;

            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    closeouts.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                closeouts.PointOfSale = "All";
            }
            if (model.Search_SalesAgentID != null)
            {
                tblUserProfiles profile = db.tblUserProfiles.SingleOrDefault(x => x.userID == model.Search_SalesAgentID);
                closeouts.SalesAgent = profile.firstName + " " + profile.lastName;
            }
            else
            {
                closeouts.SalesAgent = "All";
            }

            closeouts.Terminal = db.tblTerminals.FirstOrDefault(x => x.terminalID == model.Search_TerminalID).terminal;

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            var closeoutsQ = from c in db.tblCloseOuts
                             join pointOfSale in db.tblPointsOfSale on c.pointOfSaleID equals pointOfSale.pointOfSaleID
                             join agent in db.tblUserProfiles on c.salesAgentUserID equals agent.userID
                             into closeoutAgent
                             from agent in closeoutAgent.DefaultIfEmpty()
                             join saver in db.tblUserProfiles on c.savedByUserID equals saver.userID
                             where c.closeOutDate >= fromDate && c.closeOutDate <= toDate
                             && c.terminalID == model.Search_TerminalID
                             && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                             && (c.salesAgentUserID == model.Search_SalesAgentID || model.Search_SalesAgentID == null || c.salesAgentUserID == null)
                             orderby c.closeOutDate, pointOfSale.shortName
                             select new
                             {
                                 c.closeOutID,
                                 c.jsonModel,
                                 c.closeOutDate,
                                 pointOfSale.shortName,
                                 pointOfSale.pointOfSale,
                                 c.salesAgentUserID,
                                 agent.firstName,
                                 agent.lastName,
                                 c.dateSaved,
                                 c.savedByUserID,
                                 saverFirstName = saver.firstName,
                                 saverLastName = saver.lastName,
                                 c.notes
                             };

            List<long?> CloseOutIDs = closeoutsQ.Select(x => (long?)x.closeOutID).ToList<long?>();

            var CouponsInCache = (from c in db.tblCouponInfo
                                  where CloseOutIDs.Contains(c.paidCloseOutID)
                                  || CloseOutIDs.Contains(c.canceledCloseOutID)
                                  select new
                                  {
                                      c.purchase_ServiceID,
                                      c.folio,
                                      c.status,
                                      c.totalUSD,
                                      c.cancelationCharge,
                                      c.serviceStatusID,
                                      c.paidCloseOutID,
                                      c.canceledCloseOutID
                                  }).ToList();

            closeouts.CloseOuts = new List<CloseOutHistoryModel.CloseOutsHistoryListItem>();
            foreach (var closeout in closeoutsQ)
            {
                System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                CloseOutModel savedCloseOut = js.Deserialize<CloseOutModel>(closeout.jsonModel);
                numberOfCoupons += savedCloseOut.Totals.Coupons;

                CloseOutHistoryModel.CloseOutsHistoryListItem newCloseout = new CloseOutHistoryModel.CloseOutsHistoryListItem();
                newCloseout.CloseOutID = closeout.closeOutID;
                newCloseout.Date = closeout.closeOutDate.ToString("yyyy-MM-dd");
                newCloseout.PointOfSale = closeout.shortName + " - " + closeout.pointOfSale;
                if (closeout.salesAgentUserID != null)
                {
                    newCloseout.Agent = closeout.firstName + " " + closeout.lastName;
                }
                else
                {
                    newCloseout.Agent = "All";
                }
                newCloseout.SavedOnDate = closeout.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                newCloseout.SavedBy = closeout.saverFirstName + " " + closeout.saverLastName;

                List<Money> totals = GetDefaultListOfMoney(true);
                foreach (var total in savedCloseOut.Totals.GrandTotal)
                {
                    totals.FirstOrDefault(c => c.Currency == total.Currency).Amount += total.Amount;
                    totalsList.FirstOrDefault(c => c.Currency == total.Currency).Amount += total.Amount;
                }
                newCloseout.Totals = totals;

                List<Money> sales = GetDefaultListOfMoney(true);
                foreach (var sale in savedCloseOut.Totals.Sales)
                {
                    sales.FirstOrDefault(c => c.Currency == sale.Currency).Amount += sale.Amount;
                    salesList.FirstOrDefault(c => c.Currency == sale.Currency).Amount += sale.Amount;
                }
                newCloseout.Sales = sales;

                List<Money> refunds = GetDefaultListOfMoney(true);
                foreach (var refund in savedCloseOut.Totals.Refunds)
                {
                    refunds.FirstOrDefault(c => c.Currency == refund.Currency).Amount += refund.Amount;
                    refundsList.FirstOrDefault(c => c.Currency == refund.Currency).Amount += refund.Amount;
                }
                newCloseout.Refunds = refunds;

                foreach (var cash in savedCloseOut.Totals.Cash)
                {
                    closeouts.TotalDetails.Cash.FirstOrDefault(c => c.Currency == cash.Currency).Amount += cash.Amount;
                }

                foreach (var creditCard in savedCloseOut.Totals.CreditCard)
                {
                    closeouts.TotalDetails.CreditCard.FirstOrDefault(c => c.Currency == creditCard.Currency).Amount += creditCard.Amount;
                }

                foreach (var chargeback in savedCloseOut.Totals.ChargeBack)
                {
                    closeouts.TotalDetails.ChargeBack.FirstOrDefault(c => c.Currency == chargeback.Currency).Amount += chargeback.Amount;
                }

                foreach (var travelerCheck in savedCloseOut.Totals.TravelerCheck)
                {
                    closeouts.TotalDetails.TravelerCheck.FirstOrDefault(c => c.Currency == travelerCheck.Currency).Amount += travelerCheck.Amount;
                }

                foreach (var wireTransfer in savedCloseOut.Totals.WireTransfer)
                {
                    closeouts.TotalDetails.WireTransfer.FirstOrDefault(x => x.Currency == wireTransfer.Currency).Amount += wireTransfer.Amount;
                }

                foreach (var certificate in savedCloseOut.Totals.Certificate)
                {
                    closeouts.TotalDetails.Certificate.FirstOrDefault(x => x.Currency == certificate.Currency).Amount += certificate.Amount;
                }

                List<Money> fees = GetDefaultListOfMoney(true);
                foreach (var fee in savedCloseOut.Totals.BankCommissions)
                {
                    fees.FirstOrDefault(f => f.Currency == fee.Currency).Amount += fee.Amount;
                    commissionsList.FirstOrDefault(f => f.Currency == fee.Currency).Amount += fee.Amount;
                }
                newCloseout.CCCommissions = fees;

                newCloseout.Notes = closeout.notes;

                newCloseout.TotalInCache = new Money()
                {
                    Amount = 0,
                    Currency = "USD"
                };
                newCloseout.CouponsInCache = new List<CloseOutHistoryModel.CouponCache>();

                //obtener cupones del closeout para calcular total
                var CloseOutCouponSales = (from c in CouponsInCache
                                           where c.paidCloseOutID == closeout.closeOutID
                                           && c.canceledCloseOutID != closeout.closeOutID
                                           select new CloseOutHistoryModel.CouponCache()
                                           {
                                               Purchase_ServiceID = c.purchase_ServiceID,
                                               Folio = c.folio,
                                               Total = c.totalUSD,
                                               CancelationCharge = c.cancelationCharge,
                                               StatusID = c.serviceStatusID,
                                               Status = c.status
                                           }).ToList();

                foreach (var c in CloseOutCouponSales)
                {
                    try
                    {
                        if (decimal.Round(c.Total, 2) != decimal.Round(savedCloseOut.ListSales.FirstOrDefault(x => x.Coupons.Count(d => d.Coupon == c.Folio) > 0).Coupons.FirstOrDefault(x => x.Coupon == c.Folio).Total, 2))
                        {
                            c.COTotal = decimal.Round(savedCloseOut.ListSales.FirstOrDefault(x => x.Coupons.Count(d => d.Coupon == c.Folio) > 0).Coupons.FirstOrDefault(x => x.Coupon == c.Folio).Total, 2);
                            newCloseout.CouponsInCache.Add(c);
                        }
                    }
                    catch
                    {
                        c.COTotal = 0;
                        newCloseout.CouponsInCache.Add(c);
                    }
                }

                //newCloseout.CouponsInCache = CloseOutCouponSales;
                newCloseout.TotalInCache.Amount = CloseOutCouponSales.Select(x => x.Total).Sum();

                var CloseOutCouponRefunds = from c in CouponsInCache
                                            where c.canceledCloseOutID == closeout.closeOutID
                                            select new CloseOutHistoryModel.CouponCache()
                                            {
                                                Purchase_ServiceID = c.purchase_ServiceID,
                                                Folio = c.folio,
                                                Total = c.totalUSD,
                                                CancelationCharge = c.cancelationCharge,
                                                StatusID = c.serviceStatusID,
                                                Status = c.status
                                            };

                foreach (var c in CloseOutCouponRefunds)
                {
                    if (c.StatusID == 5)
                    {
                        decimal couponRealTotal = c.Total - (c.CancelationCharge ?? 0);
                        newCloseout.TotalInCache.Amount -= couponRealTotal;

                        if (decimal.Round(c.Total, 2) * -1 != decimal.Round(savedCloseOut.ListCancelations.FirstOrDefault(x => x.Coupons.Count(d => d.Coupon == c.Folio) > 0).Coupons.FirstOrDefault(x => x.Coupon == c.Folio).Total, 2))
                        {
                            c.COTotal = decimal.Round(savedCloseOut.ListCancelations.FirstOrDefault(x => x.Coupons.Count(d => d.Coupon == c.Folio) > 0).Coupons.FirstOrDefault(x => x.Coupon == c.Folio).Total, 2);
                            c.Total = couponRealTotal * -1;
                            newCloseout.CouponsInCache.Add(c);
                        }
                    }
                }

                closeouts.CloseOuts.Add(newCloseout);
            }

            closeouts.NumberOfCoupons = numberOfCoupons;
            closeouts.Sales = salesList;
            closeouts.Refunds = refundsList;
            closeouts.Totals = totalsList;
            closeouts.CCCommissions = commissionsList;

            return closeouts;
        }

        public CloseOutModel GetSavedCloseOut(long closeoutid)
        {
            ePlatEntities db = new ePlatEntities();
            CloseOutModel closeOut = new CloseOutModel();
            var savedCloseOut = from s in db.tblCloseOuts
                                where s.closeOutID == closeoutid
                                select s;

            if (savedCloseOut.Count() > 0)
            {
                System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                closeOut = js.Deserialize<CloseOutModel>(savedCloseOut.FirstOrDefault().jsonModel);
                closeOut.CloseOutID = savedCloseOut.FirstOrDefault().closeOutID;
                closeOut.Notes = savedCloseOut.FirstOrDefault().notes;
            }

            return closeOut;
        }

        public CloseOutModel GetCloseOut(CloseOutModel.SearchCloseOutModel model)
        {
            ePlatEntities db = new ePlatEntities();
            DateTime fromDate = Convert.ToDateTime(model.SearchCloseOut_Date);
            DateTime toDate = fromDate.AddDays(1);
            List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates = new List<ExchangeRatesModel.ExchangeRateForDate>();

            CloseOutModel closeOut = new CloseOutModel();

            var savedCloseOut = from s in db.tblCloseOuts
                                where s.closeOutDate == fromDate
                                && s.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                //&& (s.salesAgentUserID == model.SearchCloseOut_SalesAgentID || model.SearchCloseOut_SalesAgentID == null)
                                && s.salesAgentUserID == model.SearchCloseOut_SalesAgentID
                                && s.terminalID == model.SearchCloseOut_TerminalID
                                select s;

            if (savedCloseOut.Count() == 0)
            {
                savedCloseOut = from s in db.tblCloseOuts
                                where s.closeOutDate == fromDate
                                && s.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                && model.SearchCloseOut_SalesAgentID == null
                                && s.terminalID == model.SearchCloseOut_TerminalID
                                select s;
            }

            if (savedCloseOut.Count() > 0)
            {
                System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                closeOut = js.Deserialize<CloseOutModel>(savedCloseOut.FirstOrDefault().jsonModel);
                closeOut.CloseOutID = savedCloseOut.FirstOrDefault().closeOutID;
                closeOut.Notes = savedCloseOut.FirstOrDefault().notes;
                if (savedCloseOut.FirstOrDefault().dateSaved.Date == DateTime.Now.Date && savedCloseOut.FirstOrDefault().savedByUserID == session.UserID)
                {
                    closeOut.Deletable = true;
                }
                else
                {
                    closeOut.Deletable = false;
                }
            }
            else
            {
                CloseOutModel.CloseOutTotals totals = new CloseOutModel.CloseOutTotals();

                List<long> relatedPayments = new List<long>();

                if (db.tblTerminals.FirstOrDefault(x => x.terminalID == model.SearchCloseOut_TerminalID).companyID != null)
                {
                    closeOut.Company = db.tblTerminals.FirstOrDefault(x => x.terminalID == model.SearchCloseOut_TerminalID).tblCompanies.company;
                }
                else
                {
                    closeOut.Company = db.tblTerminals.FirstOrDefault(x => x.terminalID == model.SearchCloseOut_TerminalID).terminal;
                }
                closeOut.PointOfSale = db.tblPointsOfSale.SingleOrDefault(x => x.pointOfSaleID == model.SearchCloseOut_PointOfSaleID).pointOfSale;

                if (model.SearchCloseOut_SalesAgentID != null)
                {
                    tblUserProfiles profile = db.tblUserProfiles.SingleOrDefault(x => x.userID == model.SearchCloseOut_SalesAgentID);
                    closeOut.Agent = profile.firstName + " " + profile.lastName;
                }
                else
                {
                    closeOut.Agent = "All Agents";
                }
                closeOut.Date = model.SearchCloseOut_Date;
                closeOut.Deletable = true;
                MasterChartDataModel.Purchases pu = new MasterChartDataModel.Purchases();
                closeOut.ExchangeRate = pu.GetExchangeRates(DateTime.Parse(model.SearchCloseOut_Date), model.SearchCloseOut_TerminalID, model.SearchCloseOut_PointOfSaleID);
                List<Money> totalBankComissions = GetDefaultListOfMoney(true);
                List<tblBankCommissions> bankCommissions = new List<tblBankCommissions>();

                List<Money> MXNTotalsSalesMXN = GetDefaultListOfMoney(true);
                List<Money> MXNTotalsRefundsMXN = GetDefaultListOfMoney(true);
                List<Money> MXNTotalsMXN = GetDefaultListOfMoney(true);

                closeOut.ChargeBackConcepts = new List<CloseOutModel.ChargeBackConcept>();
                int? companyid = db.tblTerminals.FirstOrDefault(x => x.terminalID == model.SearchCloseOut_TerminalID).companyID;
                var concepts = from c in db.tblEgressConcepts
                               where c.companyID == companyid
                               && c.egressTypeID == 3
                               orderby c.egressConcept
                               select new
                               {
                                   c.egressConceptID,
                                   c.egressConcept
                               };

                foreach (var concept in concepts)
                {
                    CloseOutModel.ChargeBackConcept newConcept = new CloseOutModel.ChargeBackConcept();
                    newConcept.ConceptID = concept.egressConceptID;
                    newConcept.Concept = concept.egressConcept;
                    closeOut.ChargeBackConcepts.Add(newConcept);
                }

                /*######################################################################################################3*/

                List<CloseOutModel.CloseOutListItem> sales = new List<CloseOutModel.CloseOutListItem>();
                CloseOutModel.CloseOutListSubTotals salesSubtotal = new CloseOutModel.CloseOutListSubTotals();
                int numberOfCoupons = 0;

                //obtener listado de ventas
                List<Money> SalesSTcouponTotalList = GetDefaultListOfMoney(true);
                List<Money> SalesSTcashList = GetDefaultListOfMoney(true);
                List<Money> SalesSTcreditList = GetDefaultListOfMoney(true);
                List<Money> SalesSTchargeList = GetDefaultListOfMoney(true);
                List<Money> SalesSTcheckList = GetDefaultListOfMoney(true);
                List<Money> SalesSTtransferList = GetDefaultListOfMoney(true);
                List<Money> SalesSTcertificateList = GetDefaultListOfMoney(true);

                PaymentAssignationDataModel padm = new PaymentAssignationDataModel();
                var lastCloseOutDate = (from c in db.tblCloseOuts
                                        where c.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                        && c.closeOutDate < toDate
                                        orderby c.closeOutDate descending
                                        select c.closeOutDate).FirstOrDefault();

                IQueryable<tblPurchases> purchasesQ2;
                using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
                {
                    IsolationLevel = System.Transactions.IsolationLevel.Snapshot
                }))
                {
                    purchasesQ2 = (from coupon in db.tblPurchases_Services
                                   join purchase in db.tblPurchases on coupon.purchaseID equals purchase.purchaseID
                                   where (coupon.confirmationDateTime > lastCloseOutDate || coupon.cancelationDateTime > lastCloseOutDate)
                                   && purchase.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                   && purchase.terminalID == model.SearchCloseOut_TerminalID
                                   && ((coupon.confirmedByUserID == model.SearchCloseOut_SalesAgentID)
                             || model.SearchCloseOut_SalesAgentID == null)
                                   && purchase.isTest != true
                                   && purchase.purchaseStatusID < 5
                                   && coupon.serviceStatusID != 2
                                       && ((coupon.confirmationDateTime == null && coupon.dateSaved < toDate) || (coupon.confirmationDateTime != null && coupon.confirmationDateTime < toDate))
                                       && coupon.tblCloseOuts_Purchases.Count(m => m.paid == true) == 0
                                   //select coupon.tblPurchases).Distinct();
                                   select purchase).Distinct();
                    scope.Complete();
                }

                decimal exchangeRate = 0;
                foreach (var purchase in purchasesQ2)
                {
                    CloseOutModel.CloseOutListItem currentSale = new CloseOutModel.CloseOutListItem();
                    //general
                    currentSale.PurchaseID = purchase.purchaseID;
                    currentSale.PurchaseDateTime = purchase.purchaseDateTime;
                    if (purchase.tblLeads.personalTitleID != null)
                    {
                        currentSale.Title = purchase.tblLeads.tblPersonalTitles.personalTitle;
                    }
                    currentSale.FirstName = purchase.tblLeads.firstName;
                    currentSale.LastName = purchase.tblLeads.lastName;

                    //ChargeBack concepts
                    currentSale.CBSubtotals = new List<CloseOutModel.ChargeBackConceptSubtotal>();
                    foreach (var c in closeOut.ChargeBackConcepts)
                    {
                        CloseOutModel.ChargeBackConceptSubtotal cbConceptSubtotal = new CloseOutModel.ChargeBackConceptSubtotal();
                        cbConceptSubtotal.ConceptID = c.ConceptID;
                        cbConceptSubtotal.SubtotalWithBudget = new List<CloseOutModel.SubtotalWithBudget>();
                        currentSale.CBSubtotals.Add(cbConceptSubtotal);
                    }


                    PaymentAssignationViewModel currentAssignation = padm.GetPaymentsAssignation(purchase.purchaseID, model.SearchCloseOut_Date);
                    //contemplar cuando no hay cortes
                    if (currentAssignation.CloseOuts.Count() > 0)
                    {
                        currentSale.Diagnosis = currentAssignation.CloseOuts.Last().DiagnosisMessage;
                        currentSale.AssignationStatus = currentAssignation.CloseOuts.Last().Status;
                    }
                    else
                    {
                        currentSale.Diagnosis = "Check coupons status. Unable to assign payments to coupons.";
                        currentSale.AssignationStatus = false;
                    }

                    //cupones
                    decimal couponsTotal = 0;
                    List<CloseOutModel.CloseOutCouponDetails> coupons = new List<CloseOutModel.CloseOutCouponDetails>();
                    var couponsList = purchase.tblPurchases_Services.Where(c =>
                        c.tblPurchases.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                        && c.tblPurchases.terminalID == model.SearchCloseOut_TerminalID
                        && (
                            c.confirmedByUserID == model.SearchCloseOut_SalesAgentID
                            || model.SearchCloseOut_SalesAgentID == null || c.serviceStatusID == 1 || c.confirmedByUserID == null
                        )
                        && (
                                ((((c.dateSaved >= fromDate && c.dateSaved < toDate) || c.dateSaved < toDate)
                            && c.confirmationDateTime == null)
                            ||
                            (c.confirmationDateTime != null
                                && ((c.confirmationDateTime >= fromDate && c.confirmationDateTime < toDate) || c.confirmationDateTime < toDate)
                                ))
                                && c.tblCloseOuts_Purchases.Where(x => x.paid == true).Count() == 0
                            )
                        ).OrderBy(c => c.confirmationDateTime);

                    foreach (var coupon in couponsList)
                    {
                        CloseOutModel.CloseOutCouponDetails currentCoupon = new CloseOutModel.CloseOutCouponDetails();
                        CouponDetail couponDetail = GetCouponDetail(coupon, fromDate, toDate);

                        currentCoupon.Purchase_ServiceID = couponDetail.PurchaseServiceID;
                        currentCoupon.DateTime = couponDetail.SavedOnDate.ToString("yyyy-MM-dd hh:mm:ss tt");
                        currentCoupon.DateTimeConfirmed = (couponDetail.ConfirmationDate != null ? couponDetail.ConfirmationDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                        currentCoupon.DateTimeCanceled = (couponDetail.CancelationDate != null ? couponDetail.CancelationDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                        currentCoupon.Coupon = couponDetail.Folio;
                        currentCoupon.CouponReference = couponDetail.CouponReference;
                        currentCoupon.Activity = couponDetail.Service;
                        currentCoupon.SalesAgent = couponDetail.SalesAgent;
                        currentCoupon.Units = couponDetail.Units;
                        if (couponDetail.ConfirmationDate != null && couponDetail.CancelationDate == null)
                        {
                            numberOfCoupons += 1;
                        }
                        currentCoupon.Total = couponDetail.Total.Amount;
                        currentCoupon.Currency = couponDetail.Total.Currency;
                        currentCoupon.PriceType = couponDetail.PriceType;
                        currentCoupon.Status = couponDetail.Status;

                        //caso en el que el cupón no tiene un pago porque es el reemplazo de otro cupón
                        if (coupon.replacementOf != null)
                        {
                            //reemplazo directo
                            currentCoupon.Status += "<span class=\"block mb-warning\">On Replacement";
                            tblPurchases_Services directReplacedCoupon = coupon.tblPurchases_Services2;
                            if (directReplacedCoupon.tblPurchaseServiceDetails.Count() > 0 && directReplacedCoupon.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
                            {
                                currentCoupon.Status += " of " + directReplacedCoupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, directReplacedCoupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                            }
                            currentCoupon.Status += "</span>";

                            //reemplazo real
                            tblPurchases_Services replacedCoupon = GetOriginalReplacedCoupon((long)coupon.replacementOf);
                            //comprobar que ambos cupones tengan el mismo valor
                            decimal replacedTotal = 0;
                            foreach (var detail in replacedCoupon.tblPurchaseServiceDetails)
                            {
                                long cPriceID = (detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID);
                                replacedTotal += PromoDataModel.ApplyPromo(detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : detail.tblPrices.price), detail.purchaseServiceDetailID);
                            }
                            if (replacedCoupon.cancelationCharge != null && replacedCoupon.cancelationCharge > 0)
                            {
                                replacedTotal = replacedTotal - (decimal)replacedCoupon.cancelationCharge;
                            }

                            if ((currentCoupon.Total == 0 && couponDetail.StatusID == 4) || currentCoupon.Total == replacedTotal)
                            {
                                //si tienen el mismo valor
                                currentCoupon.Total = 0;
                            }
                            else if (coupon.serviceStatusID == 5 && coupon.confirmationDateTime.Value.Date == coupon.cancelationDateTime.Value.Date)
                            {
                                //si se confirma y se reembolsa en el mismo día
                                currentCoupon.Total = 0;
                            }
                            else
                            {
                                //si tienen diferente valor obtener la diferencia para mostrarla
                                currentCoupon.Total = currentCoupon.Total - replacedTotal;
                            }
                        }
                        else
                        {
                            /* -caso en el que la confirmación y cancelación se da en el mismo día y el couponDetail contempla como 0.
                            - caso en el que nunca se confirmó pero debe ser refunded*/
                            if (
                                (couponDetail.ConfirmationDate != null
                                && couponDetail.CancelationDate != null
                                && couponDetail.ConfirmationDate.Value.Date == couponDetail.CancelationDate.Value.Date
                                && (couponDetail.StatusID == 4 || couponDetail.StatusID == 5)
                                && coupon.tblPurchaseServiceDetails.Count > 0)
                                ||
                                (couponDetail.ConfirmationDate == null
                                && couponDetail.StatusID == 5)
                                )
                            {
                                decimal computedTotal = 0;
                                foreach (var detail in coupon.tblPurchaseServiceDetails)
                                {
                                    long cPriceID = (detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID);
                                    computedTotal += PromoDataModel.ApplyPromo(detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : detail.tblPrices.price), detail.purchaseServiceDetailID);
                                }
                                currentCoupon.Total = computedTotal;
                            }
                        }

                        if (couponDetail.StatusID >= 3 && currentCoupon.Total > 0)
                        {
                            if (couponDetail.StatusID == 4)//!coupon.tblPurchases.tblPointsOfSale.online
                            {
                                currentCoupon.Total = 0;
                            }
                        }

                        couponsTotal += currentCoupon.Total;
                        coupons.Add(currentCoupon);

                        //agregar al total a pagar
                        if (currentCoupon.Currency == "USD")
                        {
                            exchangeRate = 0;
                            DateTime exchangeDate = (coupon.confirmationDateTime != null ? (DateTime)coupon.confirmationDateTime.Value : coupon.dateSaved);

                            //exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, "USD", purchase.terminalID);
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, "USD", purchase.terminalID, purchase.pointOfSaleID);

                            closeOut.TotalToPay += decimal.Round(currentCoupon.Total * exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            closeOut.TotalToPay += currentCoupon.Total;
                        }
                    }

                    currentSale.Coupons = coupons;
                    currentSale.CouponsTotal = couponsTotal;
                    currentSale.Currency = purchase.tblCurrencies.currencyCode;

                    //agregar a totales por moneda
                    if (SalesSTcouponTotalList.Where(c => c.Currency == purchase.tblCurrencies.currencyCode).Count() == 0)
                    {
                        SalesSTcouponTotalList.Add(new Money()
                        {
                            Amount = couponsTotal,
                            Currency = purchase.tblCurrencies.currencyCode
                        });
                    }
                    else
                    {
                        SalesSTcouponTotalList.FirstOrDefault(c => c.Currency == purchase.tblCurrencies.currencyCode).Amount += couponsTotal;
                    }

                    //pagos
                    var transactions = purchase.tblPaymentDetails.Where(p =>
                        p.tblMoneyTransactions.transactionTypeID == 1
                        && (p.deleted == false || p.deleted == null)
                        && p.tblMoneyTransactions.errorCode == "0"
                        && p.tblCloseOuts_PaymentDetails.Count() == 0
                        && ((p.dateSaved >= fromDate && p.dateSaved < toDate)
                        || (p.dateSaved < toDate && p.tblCloseOuts_PaymentDetails.Count() == 0)));

                    List<Money> cashList = new List<Money>();
                    List<Money> creditList = new List<Money>();
                    List<Money> chargeList = new List<Money>();

                    List<Money> CxCOPCBudget = GetDefaultListOfMoney(true);
                    List<Money> CxCOPCNoBudget = GetDefaultListOfMoney(true);
                    List<Money> CxCCompany = GetDefaultListOfMoney(true);
                    List<Money> CxCCashInAdvance = GetDefaultListOfMoney(true);
                    List<Money> CxCCCInAdvance = GetDefaultListOfMoney(true);

                    List<Money> checkList = new List<Money>();
                    List<Money> transferList = new List<Money>();
                    List<Money> certificateList = new List<Money>();

                    foreach (var payment in transactions)
                    {
                        decimal newAmount = payment.amount;
                        relatedPayments.Add(payment.paymentDetailsID);
                        switch (payment.paymentType)
                        {
                            case 1: //cash
                                if (cashList.Where(c => c.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    cashList.Add(new Money()
                                    {
                                        Amount = payment.amount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    cashList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                }

                                SalesSTcashList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;

                                break;
                            case 2: //credit card
                                newAmount = payment.amount;

                                //verificar si el pago incluye comisión bancaria para separar la comision
                                if (payment.applyCommission == true)
                                {
                                    decimal bankCommission = 0;

                                    if (bankCommissions.Count(b => b.terminalID == payment.tblPurchases.terminalID && b.initialDate <= payment.dateSaved && b.finalDate > payment.dateSaved && (b.cardTypeID == payment.ccType || b.cardTypeID == null)) == 0)
                                    {
                                        bankCommissions.Add(MasterChartDataModel.Purchases.GetBankCommissionObject(payment.tblPurchases.terminalID, payment.dateSaved, payment.ccType));
                                    }

                                    bankCommission = bankCommissions.First(b => b.terminalID == payment.tblPurchases.terminalID && b.initialDate <= payment.dateSaved && b.finalDate > payment.dateSaved && (b.cardTypeID == payment.ccType || b.cardTypeID == null)).commissionPercentage;

                                    newAmount = newAmount / (bankCommission / 100 + 1);
                                    totalBankComissions.First(x => x.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount - newAmount;
                                }

                                if (creditList.Where(c => c.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    creditList.Add(new Money()
                                    {
                                        Amount = newAmount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    creditList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += newAmount;
                                }

                                SalesSTcreditList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += newAmount;

                                break;
                            case 3: //charge back
                                if (chargeList.Where(c => c.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    chargeList.Add(new Money()
                                    {
                                        Amount = payment.amount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    chargeList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                }

                                SalesSTchargeList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;

                                //conceptos de chargeback
                                CloseOutModel.SubtotalWithBudget newCBSubtotal = new CloseOutModel.SubtotalWithBudget();
                                newCBSubtotal.Amount = payment.amount;
                                newCBSubtotal.Currency = payment.tblCurrencies.currencyCode;
                                if (payment.budgetID != null)
                                {
                                    newCBSubtotal.Budget = payment.tblBudgets.leadQualification;
                                }
                                currentSale.CBSubtotals.FirstOrDefault(x => x.ConceptID == payment.chargeBackConceptID).SubtotalWithBudget.Add(newCBSubtotal);

                                break;
                            case 4: //traveler check
                                if (checkList.Where(c => c.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    checkList.Add(new Money()
                                    {
                                        Amount = payment.amount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    checkList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                }

                                SalesSTcheckList.FirstOrDefault(c => c.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;

                                break;
                            case 5: //wire transfer
                                if (transferList.Where(t => t.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    transferList.Add(new Money()
                                    {
                                        Amount = payment.amount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    transferList.FirstOrDefault(t => t.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                }

                                SalesSTtransferList.FirstOrDefault(t => t.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;

                                break;
                            case 6: //certificate
                                if (certificateList.Where(t => t.Currency == payment.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    certificateList.Add(new Money()
                                    {
                                        Amount = payment.amount,
                                        Currency = payment.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    certificateList.FirstOrDefault(t => t.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                }

                                SalesSTcertificateList.FirstOrDefault(t => t.Currency == payment.tblCurrencies.currencyCode).Amount += payment.amount;
                                break;
                        }

                        //agregar al total a pagar
                        if (payment.tblCurrencies.currencyCode == "USD" || payment.tblCurrencies.currencyCode == "CAD")
                        {
                            exchangeRate = 0;
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(payment.dateSaved, payment.tblCurrencies.currencyCode, payment.tblPurchases.terminalID, payment.tblPurchases.pointOfSaleID);

                            decimal subtotalMXN = decimal.Round((newAmount != payment.amount ? newAmount : payment.amount) * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            closeOut.TotalPaid += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                            MXNTotalsSalesMXN.FirstOrDefault(x => x.Currency == payment.tblCurrencies.currencyCode).Amount += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            decimal subtotalMXN = (newAmount != payment.amount ? newAmount : payment.amount);
                            closeOut.TotalPaid += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                            MXNTotalsSalesMXN.FirstOrDefault(x => x.Currency == payment.tblCurrencies.currencyCode).Amount += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    currentSale.Cash = cashList;
                    currentSale.CreditCard = creditList;
                    currentSale.ChargeBack = chargeList;
                    currentSale.TravelerCheck = checkList;
                    currentSale.WireTransfers = transferList;
                    currentSale.Certificate = certificateList;
                    sales.Add(currentSale);
                }

                closeOut.ListSales = sales.OrderBy(x => x.PurchaseDateTime).ToList();

                salesSubtotal.CouponsTotal = SalesSTcouponTotalList;
                salesSubtotal.Cash = SalesSTcashList;
                salesSubtotal.CreditCard = SalesSTcreditList;
                salesSubtotal.ChargeBack = SalesSTchargeList;
                salesSubtotal.TravelerCheck = SalesSTcheckList;
                salesSubtotal.WireTransfer = SalesSTtransferList;
                salesSubtotal.Certificate = SalesSTcertificateList;
                closeOut.ListSalesSubtotal = salesSubtotal;

                /*#######################################################################################################*/

                List<CloseOutModel.CloseOutListItem> cancelations = new List<CloseOutModel.CloseOutListItem>();
                CloseOutModel.CloseOutListSubTotals refundsSubtotal = new CloseOutModel.CloseOutListSubTotals();

                //obtener listado de cancelaciones
                List<Money> CancelationsSTcouponTotalList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTcashList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTcreditList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTchargeList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTcheckList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTtransferList = GetDefaultListOfMoney(true);
                List<Money> CancelationsSTcertificateList = GetDefaultListOfMoney(true);

                var couponsRefAndCan = (from c in db.tblPurchases_Services
                                        where
                                        (c.confirmationDateTime > lastCloseOutDate || c.cancelationDateTime > lastCloseOutDate)
                                        && c.tblPurchases.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                        && c.tblPurchases.terminalID == model.SearchCloseOut_TerminalID
                                        && (c.canceledByUserID == model.SearchCloseOut_SalesAgentID || model.SearchCloseOut_SalesAgentID == null)
                                        && c.tblPurchases.isTest != true
                                        && c.tblPurchases.purchaseStatusID < 5
                                        && (c.serviceStatusID == 4 || c.serviceStatusID == 5)
                                        && c.cancelationDateTime < toDate
                                        && c.tblCloseOuts_Purchases.Where(x => x.canceled == true).Count() == 0
                                        && (c.canceledByUserID == model.SearchCloseOut_SalesAgentID || model.SearchCloseOut_SalesAgentID == null)
                                        orderby c.tblPurchases.purchaseDateTime
                                        select c.tblPurchases).Distinct();

                var refundTransactions = (from c in db.tblPaymentDetails
                                          where c.tblPurchases.pointOfSaleID == model.SearchCloseOut_PointOfSaleID
                                          && (c.deleted == null || c.deleted == false)
                                          && c.tblMoneyTransactions.transactionTypeID == 2
                                          && c.tblPurchases.terminalID == model.SearchCloseOut_TerminalID
                                          && c.tblPurchases.isTest != true
                                          && c.tblPurchases.purchaseStatusID < 5
                                          && c.dateSaved < toDate
                                          && c.tblCloseOuts_PaymentDetails.Count() == 0
                                          && c.tblCloseOuts_PaymentDetails.Count() == 0
                                          && (c.savedByUserID == model.SearchCloseOut_SalesAgentID || model.SearchCloseOut_SalesAgentID == null)
                                          orderby c.tblPurchases.purchaseDateTime
                                          select c.tblPurchases).Distinct();

                var cancelationsQ = couponsRefAndCan.Concat(refundTransactions).Distinct();

                foreach (var purchase in cancelationsQ.OrderBy(o => o.purchaseDateTime))
                {
                    CloseOutModel.CloseOutListItem currentSale = new CloseOutModel.CloseOutListItem();
                    //general
                    currentSale.PurchaseID = purchase.purchaseID;
                    if (purchase.tblLeads.personalTitleID != null)
                    {
                        currentSale.Title = purchase.tblLeads.tblPersonalTitles.personalTitle;
                    }
                    currentSale.FirstName = purchase.tblLeads.firstName;
                    currentSale.LastName = purchase.tblLeads.lastName;

                    PaymentAssignationViewModel currentAssignation = padm.GetPaymentsAssignation(purchase.purchaseID, model.SearchCloseOut_Date);
                    if (currentAssignation.CloseOuts.Count() > 0)
                    {
                        currentSale.Diagnosis = currentAssignation.CloseOuts.Last().DiagnosisMessage;
                        currentSale.AssignationStatus = currentAssignation.CloseOuts.Last().Status;
                    }
                    else
                    {
                        currentSale.Diagnosis = "Check coupons status. Unable to assign payments to coupons.";
                        currentSale.AssignationStatus = false;
                    }

                    //cupones
                    decimal refundsTotal = 0;
                    List<CloseOutModel.CloseOutCouponDetails> coupons = new List<CloseOutModel.CloseOutCouponDetails>();
                    var couponsList = purchase.tblPurchases_Services.Where(c => c.tblPurchases.pointOfSaleID == model.SearchCloseOut_PointOfSaleID && c.tblPurchases.terminalID == model.SearchCloseOut_TerminalID && (c.serviceStatusID == 4 || c.serviceStatusID == 5) && ((c.cancelationDateTime >= fromDate && c.cancelationDateTime < toDate) || (c.cancelationDateTime < toDate && c.tblCloseOuts_Purchases.Where(x => x.canceled == true).Count() == 0)) && (c.canceledByUserID == model.SearchCloseOut_SalesAgentID || model.SearchCloseOut_SalesAgentID == null));

                    foreach (var coupon in couponsList.OrderBy(o => o.confirmationDateTime))
                    {
                        CloseOutModel.CloseOutCouponDetails currentCoupon = new CloseOutModel.CloseOutCouponDetails();
                        currentCoupon.Purchase_ServiceID = coupon.purchase_ServiceID;
                        currentCoupon.DateTime = coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                        currentCoupon.DateTimeConfirmed = (coupon.confirmationDateTime != null ? coupon.confirmationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                        currentCoupon.DateTimeCanceled = coupon.cancelationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                        if (coupon.serviceStatusID >= 3 && coupon.tblPurchaseServiceDetails.Count > 0 && coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
                        {
                            currentCoupon.Coupon = coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                            currentCoupon.CouponReference = coupon.couponReference;
                        }
                        currentCoupon.Activity = coupon.tblServices.service;
                        var salesUser = (from u in db.tblUserProfiles
                                         where u.userID == coupon.confirmedByUserID
                                         select new
                                         {
                                             u.firstName,
                                             u.lastName
                                         }).FirstOrDefault();
                        var cancelationUser = (from u in db.tblUserProfiles
                                               where u.userID == coupon.canceledByUserID
                                               select new
                                               {
                                                   u.firstName,
                                                   u.lastName
                                               }).FirstOrDefault();
                        currentCoupon.SalesAgent = (salesUser != null ? salesUser.firstName + " " + salesUser.lastName : "");
                        currentCoupon.CancelationAgent = (cancelationUser != null ? cancelationUser.firstName + " " + cancelationUser.lastName : "");
                        decimal computedTotal = 0;
                        foreach (var detail in coupon.tblPurchaseServiceDetails)
                        {
                            if (currentCoupon.Units != null)
                            {
                                currentCoupon.Units += ",";
                            }
                            long cPriceID = (detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID);
                            tblPriceUnits unit = PriceDataModel.GetUnit(cPriceID, purchase.culture);
                            currentCoupon.Units += detail.quantity + " " + unit.unit + (unit.additionalInfo != null ? "[" + unit.additionalInfo + "]" : "") + (detail.promo ? " (PROMO)" : "");
                            //APPLYPROMO computedTotal += (detail.promo ? 0 : detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : detail.tblPrices.price));
                            computedTotal += PromoDataModel.ApplyPromo(detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : detail.tblPrices.price), detail.purchaseServiceDetailID);
                            currentCoupon.PriceType = (currentCoupon.PriceType != null ? ", " : "") + detail.tblPriceTypes.priceType;
                        }

                        //calculo del total a regresar
                        if (coupon.serviceStatusID == 5)
                        {
                            //refunds
                            //if (coupon.confirmationDateTime != null && coupon.confirmationDateTime.Value.Date == coupon.cancelationDateTime.Value.Date)
                            //{
                            if (coupon.replacementOf != null)
                            {
                                currentCoupon.Total = (computedTotal - (coupon.cancelationCharge != null && coupon.cancelationCharge > 0 ? (decimal)coupon.cancelationCharge : 0)) * -1;

                                /*
                                //reemplazo real
                                tblPurchases_Services replacedCoupon = GetOriginalReplacedCoupon((long)coupon.replacementOf);
                                //comprobar que ambos cupones tengan el mismo valor
                                decimal replacedTotal = 0;
                                foreach (var detail in replacedCoupon.tblPurchaseServiceDetails)
                                {
                                    long cPriceID = (detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID);
                                    replacedTotal += PromoDataModel.ApplyPromo(detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : detail.tblPrices.price), detail.purchaseServiceDetailID);
                                }
                                if (replacedCoupon.cancelationCharge != null && replacedCoupon.cancelationCharge > 0)
                                {
                                    replacedTotal = replacedTotal - (decimal)replacedCoupon.cancelationCharge;
                                }

                                if ((currentCoupon.Total == 0 && coupon.serviceStatusID == 4) || currentCoupon.Total == replacedTotal)
                                {
                                    //si tienen el mismo valor
                                    currentCoupon.Total = 0;
                                }
                                else
                                {
                                    //si tienen diferente valor obtener la diferencia para mostrarla
                                    currentCoupon.Total = currentCoupon.Total - replacedTotal;
                                }
                                */
                            }
                            //}
                            else
                            {
                                currentCoupon.Total = (coupon.cancelationCharge != null && coupon.cancelationCharge > 0 ? (decimal)coupon.cancelationCharge : 0) - computedTotal;
                            }
                        }
                        else
                        {
                            //cancelations
                            if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0 && !IsReplacedCoupon(coupon.purchase_ServiceID))
                            {
                                currentCoupon.Total = (decimal)coupon.cancelationCharge - computedTotal;
                            }
                            else
                            {
                                currentCoupon.Total = 0;
                            }
                        }

                        refundsTotal += currentCoupon.Total;
                        currentCoupon.Currency = purchase.tblCurrencies.currencyCode;
                        currentCoupon.Status = coupon.tblPurchaseServiceStatus.purchaseServiceStatus + (coupon.cancelationCharge != null && coupon.cancelationCharge > 0 ? "<span class=\"block\">[Cancelation Charge: $" + coupon.cancelationCharge.ToString() + " " + purchase.tblCurrencies.currencyCode + "]</span>" : "");

                        coupons.Add(currentCoupon);

                        //agregar al total a pagar
                        if (currentCoupon.Currency == "USD")
                        {
                            exchangeRate = 0;
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate((coupon.cancelationDateTime != null ? (DateTime)coupon.cancelationDateTime : coupon.dateSaved), "USD", purchase.terminalID, purchase.pointOfSaleID);
                            closeOut.TotalToRefund += decimal.Round(currentCoupon.Total * exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            closeOut.TotalToRefund += currentCoupon.Total;
                        }
                    }

                    currentSale.Coupons = coupons;
                    currentSale.CouponsTotal = refundsTotal;
                    currentSale.Currency = purchase.tblCurrencies.currencyCode;
                    if (CancelationsSTcouponTotalList.Where(c => c.Currency == purchase.tblCurrencies.currencyCode).Count() == 0)
                    {
                        CancelationsSTcouponTotalList.Add(new Money()
                        {
                            Amount = refundsTotal,
                            Currency = purchase.tblCurrencies.currencyCode
                        });
                    }
                    else
                    {
                        CancelationsSTcouponTotalList.FirstOrDefault(c => c.Currency == purchase.tblCurrencies.currencyCode).Amount += refundsTotal;
                    }

                    //refunds
                    var transactions = purchase.tblPaymentDetails.Where(p => p.tblMoneyTransactions.transactionTypeID == 2
                        && p.tblMoneyTransactions.errorCode == "0"
                        && p.tblCloseOuts_PaymentDetails.Count() == 0
                        && ((p.dateSaved >= fromDate && p.dateSaved < toDate)
                        || (p.dateSaved < toDate))
                        && (p.deleted == null || p.deleted == false)
                        );

                    if (sales.Count(x => x.PurchaseID == purchase.purchaseID) == 0)
                    {
                        //si la compra no está en la lista de ventas, buscar por posibles pagos que interfieran con la cantidad real a reembolsar
                        var positiveTransactions = purchase.tblPaymentDetails.Where(p => p.tblMoneyTransactions.transactionTypeID == 1
                        && p.tblMoneyTransactions.errorCode == "0"
                        && p.tblCloseOuts_PaymentDetails.Count() == 0
                        && ((p.dateSaved >= fromDate && p.dateSaved < toDate)
                        || (p.dateSaved < toDate))
                        && (p.deleted == null || p.deleted == false)
                        );

                        transactions = transactions.Concat(positiveTransactions);
                    }

                    List<Money> cashList = new List<Money>();
                    List<Money> creditList = new List<Money>();
                    List<Money> chargeList = new List<Money>();
                    List<Money> checkList = new List<Money>();
                    List<Money> transferList = new List<Money>();
                    List<Money> certificateList = new List<Money>();

                    foreach (var refund in transactions)
                    {
                        decimal newAmount = refund.amount;
                        relatedPayments.Add(refund.paymentDetailsID);
                        switch (refund.paymentType)
                        {
                            case 1: //cash
                                if (cashList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    cashList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    cashList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }

                                if (CancelationsSTcashList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTcashList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTcashList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                            case 2: //credit card
                                newAmount = refund.amount;

                                //verificar si el pago incluye comisión bancaria para separar la comision
                                if (refund.applyCommission == true)
                                {
                                    decimal bankCommission = 0;

                                    if (bankCommissions.Count(b => b.terminalID == refund.tblPurchases.terminalID && b.initialDate <= refund.dateSaved && b.finalDate > refund.dateSaved && (b.cardTypeID == refund.ccType || b.cardTypeID == null)) == 0)
                                    {
                                        bankCommissions.Add(MasterChartDataModel.Purchases.GetBankCommissionObject(refund.tblPurchases.terminalID, refund.dateSaved, refund.ccType));
                                    }

                                    bankCommission = bankCommissions.First(b => b.terminalID == refund.tblPurchases.terminalID && b.initialDate <= refund.dateSaved && b.finalDate > refund.dateSaved && (b.cardTypeID == refund.ccType || b.cardTypeID == null)).commissionPercentage;

                                    newAmount = newAmount / (bankCommission / 100 + 1);
                                    totalBankComissions.First(x => x.Currency == refund.tblCurrencies.currencyCode).Amount += (refund.amount - newAmount) * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }


                                if (creditList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    creditList.Add(new Money()
                                    {
                                        Amount = newAmount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    creditList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += newAmount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                if (CancelationsSTcreditList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTcreditList.Add(new Money()
                                    {
                                        Amount = newAmount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTcreditList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += newAmount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                            case 3: //charge back
                                if (chargeList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    chargeList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    chargeList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                if (CancelationsSTchargeList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTchargeList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTchargeList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                            case 4: //traveler check
                                if (checkList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    checkList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    checkList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                if (CancelationsSTcheckList.Where(c => c.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTcheckList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTcheckList.FirstOrDefault(c => c.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                            case 5: //wire transfers
                                if (transferList.Where(t => t.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    transferList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    transferList.FirstOrDefault(t => t.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                if (CancelationsSTtransferList.Where(t => t.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTtransferList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTtransferList.FirstOrDefault(t => t.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                            case 6:
                                if (certificateList.Where(t => t.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    certificateList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    certificateList.FirstOrDefault(t => t.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                if (CancelationsSTcertificateList.Where(t => t.Currency == refund.tblCurrencies.currencyCode).Count() == 0)
                                {
                                    CancelationsSTcertificateList.Add(new Money()
                                    {
                                        Amount = refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1),
                                        Currency = refund.tblCurrencies.currencyCode
                                    });
                                }
                                else
                                {
                                    CancelationsSTcertificateList.FirstOrDefault(t => t.Currency == refund.tblCurrencies.currencyCode).Amount += refund.amount * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                                }
                                break;
                        }
                        //agregar al total a pagar
                        if (refund.tblCurrencies.currencyCode == "USD" || refund.tblCurrencies.currencyCode == "CAD")
                        {
                            exchangeRate = 0;
                            //if (ExchangeRates.FirstOrDefault(x => x.Date == refund.dateSaved.Date && x.CurrencyCode == refund.tblCurrencies.currencyCode) != null)
                            //{
                            //    exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == refund.dateSaved.Date && x.CurrencyCode == refund.tblCurrencies.currencyCode).ExchangeRate;
                            //}
                            //else
                            //{
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(refund.dateSaved, refund.tblCurrencies.currencyCode, refund.tblPurchases.terminalID, refund.tblPurchases.pointOfSaleID);
                            //    ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                            //    {
                            //        Date = refund.dateSaved.Date,
                            //        CurrencyCode = refund.tblCurrencies.currencyCode,
                            //        ExchangeRate = exchangeRate
                            //    });
                            //}
                            decimal subtotalMXN = decimal.Round((newAmount != refund.amount ? newAmount : refund.amount) * exchangeRate * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1), 2, MidpointRounding.AwayFromZero);
                            closeOut.TotalRefunded += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                            MXNTotalsRefundsMXN.FirstOrDefault(x => x.Currency == refund.tblCurrencies.currencyCode).Amount += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            decimal subtotalMXN = (newAmount != refund.amount ? newAmount : refund.amount) * (refund.tblMoneyTransactions.transactionTypeID == 2 ? -1 : 1);
                            closeOut.TotalRefunded += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                            MXNTotalsRefundsMXN.FirstOrDefault(x => x.Currency == refund.tblCurrencies.currencyCode).Amount += decimal.Round(subtotalMXN, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    currentSale.Cash = cashList;
                    currentSale.CreditCard = creditList;
                    currentSale.ChargeBack = chargeList;
                    currentSale.TravelerCheck = checkList;
                    currentSale.WireTransfers = transferList;
                    currentSale.Certificate = certificateList;
                    cancelations.Add(currentSale);
                }


                closeOut.ListCancelations = cancelations;

                refundsSubtotal.CouponsTotal = CancelationsSTcouponTotalList;
                refundsSubtotal.Cash = CancelationsSTcashList;
                refundsSubtotal.CreditCard = CancelationsSTcreditList;
                refundsSubtotal.ChargeBack = CancelationsSTchargeList;
                refundsSubtotal.TravelerCheck = CancelationsSTcheckList;
                refundsSubtotal.WireTransfer = CancelationsSTtransferList;
                refundsSubtotal.Certificate = CancelationsSTcertificateList;
                closeOut.ListRefundsSubtotal = refundsSubtotal;

                /*######################################################################################################*/

                List<Money> totalSales = new List<Money>();
                List<Money> totalRefunds = new List<Money>();
                List<Money> totalDifference = new List<Money>();
                List<Money> totalCash = new List<Money>();
                List<Money> totalCredit = new List<Money>();
                List<Money> totalCharge = new List<Money>();
                List<Money> totalCheck = new List<Money>();
                List<Money> totalTransfer = new List<Money>();
                List<Money> totalCertificate = new List<Money>();

                //sales
                foreach (var t in SalesSTcashList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in SalesSTcreditList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in SalesSTchargeList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in SalesSTcheckList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in SalesSTtransferList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in SalesSTcertificateList)
                {
                    if (totalSales.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalSales.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalSales.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }

                //refunds
                foreach (var t in CancelationsSTcashList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in CancelationsSTcreditList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in CancelationsSTchargeList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in CancelationsSTcheckList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in CancelationsSTtransferList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }
                foreach (var t in CancelationsSTcertificateList)
                {
                    if (totalRefunds.Where(c => c.Currency == t.Currency).Count() == 0)
                    {
                        totalRefunds.Add(new Money()
                        {
                            Amount = t.Amount,
                            Currency = t.Currency
                        });
                    }
                    else
                    {
                        totalRefunds.FirstOrDefault(c => c.Currency == t.Currency).Amount += t.Amount;
                    }
                }

                //difference
                foreach (var s in totalSales)
                {
                    if (totalDifference.Where(c => c.Currency == s.Currency).Count() == 0)
                    {
                        totalDifference.Add(new Money()
                        {
                            Amount = s.Amount,
                            Currency = s.Currency
                        });
                    }
                    else
                    {
                        totalDifference.FirstOrDefault(c => c.Currency == s.Currency).Amount += s.Amount;
                    }
                }
                foreach (var r in totalRefunds)
                {
                    if (totalDifference.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalDifference.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalDifference.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //cash
                foreach (var r in SalesSTcashList)
                {
                    if (totalCash.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCash.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCash.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTcashList)
                {
                    if (totalCash.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCash.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCash.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //credit
                foreach (var r in SalesSTcreditList)
                {
                    if (totalCredit.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCredit.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCredit.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTcreditList)
                {
                    if (totalCredit.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCredit.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCredit.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //charge
                foreach (var r in SalesSTchargeList)
                {
                    if (totalCharge.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCharge.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCharge.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTchargeList)
                {
                    if (totalCharge.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCharge.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCharge.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //check
                foreach (var r in SalesSTcheckList)
                {
                    if (totalCheck.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCheck.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCheck.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTcheckList)
                {
                    if (totalCheck.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCheck.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCheck.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //transfer
                foreach (var r in SalesSTtransferList)
                {
                    if (totalTransfer.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalTransfer.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalTransfer.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTtransferList)
                {
                    if (totalTransfer.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalTransfer.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalTransfer.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                //certificate
                foreach (var r in SalesSTcertificateList)
                {
                    if (totalCertificate.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCertificate.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCertificate.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }
                foreach (var r in CancelationsSTcertificateList)
                {
                    if (totalCertificate.Where(c => c.Currency == r.Currency).Count() == 0)
                    {
                        totalCertificate.Add(new Money()
                        {
                            Amount = r.Amount,
                            Currency = r.Currency
                        });
                    }
                    else
                    {
                        totalCertificate.FirstOrDefault(c => c.Currency == r.Currency).Amount += r.Amount;
                    }
                }

                totals.Coupons = numberOfCoupons;
                totals.Sales = totalSales;
                totals.SalesMXN = MXNTotalsSalesMXN;
                totals.Refunds = totalRefunds;
                totals.RefundsMXN = MXNTotalsRefundsMXN;
                totals.GrandTotal = totalDifference;
                totals.GrandTotalMXN = MXNTotalsMXN;
                foreach (var t in totals.GrandTotalMXN)
                {
                    t.Amount = totals.SalesMXN.FirstOrDefault(x => x.Currency == t.Currency).Amount + totals.RefundsMXN.FirstOrDefault(x => x.Currency == t.Currency).Amount;
                }
                totals.Cash = totalCash;
                totals.CreditCard = totalCredit;
                totals.ChargeBack = totalCharge;
                totals.TravelerCheck = totalCheck;
                totals.WireTransfer = totalTransfer;
                totals.Certificate = totalCertificate;

                totals.BankCommissions = totalBankComissions;

                closeOut.Totals = totals;
                closeOut.RelatedPayments = relatedPayments.Distinct().ToList();
            }

            closeOut.TotalExtraPaid = closeOut.TotalPaid - closeOut.TotalToPay;
            closeOut.GrandTotalToRefund = closeOut.TotalToRefund - closeOut.TotalExtraPaid;

            return closeOut;
        }

        public static tblPurchases_Services GetOriginalReplacedCoupon(long purchaseServiceID)
        {
            ePlatEntities db = new ePlatEntities();
            tblPurchases_Services originalCoupon = new tblPurchases_Services();

            var couponQ = (from c in db.tblPurchases_Services
                           where c.purchase_ServiceID == purchaseServiceID
                           select c).Single();

            if (couponQ.replacementOf == null || couponQ.tblCloseOuts_Purchases.Count(p => p.paid) > 0)
            {
                originalCoupon = couponQ;
            }
            else
            {
                originalCoupon = GetOriginalReplacedCoupon((long)couponQ.replacementOf);
            }

            return originalCoupon;
        }

        public bool IsReplacedCoupon(long purchaseServiceID)
        {
            var CouponQ = from c in db.tblPurchases_Services
                          where c.replacementOf == purchaseServiceID
                          select c.purchase_ServiceID;

            if (CouponQ.Count() > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static AttemptResponse SaveCustomCost(AuditCouponsModel.CustomCostModel model)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            try
            {
                var CouponQ = (from c in db.tblPurchaseServiceDetails
                               where c.purchaseServiceDetailID == model.PurchaseServiceDetailID
                               select c).FirstOrDefault();

                if (CouponQ != null)
                {
                    CouponQ.customCost = model.CustomCost;
                    CouponQ.customCostAlt = model.CustomCostAlt;
                    CouponQ.customCostAltNoIVA = model.CustomCostAltNoIVA;
                    CouponQ.customCostDateTime = DateTime.Now;
                    CouponQ.customCostExchangeRate = model.CustomCostExchangeRate;
                    CouponQ.customCostNoIVA = model.CustomCostNoIVA;
                    CouponQ.customCostNote = model.CustomCostNote;
                    CouponQ.customCostPercentage = model.CustomCostPercentage;
                    CouponQ.customCostUserID = session.UserID;

                    db.SaveChanges();

                    ReportDataModel rdm = new ReportDataModel();
                    bool processed = rdm.ProcessCouponInfo(CouponQ.purchase_ServiceID, "Custom Cost");
                }

                attempt.Type = Attempt_ResponseTypes.Ok;
                attempt.Exception = null;
                attempt.ObjectID = model;
            }
            catch (Exception e)
            {
                attempt.Type = Attempt_ResponseTypes.Error;
                attempt.Exception = e.InnerException;
                attempt.Message = "There was a problem saving your Cost. Please contact System Administrator to help you fix the issue.";
            }

            return attempt;
        }

        public static AuditCouponsModel.CouponCostViewModel GetCouponCost(long id, long PurchaseServiceDetailID)
        {
            ePlatEntities db = new ePlatEntities();
            AuditCouponsModel.CouponCostViewModel model = new AuditCouponsModel.CouponCostViewModel();
            long? costRuleID = null;

            model.PurchaseServiceID = id;

            var coupon = (from s in db.tblPurchases_Services
                          where s.purchase_ServiceID == id
                          select new
                          {
                              s.serviceID,
                              s.tblServices.service,
                              s.tblServices.tblProviders.comercialName,
                              s.tblServices.tblProviders.contractCurrencyID,
                              contractCurrency = s.tblServices.tblProviders.tblCurrencies.currencyCode,
                              s.confirmationDateTime,
                              s.tblCurrencies.currencyCode,
                              s.tblPurchases.culture,
                              unit = s.tblPurchaseServiceDetails.FirstOrDefault(x => x.purchaseServiceDetailID == PurchaseServiceDetailID),
                              s.tblPurchases.terminalID,
                              s.tblPurchases.pointOfSaleID,
                              s.tblPurchases.tblPointsOfSale.online,
                              s.serviceDateTime,
                              s.serviceStatusID,
                              s.promoID,
                              s.cancelationCharge,
                              s.tblPromos
                          }).FirstOrDefault();

            if (coupon != null)
            {
                model.Folio = coupon.unit.coupon.Substring(0, coupon.unit.coupon.IndexOf("-"));
                model.Service = coupon.service;
                model.Provider = coupon.comercialName;

                model.ConfirmationDateTime = coupon.confirmationDateTime.Value.ToString("F");
                model.CurrencyCode = coupon.currencyCode;
                model.Culture = (coupon.culture == "es-MX" ? "Español" : "English");
                model.ProviderContract = (coupon.contractCurrency != null ? coupon.contractCurrency : "Both");
                model.PurchaseServiceDetailID = coupon.unit.purchaseServiceDetailID;

                //List<ComputedPriceModel> Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.terminalID, coupon.online, coupon.confirmationDateTime, coupon.culture);
                List<ComputedPriceModel> Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.pointOfSaleID, coupon.terminalID, coupon.confirmationDateTime, coupon.culture);

                model.BasePriceNoIVA = GetDefaultListOfMoney(false);
                model.BasePriceIVA = GetDefaultListOfMoney(false);
                model.BasePriceTotal = GetDefaultListOfMoney(false);
                model.CostPriceNoIVA = GetDefaultListOfMoney(false);
                model.CostPriceIVA = GetDefaultListOfMoney(false);
                model.CostPriceTotal = GetDefaultListOfMoney(false);

                //precio base
                long netPriceID = (long)coupon.unit.netPriceID;
                var basePriceQ = (from p in db.tblPrices
                                  where p.priceID == netPriceID
                                  select new
                                  {
                                      p.priceTypeID,
                                      p.tblPriceTypes.priceType,
                                      p.tblCurrencies.currencyCode
                                  }).FirstOrDefault();

                model.BasePriceTypeID = basePriceQ.priceTypeID;
                model.BasePriceType = basePriceQ.priceType;
                model.BasePriceCurrency = basePriceQ.currencyCode;

                //precio costo
                if (coupon.unit.customCost != null)
                {
                    if (model.BasePriceCurrency == "USD")
                    {
                        model.CostPriceTotal.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)coupon.unit.customCost;
                        model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)coupon.unit.customCostNoIVA;
                        model.CostPriceIVA.FirstOrDefault(x => x.Currency == "USD").Amount = model.CostPriceTotal.FirstOrDefault(x => x.Currency == "USD").Amount - model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount;

                        model.CostPriceTotal.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)coupon.unit.customCostAlt;
                        model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)coupon.unit.customCostAltNoIVA;
                        model.CostPriceIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = model.CostPriceTotal.FirstOrDefault(x => x.Currency == "MXN").Amount - model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount;
                    }
                    else
                    {
                        model.CostPriceTotal.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)coupon.unit.customCost;
                        model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)coupon.unit.customCostNoIVA;
                        model.CostPriceIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = model.CostPriceTotal.FirstOrDefault(x => x.Currency == "USD").Amount - model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount;

                        model.CostPriceTotal.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)coupon.unit.customCostAlt;
                        model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)coupon.unit.customCostAltNoIVA;
                        model.CostPriceIVA.FirstOrDefault(x => x.Currency == "USD").Amount = model.CostPriceTotal.FirstOrDefault(x => x.Currency == "MXN").Amount - model.CostPriceNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount;
                    }

                    model.CostPercentage = (decimal)coupon.unit.customCostPercentage;
                    model.ExchangeRate = (decimal)coupon.unit.customCostExchangeRate;
                    model.ExchangeRateType = "Custom Cost";
                    model.Notes = coupon.unit.customCostNote;


                    if (coupon.unit.netPriceID != null)
                    {
                        if ((coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6) || ((coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && coupon.cancelationCharge > 0))
                        {
                            //dólares
                            //base
                            if (Prices.Count(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID);
                                model.BasePriceTotal.FirstOrDefault(c => c.Currency == "USD").Amount = PromoDataModel.ApplyPromo(coupon.unit.quantity * (coupon.unit.dealPrice != null ? (decimal)coupon.unit.dealPrice : currentPrice.Price), coupon.unit.purchaseServiceDetailID);
                                model.BaseRuleUSD = currentPrice.Rule;
                            }
                            //pesos
                            //base
                            if (Prices.Count(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID);
                                model.BasePriceTotal.FirstOrDefault(c => c.Currency == "MXN").Amount = PromoDataModel.ApplyPromo(coupon.unit.quantity * (coupon.unit.dealPrice != null ? (decimal)coupon.unit.dealPrice : currentPrice.Price), coupon.unit.purchaseServiceDetailID);
                                model.BaseRuleMXN = currentPrice.Rule;
                            }
                        }
                    }

                }
                else
                {

                    if (coupon.unit.netPriceID != null)
                    {
                        if ((coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6) || ((coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && coupon.cancelationCharge > 0))
                        {
                            //dólares
                            //base
                            if (Prices.Count(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID);
                                model.BasePriceTotal.FirstOrDefault(c => c.Currency == "USD").Amount = PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID);
                                model.BaseRuleUSD = currentPrice.Rule;
                            }
                            //costo
                            if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID && x.PromoID == coupon.promoID);
                                model.CostPriceTotal.FirstOrDefault(c => c.Currency == "USD").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID) : coupon.unit.quantity * currentPrice.Price);
                                model.CostRuleUSD = currentPrice.Rule;
                                if (currentPrice.ExchangeRateID != null)
                                {
                                    model.ExchangeRateID = (long)currentPrice.ExchangeRateID;
                                }
                                if (currentPrice.Service_PriceTypeID != null)
                                {
                                    costRuleID = currentPrice.Service_PriceTypeID;
                                }
                            }
                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID && x.PromoID == null) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == coupon.unit.netPriceID && x.PromoID == null);
                                model.CostPriceTotal.FirstOrDefault(c => c.Currency == "USD").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID) : coupon.unit.quantity * currentPrice.Price);
                                model.CostRuleUSD = currentPrice.Rule;
                                if (currentPrice.ExchangeRateID != null)
                                {
                                    model.ExchangeRateID = (long)currentPrice.ExchangeRateID;
                                }
                                if (currentPrice.Service_PriceTypeID != null)
                                {
                                    costRuleID = currentPrice.Service_PriceTypeID;
                                }
                            }

                            //pesos
                            //base
                            if (Prices.Count(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.PriceTypeID == model.BasePriceTypeID && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID);
                                model.BasePriceTotal.FirstOrDefault(c => c.Currency == "MXN").Amount = PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID);
                                model.BaseRuleMXN = currentPrice.Rule;
                            }
                            //costo
                            if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID && x.PromoID == coupon.promoID);
                                model.CostPriceTotal.FirstOrDefault(c => c.Currency == "MXN").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID) : coupon.unit.quantity * currentPrice.Price);
                                model.CostRuleMXN = currentPrice.Rule;
                                if (currentPrice.ExchangeRateID != null)
                                {
                                    model.ExchangeRateID = (long)currentPrice.ExchangeRateID;
                                }
                                if (currentPrice.Service_PriceTypeID != null)
                                {
                                    costRuleID = currentPrice.Service_PriceTypeID;
                                }
                            }
                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID && x.PromoID == null) > 0)
                            {
                                ComputedPriceModel currentPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == coupon.unit.netPriceID && x.PromoID == null);
                                model.CostPriceTotal.FirstOrDefault(c => c.Currency == "MXN").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(coupon.unit.quantity * currentPrice.Price, coupon.unit.purchaseServiceDetailID) : coupon.unit.quantity * currentPrice.Price);
                                model.CostRuleMXN = currentPrice.Rule;
                                if (currentPrice.ExchangeRateID != null)
                                {
                                    model.ExchangeRateID = (long)currentPrice.ExchangeRateID;
                                }
                                if (currentPrice.Service_PriceTypeID != null)
                                {
                                    costRuleID = currentPrice.Service_PriceTypeID;
                                }
                            }
                        }
                    }

                    //obtención de exchange rate
                    var exchangeRateQ = (from er in db.tblExchangeRates
                                         where er.exchangeRateID == model.ExchangeRateID
                                         select new
                                         {
                                             er.exchangeRate,
                                             er.tblExchangeRateTypes.exchangeRateType,
                                             er.providerID
                                         }).FirstOrDefault();

                    if (exchangeRateQ != null)
                    {
                        model.ExchangeRate = exchangeRateQ.exchangeRate;
                        model.ExchangeRateType = exchangeRateQ.exchangeRateType + (exchangeRateQ.providerID != null ? " - Provider Level" : " - Agency Level");
                    }

                    //obtención del porcentaje
                    var ruleQ = (from r in db.tblServices_PriceTypes
                                 where r.service_priceTypeID == costRuleID
                                 select r).FirstOrDefault();

                    if (ruleQ != null)
                    {
                        model.CostPercentage = (decimal)ruleQ.percentage;
                    }
                }
                //desglozar iva
                foreach (var x in model.CostPriceTotal)
                {
                    x.Amount = Math.Round(x.Amount, 2, MidpointRounding.AwayFromZero);
                    model.CostPriceNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    model.CostPriceIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount - model.CostPriceNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                }

                foreach (var x in model.BasePriceTotal)
                {
                    x.Amount = Math.Round(x.Amount, 2, MidpointRounding.AwayFromZero);
                    model.BasePriceNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    model.BasePriceIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount - model.BasePriceNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                }
            }

            return model;
        }

        public AuditCouponsModel.InvoiceDetail GetAuditDetails(long id)
        {
            AuditCouponsModel.InvoiceDetail model = new AuditCouponsModel.InvoiceDetail();
            List<ComputedPriceModel> Prices = new List<ComputedPriceModel>();

            var InvoiceQ = (from i in db.tblProvidersInvoices
                            where i.providerInvoiceID == id
                            select i).FirstOrDefault();

            if (InvoiceQ != null)
            {
                long terminalID = (long)InvoiceQ.tblProviders.terminalID;
                model.ProviderInvoiceID = id;
                model.Invoice = InvoiceQ.invoiceNumber;
                model.Date = InvoiceQ.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                model.Provider = InvoiceQ.tblProviders.comercialName;
                PriceExchangeRate er = new PriceExchangeRate()
                {
                    Rate = 1,
                    Type = ""
                };

                model.PointsOfSale = new List<AuditCouponsModel.PointOfSaleDetail>();
                model.TotalServices = new List<AuditCouponsModel.ServiceDetail>();
                model.TotalAccAcc = new List<AuditCouponsModel.AccAccDetail>();

                model.Total = GetDefaultListOfMoney(false);
                model.TotalNoIVA = GetDefaultListOfMoney(false);
                model.TotalIVA = GetDefaultListOfMoney(false);
                model.Cost = GetDefaultListOfMoney(false);
                model.CostNoIVA = GetDefaultListOfMoney(false);
                model.CostIVA = GetDefaultListOfMoney(false);
                model.NumberOfUnits = 0;

                List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates = new List<ExchangeRatesModel.ExchangeRateForDate>();
                decimal exchangeRate = 0;

                //obtener points of sale
                var PointsOfSaleQ = from p in db.tblPointsOfSale
                                    where p.terminalID == terminalID
                                    select new
                                    {
                                        p.pointOfSaleID,
                                        p.pointOfSale,
                                        p.shortName
                                    };

                foreach (var point in PointsOfSaleQ)
                {
                    AuditCouponsModel.PointOfSaleDetail newPoS = new AuditCouponsModel.PointOfSaleDetail();
                    newPoS.PointOfSaleID = point.pointOfSaleID;
                    newPoS.PointOfSale = point.shortName + " - " + point.pointOfSale;
                    newPoS.NumberOfCoupons = 0;
                    newPoS.NumberOfUnits = 0;
                    newPoS.Total = GetDefaultListOfMoney(false);
                    newPoS.Cost = GetDefaultListOfMoney(false);
                    newPoS.Services = new List<AuditCouponsModel.ServiceDetail>();
                    //obtener los diferentes servicios vendidos en el punto de venta de acuerdo a la factura
                    foreach (var service in InvoiceQ.tblPurchases_Services.Where(p => p.tblPurchases.pointOfSaleID == point.pointOfSaleID).Select(x => x.tblServices).Distinct())
                    {
                        AuditCouponsModel.ServiceDetail newSeD = new AuditCouponsModel.ServiceDetail();
                        newSeD.ServiceID = service.serviceID;
                        newSeD.Service = service.service;
                        newSeD.NumberOfCoupons = 0;
                        newSeD.NumberOfUnits = 0;
                        newSeD.Total = GetDefaultListOfMoney(false);
                        newSeD.Cost = GetDefaultListOfMoney(false);
                        newSeD.Coupons = new List<AuditCouponsModel.CouponAuditDetails>();

                        //obtener los cupones
                        foreach (var coupon in InvoiceQ.tblPurchases_Services.Where(c => c.tblPurchases.pointOfSaleID == point.pointOfSaleID && c.serviceID == service.serviceID))
                        {
                            exchangeRate = 0;
                            DateTime exchangeDate = (coupon.confirmationDateTime != null ? (DateTime)coupon.confirmationDateTime.Value.Date : coupon.dateSaved.Date);

                            AuditCouponsModel.CouponAuditDetails newCou = new AuditCouponsModel.CouponAuditDetails();
                            newCou.PurchaseServiceID = coupon.purchase_ServiceID;
                            newCou.ServiceID = coupon.serviceID;
                            newCou.Service = coupon.tblServices.service;
                            newCou.Folio = coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                            newCou.CouponReference = coupon.couponReference;
                            newCou.Date = (coupon.confirmationDateTime != null ? coupon.confirmationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "Not Confirmed");
                            newCou.CurrencyOfSale = coupon.tblCurrencies.currencyCode;
                            newCou.CultureOfSale = coupon.tblPurchases.culture;
                            newCou.NumberOfUnits = 0;
                            newCou.Units = new List<AuditCouponsModel.CouponAuditUnit>();

                            //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture, InvoiceQ.dateSaved);
                            Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture, InvoiceQ.dateSaved);

                            foreach (var detail in coupon.tblPurchaseServiceDetails)
                            {
                                if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 || (coupon.serviceStatusID == 5 && coupon.cancelationCharge != null && coupon.cancelationCharge > 0))
                                {
                                    newCou.NumberOfUnits += detail.quantity;
                                    model.NumberOfUnits += detail.quantity;
                                }
                                AuditCouponsModel.CouponAuditUnit newUnit = new AuditCouponsModel.CouponAuditUnit();
                                newUnit.PurchaseServiceDetailID = detail.purchaseServiceDetailID;
                                newUnit.Quantity = detail.quantity;
                                long cPriceID = (detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID);
                                tblPriceUnits currentUnit = PriceDataModel.GetUnit(cPriceID, coupon.tblPurchases.culture);
                                newUnit.Unit = currentUnit.unit + (currentUnit.additionalInfo != null ? "(" + currentUnit.additionalInfo + ")" : "") + (detail.promo ? " (PROMO)" : "");
                                newUnit.PriceType = detail.tblPriceTypes.priceType;
                                BillingModel.AccAcc AccAcc = GetApplicableAccountingAccount(coupon.serviceID, (int)detail.priceTypeID, coupon.currencyID, 2);
                                newUnit.AccAccID = AccAcc.AccAccID;
                                newUnit.AccAccNumber = AccAcc.AccAccNumber;
                                newUnit.AccAccName = AccAcc.AccAccName;
                                newUnit.AccAccArticle = AccAcc.AccAccArticle;
                                newUnit.AccAccPriceType = AccAcc.AccAccPriceType;
                                newUnit.UnitCost = GetDefaultListOfMoney(false);
                                newUnit.UnitRule = new List<CurrencyRule>();
                                CurrencyRule ruleUSD = new CurrencyRule()
                                {
                                    Rule = "",
                                    Currency = "USD"
                                };
                                newUnit.UnitRule.Add(ruleUSD);
                                CurrencyRule ruleMXN = new CurrencyRule()
                                {
                                    Rule = "",
                                    Currency = "MXN"
                                };
                                newUnit.UnitRule.Add(ruleMXN);
                                newUnit.Cost = GetDefaultListOfMoney(false);
                                newUnit.CostNoIVA = GetDefaultListOfMoney(false);
                                newUnit.CostIVA = GetDefaultListOfMoney(false);

                                if (detail.netPriceID != null)
                                {
                                    if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 || (coupon.serviceStatusID == 5 && coupon.cancelationCharge != null && coupon.cancelationCharge > 0) || detail.customCost != null)
                                    {
                                        //dólares
                                        if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID) > 0)
                                        {
                                            newUnit.UnitCost.FirstOrDefault(c => c.Currency == "USD").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price, detail.purchaseServiceDetailID) : Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price);
                                            newUnit.UnitRule.FirstOrDefault(c => c.Currency == "USD").Rule = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Rule;
                                        }
                                        else if (Prices.Count(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == null) > 0)
                                        {
                                            newUnit.UnitCost.FirstOrDefault(c => c.Currency == "USD").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == null).Price, detail.purchaseServiceDetailID) : Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == null).Price);
                                            newUnit.UnitRule.FirstOrDefault(c => c.Currency == "USD").Rule = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 1 && x.PriceID == detail.netPriceID && x.PromoID == null).Rule;
                                        }

                                        //pesos
                                        if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID) > 0)
                                        {
                                            newUnit.UnitCost.FirstOrDefault(c => c.Currency == "MXN").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price, detail.purchaseServiceDetailID) : Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price);
                                            newUnit.UnitRule.FirstOrDefault(c => c.Currency == "MXN").Rule = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Rule;
                                        }
                                        else if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null) > 0)
                                        {
                                            newUnit.UnitCost.FirstOrDefault(c => c.Currency == "MXN").Amount = (coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price, detail.purchaseServiceDetailID) : Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price);
                                            newUnit.UnitRule.FirstOrDefault(c => c.Currency == "MXN").Rule = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Rule;
                                        }

                                        if (detail.customCost != null)
                                        {
                                            newUnit.CustomCost = true;
                                            if (detail.tblPrices1.tblCurrencies.currencyCode == "USD")
                                            {
                                                newUnit.Cost.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)detail.customCost;
                                                newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)detail.customCostNoIVA;
                                                newUnit.CostIVA.FirstOrDefault(x => x.Currency == "USD").Amount = newUnit.Cost.FirstOrDefault(x => x.Currency == "USD").Amount - newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount;

                                                newUnit.Cost.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)detail.customCostAlt;
                                                newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)detail.customCostAltNoIVA;
                                                newUnit.CostIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = newUnit.Cost.FirstOrDefault(x => x.Currency == "MXN").Amount - newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount;
                                            }
                                            else
                                            {
                                                newUnit.Cost.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)detail.customCost;
                                                newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = (decimal)detail.customCostNoIVA;
                                                newUnit.CostIVA.FirstOrDefault(x => x.Currency == "MXN").Amount = newUnit.Cost.FirstOrDefault(x => x.Currency == "MXN").Amount - newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "MXN").Amount;

                                                newUnit.Cost.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)detail.customCostAlt;
                                                newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount = (decimal)detail.customCostAltNoIVA;
                                                newUnit.CostIVA.FirstOrDefault(x => x.Currency == "USD").Amount = newUnit.Cost.FirstOrDefault(x => x.Currency == "USD").Amount - newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == "USD").Amount;
                                            }
                                        }
                                        else
                                        {
                                            newUnit.CustomCost = false;
                                            foreach (var c in newUnit.Cost)
                                            {
                                                c.Amount = Decimal.Round(newUnit.Quantity * newUnit.UnitCost.FirstOrDefault(x => x.Currency == c.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                                                newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == c.Currency).Amount = Math.Round(c.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                                                newUnit.CostIVA.FirstOrDefault(x => x.Currency == c.Currency).Amount = c.Amount - newUnit.CostNoIVA.FirstOrDefault(x => x.Currency == c.Currency).Amount;
                                            }
                                        }
                                    }
                                }

                                //asignación a total por cuenta contable
                                if (model.TotalAccAcc.Count(x => x.AccAccID == newUnit.AccAccID && x.AccAccArticle == newUnit.AccAccArticle) == 0)
                                {
                                    //agregar
                                    AuditCouponsModel.AccAccDetail newAccAccDet = new AuditCouponsModel.AccAccDetail();
                                    newAccAccDet.AccAccID = newUnit.AccAccID;
                                    newAccAccDet.AccAccNumber = newUnit.AccAccNumber;
                                    newAccAccDet.AccAccName = newUnit.AccAccName;
                                    newAccAccDet.AccAccArticle = newUnit.AccAccArticle;
                                    newAccAccDet.AccAccPriceType = newUnit.AccAccPriceType;
                                    newAccAccDet.Cost = GetDefaultListOfMoney(false);
                                    model.TotalAccAcc.Add(newAccAccDet);
                                }
                                //sum totals to TotalAccAcc
                                AuditCouponsModel.AccAccDetail AccAccDet = model.TotalAccAcc.FirstOrDefault(x => x.AccAccID == newUnit.AccAccID && x.AccAccArticle == newUnit.AccAccArticle);
                                foreach (var tot in AccAccDet.Cost)
                                {
                                    tot.Amount += newUnit.Cost.FirstOrDefault(c => c.Currency == tot.Currency).Amount;
                                }

                                newCou.Units.Add(newUnit);
                            }
                            newCou.Total = GetDefaultListOfMoney(false);
                            newCou.Cost = GetDefaultListOfMoney(false);

                            CouponDetail couponDetail = GetCouponDetail(coupon, DateTime.Today, DateTime.Today, true);

                            if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == "USD") != null)
                            {
                                exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == "USD").ExchangeRate;
                            }
                            else
                            {
                                exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, "USD", terminalID, coupon.tblPurchases.pointOfSaleID);
                                ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                                {
                                    Date = exchangeDate,
                                    CurrencyCode = "USD",
                                    ExchangeRate = exchangeRate
                                });
                            }
                            newCou.ExchangeRate = exchangeRate;

                            if (coupon.currencyID == 1)
                            {
                                //compra en dólares
                                newCou.Total.FirstOrDefault(t => t.Currency == "USD").Amount = Decimal.Round(couponDetail.Total.Amount, 2, MidpointRounding.AwayFromZero);
                                newCou.Total.FirstOrDefault(t => t.Currency == "MXN").Amount = Decimal.Round(couponDetail.Total.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            }
                            else
                            {
                                //compra en pesos
                                newCou.Total.FirstOrDefault(t => t.Currency == "MXN").Amount = Decimal.Round(couponDetail.Total.Amount, 2, MidpointRounding.AwayFromZero);
                                newCou.Total.FirstOrDefault(t => t.Currency == "USD").Amount = Decimal.Round(couponDetail.Total.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            }

                            //cost
                            //if (couponDetail.Cost.Currency == "USD")
                            //{
                            //    newCou.Cost.FirstOrDefault(c => c.Currency == "USD").Amount = couponDetail.Cost.Amount;
                            //    newCou.Cost.FirstOrDefault(c => c.Currency == "MXN").Amount = couponDetail.Cost.Amount * er.Rate;
                            //}
                            //else
                            //{
                            //    newCou.Cost.FirstOrDefault(c => c.Currency == "MXN").Amount = couponDetail.Cost.Amount;
                            //    newCou.Cost.FirstOrDefault(c => c.Currency == "USD").Amount = couponDetail.Cost.Amount / er.Rate;
                            //}
                            foreach (var unit in newCou.Units)
                            {
                                foreach (var c in unit.Cost)
                                {
                                    newCou.Cost.FirstOrDefault(x => x.Currency == c.Currency).Amount += c.Amount;
                                }
                            }

                            //add total to TotalServices
                            if (model.TotalServices.Count(x => x.ServiceID == newCou.ServiceID) == 0)
                            {
                                //agregar
                                AuditCouponsModel.ServiceDetail newSerDet = new AuditCouponsModel.ServiceDetail();
                                newSerDet.ServiceID = service.serviceID;
                                newSerDet.Service = service.service;
                                newSerDet.NumberOfCoupons = 0;
                                newSerDet.NumberOfUnits = 0;
                                newSerDet.Total = GetDefaultListOfMoney(false);
                                newSerDet.Cost = GetDefaultListOfMoney(false);
                                model.TotalServices.Add(newSerDet);
                            }
                            //sum totals to TotalServices
                            AuditCouponsModel.ServiceDetail serDet = model.TotalServices.FirstOrDefault(x => x.ServiceID == service.serviceID);
                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 || (coupon.serviceStatusID == 5 && coupon.cancelationCharge != null && coupon.cancelationCharge > 0))
                            {
                                serDet.NumberOfCoupons += 1;
                            }
                            serDet.NumberOfUnits += newCou.NumberOfUnits;
                            foreach (var tot in serDet.Total)
                            {
                                tot.Amount += Decimal.Round(newCou.Total.FirstOrDefault(c => c.Currency == tot.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                            }

                            foreach (var cos in serDet.Cost)
                            {
                                cos.Amount += Decimal.Round(newCou.Cost.FirstOrDefault(c => c.Currency == cos.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                            }

                            //add total coupon to total service
                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 || (coupon.serviceStatusID == 5 && coupon.cancelationCharge != null && coupon.cancelationCharge > 0))
                            {
                                newSeD.NumberOfCoupons += 1;
                                //cuenta de cupones en PoS
                                newPoS.NumberOfCoupons += 1;
                                newPoS.NumberOfUnits += newCou.NumberOfUnits;

                            }
                            newSeD.NumberOfUnits += newCou.NumberOfUnits;
                            foreach (var tot in newSeD.Total)
                            {
                                tot.Amount += Decimal.Round(newCou.Total.FirstOrDefault(c => c.Currency == tot.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                            }

                            foreach (var cos in newSeD.Cost)
                            {
                                cos.Amount += Decimal.Round(newCou.Cost.FirstOrDefault(c => c.Currency == cos.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                            }

                            newSeD.Coupons.Add(newCou);
                        }

                        //add total service to total per PoS
                        foreach (var tot in newPoS.Total)
                        {
                            tot.Amount += newSeD.Total.FirstOrDefault(c => c.Currency == tot.Currency).Amount;
                        }
                        foreach (var cos in newPoS.Cost)
                        {
                            cos.Amount += newSeD.Cost.FirstOrDefault(c => c.Currency == cos.Currency).Amount;
                        }

                        newPoS.Services.Add(newSeD);
                    }

                    //agregar PoS totals a invoice totals
                    foreach (var tot in model.Total)
                    {
                        tot.Amount += newPoS.Total.FirstOrDefault(c => c.Currency == tot.Currency).Amount;
                    }

                    foreach (var tot in model.Cost)
                    {
                        tot.Amount += newPoS.Cost.FirstOrDefault(c => c.Currency == tot.Currency).Amount;
                    }

                    //agregar PoS a invoice
                    model.PointsOfSale.Add(newPoS);
                }
            }

            model.PointsOfSale = model.PointsOfSale.Where(x => x.NumberOfCoupons > 0).OrderBy(o => o.PointOfSale).ToList();

            //totales

            foreach (var t in model.Total)
            {
                model.TotalNoIVA.FirstOrDefault(c => c.Currency == t.Currency).Amount = Math.Round(t.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                model.TotalIVA.FirstOrDefault(c => c.Currency == t.Currency).Amount = Math.Round(t.Amount - model.TotalNoIVA.FirstOrDefault(c => c.Currency == t.Currency).Amount, 2, MidpointRounding.AwayFromZero);
            }
            foreach (var x in model.Cost)
            {
                model.CostNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                model.CostIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount = Math.Round(x.Amount - model.CostNoIVA.FirstOrDefault(c => c.Currency == x.Currency).Amount, 2, MidpointRounding.AwayFromZero);
            }

            foreach (var ser in model.TotalServices)
            {
                ser.TotalNoIVA = GetDefaultListOfMoney(false);
                ser.TotalIVA = GetDefaultListOfMoney(false);
                foreach (var serTot in ser.Total)
                {
                    ser.TotalNoIVA.FirstOrDefault(c => c.Currency == serTot.Currency).Amount = Math.Round(serTot.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    ser.TotalIVA.FirstOrDefault(c => c.Currency == serTot.Currency).Amount = Math.Round(serTot.Amount - ser.TotalNoIVA.FirstOrDefault(c => c.Currency == serTot.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                }
                ser.CostNoIVA = GetDefaultListOfMoney(false);
                ser.CostIVA = GetDefaultListOfMoney(false);
                foreach (var serCos in ser.Cost)
                {
                    ser.CostNoIVA.FirstOrDefault(c => c.Currency == serCos.Currency).Amount = Math.Round(serCos.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    ser.CostIVA.FirstOrDefault(c => c.Currency == serCos.Currency).Amount = Math.Round(serCos.Amount - ser.CostNoIVA.FirstOrDefault(c => c.Currency == serCos.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                }
            }

            foreach (var acc in model.TotalAccAcc)
            {
                acc.CostNoIVA = GetDefaultListOfMoney(false);
                acc.CostIVA = GetDefaultListOfMoney(false);
                foreach (var accCos in acc.Cost)
                {
                    acc.CostNoIVA.FirstOrDefault(c => c.Currency == accCos.Currency).Amount = Math.Round(accCos.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    acc.CostIVA.FirstOrDefault(c => c.Currency == accCos.Currency).Amount = Math.Round(accCos.Amount - acc.CostNoIVA.FirstOrDefault(c => c.Currency == accCos.Currency).Amount, 2, MidpointRounding.AwayFromZero);
                }
            }

            //revisar acer
            var acerQ = (from a in db.tblTerminals
                         where a.terminalID == InvoiceQ.tblProviders.terminalID
                         select a.useCurrentCostER).FirstOrDefault();
            if (acerQ)
            {
                //PriceExchangeRate costExchangeRate = PriceDataModel.GetExchangeRateToApply((long)InvoiceQ.tblProviders.terminalID, InvoiceQ.providerID, InvoiceQ.dateSaved, 4);
                PriceExchangeRate costExchangeRate = PriceDataModel.GetExchangeRateToApply((long)InvoiceQ.tblProviders.terminalID, InvoiceQ.providerID, 0, InvoiceQ.dateSaved, 4);

                model.ExchangeRate = costExchangeRate.Rate.ToString();
            }

            return model;
        }

        public AuditCouponsModel SearchAuditInvoices(AuditCouponsModel.SearchInvoice model)
        {
            AuditCouponsModel audit = new AuditCouponsModel();
            audit.Invoices = new List<AuditCouponsModel.InvoiceItem>();

            DateTime date = (model.SearchInvoice_InvoiceDate != null ? DateTime.Parse(model.SearchInvoice_InvoiceDate) : DateTime.Today);
            DateTime dateNext = date.AddDays(1);

            List<string> folios2 = new List<string>();
            if (model.SearchInvoice_Folio != null)
            {
                string letter = model.SearchInvoice_Folio.Substring(0, 1);
                string numeric = model.SearchInvoice_Folio.Substring(1);
                folios2.Add(letter + numeric.PadLeft(5, '0') + "-A");
                folios2.Add(letter + numeric.PadLeft(7, '0') + "-A");
            }

            //var Invoices = from x in db.tblProvidersInvoices
            //               where (x.providerID == model.SearchInvoice_ProviderID
            //               || model.SearchInvoice_ProviderID == null)
            //               && x.tblProviders.terminalID == model.SearchInvoice_TerminalID
            //               && ((x.dateSaved >= date && x.dateSaved < dateNext) || model.SearchInvoice_InvoiceDate == null)
            //               && (x.invoiceNumber == model.SearchInvoice_Invoice.Trim() || model.SearchInvoice_Invoice == null)
            //               && (x.tblPurchases_Services.Count(y => folios2.Contains(y.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, y.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-")))) > 0 || model.SearchInvoice_Folio == null)
            //               select x;

            List<long> InvoiceIDs = new List<long>();
            if (model.SearchInvoice_Folio != null)
            {
                //búsqueda de factura por folio de cupón
                InvoiceIDs = (from d in db.tblPurchaseServiceDetails
                              join c in db.tblPurchases_Services
                              on d.purchase_ServiceID equals c.purchase_ServiceID
                              join p in db.tblPurchases
                              on c.purchaseID equals p.purchaseID
                              where p.terminalID == model.SearchInvoice_TerminalID
                              && folios2.Contains(d.coupon)
                              && c.providerInvoiceID != null
                              select (long)c.providerInvoiceID).ToList();
            }
            else if (model.SearchInvoice_InvoiceDate != null || (model.SearchInvoice_Invoice != null && model.SearchInvoice_Invoice.Trim() != ""))
            {
                //búsqueda de factura por fecha
                InvoiceIDs = (from x in db.tblProvidersInvoices
                              join p in db.tblProviders
                              on x.providerID equals p.providerID
                              where p.terminalID == model.SearchInvoice_TerminalID
                              && ((x.dateSaved >= date && x.dateSaved < dateNext) || model.SearchInvoice_InvoiceDate == null)
                              && (x.invoiceNumber == model.SearchInvoice_Invoice.Trim() || model.SearchInvoice_Invoice == null)
                              && (x.providerID == model.SearchInvoice_ProviderID || model.SearchInvoice_ProviderID == null)
                              select x.providerInvoiceID).ToList();
            }

            var Invoices = from x in db.tblProvidersInvoices
                           join p in db.tblProviders on x.providerID equals p.providerID
                           into x_p
                           from p in x_p.DefaultIfEmpty()
                           join u in db.tblUserProfiles
                           on x.savedByUserID equals u.userID
                           where InvoiceIDs.Contains(x.providerInvoiceID)
                           orderby x.dateSaved
                           select new
                           {
                               x.providerInvoiceID,
                               x.invoiceNumber,
                               x.dateSaved,
                               p.comercialName,
                               u.firstName,
                               u.lastName,
                               coupons = x.tblPurchases_Services.Count()
                           };

            if (Invoices.Count() > 0)
            {
                foreach (var invoice in Invoices)
                {
                    AuditCouponsModel.InvoiceItem item = new AuditCouponsModel.InvoiceItem();

                    item.ProviderInvoiceID = invoice.providerInvoiceID;
                    item.Invoice = invoice.invoiceNumber;
                    item.Date = invoice.dateSaved;
                    item.DateString = invoice.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                    item.SavedBy = invoice.firstName + " " + invoice.lastName;
                    item.Provider = invoice.comercialName;
                    item.NumberOfCoupons = invoice.coupons;

                    audit.Invoices.Add(item);
                }
            }
            //else
            //{

            //    if (model.SearchInvoice_Folio != null && model.SearchInvoice_Folio.Trim() != "")
            //    {
            //        //buscar el cupón
            //        var coupon = (from c in db.tblPurchases_Services
            //                      join p in db.tblPurchases on c.purchaseID equals p.purchaseID
            //                      where c.tblPurchaseServiceDetails.FirstOrDefault().coupon.Contains(model.SearchInvoice_Folio)
            //                      && p.terminalID == model.SearchInvoice_TerminalID
            //                      && c.providerInvoiceID == null
            //                      && c.audit == true
            //                      select new
            //                      {
            //                          c.audit,
            //                          c.auditDate,
            //                          c.auditedByUserID,
            //                          c.auditInvoice,
            //                          c.tblServices.providerID
            //                      }).FirstOrDefault();
            //        //obtener el número de factura
            //        if (coupon != null)
            //        {
            //            //crear una factura
            //            tblProvidersInvoices invoice = new tblProvidersInvoices();
            //            invoice.invoiceNumber = coupon.auditInvoice.Trim();
            //            invoice.dateSaved = coupon.auditDate ?? DateTime.Now;
            //            invoice.savedByUserID = (Guid)coupon.auditedByUserID;
            //            invoice.providerID = coupon.providerID;

            //            db.tblProvidersInvoices.AddObject(invoice);
            //            db.SaveChanges();

            //            //agregarle todos los cupones con la misma factura
            //            var relatedCoupons = from r in db.tblPurchases_Services
            //                                 join p in db.tblPurchases
            //                                 on r.purchaseID equals p.purchaseID
            //                                 into r_p
            //                                 from p in r_p.DefaultIfEmpty()
            //                                 where r.auditInvoice == invoice.invoiceNumber
            //                                 && p.terminalID == model.SearchInvoice_TerminalID
            //                                 && r.providerInvoiceID == null
            //                                 select r;

            //            foreach (var rc in relatedCoupons)
            //            {
            //                rc.providerInvoiceID = invoice.providerInvoiceID;
            //            }
            //            db.SaveChanges();

            //            AuditCouponsModel.InvoiceItem item = new AuditCouponsModel.InvoiceItem();

            //            item.ProviderInvoiceID = invoice.providerInvoiceID;
            //            item.Invoice = invoice.invoiceNumber;
            //            item.Date = invoice.dateSaved;
            //            item.DateString = invoice.dateSaved.ToString("yyyy-MM-dd");
            //            tblUserProfiles profile = invoice.aspnet_Users.tblUserProfiles.FirstOrDefault();
            //            item.SavedBy = profile.firstName + " " + profile.lastName;
            //            item.Provider = invoice.tblProviders.comercialName;
            //            item.NumberOfCoupons = invoice.tblPurchases_Services.Count();

            //            audit.Invoices.Add(item);
            //        }
            //    }
            //    else if (model.SearchInvoice_Invoice != null && model.SearchInvoice_Invoice.Trim() != "")
            //    {
            //        //buscar el cupón
            //        var coupons = from c in db.tblPurchases_Services
            //                      join p in db.tblPurchases on c.purchaseID equals p.purchaseID
            //                      where c.auditInvoice == model.SearchInvoice_Invoice.Trim()
            //                      && p.terminalID == model.SearchInvoice_TerminalID
            //                      && c.providerInvoiceID == null
            //                      && c.audit == true
            //                      select c;
            //        //obtener el número de factura
            //        if (coupons.Count() > 0)
            //        {
            //            //crear una factura
            //            tblProvidersInvoices invoice = new tblProvidersInvoices();
            //            invoice.invoiceNumber = coupons.FirstOrDefault().auditInvoice.Trim();
            //            invoice.dateSaved = coupons.FirstOrDefault().auditDate ?? DateTime.Now;
            //            invoice.savedByUserID = (Guid)coupons.FirstOrDefault().auditedByUserID;
            //            invoice.providerID = coupons.FirstOrDefault().tblServices.providerID;

            //            db.tblProvidersInvoices.AddObject(invoice);
            //            db.SaveChanges();

            //            //agregarle todos los cupones con la misma factura
            //            foreach (var rc in coupons)
            //            {
            //                rc.providerInvoiceID = invoice.providerInvoiceID;
            //            }
            //            db.SaveChanges();

            //            AuditCouponsModel.InvoiceItem item = new AuditCouponsModel.InvoiceItem();

            //            item.ProviderInvoiceID = invoice.providerInvoiceID;
            //            item.Invoice = invoice.invoiceNumber;
            //            item.Date = invoice.dateSaved;
            //            item.DateString = invoice.dateSaved.ToString("yyyy-MM-dd");
            //            tblUserProfiles profile = invoice.aspnet_Users.tblUserProfiles.FirstOrDefault();
            //            item.SavedBy = profile.firstName + " " + profile.lastName;
            //            item.Provider = invoice.tblProviders.comercialName;
            //            item.NumberOfCoupons = invoice.tblPurchases_Services.Count();

            //            audit.Invoices.Add(item);
            //        }
            //    }
            //}

            return audit;
        }

        public ProductionModel.ExternalSales GetExternalSales(ProductionModel.SearchProduction model)
        {
            ProductionModel.ExternalSales view = new ProductionModel.ExternalSales();
            List<ProductionModel.MinimalPrice> MinimalPrices = new List<ProductionModel.MinimalPrice>();
            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));

            view.FromDate = model.Search_I_FromDate;
            view.ToDate = model.Search_F_ToDate;
            view.Terminal = db.tblTerminals.Single(x => x.terminalID == model.Search_TerminalID).terminal;
            bool existCatalogIncome = (db.tblCatalogs_Terminals.Where(x => x.terminalID == model.Search_TerminalID && x.tblCatalogs.catalog == "Ingresos").Count() > 0 ? true : false);
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    view.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                view.PointsOfSale = "All";
            }

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            int providersLength = 0;
            int[] providers = new int[] { };
            if (model.Search_ProviderID != null)
            {
                providersLength = model.Search_ProviderID.Length;
                if (providersLength == 1 && model.Search_ProviderID[0] == 0)
                {
                    providersLength = 0;
                }
                else
                {
                    providers = model.Search_ProviderID.ToArray();
                }
            }

            int servicesLength = 0;
            long[] services = new long[] { };
            if (model.Search_ServiceID != null)
            {
                services = model.Search_ServiceID.ToArray();
                servicesLength = model.Search_ServiceID.Length;
            }

            int[] summary = new int[] { };
            int summaryLength = 0;
            if (model.Search_Summary != null)
            {
                summary = model.Search_Summary.ToArray();
                summaryLength = model.Search_Summary.Length;
            }

            var exchangeRates = from r in db.tblExchangeRates
                                where r.exchangeRateTypeID == 1
                                && r.terminalID == model.Search_TerminalID
                                && r.providerID == null
                                && r.fromCurrencyID == 1
                                && r.toCurrencyID == 2
                                && ((r.permanent_ && r.fromDate < tDate)
                                || (r.permanent_ != true && r.fromDate <= tDate && r.toDate >= fDate))
                                select r;

            IOrderedQueryable<tblPurchases_Services> Coupons;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {

                Coupons = from c in db.tblPurchases_Services
                          where (
                          (c.confirmationDateTime >= fDate
                          && c.confirmationDateTime < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.confirmationDateTime < fDate
                          && c.cancelationDateTime >= fDate
                          && c.cancelationDateTime < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (providers.Contains(c.tblServices.providerID) || providersLength == 0)
                          && (services.Contains(c.serviceID) || servicesLength == 0)
                          && c.tblPurchases.terminalID == model.Search_TerminalID
                          && c.tblPurchases.isTest != true
                          && c.tblPurchases.purchaseStatusID < 5
                          orderby c.cancelationDateTime, c.confirmationDateTime
                          select c;

                var purchasesNumber = (from x in Coupons
                                       where x.confirmationDateTime >= fDate
                                       && x.confirmationDateTime < tDate
                                       select x.purchaseID).Distinct().Count();

                view.NumberOfPurchases = purchasesNumber;

                var couponsNumber = (from x in Coupons
                                     where x.confirmationDateTime >= fDate
                                     && x.confirmationDateTime < tDate
                                     select x.purchase_ServiceID).Distinct().Count();

                view.NumberOfCoupons = couponsNumber;
                scope.Complete();
            }

            view.Coupons = new List<ProductionModel.ExternalCouponModel>();

            foreach (var coupon in Coupons)
            {
                DateTime currentDate = coupon.confirmationDateTime ?? coupon.dateSaved;
                tblExchangeRates exchangeRateToApply = null;

                exchangeRateToApply = (from x in exchangeRates
                                       where ((x.permanent_ && x.fromDate < currentDate)
                                       || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                       && x.tblExchangeRates_PointsOfSales.Count(
                                            p => p.pointOfSaleID == coupon.tblPurchases.pointOfSaleID
                                            && p.dateAdded <= currentDate
                                            && (p.dateDeleted == null || p.dateDeleted > currentDate)
                                        ) > 0
                                       orderby x.fromDate descending
                                       select x).FirstOrDefault();

                if (exchangeRateToApply == null)
                {
                    exchangeRateToApply = (from x in exchangeRates
                                           where ((x.permanent_ && x.fromDate < currentDate)
                                           || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                           && x.tblExchangeRates_PointsOfSales.Count() == 0
                                           orderby x.fromDate descending
                                           select x).FirstOrDefault();

                    if (exchangeRateToApply == null)
                    {
                        exchangeRateToApply = (from r in db.tblExchangeRates
                                               where r.exchangeRateTypeID == 1
                                               && r.terminalID == coupon.tblPurchases.terminalID
                                               && r.providerID == null
                                               && r.fromCurrencyID == coupon.currencyID
                                               && r.toCurrencyID == 2
                                               && r.fromDate <= tDate
                                               && r.tblExchangeRates_PointsOfSales.Count() == 0
                                               orderby r.fromDate descending, r.dateSaved descending
                                               select r).FirstOrDefault();
                    }
                }

                //List<ComputedPriceModel> Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                List<ComputedPriceModel> Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);

                foreach (var unit in coupon.tblPurchaseServiceDetails)
                {
                    ProductionModel.ExternalCouponModel detail = new ProductionModel.ExternalCouponModel();
                    detail.PointOfSale = coupon.tblPurchases.tblPointsOfSale.shortName + " - " + coupon.tblPurchases.tblPointsOfSale.pointOfSale;
                    tblUserProfiles profile = db.tblUserProfiles.FirstOrDefault(x => x.userID == coupon.confirmedByUserID);
                    detail.SalesAgent = profile.firstName + " " + profile.lastName;
                    detail.Folio = unit.coupon;
                    detail.Customer = coupon.tblPurchases.tblLeads.firstName + " " + coupon.tblPurchases.tblLeads.lastName;
                    detail.ConfirmationDate = coupon.confirmationDateTime.Value.ToString("yyyy-MM-dd");
                    detail.CancelationDate = (coupon.cancelationDateTime != null ? coupon.cancelationDateTime.Value.ToString("yyyy-MM-dd") : "");
                    detail.Service = coupon.tblServices.service;
                    detail.UnitsQty = unit.quantity;
                    tblPriceUnits currentUnit = PriceDataModel.GetUnit((long)unit.netPriceID, coupon.tblPurchases.culture);
                    detail.Units = currentUnit.unit + " (" + currentUnit.additionalInfo + ")";
                    detail.DealPrice = GetDefaultListOfMoney(false);
                    detail.MinimalPrice = GetDefaultListOfMoney(false);
                    detail.UnitDealPrice = GetDefaultListOfMoney(false);
                    detail.UnitMinimalPrice = GetDefaultListOfMoney(false);
                    detail.UnitDifference = GetDefaultListOfMoney(false);

                    //int minimalPriceID = 32;
                    //if (coupon.promoID == 25)
                    //{
                    //    minimalPriceID = 35;
                    //}
                    //else if (coupon.promoID == 26)
                    //{
                    //    minimalPriceID = 38;
                    //}

                    int minimalPriceID = 0;
                    if (coupon.promoID != null)
                    {
                        if (MinimalPrices.FirstOrDefault(x => x.PromoID == coupon.promoID) != null)
                        {
                            minimalPriceID = MinimalPrices.FirstOrDefault(x => x.PromoID == coupon.promoID).PriceTypeID;
                        }
                        else
                        {
                            //mínimo con Promo
                            var MinPromo = (from p in db.tblPriceTypes
                                            where p.promoID == coupon.promoID
                                            && p.priceType.Contains("inimal")
                                            select p.priceTypeID).FirstOrDefault();

                            minimalPriceID = MinPromo;
                        }
                    }
                    if (minimalPriceID == 0)
                    {
                        if (MinimalPrices.FirstOrDefault(x => x.PromoID == coupon.promoID) != null)
                        {
                            minimalPriceID = MinimalPrices.FirstOrDefault(x => x.PromoID == coupon.promoID).PriceTypeID;
                        }
                        else
                        {
                            //mínimo de terminal
                            var MinPriceType = (from p in db.tblServices_PriceTypes
                                                where p.terminalID == model.Search_TerminalID
                                                && p.tblPriceTypes.priceType.Contains("inimal")
                                                select p.priceTypeID).FirstOrDefault();

                            minimalPriceID = MinPriceType;
                        }
                    }
                    if (minimalPriceID != 0)
                    {
                        if (MinimalPrices.FirstOrDefault(x => x.PriceTypeID == minimalPriceID) == null)
                        {
                            MinimalPrices.Add(new ProductionModel.MinimalPrice()
                            {
                                PromoID = coupon.promoID,
                                PriceTypeID = minimalPriceID
                            });
                        }
                    }

                    detail.Status = coupon.tblPurchaseServiceStatus.purchaseServiceStatus;
                    if (coupon.confirmationDateTime >= fDate && coupon.confirmationDateTime < tDate && (coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && coupon.cancelationDateTime >= fDate && coupon.cancelationDateTime < tDate)
                    {

                    }
                    else
                    {
                        if (coupon.currencyID == 1)
                        {
                            //venta en dólares
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = (unit.dealPrice != null ? (decimal)unit.dealPrice : (decimal)unit.customPrice);
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = decimal.Round(detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount * exchangeRateToApply.exchangeRate, 2);

                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = Prices.FirstOrDefault(x => x.PriceTypeID == minimalPriceID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price;
                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = decimal.Round(detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount * exchangeRateToApply.exchangeRate, 2);

                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = unit.quantity * detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount;
                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = decimal.Round(detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount * exchangeRateToApply.exchangeRate, 2);

                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = unit.quantity * detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount;
                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = decimal.Round(detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount * exchangeRateToApply.exchangeRate, 2);

                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "USD").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount - detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount;
                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount - detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount;
                        }
                        else
                        {
                            //venta en pesos
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = (unit.dealPrice != null ? (decimal)unit.dealPrice : (decimal)unit.customPrice);
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = decimal.Round(detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount / exchangeRateToApply.exchangeRate, 2);

                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = Prices.FirstOrDefault(x => x.PriceTypeID == minimalPriceID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price;
                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = decimal.Round(detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount / exchangeRateToApply.exchangeRate, 2);

                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = unit.quantity * detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount;
                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = decimal.Round(detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount / exchangeRateToApply.exchangeRate, 2);

                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = unit.quantity * detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount;
                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = decimal.Round(detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount / exchangeRateToApply.exchangeRate, 2);

                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount - detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount;
                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "USD").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount - detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount;
                        }

                        if (coupon.confirmationDateTime < fDate && (coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && coupon.cancelationDateTime >= fDate && coupon.cancelationDateTime < tDate)
                        {
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = detail.DealPrice.FirstOrDefault(x => x.Currency == "USD").Amount * -1;
                            detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.DealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount * -1;

                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = detail.MinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount * -1;
                            detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.MinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount * -1;

                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "USD").Amount * -1;
                            detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.UnitDealPrice.FirstOrDefault(x => x.Currency == "MXN").Amount * -1;

                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount = detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "USD").Amount * -1;
                            detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.UnitMinimalPrice.FirstOrDefault(x => x.Currency == "MXN").Amount * -1;

                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "USD").Amount = detail.UnitDifference.FirstOrDefault(x => x.Currency == "USD").Amount * -1;
                            detail.UnitDifference.FirstOrDefault(x => x.Currency == "MXN").Amount = detail.UnitDifference.FirstOrDefault(x => x.Currency == "MXN").Amount * -1;
                        }
                    }

                    view.Coupons.Add(detail);
                }
            }

            return view;
        }

        public ProductionModel.CouponSales GetCouponsList(ProductionModel.SearchProduction model)
        {

            ProductionModel.CouponSales view = new ProductionModel.CouponSales();
            List<CouponReportModel> list = new List<CouponReportModel>();


            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));

            view.FromDate = model.Search_I_FromDate;
            view.ToDate = model.Search_F_ToDate;
            view.Terminal = db.tblTerminals.Single(x => x.terminalID == model.Search_TerminalID).terminal;
            bool existCatalogIncome = (db.tblCatalogs_Terminals.Where(x => x.terminalID == model.Search_TerminalID && x.tblCatalogs.catalog == "Ingresos").Count() > 0 ? true : false);
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    view.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                view.PointsOfSale = "All";
            }
            view.GrandTotal = GetDefaultListOfMoney();
            view.GrandTotalNoIVA = GetDefaultListOfMoney();
            view.TotalCost = GetDefaultListOfMoney();
            view.TotalCostNoIVA = GetDefaultListOfMoney();
            view.TotalUtility = GetDefaultListOfMoney();
            view.TotalUtilityNoIVA = GetDefaultListOfMoney();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            int providersLength = 0;
            int[] providers = new int[] { };
            if (model.Search_ProviderID != null)
            {
                providersLength = model.Search_ProviderID.Length;
                if (providersLength == 1 && model.Search_ProviderID[0] == 0)
                {
                    providersLength = 0;
                }
                else
                {
                    providers = model.Search_ProviderID.ToArray();
                }
            }

            int servicesLength = 0;
            long[] services = new long[] { };
            if (model.Search_ServiceID != null)
            {
                services = model.Search_ServiceID.ToArray();
                servicesLength = model.Search_ServiceID.Length;
            }

            int[] summary = new int[] { };
            int summaryLength = 0;
            if (model.Search_Summary != null)
            {
                summary = model.Search_Summary.ToArray();
                summaryLength = model.Search_Summary.Length;
            }

            view.Columns = model.Search_Columns;
            view.Summaries = new List<ProductionModel.Summary>();
            view.Summaries2 = new List<ProductionModel.Summary2>();
            IOrderedQueryable<tblPurchases_Services> Coupons;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {

                Coupons = from c in db.tblPurchases_Services
                          where (
                          (c.confirmationDateTime >= fDate
                          && c.confirmationDateTime < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.confirmationDateTime < fDate
                          && c.cancelationDateTime >= fDate
                          && c.cancelationDateTime < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (providers.Contains(c.tblServices.providerID) || providersLength == 0)
                          && (services.Contains(c.serviceID) || servicesLength == 0)
                          && c.tblPurchases.terminalID == model.Search_TerminalID
                          && c.tblPurchases.isTest != true
                          && c.tblPurchases.purchaseStatusID < 5
                          orderby c.cancelationDateTime, c.confirmationDateTime
                          select c;

                var purchasesNumber = (from x in Coupons
                                       where x.confirmationDateTime >= fDate
                                       && x.confirmationDateTime < tDate
                                       select x.purchaseID).Distinct().Count();

                view.NumberOfPurchases = purchasesNumber;

                var couponsNumber = (from x in Coupons
                                     where x.confirmationDateTime >= fDate
                                     && x.confirmationDateTime < tDate
                                     select x.purchase_ServiceID).Distinct().Count();

                view.NumberOfCoupons = couponsNumber;
                scope.Complete();
            }

            foreach (var coupon in Coupons)
            {
                int couponPriceTypes = coupon.tblPurchaseServiceDetails.Select(x => x.priceTypeID).Distinct().Count();
                foreach (int ptid in coupon.tblPurchaseServiceDetails.Select(x => x.priceTypeID).Distinct())
                {
                    CouponReportModel detail = new CouponReportModel();
                    CouponDetail couponDetail = new CouponDetail();
                    if (couponPriceTypes > 1)
                    {
                        couponDetail = GetCouponDetail(coupon, fDate, tDate, true, ptid);
                    }
                    else
                    {
                        couponDetail = GetCouponDetail(coupon, fDate, tDate, true);
                    }
                    detail.CouponID = couponDetail.PurchaseServiceID;
                    detail.PurchaseID = couponDetail.PurchaseID;
                    detail.Folio = couponDetail.Folio;
                    detail.CouponReference = couponDetail.CouponReference;
                    detail.DateSaved = coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                    detail.ConfirmationDate = (couponDetail.ConfirmationDate != null ? couponDetail.ConfirmationDate.Value.ToString("yyyy-MM-dd") : "");
                    detail.CancelationDate = (couponDetail.CancelationDate != null ? couponDetail.CancelationDate.Value.ToString("yyyy-MM-dd") : "");
                    detail.SalesAgent = couponDetail.SalesAgent;
                    detail.ReservationsAgent = couponDetail.ReservationsAgent;
                    detail.UnitsQty = couponDetail.UnitsQty;
                    detail.PointOfSale = couponDetail.PointOfSale;
                    if (existCatalogIncome)
                    {
                        var catIngreso = coupon.tblServices.tblCategories_Services.FirstOrDefault(c => c.tblCategories.tblCatalogs.catalog == "Ingresos");
                        if (catIngreso != null)
                        {
                            detail.Category = catIngreso.tblCategories.category;
                        }
                    }
                    else
                    {
                        var catIngreso = coupon.tblServices.tblCategories_Services.FirstOrDefault();
                        if (catIngreso != null)
                        {
                            detail.Category = catIngreso.tblCategories.category;
                        }
                    }
                    detail.Service = couponDetail.Service;
                    detail.ServiceDate = coupon.serviceDateTime.ToString("yyyy-MM-dd hh:mm:ss tt");
                    detail.Units = couponDetail.Units;
                    detail.Provider = couponDetail.Provider;
                    detail.ProviderAvanceID = couponDetail.ProviderAvanceID;
                    detail.Customer = couponDetail.Customer;
                    detail.Culture = (coupon.tblPurchases.culture == "es-MX" ? "Español" : "English");
                    detail.PriceType = couponDetail.PriceType;
                    detail.Total = couponDetail.Total;
                    detail.TotalNoIVA = couponDetail.TotalNoIVA;
                    detail.CustomCost = couponDetail.CustomCost;
                    detail.Cost = couponDetail.Cost;
                    detail.CostNoIVA = couponDetail.CostNoIVA;
                    detail.Utility = couponDetail.Utility;
                    detail.UtilityNoIVA = couponDetail.UtilityNoIVA;

                    detail.Status = couponDetail.Status;
                    detail.Promo = couponDetail.Promo;
                    detail.AuthCode = couponDetail.AuthCode;

                    view.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                    view.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.TotalNoIVA.Amount;
                    view.TotalCost.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Cost.Amount;
                    view.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.CostNoIVA.Amount;
                    view.TotalUtility.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Utility.Amount;
                    view.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.UtilityNoIVA.Amount;

                    list.Add(detail);

                    for (var i = 0; i < summaryLength; i++)
                    {
                        switch (int.Parse(summary[i].ToString()))
                        {
                            case 1: //Point of Sale
                                if (view.Summaries.Count(x => x.SummaryID == 1 && x.Concept == detail.PointOfSale) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();

                                    newSummary.SummaryID = 1;
                                    newSummary.Concept = detail.PointOfSale;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);

                                    view.Summaries.Add(newSummary);


                                }
                                var _sum = view.Summaries.FirstOrDefault(x => x.SummaryID == 1 && x.Concept == detail.PointOfSale);
                                _sum.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!_sum.Folios.Contains(detail.Folio))
                                {
                                    _sum.Folios.Add(detail.Folio);
                                    _sum.Quantity += 1;
                                }
                                break;


                            case 2: //Agent
                                if (view.Summaries.Count(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                    newSummary.SummaryID = 2;
                                    newSummary.Concept = detail.SalesAgent;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);
                                    view.Summaries.Add(newSummary);

                                }
                                var _sum2 = view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent);
                                _sum2.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum2.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum2.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum2.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum2.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum2.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Folios.Contains(detail.Folio))
                                {
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Folios.Add(detail.Folio);
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Quantity += 1;
                                }
                                break;


                            case 3: //Unit
                                foreach (var _unit in coupon.tblPurchaseServiceDetails.Where(x => x.priceTypeID == ptid))
                                {
                                    tblPriceUnits currentUnit = PriceDataModel.GetUnit((long)_unit.netPriceID, detail.Culture);
                                    if (view.Summaries.Count(x => x.SummaryID == 3 && x.Concept == currentUnit.unit + (currentUnit.additionalInfo != null ? "(" + currentUnit.additionalInfo + ")" : "") && x.QuantityConcept == _unit.tblPrices1.tblPriceTypes.priceType) == 0)
                                    {
                                        ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                        newSummary.SummaryID = 3;
                                        newSummary.Concept = currentUnit.unit + (currentUnit.additionalInfo != null ? "(" + currentUnit.additionalInfo + ")" : "");
                                        newSummary.Quantity = 0;
                                        newSummary.QuantityConcept = _unit.tblPrices1.tblPriceTypes.priceType;
                                        newSummary.Folios = new List<string>();
                                        view.Summaries.Add(newSummary);
                                    }
                                    var _sum3 = view.Summaries.FirstOrDefault(x => x.SummaryID == 3 && x.Concept == currentUnit.unit + (currentUnit.additionalInfo != null ? "(" + currentUnit.additionalInfo + ")" : "") && x.QuantityConcept == _unit.tblPrices1.tblPriceTypes.priceType);
                                    _sum3.Quantity += _unit.quantity;
                                }




                                break;
                            case 4: //Culture
                                if (view.Summaries.Count(x => x.SummaryID == 4 && x.Concept == detail.Culture) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                    newSummary.SummaryID = 4;
                                    newSummary.Concept = detail.Culture;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);
                                    view.Summaries.Add(newSummary);

                                }


                                var _sum4 = view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture);
                                _sum4.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum4.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum4.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum4.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum4.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum4.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Folios.Contains(detail.Folio))
                                {
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Folios.Add(detail.Folio);
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Quantity += 1;
                                }
                                break;


                            //Summary by Price Type by Point of Sale
                            case 5:

                                //condicion en caso de que no este una tabla creada
                                if (view.Summaries2.Count(x => x.SummaryID == 5) == 0)
                                {
                                    //agregar tabla con datos 
                                    ProductionModel.Summary2 newSummary = new ProductionModel.Summary2();
                                    newSummary.SummaryID = 5;
                                    newSummary.GroupsList = new List<ProductionModel.Summary2.LogGroup>();
                                    newSummary.PriceTypes = GetListOfPriceTypes(coupon.tblPurchases.terminalID, false, 0, fDate, tDate);
                                    newSummary.SalesbyDay = new List<ProductionModel.Summary2.TotalsByDay>();
                                    newSummary.GrandTotalByGroups = new List<ProductionModel.Summary2.Group>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.TotalType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                    view.Summaries2.Add(newSummary);
                                }

                                var tabla = view.Summaries2.FirstOrDefault(x => x.SummaryID == 5);
                                if (tabla.GroupsList.Count() == 0)
                                {
                                    var PointOfSale = (from pos in Coupons
                                                       select new
                                                       {
                                                           pos.tblPurchases.tblPointsOfSale.pointOfSaleID,
                                                           pos.tblPurchases.tblPointsOfSale.pointOfSale,
                                                           pos.tblPurchases.tblPointsOfSale.shortName

                                                       }).Distinct();
                                    foreach (var value in PointOfSale)
                                    {
                                        ProductionModel.Summary2.LogGroup newSummary = new ProductionModel.Summary2.LogGroup();
                                        newSummary.GroupID = value.pointOfSaleID;
                                        newSummary.GroupName = value.shortName + " - " + value.pointOfSale;
                                        tabla.GroupsList.Add(newSummary);
                                    }
                                }

                                DateTime couponDate = (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 ? coupon.confirmationDateTime.Value.Date : (coupon.cancelationDateTime.Value.Date >= tDate ? coupon.confirmationDateTime.Value.Date : coupon.cancelationDateTime.Value.Date));


                                #region"Fila Por Fecha"
                                if (tabla.SalesbyDay.Count(x => x.Date == couponDate) == 0)
                                {
                                    ProductionModel.Summary2.TotalsByDay totalByGroup = new ProductionModel.Summary2.TotalsByDay();
                                    totalByGroup.Date = couponDate;
                                    totalByGroup.Groups = new List<ProductionModel.Summary2.Group>();
                                    foreach (var x in tabla.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        totalByGroup.Groups.Add(newGroup);
                                        totalByGroup.TotalDayPriceType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var z in tabla.PriceTypes)
                                        {
                                            ProductionModel.Summary2.TotalByPriceType newTotal = new ProductionModel.Summary2.TotalByPriceType();
                                            newTotal.PriceTypeID = z.PriceTypeID;
                                            newTotal.TotalSales = GetDefaultListOfMoney(false);
                                            totalByGroup.TotalDayPriceType.Add(newTotal);
                                        }
                                    }
                                    totalByGroup.TotalByDay = GetDefaultListOfMoney(false);
                                    tabla.SalesbyDay.Add(totalByGroup);
                                }
                                #endregion
                                #region"GrandTotal
                                if (tabla.GrandTotalByGroups.Count() == 0)
                                {
                                    foreach (var x in tabla.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        tabla.GrandTotalByGroups.Add(newGroup);
                                    }
                                }

                                #endregion
                                #region"Total by Type Price"
                                if (tabla.TotalType.Count() == 0)
                                {
                                    foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                    {
                                        ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                        TypePrice.PriceTypeID = y.PriceTypeID;
                                        TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                        tabla.TotalType.Add(TypePrice);
                                    }
                                }
                                #endregion



                                var filaSales = tabla.SalesbyDay.FirstOrDefault(x => x.Date == couponDate);

                                //A agregar Cantidades de total de ventas por tipo de precio 
                                filaSales.Groups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.tblPurchases.pointOfSaleID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //B agrega el subtotal segun los totales por tipo de precio 
                                filaSales.Groups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.tblPurchases.pointOfSaleID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                // agregar suma de tipos de precio
                                filaSales.TotalDayPriceType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                         .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                         .Amount += detail.Total.Amount;
                                //C agrega el total por día                               
                                filaSales.TotalByDay.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //D agrega el total por grupos segun los puntos de venta
                                tabla.GrandTotalByGroups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.tblPurchases.pointOfSaleID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //E agrega el total por punto de venta
                                tabla.GrandTotalByGroups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.tblPurchases.pointOfSaleID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //F agregar el total 
                                tabla.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                // totales por tipo de precio
                                tabla.TotalType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                break;

                            //Tabla con tipos de precio
                            //Summary by Price Type by Agent
                            #region"Price Types by Agent"
                            case 6:
                                if (view.Summaries2.Count(x => x.SummaryID == 6) == 0)
                                {
                                    ProductionModel.Summary2 newSummary = new ProductionModel.Summary2();
                                    newSummary.SummaryID = 6;
                                    newSummary.GroupsList = new List<ProductionModel.Summary2.LogGroup>();
                                    newSummary.PriceTypes = GetListOfPriceTypes(coupon.tblPurchases.terminalID, false, 0, fDate, tDate);
                                    newSummary.SalesbyDay = new List<ProductionModel.Summary2.TotalsByDay>();
                                    newSummary.GrandTotalByGroups = new List<ProductionModel.Summary2.Group>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.TotalType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                    view.Summaries2.Add(newSummary);
                                }
                                //id y nombre del vendedor
                                var tablaVendedor = view.Summaries2.FirstOrDefault(x => x.SummaryID == 6);
                                if (tablaVendedor.GroupsList.Count() == 0)
                                {
                                    var UserIDs = (from c in Coupons
                                                   select c.confirmedByUserID).Distinct().ToArray();
                                    var UserData = from y in db.tblUserProfiles
                                                   where UserIDs.Contains(y.userID)
                                                   select new
                                                   {
                                                       y.userID,
                                                       y.firstName,
                                                       y.lastName
                                                   };
                                    foreach (var y in UserData)
                                    {
                                        ProductionModel.Summary2.LogGroup newGroup = new ProductionModel.Summary2.LogGroup();
                                        newGroup.GroupID = y.userID;
                                        newGroup.GroupName = y.firstName + "  " + y.lastName;
                                        tablaVendedor.GroupsList.Add(newGroup);
                                    }
                                }

                                DateTime couponDate2 = (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 ? coupon.confirmationDateTime.Value.Date : (coupon.cancelationDateTime.Value.Date >= tDate ? coupon.confirmationDateTime.Value.Date : coupon.cancelationDateTime.Value.Date));
                                if (tablaVendedor.SalesbyDay.Count(x => x.Date == couponDate2) == 0)
                                {
                                    ProductionModel.Summary2.TotalsByDay totalByGroup = new ProductionModel.Summary2.TotalsByDay();
                                    totalByGroup.Date = couponDate2;
                                    totalByGroup.Groups = new List<ProductionModel.Summary2.Group>();
                                    foreach (var x in tablaVendedor.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        totalByGroup.Groups.Add(newGroup);
                                        totalByGroup.TotalDayPriceType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var z in tablaVendedor.PriceTypes)
                                        {
                                            ProductionModel.Summary2.TotalByPriceType newTotal = new ProductionModel.Summary2.TotalByPriceType();
                                            newTotal.PriceTypeID = z.PriceTypeID;
                                            newTotal.TotalSales = GetDefaultListOfMoney(false);
                                            totalByGroup.TotalDayPriceType.Add(newTotal);
                                        }
                                    }
                                    totalByGroup.TotalByDay = GetDefaultListOfMoney(false);
                                    tablaVendedor.SalesbyDay.Add(totalByGroup);
                                }

                                if (tablaVendedor.GrandTotalByGroups.Count() == 0)
                                {
                                    foreach (var x in tablaVendedor.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        tablaVendedor.GrandTotalByGroups.Add(newGroup);
                                    }
                                }

                                #region"Total by Type Price"
                                if (tablaVendedor.TotalType.Count() == 0)
                                {
                                    foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                    {
                                        ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                        TypePrice.PriceTypeID = y.PriceTypeID;
                                        TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                        tablaVendedor.TotalType.Add(TypePrice);
                                    }
                                }
                                #endregion

                                var fila = tablaVendedor.SalesbyDay.FirstOrDefault(x => x.Date == couponDate2);
                                //A agregar Cantidades de total de ventas por tipo de precio 
                                fila.Groups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                   .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                   .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                   .Amount += detail.Total.Amount;
                                //B agrega el subtotal segun los totales por tipo de precio 
                                fila.Groups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                // agregar suma de tipos de precio
                                fila.TotalDayPriceType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                         .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                         .Amount += detail.Total.Amount;
                                //C agrega el total por día 
                                fila.TotalByDay.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //D agrega el total por grupos segun los puntos de venta
                                tablaVendedor.GrandTotalByGroups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //E agrega el total por punto de venta
                                tablaVendedor.GrandTotalByGroups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                tablaVendedor.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                // totales por tipo de precio
                                tablaVendedor.TotalType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;

                                break;
                                #endregion

                        }
                    }
                }
            }
            view.Coupons = list;

            return view;

        }

        public ProductionModel.CouponSales GetCouponsListFromCache(ProductionModel.SearchProduction model)
        {

            ProductionModel.CouponSales view = new ProductionModel.CouponSales();
            List<CouponReportModel> list = new List<CouponReportModel>();


            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));

            view.FromDate = model.Search_I_FromDate;
            view.ToDate = model.Search_F_ToDate;
            view.Terminal = db.tblTerminals.Single(x => x.terminalID == model.Search_TerminalID).terminal;
            bool existCatalogIncome = (db.tblCatalogs_Terminals.Where(x => x.terminalID == model.Search_TerminalID && x.tblCatalogs.catalog == "Ingresos").Count() > 0 ? true : false);
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    view.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                view.PointsOfSale = "All";
            }
            view.GrandTotal = GetDefaultListOfMoney();
            view.GrandTotalNoIVA = GetDefaultListOfMoney();
            view.TotalCost = GetDefaultListOfMoney();
            view.TotalCostNoIVA = GetDefaultListOfMoney();
            view.TotalUtility = GetDefaultListOfMoney();
            view.TotalUtilityNoIVA = GetDefaultListOfMoney();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            int providersLength = 0;
            int[] providers = new int[] { };
            if (model.Search_ProviderID != null)
            {
                providersLength = model.Search_ProviderID.Length;
                if (providersLength == 1 && model.Search_ProviderID[0] == 0)
                {
                    providersLength = 0;
                }
                else
                {
                    providers = model.Search_ProviderID.ToArray();
                }
            }

            int servicesLength = 0;
            long[] services = new long[] { };
            if (model.Search_ServiceID != null)
            {
                services = model.Search_ServiceID.ToArray();
                servicesLength = model.Search_ServiceID.Length;
            }

            int[] summary = new int[] { };
            int summaryLength = 0;
            if (model.Search_Summary != null)
            {
                summary = model.Search_Summary.ToArray();
                summaryLength = model.Search_Summary.Length;
            }

            view.Columns = model.Search_Columns;
            view.Summaries = new List<ProductionModel.Summary>();
            view.Summaries2 = new List<ProductionModel.Summary2>();

            IOrderedQueryable<tblCouponInfo> Coupons;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {
                Coupons = from c in db.tblCouponInfo
                          where c.terminalID == model.Search_TerminalID
                          && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (providers.Contains(c.providerID) || providersLength == 0)
                          && (services.Contains(c.serviceID) || servicesLength == 0)
                          && (
                          (c.dateConfirmed >= fDate
                          && c.dateConfirmed < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.dateConfirmed < fDate
                          && c.dateCanceled >= fDate
                          && c.dateCanceled < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          orderby c.dateCanceled, c.dateConfirmed
                          select c;

                var purchasesNumber = (from x in Coupons
                                       where x.dateConfirmed >= fDate
                                       && x.dateConfirmed < tDate
                                       select x.purchaseID).Distinct().Count();

                view.NumberOfPurchases = purchasesNumber;

                var couponsNumber = (from x in Coupons
                                     where x.dateConfirmed >= fDate
                                     && x.dateConfirmed < tDate
                                     select x.purchase_ServiceID).Distinct().Count();

                view.NumberOfCoupons = couponsNumber;

                scope.Complete();
            }

            foreach (var coupon in Coupons)
            {
                int couponPriceTypes = coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct().Count();
                foreach (int ptid in coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct())
                {
                    CouponReportModel detail = new CouponReportModel();
                    CouponDetail couponDetail = new CouponDetail();
                    if (couponPriceTypes > 1)
                    {
                        couponDetail = GetCouponInfoDetail(coupon, fDate, tDate, true, ptid);
                    }
                    else
                    {
                        couponDetail = GetCouponInfoDetail(coupon, fDate, tDate, true, null);
                    }
                    detail.CouponID = couponDetail.PurchaseServiceID;
                    detail.PurchaseID = couponDetail.PurchaseID;
                    detail.Folio = couponDetail.Folio;
                    detail.CouponReference = couponDetail.CouponReference;
                    detail.DateSaved = coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                    detail.ConfirmationDate = (couponDetail.ConfirmationDate != null ? couponDetail.ConfirmationDate.Value.ToString("yyyy-MM-dd") : "");
                    detail.CancelationDate = (couponDetail.CancelationDate != null ? couponDetail.CancelationDate.Value.ToString("yyyy-MM-dd") : "");
                    detail.SalesAgent = couponDetail.SalesAgent;
                    detail.ReservationsAgent = couponDetail.ReservationsAgent;
                    detail.UnitsQty = couponDetail.UnitsQty;
                    detail.PointOfSale = couponDetail.PointOfSale;
                    detail.Location = couponDetail.Location;
                    detail.Category = coupon.tblCouponInfoUnits.FirstOrDefault().incomeAccountName;
                    detail.Service = couponDetail.Service;
                    detail.ServiceDate = coupon.dateItem.ToString("yyyy-MM-dd hh:mm:ss tt");
                    detail.Units = couponDetail.Units;
                    detail.Provider = couponDetail.Provider;
                    detail.ProviderAvanceID = couponDetail.ProviderAvanceID;
                    detail.Customer = couponDetail.Customer;
                    detail.Culture = (coupon.culture == "es-MX" ? "Español" : "English");
                    detail.PriceType = couponDetail.PriceType;
                    detail.Total = couponDetail.Total;
                    detail.TotalNoIVA = couponDetail.TotalNoIVA;
                    detail.CustomCost = couponDetail.CustomCost;
                    detail.Cost = couponDetail.Cost;
                    detail.CostNoIVA = couponDetail.CostNoIVA;
                    detail.Utility = couponDetail.Utility;
                    detail.UtilityNoIVA = couponDetail.UtilityNoIVA;
                    detail.Status = couponDetail.Status;
                    detail.Promo = couponDetail.Promo;
                    detail.AuthCode = couponDetail.AuthCode;

                    view.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                    view.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.TotalNoIVA.Amount;
                    view.TotalCost.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Cost.Amount;
                    view.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.CostNoIVA.Amount;
                    view.TotalUtility.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Utility.Amount;
                    view.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.UtilityNoIVA.Amount;

                    list.Add(detail);

                    for (var i = 0; i < summaryLength; i++)
                    {
                        switch (int.Parse(summary[i].ToString()))
                        {
                            case 1: //Point of Sale
                                if (view.Summaries.Count(x => x.SummaryID == 1 && x.Concept == detail.PointOfSale) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();

                                    newSummary.SummaryID = 1;
                                    newSummary.Concept = detail.PointOfSale;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);

                                    view.Summaries.Add(newSummary);


                                }
                                var _sum = view.Summaries.FirstOrDefault(x => x.SummaryID == 1 && x.Concept == detail.PointOfSale);
                                _sum.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!_sum.Folios.Contains(detail.Folio))
                                {
                                    _sum.Folios.Add(detail.Folio);
                                    _sum.Quantity += 1;
                                }
                                break;


                            case 2: //Agent
                                if (view.Summaries.Count(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                    newSummary.SummaryID = 2;
                                    newSummary.Concept = detail.SalesAgent;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);
                                    view.Summaries.Add(newSummary);

                                }
                                var _sum2 = view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent);
                                _sum2.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum2.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum2.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum2.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum2.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum2.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Folios.Contains(detail.Folio))
                                {
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Folios.Add(detail.Folio);
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 2 && x.Concept == detail.SalesAgent).Quantity += 1;
                                }
                                break;


                            case 3: //Unit
                                foreach (var _unit in coupon.tblCouponInfoUnits.Where(x => x.priceTypeID == ptid))
                                {
                                    if (view.Summaries.Count(x => x.SummaryID == 3 && x.Concept == _unit.unit && x.QuantityConcept == _unit.priceType) == 0)
                                    {
                                        ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                        newSummary.SummaryID = 3;
                                        newSummary.Concept = _unit.unit;
                                        newSummary.Quantity = 0;
                                        newSummary.QuantityConcept = _unit.priceType;
                                        newSummary.Folios = new List<string>();
                                        view.Summaries.Add(newSummary);
                                    }
                                    var _sum3 = view.Summaries.FirstOrDefault(x => x.SummaryID == 3 && x.Concept == _unit.unit && x.QuantityConcept == _unit.priceType);
                                    _sum3.Quantity += _unit.quantity;
                                }

                                break;
                            case 4: //Culture
                                if (view.Summaries.Count(x => x.SummaryID == 4 && x.Concept == detail.Culture) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                    newSummary.SummaryID = 4;
                                    newSummary.Concept = detail.Culture;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);
                                    view.Summaries.Add(newSummary);

                                }

                                var _sum4 = view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture);
                                _sum4.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum4.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum4.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum4.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum4.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum4.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Folios.Contains(detail.Folio))
                                {
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Folios.Add(detail.Folio);
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 4 && x.Concept == detail.Culture).Quantity += 1;
                                }
                                break;


                            //Summary by Price Type by Point of Sale
                            case 5:

                                //condicion en caso de que no este una tabla creada
                                if (view.Summaries2.Count(x => x.SummaryID == 5) == 0)
                                {
                                    //agregar tabla con datos 
                                    ProductionModel.Summary2 newSummary = new ProductionModel.Summary2();
                                    newSummary.SummaryID = 5;
                                    newSummary.GroupsList = new List<ProductionModel.Summary2.LogGroup>();
                                    newSummary.PriceTypes = GetListOfPriceTypes(coupon.terminalID, false, 0, fDate, tDate);
                                    newSummary.SalesbyDay = new List<ProductionModel.Summary2.TotalsByDay>();
                                    newSummary.GrandTotalByGroups = new List<ProductionModel.Summary2.Group>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.TotalType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                    view.Summaries2.Add(newSummary);
                                }

                                var tabla = view.Summaries2.FirstOrDefault(x => x.SummaryID == 5);
                                if (tabla.GroupsList.Count() == 0)
                                {
                                    var PointOfSale = (from pos in Coupons
                                                       select new
                                                       {
                                                           pos.pointOfSaleID,
                                                           pos.pointOfSale
                                                       }).Distinct();

                                    foreach (var value in PointOfSale)
                                    {
                                        ProductionModel.Summary2.LogGroup newSummary = new ProductionModel.Summary2.LogGroup();
                                        newSummary.GroupID = value.pointOfSaleID;
                                        newSummary.GroupName = value.pointOfSale;
                                        tabla.GroupsList.Add(newSummary);
                                    }
                                }

                                DateTime couponDate = (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 ? coupon.dateConfirmed.Value.Date : (coupon.dateCanceled.Value.Date >= tDate ? coupon.dateConfirmed.Value.Date : coupon.dateCanceled.Value.Date));


                                #region"Fila Por Fecha"
                                if (tabla.SalesbyDay.Count(x => x.Date == couponDate) == 0)
                                {

                                    ProductionModel.Summary2.TotalsByDay totalByGroup = new ProductionModel.Summary2.TotalsByDay();
                                    totalByGroup.Date = couponDate;
                                    totalByGroup.Groups = new List<ProductionModel.Summary2.Group>();
                                    foreach (var x in tabla.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        totalByGroup.Groups.Add(newGroup);
                                        totalByGroup.TotalDayPriceType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var z in tabla.PriceTypes)
                                        {
                                            ProductionModel.Summary2.TotalByPriceType newTotal = new ProductionModel.Summary2.TotalByPriceType();
                                            newTotal.PriceTypeID = z.PriceTypeID;
                                            newTotal.TotalSales = GetDefaultListOfMoney(false);
                                            totalByGroup.TotalDayPriceType.Add(newTotal);
                                        }
                                    }
                                    totalByGroup.TotalByDay = GetDefaultListOfMoney(false);
                                    tabla.SalesbyDay.Add(totalByGroup);
                                }
                                #endregion
                                #region"GrandTotal
                                if (tabla.GrandTotalByGroups.Count() == 0)
                                {
                                    foreach (var x in tabla.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        tabla.GrandTotalByGroups.Add(newGroup);
                                    }
                                }

                                #endregion
                                #region"Total by Type Price"
                                if (tabla.TotalType.Count() == 0)
                                {
                                    foreach (var y in tabla.PriceTypes.OrderBy(t => t.Order))
                                    {
                                        ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                        TypePrice.PriceTypeID = y.PriceTypeID;
                                        TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                        tabla.TotalType.Add(TypePrice);
                                    }
                                }
                                #endregion



                                var filaSales = tabla.SalesbyDay.FirstOrDefault(x => x.Date == couponDate);

                                //A agregar Cantidades de total de ventas por tipo de precio 
                                filaSales.Groups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.pointOfSaleID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //B agrega el subtotal segun los totales por tipo de precio 
                                filaSales.Groups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.pointOfSaleID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                // agregar suma de tipos de precio
                                filaSales.TotalDayPriceType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                         .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                         .Amount += detail.Total.Amount;
                                //C agrega el total por día                               
                                filaSales.TotalByDay.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //D agrega el total por grupos segun los puntos de venta
                                tabla.GrandTotalByGroups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.pointOfSaleID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //E agrega el total por punto de venta
                                tabla.GrandTotalByGroups.FirstOrDefault(x => int.Parse(x.GroupID.ToString()) == coupon.pointOfSaleID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //F agregar el total 
                                tabla.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                // totales por tipo de precio
                                tabla.TotalType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                break;

                            //Tabla con tipos de precio
                            //Summary by Price Type by Agent
                            #region"Price Types by Agent"
                            case 6:
                                if (view.Summaries2.Count(x => x.SummaryID == 6) == 0)
                                {
                                    ProductionModel.Summary2 newSummary = new ProductionModel.Summary2();
                                    newSummary.SummaryID = 6;
                                    newSummary.GroupsList = new List<ProductionModel.Summary2.LogGroup>();
                                    newSummary.PriceTypes = GetListOfPriceTypes(coupon.terminalID, false, 0, fDate, tDate);
                                    newSummary.SalesbyDay = new List<ProductionModel.Summary2.TotalsByDay>();
                                    newSummary.GrandTotalByGroups = new List<ProductionModel.Summary2.Group>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.TotalType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                    view.Summaries2.Add(newSummary);
                                }
                                //id y nombre del vendedor
                                var tablaVendedor = view.Summaries2.FirstOrDefault(x => x.SummaryID == 6);
                                if (tablaVendedor.GroupsList.Count() == 0)
                                {
                                    var UserIDs = (from c in Coupons
                                                   select c.confirmedByUserID).Distinct().ToArray();
                                    var UserData = from y in db.tblUserProfiles
                                                   where UserIDs.Contains(y.userID)
                                                   select new
                                                   {
                                                       y.userID,
                                                       y.firstName,
                                                       y.lastName
                                                   };
                                    foreach (var y in UserData)
                                    {
                                        ProductionModel.Summary2.LogGroup newGroup = new ProductionModel.Summary2.LogGroup();
                                        newGroup.GroupID = y.userID;
                                        newGroup.GroupName = y.firstName + "  " + y.lastName;
                                        tablaVendedor.GroupsList.Add(newGroup);
                                    }
                                }

                                DateTime couponDate2 = (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6 ? coupon.dateConfirmed.Value.Date : (coupon.dateCanceled.Value.Date >= tDate ? coupon.dateConfirmed.Value.Date : coupon.dateCanceled.Value.Date));
                                if (tablaVendedor.SalesbyDay.Count(x => x.Date == couponDate2) == 0)
                                {
                                    ProductionModel.Summary2.TotalsByDay totalByGroup = new ProductionModel.Summary2.TotalsByDay();
                                    totalByGroup.Date = couponDate2;
                                    totalByGroup.Groups = new List<ProductionModel.Summary2.Group>();
                                    foreach (var x in tablaVendedor.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        totalByGroup.Groups.Add(newGroup);
                                        totalByGroup.TotalDayPriceType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var z in tablaVendedor.PriceTypes)
                                        {
                                            ProductionModel.Summary2.TotalByPriceType newTotal = new ProductionModel.Summary2.TotalByPriceType();
                                            newTotal.PriceTypeID = z.PriceTypeID;
                                            newTotal.TotalSales = GetDefaultListOfMoney(false);
                                            totalByGroup.TotalDayPriceType.Add(newTotal);
                                        }
                                    }
                                    totalByGroup.TotalByDay = GetDefaultListOfMoney(false);
                                    tablaVendedor.SalesbyDay.Add(totalByGroup);
                                }

                                if (tablaVendedor.GrandTotalByGroups.Count() == 0)
                                {
                                    foreach (var x in tablaVendedor.GroupsList)
                                    {
                                        ProductionModel.Summary2.Group newGroup = new ProductionModel.Summary2.Group();
                                        newGroup.GroupID = x.GroupID;
                                        newGroup.TotalGroup = GetDefaultListOfMoney(false);
                                        newGroup.PriceTypeSales = new List<ProductionModel.Summary2.TotalByPriceType>();
                                        foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                        {
                                            ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                            TypePrice.PriceTypeID = y.PriceTypeID;
                                            TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                            newGroup.PriceTypeSales.Add(TypePrice);
                                        }
                                        tablaVendedor.GrandTotalByGroups.Add(newGroup);
                                    }
                                }

                                #region"Total by Type Price"
                                if (tablaVendedor.TotalType.Count() == 0)
                                {
                                    foreach (var y in tablaVendedor.PriceTypes.OrderBy(t => t.Order))
                                    {
                                        ProductionModel.Summary2.TotalByPriceType TypePrice = new ProductionModel.Summary2.TotalByPriceType();
                                        TypePrice.PriceTypeID = y.PriceTypeID;
                                        TypePrice.TotalSales = GetDefaultListOfMoney(false);
                                        tablaVendedor.TotalType.Add(TypePrice);
                                    }
                                }
                                #endregion

                                var fila = tablaVendedor.SalesbyDay.FirstOrDefault(x => x.Date == couponDate2);
                                //A agregar Cantidades de total de ventas por tipo de precio 
                                fila.Groups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                   .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                   .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                   .Amount += detail.Total.Amount;
                                //B agrega el subtotal segun los totales por tipo de precio 
                                fila.Groups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                // agregar suma de tipos de precio
                                fila.TotalDayPriceType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                         .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                         .Amount += detail.Total.Amount;
                                //C agrega el total por día 
                                fila.TotalByDay.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //D agrega el total por grupos segun los puntos de venta
                                tablaVendedor.GrandTotalByGroups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .PriceTypeSales.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                //E agrega el total por punto de venta
                                tablaVendedor.GrandTotalByGroups.FirstOrDefault(x => new Guid(x.GroupID.ToString()) == coupon.confirmedByUserID)
                                    .TotalGroup.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;
                                tablaVendedor.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                // totales por tipo de precio
                                tablaVendedor.TotalType.FirstOrDefault(x => x.PriceTypeID == ptid)
                                    .TotalSales.FirstOrDefault(x => x.Currency == detail.Total.Currency)
                                    .Amount += detail.Total.Amount;

                                break;
                            #endregion

                            case 7:
                                if (view.Summaries.Count(x => x.SummaryID == 7 && x.Concept == detail.Location) == 0)
                                {
                                    ProductionModel.Summary newSummary = new ProductionModel.Summary();
                                    newSummary.SummaryID = 7;
                                    newSummary.Concept = detail.Location;
                                    newSummary.Quantity = 0;
                                    newSummary.QuantityConcept = "Coupons";
                                    newSummary.Folios = new List<string>();
                                    newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    newSummary.GrandTotalNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalCost = GetDefaultListOfMoney(false);
                                    newSummary.TotalCostNoIVA = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtility = GetDefaultListOfMoney(false);
                                    newSummary.TotalUtilityNoIVA = GetDefaultListOfMoney(false);
                                    view.Summaries.Add(newSummary);

                                    //newSummary.GroupsList = new List<ProductionModel.Summary2.LogGroup>();
                                    //newSummary.PriceTypes = GetListOfPriceTypes(coupon.terminalID, false, 0, fDate, tDate);
                                    //newSummary.SalesbyDay = new List<ProductionModel.Summary2.TotalsByDay>();
                                    //newSummary.GrandTotalByGroups = new List<ProductionModel.Summary2.Group>();
                                    //newSummary.GrandTotal = GetDefaultListOfMoney(false);
                                    //newSummary.TotalType = new List<ProductionModel.Summary2.TotalByPriceType>();
                                    //view.Summaries2.Add(newSummary);
                                }

                                var _sum7 = view.Summaries.FirstOrDefault(m => m.SummaryID == 7 && m.Concept == detail.Location);
                                _sum7.GrandTotal.FirstOrDefault(x => x.Currency == detail.Total.Currency).Amount += detail.Total.Amount;
                                _sum7.GrandTotalNoIVA.FirstOrDefault(x => x.Currency == detail.TotalNoIVA.Currency).Amount += detail.TotalNoIVA.Amount;
                                _sum7.TotalCost.FirstOrDefault(x => x.Currency == detail.Cost.Currency).Amount += detail.Cost.Amount;
                                _sum7.TotalCostNoIVA.FirstOrDefault(x => x.Currency == detail.CostNoIVA.Currency).Amount += detail.CostNoIVA.Amount;
                                _sum7.TotalUtility.FirstOrDefault(x => x.Currency == detail.Utility.Currency).Amount += detail.Utility.Amount;
                                _sum7.TotalUtilityNoIVA.FirstOrDefault(x => x.Currency == detail.UtilityNoIVA.Currency).Amount += detail.UtilityNoIVA.Amount;
                                if (!view.Summaries.FirstOrDefault(m => m.SummaryID == 7 && m.Concept == detail.Location).Folios.Contains(detail.Folio))
                                {
                                    view.Summaries.FirstOrDefault(m => m.SummaryID == 7 && m.Concept == detail.Location).Folios.Add(detail.Folio);
                                    view.Summaries.FirstOrDefault(x => x.SummaryID == 7 && x.Concept == detail.Location).Quantity += 1;
                                }

                                break;
                        }
                    }
                }
            }
            view.Coupons = list;

            return view;

        }

        private List<PriceType> GetListOfPriceTypes()
        {
            throw new NotImplementedException();
        }

        public static AttemptResponse SaveAudit(long itemID, string invoice)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            var purchaseService = db.tblPurchases_Services.Single(s => s.purchase_ServiceID == itemID);
            purchaseService.audit = true;
            purchaseService.auditDate = DateTime.Now;
            purchaseService.auditedByUserID = session.UserID;
            purchaseService.auditInvoice = invoice;
            db.SaveChanges();

            attempt.Type = Attempt_ResponseTypes.Ok;
            attempt.Exception = null;
            attempt.ObjectID = itemID;
            return attempt;
        }

        public static bool MarkAsAudited()
        {
            bool status = true;
            //ePlatEntities db =  new ePlatEntities();

            //var invoices = from x in db.tblProvidersInvoices
            //               where x.providerInvoiceID >= 360 && x.providerInvoiceID < 437
            //               select x;

            //foreach (var inv in invoices)
            //{
            //    foreach (var coupon in inv.tblPurchases_Services)
            //    {
            //        if (coupon.audit != true)
            //        {
            //            coupon.audit = true;
            //            coupon.auditDate = inv.dateSaved;
            //            coupon.auditedByUserID = inv.savedByUserID;
            //            coupon.auditInvoice = inv.invoiceNumber;
            //        }
            //    }

            //}
            //db.SaveChanges();

            return true;
        }

        public static AttemptResponse SaveAsNoShow(string ids)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            List<long> psids = ids.Split(',').Select(long.Parse).ToList();
            var couponsQ = from c in db.tblPurchases_Services
                           where psids.Contains(c.purchase_ServiceID)
                           select c;

            foreach (var coupon in couponsQ)
            {
                if (coupon.audit == null || coupon.audit == false)
                {
                    coupon.serviceStatusID = 6;
                    coupon.noShowByUserID = session.UserID;
                    coupon.noShowDateTime = DateTime.Now;
                }
            }
            db.SaveChanges();

            var cacheCouponsQ = from c in db.tblCouponInfo
                                where psids.Contains(c.purchase_ServiceID)
                                select c;

            foreach (var coupon in cacheCouponsQ)
            {
                if (couponsQ.FirstOrDefault(x => x.purchase_ServiceID == coupon.purchase_ServiceID).audit == null || couponsQ.FirstOrDefault(x => x.purchase_ServiceID == coupon.purchase_ServiceID).audit == false)
                {
                    coupon.serviceStatusID = 6;
                    coupon.status = "No Show";
                }
            }
            db.SaveChanges();

            attempt.Type = Attempt_ResponseTypes.Ok;
            attempt.Exception = null;

            return attempt;
        }

        public static AttemptResponse SaveAsConfirmed(string ids)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            List<long> psids = ids.Split(',').Select(long.Parse).ToList();
            var couponsQ = from c in db.tblPurchases_Services
                           where psids.Contains(c.purchase_ServiceID)
                           select c;

            foreach (var coupon in couponsQ)
            {
                coupon.serviceStatusID = 3;
            }
            db.SaveChanges();

            var cacheCouponsQ = from c in db.tblCouponInfo
                                where psids.Contains(c.purchase_ServiceID)
                                select c;

            foreach (var coupon in cacheCouponsQ)
            {
                coupon.serviceStatusID = 3;
                coupon.status = "Confirmed";
            }
            db.SaveChanges();

            attempt.Type = Attempt_ResponseTypes.Ok;
            attempt.Exception = null;

            return attempt;
        }

        public static AttemptResponse DeletePartial(long partialID)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            var Partial = (from p in db.tblPaymentDetailsPartials
                           where p.paymentDetailsPartialID == partialID
                           select p).FirstOrDefault();

            if (Partial != null)
            {
                Partial.deleted = true;
                Partial.deletedByUserID = session.UserID;
                Partial.dateDeleted = DateTime.Now;
            }

            var payment = (from p in db.tblPaymentDetails
                           where p.paymentDetailsID == Partial.paymentDetailsID
                           select p).FirstOrDefault();

            if (payment != null)
            {
                payment.chargeBackCharged = false;
                payment.chargeBackChargedByUserID = null;
                payment.chargeBackChargedDateTime = null;
            }

            try
            {
                db.SaveChanges();

                attempt.Type = Attempt_ResponseTypes.Ok;
                attempt.ObjectID = Partial.paymentDetailsID;
            }
            catch (Exception ex)
            {
                attempt.Type = Attempt_ResponseTypes.Error;
                attempt.Message = "Error trying to save. Try again.";
                attempt.ObjectID = 0;
                attempt.Exception = ex;
            }

            return attempt;
        }

        public static AttemptResponse SavePartial(ChargeBacksModel.Partial model)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            tblPaymentDetailsPartials newPartial = new tblPaymentDetailsPartials();
            newPartial.paymentDetailsID = model.ChargeID;
            newPartial.amount = model.Amount;
            newPartial.currencyID = model.CurrencyID;
            newPartial.amountInPaymentCurrency = model.AmountInPaymentCurrency;
            newPartial.description = model.Description;
            newPartial.dateSaved = DateTime.Now;
            newPartial.savedByUserID = session.UserID;

            db.tblPaymentDetailsPartials.AddObject(newPartial);

            var payment = (from p in db.tblPaymentDetails
                           where p.paymentDetailsID == model.ChargeID
                           select p).FirstOrDefault();

            if (payment != null)
            {
                if (model.Balance < decimal.Parse("0.02") && model.Balance > decimal.Parse("-0.02"))
                {
                    payment.chargeBackCharged = true;
                    payment.chargeBackChargedByUserID = session.UserID;
                    payment.chargeBackChargedDateTime = DateTime.Now;
                }
            }

            try
            {
                db.SaveChanges();

                attempt.Type = Attempt_ResponseTypes.Ok;
                attempt.ObjectID = newPartial.paymentDetailsPartialID;
            }
            catch (Exception ex)
            {
                attempt.Type = Attempt_ResponseTypes.Error;
                attempt.Message = "Error trying to save. Try again.";
                attempt.ObjectID = 0;
                attempt.Exception = ex;
            }

            return attempt;
        }

        public static AttemptResponse SaveCharged(long id)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            var paymentQ = (from p in db.tblPaymentDetails
                            where p.paymentDetailsID == id
                            select p).FirstOrDefault();

            if (paymentQ != null)
            {
                paymentQ.chargeBackCharged = true;
                paymentQ.chargeBackChargedByUserID = session.UserID;
                paymentQ.chargeBackChargedDateTime = DateTime.Now;
            }
            try
            {
                db.SaveChanges();
                var userProfile = db.tblUserProfiles.FirstOrDefault(x => x.userID == session.UserID);
                attempt.Type = Attempt_ResponseTypes.Ok;
                attempt.Message = "Charged by " + userProfile.firstName + " " + userProfile.lastName + "<br />on " + paymentQ.chargeBackChargedDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
            }
            catch (Exception ex)
            {
                attempt.Type = Attempt_ResponseTypes.Error;
                attempt.Message = "Error trying to save. Try again.";
                attempt.ObjectID = 0;
                attempt.Exception = ex;
            }

            return attempt;
        }

        public static AttemptResponse SaveCloseOut(CloseOutModel.CloseOutSaveModel closeOut)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse attempt = new AttemptResponse();

            //revisar si no hay ya un closeout con esas características
            DateTime coDate = DateTime.Parse(closeOut.CloseOutDate);
            int coPosID = closeOut.PointOfSaleID;
            Guid? coAgentUserID = null;
            if (closeOut.SalesAgentUserID != null)
            {
                coAgentUserID = new Guid(closeOut.SalesAgentUserID);
            }
            long coTerminalID = closeOut.TerminalID;

            var SavedCloseouts = (from co in db.tblCloseOuts
                                  where co.closeOutDate == coDate
                                  && co.pointOfSaleID == coPosID
                                  //&& (co.salesAgentUserID == coAgentUserID || coAgentUserID == null)
                                  && co.salesAgentUserID == coAgentUserID
                                  && co.terminalID == coTerminalID
                                  select co.closeOutID).Count();

            if (SavedCloseouts == 0)
            {
                //nuevo closeout
                tblCloseOuts newCloseOut = new tblCloseOuts();
                newCloseOut.closeOutDate = coDate;
                newCloseOut.pointOfSaleID = coPosID;
                newCloseOut.salesAgentUserID = coAgentUserID;
                newCloseOut.terminalID = coTerminalID;

                newCloseOut.jsonModel = closeOut.JsonModel;
                newCloseOut.notes = closeOut.Notes;
                newCloseOut.dateSaved = DateTime.Now;
                newCloseOut.savedByUserID = session.UserID;

                //parsear modelo
                System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                CloseOutModel closeOutModel = js.Deserialize<CloseOutModel>(closeOut.JsonModel);

                //guardar cupones
                //sales
                foreach (var sale in closeOutModel.ListSales)
                {
                    foreach (var coupon in sale.Coupons)
                    {
                        tblCloseOuts_Purchases newCoupon = new tblCloseOuts_Purchases();
                        newCoupon.purchaseID = sale.PurchaseID;
                        newCoupon.purchase_ServiceID = coupon.Purchase_ServiceID;
                        newCoupon.paid = true;
                        newCoupon.datePaid = DateTime.Parse(closeOut.CloseOutDate);
                        newCoupon.dateSaved = DateTime.Now;
                        newCloseOut.tblCloseOuts_Purchases.Add(newCoupon);
                    }
                }

                //cancelations
                foreach (var sale in closeOutModel.ListCancelations)
                {
                    foreach (var coupon in sale.Coupons)
                    {
                        var exist = newCloseOut.tblCloseOuts_Purchases.Where(x => x.purchaseID == sale.PurchaseID && x.purchase_ServiceID == coupon.Purchase_ServiceID);

                        if (exist.Count() > 0)
                        {
                            exist.First().canceled = true;
                            exist.First().dateCanceled = DateTime.Parse(closeOut.CloseOutDate);
                        }
                        else
                        {
                            tblCloseOuts_Purchases newCoupon = new tblCloseOuts_Purchases();
                            newCoupon.purchaseID = sale.PurchaseID;
                            newCoupon.purchase_ServiceID = coupon.Purchase_ServiceID;
                            newCoupon.dateSaved = DateTime.Now;
                            newCoupon.canceled = true;
                            newCoupon.dateCanceled = DateTime.Parse(closeOut.CloseOutDate);
                            newCloseOut.tblCloseOuts_Purchases.Add(newCoupon);
                        }
                    }
                }

                //guardar pagos y refunds
                foreach (long pid in closeOutModel.RelatedPayments)
                {
                    tblCloseOuts_PaymentDetails newPayment = new tblCloseOuts_PaymentDetails();
                    newPayment.paymentDetailsID = pid;
                    newPayment.dateSaved = DateTime.Today;
                    newCloseOut.tblCloseOuts_PaymentDetails.Add(newPayment);
                }

                db.tblCloseOuts.AddObject(newCloseOut);
                db.SaveChanges();

                var sales = closeOutModel.ListSales.Concat(closeOutModel.ListCancelations).Select(s => s.PurchaseID).Distinct();
                foreach (var sale in sales)
                {
                    PaymentAssignationDataModel padm = new PaymentAssignationDataModel();
                    AttemptResponse assignationAttempt = padm.SavePaymentAssignation(sale, newCloseOut.closeOutID, newCloseOut.closeOutDate);
                }

                attempt.Type = Attempt_ResponseTypes.Ok;
                attempt.Exception = null;
                attempt.Message = "Close Out Saved";
                attempt.ObjectID = newCloseOut.closeOutID;
            }
            else
            {
                attempt.Type = Attempt_ResponseTypes.Error;
                attempt.Message = "This close out is already saved. Maybe it was saved by another agent. Click on GET to open it.";
            }

            return attempt;
        }

        public static AttemptResponse DeleteCloseOut(int closeOutID)
        {
            ePlatEntities db = new ePlatEntities();
            AttemptResponse response = new AttemptResponse();
            try
            {
                var pos = "";
                var closeout = db.tblCloseOuts.Single(x => x.closeOutID == closeOutID);
                var pointOfSale = db.tblPointsOfSale.Single(x => x.pointOfSaleID == closeout.pointOfSaleID);
                pos += closeout.closeOutDate.ToString("yyyy-MM-dd") + " - " + pointOfSale.shortName + " - " + pointOfSale.pointOfSale;

                //eliminar cache de cupones
                var psIDs = (from p in db.tblCloseOuts_Purchases
                             where p.closeOutID == closeOutID
                             && p.paid == true
                             select p.purchase_ServiceID).Distinct();

                foreach (var psID in psIDs)
                {
                    var couponInfo = db.tblCouponInfo.FirstOrDefault(x => x.purchase_ServiceID == psID);
                    if (couponInfo != null)
                    {
                        db.tblCouponInfo.DeleteObject(couponInfo);
                    }
                }

                //eliminar corte
                db.tblCloseOuts.DeleteObject(db.tblCloseOuts.Single(m => m.closeOutID == closeOutID));
                db.SaveChanges();
                response.Type = Attempt_ResponseTypes.Ok;
                response.Message = "Close Out Deleted " + pos;
                response.ObjectID = closeOutID;
                return response;
            }
            catch (Exception ex)
            {
                response.Type = Attempt_ResponseTypes.Error;
                response.Message = "Close Out NOT Deleted";
                response.ObjectID = 0;
                response.Exception = ex;
                return response;
            }
        }

        public static List<Money> GetDefaultListOfMoney()
        {
            return GetDefaultListOfMoney(false);
        }
        public static List<Money> GetDefaultListOfMoney(bool includeCAD)
        {
            List<Money> list = new List<Money>();

            list.Add(new Money()
            {
                Amount = 0,
                Currency = "USD"
            });

            if (includeCAD)
            {
                list.Add(new Money()
                {
                    Amount = 0,
                    Currency = "CAD"
                });
            }

            list.Add(new Money()
            {
                Amount = 0,
                Currency = "MXN"
            });

            return list;
        }

        private CommissionsReportModel.CommissionsWorker GetNewWorkerObject(Guid userid, string firstname, string lastname, int jobpositionid, string jobposition, List<PriceType> priceTypes)
        {
            CommissionsReportModel.CommissionsWorker newWorker = new CommissionsReportModel.CommissionsWorker();
            newWorker.UserID = userid;
            newWorker.FirstName = firstname;
            newWorker.LastName = lastname;
            newWorker.JobPositionID = jobpositionid;
            newWorker.JobPosition = jobposition;
            newWorker.SubordinatedUsers = new List<Guid?>();
            List<CommissionsReportModel.CommissionDetail> totalsPrice = new List<CommissionsReportModel.CommissionDetail>();
            foreach (var type in priceTypes)
            {
                CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                detail.PriceTypeID = type.PriceTypeID;
                detail.Coupons = new List<CouponDetail>();
                detail.Sales = GetDefaultListOfMoney();
                detail.SalesMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
                detail.Commissions = GetDefaultListOfMoney();
                detail.CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
                totalsPrice.Add(detail);
            }
            newWorker.TotalsPerPrice = totalsPrice;
            newWorker.Total = new CommissionsReportModel.CommissionTotal()
            {
                Sales = GetDefaultListOfMoney(),
                SalesMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                },
                Commissions = GetDefaultListOfMoney(),
                CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                }
            };
            return newWorker;
        }

        //public List<PriceType> GetListOfPriceTypes(long terminalID, long serviceID)
        //{
        //    return GetListOfPriceTypes(terminalID, false, serviceID);
        //}

        //public List<PriceType> GetListOfPriceTypes(long terminalID)
        //{
        //    return GetListOfPriceTypes(terminalID, false, 0, null, null);
        //}

        public List<PriceType> GetListOfMainPriceTypes(long terminalID)
        {
            List<PriceType> priceTypes = new List<PriceType>();

            var PricesQ = (from p in db.tblPriceTypesGroups
                           join pt in db.tblPriceTypes
                           on p.mainPriceTypeID equals pt.priceTypeID
                           into p_pt
                           from pt in p_pt.DefaultIfEmpty()
                           where p.terminalID == terminalID
                           orderby pt.order_
                           select new
                           {
                               pt.priceTypeID,
                               pt.priceType,
                               pt.order_
                           }).Distinct();

            foreach (var priceType in PricesQ)
            {
                priceTypes.Add(new PriceType()
                {
                    PriceTypeID = priceType.priceTypeID,
                    Type = priceType.priceType,
                    Order = priceType.order_
                });
            }

            return priceTypes;
        }


        public List<PriceType> GetListOfPriceTypes(long terminalID, bool includeCost, long serviceID = 0, DateTime? fromDate = null, DateTime? toDate = null)
        {
            List<PriceType> priceTypes = new List<PriceType>();
            if (fromDate == null)
            {
                fromDate = DateTime.Now;
            }
            if (toDate == null)
            {
                toDate = DateTime.Now;
            }
            var PriceTypes = (from r in db.tblServices_PriceTypes
                              where r.terminalID == terminalID
                              && r.providerID == null && r.serviceID == null
                              && ((r.permanent_ && r.fromDate <= toDate) || (r.toDate > fromDate && !r.permanent_))
                              orderby r.tblPriceTypes.order_
                              select new
                              {
                                  r.priceTypeID,
                                  r.tblPriceTypes.priceType,
                                  r.tblPriceTypes.order_,
                                  r.tblPriceTypes.promoID,
                                  r.tblPriceTypes.isCost
                              }).Distinct();

            if (!includeCost)
            {
                //PriceTypes = PriceTypes.Where(p => p.priceTypeID != 3);
                PriceTypes = PriceTypes.Where(p => !p.isCost);
            }

            if (serviceID != 0)
            {
                var _promos = db.tblPromos_RelatedItems.Where(m => m.itemID == serviceID).Select(m => (long?)m.promoID).ToArray();
                PriceTypes = PriceTypes.Where(m => _promos.Contains(m.promoID) || m.promoID == null);
            }

            foreach (var type in PriceTypes.OrderBy(x => x.order_))
            {
                priceTypes.Add(new PriceType()
                {
                    PriceTypeID = type.priceTypeID,
                    Type = type.priceType,
                    Order = type.order_
                });
            }
            return priceTypes;
        }

        public CouponDetail GetCouponDetail(tblPurchases_Services coupon, DateTime? fDate, DateTime? tDate)
        {
            return GetCouponDetail(coupon, fDate, tDate, true);
        }

        public CouponDetail GetCouponDetail(tblPurchases_Services coupon, DateTime? fDate, DateTime? tDate, bool includeTotals)
        {
            return GetCouponDetail(coupon, fDate, tDate, includeTotals, null);
        }

        public CouponDetail GetCouponDetail(tblPurchases_Services coupon, DateTime? fDate, DateTime? tDate, bool includeTotals, int? priceTypeID)
        {
            CouponDetail couponInfo = new CouponDetail();
            couponInfo.PurchaseID = coupon.purchaseID;
            couponInfo.CommissionPercentage = 0;
            couponInfo.Customer = coupon.tblPurchases.tblLeads.firstName + " " + coupon.tblPurchases.tblLeads.lastName;
            couponInfo.PurchaseServiceID = coupon.purchase_ServiceID;
            if (coupon.serviceStatusID >= 3 && coupon.tblPurchaseServiceDetails.Count > 0 && coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
            {
                if (priceTypeID == null)
                {
                    couponInfo.Folio = coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, coupon.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                }
                else
                {
                    couponInfo.Folio = coupon.tblPurchaseServiceDetails.FirstOrDefault(f => f.priceTypeID == priceTypeID).coupon;
                }
                couponInfo.CouponReference = coupon.couponReference;
            }
            couponInfo.PurchaseDate = coupon.tblPurchases.purchaseDateTime;
            couponInfo.SavedOnDate = coupon.dateSaved;
            couponInfo.ConfirmationDate = coupon.confirmationDateTime;
            couponInfo.CancelationDate = coupon.cancelationDateTime;
            couponInfo.Service = coupon.tblServices.service;
            if (coupon.transportationZoneID != null)
            {
                couponInfo.Service += " to " + coupon.tblTransportationZones.transportationZone;
            }
            couponInfo.Provider = coupon.tblServices.tblProviders.comercialName;
            couponInfo.ProviderID = coupon.tblServices.providerID;
            couponInfo.ProviderAvanceID = coupon.tblServices.tblProviders.avanceProviderID;
            foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
            {
                long cPriceID = (unit.priceID != null ? (long)unit.priceID : (long)unit.netPriceID);
                tblPriceUnits currentUnit = PriceDataModel.GetUnit(cPriceID, coupon.tblPurchases.culture);
                couponInfo.Units += "<span class=\"block\">" + unit.quantity + " " + currentUnit.unit + (currentUnit.additionalInfo != null ? "(" + currentUnit.additionalInfo + ")" : "") + (unit.promo ? " (PROMO)" : "") + "</span>";
                couponInfo.UnitsQty += unit.quantity;
            }

            couponInfo.PointOfSale = coupon.tblPurchases.tblPointsOfSale.shortName + " - " + coupon.tblPurchases.tblPointsOfSale.pointOfSale;

            if (coupon.tblPurchases.tblPointsOfSale.online)
            {
                if (coupon.tblPurchases.userID != null)
                {
                    tblUserProfiles agent = db.tblUserProfiles.Single(u => u.userID == coupon.tblPurchases.userID);
                    couponInfo.SalesAgent = agent.firstName + " " + agent.lastName;
                }
                else
                {
                    couponInfo.SalesAgent = "Website";
                }
                if (coupon.tblPurchases.agentID != null)
                {
                    tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == coupon.tblPurchases.agentID);
                    couponInfo.ReservationsAgent = user.firstName + " " + user.lastName;
                }
                else
                {
                    couponInfo.ReservationsAgent = "Unassigned";
                }
            }
            else
            {
                if (coupon.confirmedByUserID != null)
                {
                    tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == coupon.confirmedByUserID);
                    couponInfo.SalesAgent = user.firstName + " " + user.lastName;
                    if (coupon.tblPurchases.tblPointsOfSale.online)
                    {
                        if (coupon.tblPurchases.agentID != null)
                        {
                            user = db.tblUserProfiles.Single(x => x.userID == coupon.tblPurchases.agentID);
                            couponInfo.ReservationsAgent = user.firstName + " " + user.lastName;
                        }
                        else
                        {
                            couponInfo.ReservationsAgent = "Unassigned";
                        }
                    }
                    else
                    {
                        couponInfo.ReservationsAgent = user.firstName + " " + user.lastName;
                    }
                }
                else
                {
                    if (coupon.tblPurchases.userID != null)
                    {
                        tblUserProfiles agent = db.tblUserProfiles.Single(u => u.userID == coupon.tblPurchases.userID);
                        couponInfo.SalesAgent = agent.firstName + " " + agent.lastName;
                    }
                    else
                    {
                        couponInfo.SalesAgent = "Unassigned";
                    }
                    if (coupon.tblPurchases.agentID != null)
                    {
                        tblUserProfiles user = db.tblUserProfiles.Single(x => x.userID == coupon.tblPurchases.agentID);
                        couponInfo.ReservationsAgent = user.firstName + " " + user.lastName;
                    }
                    else
                    {
                        couponInfo.ReservationsAgent = "Unassigned";
                    }
                }
            }

            if (coupon.tblPurchaseServiceDetails.Count() > 0)
            {
                couponInfo.PriceType = "";
                int? lastPriceType = 0;
                foreach (var detail in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                {
                    if (detail.priceTypeID != null && detail.priceTypeID != lastPriceType)
                    {
                        if (couponInfo.PriceType != "")
                        {
                            couponInfo.PriceType += ", ";
                        }
                        couponInfo.PriceType += detail.tblPriceTypes.priceType;
                    }
                    lastPriceType = detail.priceTypeID;
                }
            }
            if (coupon.tblServices.excludeForCommission != true)
            {
                couponInfo.Percentage = 0;
            }
            else
            {
                couponInfo.Percentage = -1;
            }

            couponInfo.Promo = (coupon.promoID != null ? coupon.tblPromos.promo : "");
            //foreach (var code in coupon.tblPurchases_Services_MoneyTransactions.Where(x => x.tblMoneyTransactions.errorCode == "0" && x.tblMoneyTransactions.authCode != "0"))
            //{
            //    if (code.tblMoneyTransactions.authCode != null && code.tblMoneyTransactions.authCode != "" && code.tblMoneyTransactions.authCode != "0")
            //    {
            //        if (couponInfo.AuthCode != null)
            //        {
            //            couponInfo.AuthCode += ", ";
            //        }
            //        couponInfo.AuthCode += code.tblMoneyTransactions.authCode;
            //    }
            //}
            ////////////////////////
            couponInfo.Total = new Money()
            {
                Amount = 0,
                Currency = coupon.tblCurrencies.currencyCode
            };
            couponInfo.Cost = new Money()
            {
                Amount = 0,
                Currency = coupon.tblCurrencies.currencyCode
            };
            couponInfo.DealDiff = new Money()
            {
                Amount = 0,
                Currency = coupon.tblCurrencies.currencyCode
            };
            couponInfo.Utility = new Money()
            {
                Amount = 0,
                Currency = coupon.tblCurrencies.currencyCode
            };
            if (includeTotals)
            {
                couponInfo.Status = coupon.tblPurchaseServiceStatus.purchaseServiceStatus;
                couponInfo.StatusID = coupon.serviceStatusID;
                if (fDate == null)
                {
                    fDate = coupon.confirmationDateTime;
                    couponInfo.Total.Amount = coupon.total;
                    couponInfo.Cost.Amount = 0;
                }
                else
                {
                    List<ComputedPriceModel> Prices = new List<ComputedPriceModel>();
                    if ((coupon.confirmationDateTime >= fDate && coupon.confirmationDateTime < tDate) || coupon.confirmationDateTime > tDate)
                    {
                        if (coupon.cancelationDateTime >= tDate)
                        {
                            //cancelación fuera del rango del reporte, calcular total confirmado
                            //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                            Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);
                            couponInfo.Total.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                            {
                                if (unit.netPriceID != null)
                                {
                                    couponInfo.Total.Amount += decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (unit.dealPrice != null ? (decimal)unit.dealPrice : Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price), unit.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);

                                    if (unit.customCost != null)
                                    {
                                        couponInfo.CustomCost = true;
                                        if (coupon.tblCurrencies.currencyCode == unit.tblPrices1.tblCurrencies.currencyCode)
                                        {
                                            couponInfo.Cost.Amount = (decimal)unit.customCost;
                                        }
                                        else
                                        {
                                            couponInfo.Cost.Amount = (decimal)unit.customCostAlt;
                                        }
                                    }
                                    else
                                    {
                                        couponInfo.CustomCost = false;
                                        if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                                        {
                                            couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                                        {
                                            couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                }
                                else
                                {

                                    couponInfo.Total.Amount += PromoDataModel.ApplyPromo(unit.quantity * (unit.customPrice != null ? (decimal)unit.customPrice : unit.tblPrices.price), unit.purchaseServiceDetailID);
                                    couponInfo.Cost.Amount += 0;
                                }
                            }
                            couponInfo.Status = "<span class=\"block\">" + coupon.tblPurchaseServiceStatus.purchaseServiceStatus + " </span>[" + coupon.tblPurchaseServiceStatus.purchaseServiceStatus + " on " + (coupon.cancelationDateTime != null ? coupon.cancelationDateTime.Value.ToString("yyyy-MM-dd") : "") + "]";
                            couponInfo.StatusID = 3;
                        }
                        else
                        {
                            //dentro del rango
                            couponInfo.Total.Amount = decimal.Round(coupon.total, 2, MidpointRounding.AwayFromZero);
                            couponInfo.Cost.Amount = 0;
                            if (priceTypeID != null)
                            {
                                couponInfo.Total.Amount = 0;
                                couponInfo.Cost.Amount = 0;
                            }

                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6)
                            {
                                //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                                Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);
                                foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    if (unit.netPriceID != null)
                                    {
                                        if (priceTypeID != null)
                                        {
                                            couponInfo.Total.Amount += decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (unit.dealPrice != null ? (decimal)unit.dealPrice : Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price), unit.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);
                                        }

                                        if (unit.customCost != null)
                                        {
                                            couponInfo.CustomCost = true;
                                            if (coupon.tblCurrencies.currencyCode == unit.tblPrices1.tblCurrencies.currencyCode)
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCost;
                                            }
                                            else
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCostAlt;
                                            }
                                        }
                                        else
                                        {
                                            couponInfo.CustomCost = false;
                                            if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                            else
                                            {
                                                couponInfo.Cost.Amount += 0;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (priceTypeID != null)
                                        {
                                            couponInfo.Total.Amount += PromoDataModel.ApplyPromo(unit.quantity * (unit.customPrice != null ? (decimal)unit.customPrice : unit.tblPrices.price), unit.purchaseServiceDetailID);
                                        }
                                        couponInfo.Cost.Amount += 0;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //fecha de confirmación fuera del rango
                        if (coupon.serviceStatusID == 4)
                        {
                            //cancelacion
                            couponInfo.Total.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            //checar si tiene penalidad o fue reemplazado para poner un total negativo o
                            //var replacedBy = db.tblPurchases_Services.FirstOrDefault(x => x.replacementOf == coupon.purchase_ServiceID);
                            var replacedBy = coupon.tblPurchases_Services1.FirstOrDefault();
                            if ((coupon.cancelationCharge != null && coupon.cancelationCharge > 0) || replacedBy != null)
                            {
                                //cancelation charge
                                //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                                Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);


                                foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    if (unit.netPriceID != null)
                                    {
                                        couponInfo.Total.Amount += decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (unit.dealPrice != null ? (decimal)unit.dealPrice : Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price), unit.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);

                                        if (unit.customCost != null)
                                        {
                                            couponInfo.CustomCost = true;
                                            if (coupon.tblCurrencies.currencyCode == unit.tblPrices1.tblCurrencies.currencyCode)
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCost;
                                            }
                                            else
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCostAlt;
                                            }
                                        }
                                        else
                                        {
                                            couponInfo.CustomCost = false;
                                            if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //justificar precio cuando el netpriceid es nulo
                                        //APPLYPROMO couponInfo.Total.Amount += (unit.promo ? 0 : unit.quantity * (unit.customPrice != null ? (decimal)unit.customPrice : unit.tblPrices.price));
                                        couponInfo.Total.Amount += PromoDataModel.ApplyPromo(unit.quantity * (unit.customPrice != null ? (decimal)unit.customPrice : unit.tblPrices.price), unit.purchaseServiceDetailID);
                                        couponInfo.Cost.Amount += 0;
                                    }
                                }

                                couponInfo.Total.Amount = couponInfo.Total.Amount * -1;
                                couponInfo.Cost.Amount = couponInfo.Cost.Amount * -1;
                                if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0)
                                {
                                    couponInfo.Total.Amount += (decimal)coupon.cancelationCharge;
                                    couponInfo.Status += " [Cancelation Charge $" + coupon.cancelationCharge + "]";
                                }

                                //replaced by
                                if (replacedBy != null)
                                {
                                    couponInfo.Status += " [Replaced by ";
                                    if (replacedBy.tblPurchaseServiceDetails.Count() > 0 && replacedBy.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
                                    {
                                        couponInfo.Status += replacedBy.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, replacedBy.tblPurchaseServiceDetails.FirstOrDefault().coupon.IndexOf("-"));
                                    }
                                    couponInfo.Status += "]";
                                }
                            }
                        }
                        else if (coupon.serviceStatusID == 5)
                        {
                            //refund
                            //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                            Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);
                            couponInfo.Total.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                            {
                                if (unit.netPriceID != null)
                                {

                                    couponInfo.Total.Amount += decimal.Round(PromoDataModel.ApplyPromo(unit.quantity * (unit.dealPrice != null ? (decimal)unit.dealPrice : Prices.FirstOrDefault(x => x.PriceTypeID == unit.priceTypeID && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID).Price), unit.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);

                                    if (unit.customCost != null)
                                    {
                                        couponInfo.CustomCost = true;
                                        if (coupon.tblCurrencies.currencyCode == unit.tblPrices1.tblCurrencies.currencyCode)
                                        {
                                            couponInfo.Cost.Amount = (decimal)unit.customCost;
                                        }
                                        else
                                        {
                                            couponInfo.Cost.Amount = (decimal)unit.customCostAlt;
                                        }
                                    }
                                    else
                                    {
                                        couponInfo.CustomCost = false;
                                        if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                                        {
                                            couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                                        }
                                        else if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                                        {
                                            couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                                        }
                                    }
                                }
                                else
                                {
                                    //justificar precio cuando el netpriceid es nulo
                                    couponInfo.Total.Amount += PromoDataModel.ApplyPromo(unit.quantity * (unit.customPrice != null ? (decimal)unit.customPrice : unit.tblPrices.price), unit.purchaseServiceDetailID);
                                    couponInfo.Cost.Amount += 0;
                                }
                            }
                            couponInfo.Total.Amount = couponInfo.Total.Amount * -1;
                            couponInfo.Cost.Amount = couponInfo.Cost.Amount * -1;
                            if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0)
                            {
                                couponInfo.Total.Amount = couponInfo.Total.Amount + (decimal)coupon.cancelationCharge;
                            }
                        }
                        else
                        {
                            //total
                            couponInfo.Total.Amount = decimal.Round(coupon.total, 2, MidpointRounding.AwayFromZero);
                            couponInfo.Cost.Amount = 0;
                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6)
                            {
                                //Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.terminalID, coupon.tblPurchases.tblPointsOfSale.online, coupon.dateSaved, coupon.tblPurchases.culture);
                                Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.tblPurchases.pointOfSaleID, coupon.tblPurchases.terminalID, coupon.dateSaved, coupon.tblPurchases.culture);

                                foreach (var unit in (priceTypeID == null ? coupon.tblPurchaseServiceDetails : coupon.tblPurchaseServiceDetails.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    if (unit.netPriceID != null)
                                    {
                                        if (unit.customCost != null)
                                        {
                                            couponInfo.CustomCost = true;
                                            if (coupon.tblCurrencies.currencyCode == unit.tblPrices1.tblCurrencies.currencyCode)
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCost;
                                            }
                                            else
                                            {
                                                couponInfo.Cost.Amount = (decimal)unit.customCostAlt;
                                            }
                                        }
                                        else
                                        {
                                            couponInfo.CustomCost = false;
                                            if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null) > 0)
                                            {
                                                couponInfo.Cost.Amount += decimal.Round((coupon.tblPromos != null && coupon.tblPromos.applyToCost ? PromoDataModel.ApplyPromo(unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price, unit.purchaseServiceDetailID) : unit.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == coupon.currencyID && x.PriceID == unit.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        couponInfo.Cost.Amount += 0;
                                    }
                                }
                            }
                        }
                    }
                }

                couponInfo.TotalNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                couponInfo.DealDiffNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.DealDiff.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.DealDiff.Currency
                };
                couponInfo.CostNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.Cost.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                if (couponInfo.Utility.Amount == 0)
                {
                    couponInfo.Utility.Amount = decimal.Round(couponInfo.Total.Amount - couponInfo.Cost.Amount, 2, MidpointRounding.AwayFromZero);
                }
                couponInfo.UtilityNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.TotalNoIVA.Amount - couponInfo.CostNoIVA.Amount, 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                couponInfo.SalesMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
                couponInfo.Commission = new Money();
                couponInfo.CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
                //{
                //    Amount = decimal.Round((couponInfo.TotalNoIVA.Amount * commissionToApply / 100), 2, MidpointRounding.AwayFromZero),
                //    Currency = coupon.tblCurrencies.currencyCode
                //};
            }
            else
            {
                couponInfo.Total = new Money();
                couponInfo.TotalNoIVA = new Money();
                couponInfo.Cost = new Money();
                couponInfo.CostNoIVA = new Money();
                couponInfo.Utility = new Money();
                couponInfo.UtilityNoIVA = new Money();
                couponInfo.DealDiffNoIVA = new Money();
                couponInfo.Commission = new Money();
                couponInfo.CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
            }

            couponInfo.UtilityPercentage = (couponInfo.Total.Amount > 0 ? decimal.Round(couponInfo.Utility.Amount * 100 / couponInfo.Total.Amount, 2, MidpointRounding.AwayFromZero) : 0);

            return couponInfo;
        }

        private CouponDetail GetCouponInfoDetail(tblCouponInfo coupon, DateTime? fDate, DateTime? tDate, bool includeTotals, int? priceTypeID)
        {
            CouponDetail couponInfo = new CouponDetail();
            couponInfo.PurchaseID = coupon.purchaseID;
            couponInfo.CommissionPercentage = 0;
            couponInfo.Customer = coupon.customerFirstName + " " + coupon.customerLastName;
            couponInfo.PurchaseServiceID = coupon.purchase_ServiceID;
            if (coupon.serviceStatusID >= 3 && coupon.tblCouponInfoUnits.Count > 0 && coupon.tblCouponInfoUnits.FirstOrDefault().unitFolio != null)
            {
                if (priceTypeID == null)
                {
                    couponInfo.Folio = coupon.folio;
                }
                else
                {
                    couponInfo.Folio = coupon.tblCouponInfoUnits.FirstOrDefault(f => f.priceTypeID == priceTypeID).unitFolio;
                }
            }
            couponInfo.CouponReference = coupon.couponReference;
            couponInfo.PurchaseDate = coupon.dateSaved;
            couponInfo.SavedOnDate = coupon.dateSaved;
            couponInfo.ConfirmationDate = coupon.dateConfirmed;
            couponInfo.CancelationDate = coupon.dateCanceled;
            couponInfo.Service = coupon.item;
            if (coupon.transportationZoneID != null)
            {
                couponInfo.Service += " to " + coupon.transportationZone;
            }
            couponInfo.Provider = coupon.provider;
            couponInfo.ProviderID = coupon.providerID;
            if (coupon.currencyID == 1)
            {
                couponInfo.ProviderAvanceID = coupon.providerUSDAvanceID;
            }
            else
            {
                couponInfo.ProviderAvanceID = coupon.providerMXNAvanceID;
            }

            foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
            {
                couponInfo.Units += "<span class=\"block\">" + unit.quantity + " " + unit.unit + (unit.isPromo ? " (PROMO)" : "") + "</span>";
                couponInfo.UnitsQty += unit.quantity;
            }

            couponInfo.PointOfSale = coupon.pointOfSale;
            couponInfo.PointOfSaleID = coupon.pointOfSaleID;
            couponInfo.LocationID = coupon.locationID == null ? db.tblPurchases.Single(m => m.purchaseID == coupon.purchaseID).locationID : coupon.locationID;
            couponInfo.Location = couponInfo.LocationID != null ? db.tblLocations.Single(m => m.locationID == couponInfo.LocationID).location : null;
            couponInfo.SalesAgent = coupon.confirmedBy;
            couponInfo.ReservationsAgent = coupon.reservedBy;

            if (coupon.tblCouponInfoUnits.Count() > 0)
            {
                couponInfo.PriceType = "";
                int? lastPriceType = 0;
                foreach (var detail in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                {
                    if (detail.priceTypeID != null && detail.priceTypeID != lastPriceType)
                    {
                        if (couponInfo.PriceType != "")
                        {
                            couponInfo.PriceType += ", ";
                        }
                        couponInfo.PriceType += detail.priceType;
                    }
                    lastPriceType = detail.priceTypeID;
                    if (!detail.unit.Contains("child") && !detail.unit.Contains("kid") && !detail.unit.Contains("niño") && !detail.unit.Contains("Child") && !detail.unit.Contains("Kid") && !detail.unit.Contains("Niño") && !detail.unit.Contains("enor"))
                    {
                        couponInfo.AdultUnits += detail.quantity;
                    }
                    else//mike
                    {
                        couponInfo.ChildUnits += detail.quantity;
                    }
                }
            }

            couponInfo.Percentage = coupon.commissionPercentage;
            couponInfo.Promo = coupon.promo;

            ////////////////////////
            couponInfo.Total = new Money()
            {
                Amount = 0,
                Currency = coupon.currencyCode
            };
            couponInfo.Cost = new Money()
            {
                Amount = 0,
                Currency = coupon.currencyCode
            };
            couponInfo.Utility = new Money()
            {
                Amount = 0,
                Currency = coupon.currencyCode
            };
            couponInfo.DealDiff = new Money()
            {
                Amount = 0,
                Currency = coupon.currencyCode
            };
            if (includeTotals)
            {
                couponInfo.Status = coupon.status;
                couponInfo.StatusID = coupon.serviceStatusID;
                if (fDate == null)
                {
                    fDate = coupon.dateConfirmed;
                    couponInfo.Total.Amount = coupon.currencyID == 1 ? coupon.totalUSD : coupon.totalMXN;
                    if (coupon.dealDiffUSD != null)
                    {
                        couponInfo.DealDiff.Amount = coupon.currencyID == 1 ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN;
                    }
                    couponInfo.Cost.Amount = 0;
                }
                else
                {
                    if ((coupon.dateConfirmed >= fDate && coupon.dateConfirmed < tDate) || coupon.dateConfirmed > tDate)
                    {
                        if (coupon.dateCanceled >= tDate)
                        {
                            //cancelación fuera del rango del reporte, calcular total confirmado
                            couponInfo.Total.Amount = 0;
                            couponInfo.DealDiff.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                            {
                                couponInfo.Total.Amount += coupon.currencyID == 1 ? unit.totalUSD : unit.totalMXN;
                                if (coupon.dealDiffUSD != null)
                                {
                                    couponInfo.DealDiff.Amount += coupon.currencyID == 1 ? (decimal)unit.dealDiffUSD : (decimal)unit.dealDiffMXN;
                                }
                                if (unit.customCost)
                                {
                                    couponInfo.CustomCost = unit.customCost;
                                }
                                couponInfo.Cost.Amount += coupon.currencyID == 1 ? unit.costUSD : unit.costMXN;
                            }
                            couponInfo.Status = "<span class=\"block\">Confirmed" + " </span>[" + coupon.status + " on " + (coupon.dateCanceled != null ? coupon.dateCanceled.Value.ToString("yyyy-MM-dd") : "") + "]";
                            couponInfo.StatusID = 3;
                        }
                        else
                        {
                            //dentro del rango
                            couponInfo.Total.Amount = coupon.currencyID == 1 ? coupon.totalUSD : coupon.totalMXN;
                            //if (coupon.dealDiffUSD != null)
                            //{
                            //    couponInfo.DealDiff.Amount = coupon.currencyID == 1 ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN;
                            //}
                            couponInfo.DealDiff.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            if (priceTypeID != null || coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5)
                            {
                                decimal lastTotal = couponInfo.Total.Amount;
                                couponInfo.Total.Amount = 0;
                                couponInfo.DealDiff.Amount = 0;
                                couponInfo.Cost.Amount = 0;
                                if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0)
                                {
                                    couponInfo.Total.Amount += (decimal)coupon.cancelationCharge;
                                    if (coupon.dealDiffUSD != null)
                                    {
                                        couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount * -1) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);

                                        //couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount ) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);
                                    }
                                    couponInfo.Status += " [Cancelation Charge $" + coupon.cancelationCharge + "]";
                                }
                            }

                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6)
                            {
                                foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    if (priceTypeID != null)
                                    {
                                        couponInfo.Total.Amount += coupon.currencyID == 1 ? unit.totalUSD : unit.totalMXN;
                                    }
                                    if (coupon.dealDiffUSD != null)
                                    {
                                        couponInfo.DealDiff.Amount += coupon.currencyID == 1 ? (decimal)unit.dealDiffUSD : (decimal)unit.dealDiffMXN;
                                    }
                                    if (unit.customCost)
                                    {
                                        couponInfo.CustomCost = true;
                                    }
                                    //mike
                                    var t = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
                                    if (db.tblTerminals.Count(m => t.Contains(m.terminalID) && m.useCommissionCost == true) > 0)
                                    {

                                    }
                                    //end mike
                                    couponInfo.Cost.Amount += coupon.currencyID == 1 ? unit.costUSD : unit.costMXN;
                                }
                            }
                        }
                    }
                    else
                    {
                        //fecha de confirmación fuera del rango
                        if (coupon.serviceStatusID == 4)
                        {
                            //cancelacion
                            couponInfo.Total.Amount = 0;
                            couponInfo.DealDiff.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            //checar si tiene penalidad o fue reemplazado para poner un total negativo o
                            //var replacedBy = db.tblPurchases_Services.FirstOrDefault(x => x.replacementOf == coupon.purchase_ServiceID);
                            if ((coupon.cancelationCharge != null && coupon.cancelationCharge > 0) || coupon.replacedBy != null)
                            {
                                //cancelation charge
                                foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    couponInfo.Total.Amount += coupon.currencyID == 1 ? unit.totalUSD : unit.totalMXN;
                                    if (coupon.dealDiffUSD != null)
                                    {
                                        couponInfo.DealDiff.Amount += coupon.currencyID == 1 ? (decimal)unit.dealDiffUSD : (decimal)unit.dealDiffMXN;
                                    }
                                    if (unit.customCost)
                                    {
                                        couponInfo.CustomCost = true;

                                    }
                                    couponInfo.Cost.Amount += coupon.currencyID == 1 ? unit.costUSD : unit.costMXN;
                                }

                                decimal lastTotal = couponInfo.Total.Amount;
                                couponInfo.Total.Amount = couponInfo.Total.Amount * -1;
                                couponInfo.DealDiff.Amount = couponInfo.DealDiff.Amount * -1;
                                couponInfo.Cost.Amount = couponInfo.Cost.Amount * -1;
                                if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0)
                                {
                                    couponInfo.Total.Amount += (decimal)coupon.cancelationCharge;
                                    if (coupon.dealDiffUSD != null)
                                    {
                                        couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount * -1) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);
                                        //couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);
                                    }
                                    couponInfo.Status += " [Cancelation Charge $" + coupon.cancelationCharge + "]";
                                }

                                //replaced by
                                if (coupon.replacedBy != null)
                                {
                                    couponInfo.Status += " [" + coupon.replacedBy + "]";
                                }
                            }
                        }
                        else if (coupon.serviceStatusID == 5)
                        {
                            //refund
                            couponInfo.Total.Amount = 0;
                            couponInfo.DealDiff.Amount = 0;
                            couponInfo.Cost.Amount = 0;
                            foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                            {

                                couponInfo.Total.Amount += coupon.currencyID == 1 ? unit.totalUSD : unit.totalMXN;
                                if (unit.dealDiffUSD != null)
                                {
                                    couponInfo.DealDiff.Amount += coupon.currencyID == 1 ? (decimal)unit.dealDiffUSD : (decimal)unit.dealDiffMXN;
                                }
                                if (unit.customCost)
                                {
                                    couponInfo.CustomCost = true;
                                }
                                else
                                {
                                    couponInfo.Cost.Amount += coupon.currencyID == 1 ? unit.costUSD : unit.costMXN;
                                }

                            }
                            decimal lastTotal = couponInfo.Total.Amount;
                            couponInfo.Total.Amount = couponInfo.Total.Amount * -1;
                            couponInfo.DealDiff.Amount = couponInfo.DealDiff.Amount * -1;
                            couponInfo.Cost.Amount = couponInfo.Cost.Amount * -1;
                            if (coupon.cancelationCharge != null && coupon.cancelationCharge > 0)
                            {
                                couponInfo.Total.Amount += (decimal)coupon.cancelationCharge;
                                if (coupon.dealDiffUSD != null)
                                {
                                    couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount * -1) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);
                                    //couponInfo.DealDiff.Amount += ((couponInfo.Total.Amount ) * (coupon.dealDiffUSD != null ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN) / lastTotal);
                                }
                                couponInfo.Status += " [Cancelation Charge $" + coupon.cancelationCharge + "]";
                            }
                        }
                        else
                        {
                            //total
                            couponInfo.Total.Amount = coupon.currencyID == 1 ? coupon.totalUSD : coupon.totalMXN;
                            if (coupon.dealDiffUSD != null)
                            {
                                couponInfo.DealDiff.Amount = coupon.currencyID == 1 ? (decimal)coupon.dealDiffUSD : (decimal)coupon.dealDiffMXN;
                            }
                            couponInfo.Cost.Amount = 0;
                            if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6)
                            {
                                foreach (var unit in (priceTypeID == null ? coupon.tblCouponInfoUnits : coupon.tblCouponInfoUnits.Where(p => p.priceTypeID == priceTypeID)))
                                {
                                    if (unit.customCost)
                                    {
                                        couponInfo.CustomCost = true;

                                    }
                                    couponInfo.Cost.Amount += coupon.currencyID == 1 ? unit.costUSD : unit.costMXN;
                                }
                            }
                        }
                    }
                }

                couponInfo.TotalNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                couponInfo.DealDiffNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.DealDiff.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.DealDiff.Currency
                };
                couponInfo.CostNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.Cost.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                if (couponInfo.Utility.Amount == 0)
                {
                    couponInfo.Utility.Amount = decimal.Round(couponInfo.Total.Amount - couponInfo.Cost.Amount, 2, MidpointRounding.AwayFromZero);
                }
                couponInfo.UtilityNoIVA = new Money()
                {
                    Amount = decimal.Round(couponInfo.TotalNoIVA.Amount - couponInfo.CostNoIVA.Amount, 2, MidpointRounding.AwayFromZero),
                    Currency = couponInfo.Total.Currency
                };
                couponInfo.SalesMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
                couponInfo.Commission = new Money();
                couponInfo.CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
            }
            else
            {
                couponInfo.Total = new Money();
                couponInfo.TotalNoIVA = new Money();
                couponInfo.DealDiff = new Money();
                couponInfo.DealDiffNoIVA = new Money();
                couponInfo.Cost = new Money();
                couponInfo.CostNoIVA = new Money();
                couponInfo.Utility = new Money();
                couponInfo.UtilityNoIVA = new Money();
                couponInfo.Commission = new Money();
                couponInfo.CommissionMXN = new Money()
                {
                    Amount = 0,
                    Currency = "MXN"
                };
            }

            couponInfo.UtilityPercentage = (couponInfo.Total.Amount != 0 ? decimal.Round(couponInfo.Utility.Amount * 100 / couponInfo.Total.Amount, 2, MidpointRounding.AwayFromZero) : 0);

            return couponInfo;
        }

        public CouponsHistoryModel GetCouponsHistory(CouponsHistoryModel.SearchCouponsHistory model)
        {
            CouponsHistoryModel report = new CouponsHistoryModel();
            List<long> couponIDs = new List<long>();

            int ProvidersLength = 0;
            int[] ProvidersArr = new int[] { };
            if (model.Search_ProviderID != null)
            {
                ProvidersArr = model.Search_ProviderID;
                ProvidersLength = model.Search_ProviderID.Length;
                var ProvQ = from p in db.tblProviders
                            where model.Search_ProviderID.Contains(p.providerID)
                            select new
                            {
                                p.comercialName
                            };

                foreach (var prov in ProvQ)
                {
                    report.Provider += "<span class=\"block\">" + prov.comercialName + "</span>";
                }
            }

            int PoSLength = 0;
            int[] PoSArr = new int[] { };
            string folio = "";
            if (model.Search_PointOfSaleID != null)
            {
                PoSArr = model.Search_PointOfSaleID;
                PoSLength = model.Search_PointOfSaleID.Length;
                var PosQ = from f in db.tblPointsOfSale
                           where model.Search_PointOfSaleID.Contains(f.pointOfSaleID)
                           select new
                           {
                               f.pointOfSale,
                               f.shortName
                           };

                foreach (var PoS in PosQ)
                {
                    report.PointOfSale += "<span class=\"block\">" + PoS.shortName + " - " + PoS.pointOfSale + "</span>";
                    if (PosQ.Count() == 1)
                    {
                        folio = PoS.shortName;
                    }
                }
            }
            else
            {
                report.PointOfSale = "All";
            }

            report.From = model.Search_FromCoupon;
            report.To = model.Search_ToCoupon;
            report.FromDate = model.Search_I_FromDate;
            report.ToDate = model.Search_F_ToDate;
            report.Coupons = new List<CouponsHistoryModel.CouponItem>();

            int auditStatusLength = 0;
            bool auditStatus = new bool();
            if (model.Search_Audited != null)
            {
                auditStatusLength = model.Search_Audited.Length;
                if (auditStatusLength == 1)
                {
                    auditStatus = model.Search_Audited[0];
                    if (auditStatus)
                    {
                        report.AuditedStatus = "Audited";
                    }
                    else
                    {
                        report.AuditedStatus = "Not Audited";
                    }
                }
            }

            int couponStatusLength = 0;
            int[] couponStatus = new int[] { };
            if (model.Search_CouponStatusID != null)
            {
                couponStatus = model.Search_CouponStatusID.ToArray();
                couponStatusLength = model.Search_CouponStatusID.Length;
            }
            if (couponStatusLength > 0)
            {
                foreach (int cs in couponStatus)
                {
                    report.CouponStatus += "<span class=\"block\">" + model.Search_CouponStatus.Find(x => x.Value == cs.ToString()).Text + "</span>";
                }
            }

            if (PoSLength == 1 && ((model.Search_FromCoupon != "" && model.Search_FromCoupon != null) || (model.Search_ToCoupon != "" && model.Search_ToCoupon != null)))
            {
                int fromNumber = 0;
                int toNumber = 0;
                bool valid = true;
                if (model.Search_FromCoupon.IndexOf(folio) == 0 && model.Search_FromCoupon.Length > 1)
                {
                    fromNumber = int.Parse(model.Search_FromCoupon.Substring(1));
                }
                else
                {
                    if (Utils.GeneralFunctions.Number.IsNumeric(model.Search_FromCoupon))
                    {
                        fromNumber = int.Parse(model.Search_FromCoupon);
                    }
                    else
                    {
                        valid = false;
                    }
                }
                string toCoupon = "";
                if (model.Search_ToCoupon == null)
                {
                    toCoupon = new MasterChartDataModel.Purchases().GetNextCouponFolio(PoSArr[0]).Replace(",", "");
                }
                else
                {
                    toCoupon = model.Search_ToCoupon;
                }
                if (toCoupon.IndexOf(folio) == 0 && toCoupon.Length > 1)
                {
                    toNumber = int.Parse(toCoupon.Substring(1));
                }
                else
                {
                    if (Utils.GeneralFunctions.Number.IsNumeric(toCoupon))
                    {
                        toNumber = int.Parse(toCoupon);
                    }
                    else
                    {
                        valid = false;
                    }
                }

                if (valid)
                {
                    if (model.Search_ToCoupon == null)
                    {
                        toNumber = toNumber - 1;
                    }
                    List<string> folios = new List<string>();
                    for (var i = fromNumber; i <= toNumber; i++)
                    {
                        string currentFolio = folio + i.ToString().PadLeft(5, '0');
                        folios.Add(currentFolio + "-A");
                        folios.Add(currentFolio + "-B");
                        folios.Add(currentFolio + "-C");
                        string currentFolio7 = folio + i.ToString().PadLeft(7, '0');
                        folios.Add(currentFolio7 + "-A");
                        folios.Add(currentFolio7 + "-B");
                        folios.Add(currentFolio7 + "-C");
                    }
                    couponIDs = (from c in db.tblPurchases_Services
                                 join purchase in db.tblPurchases on c.purchaseID equals purchase.purchaseID
                                 join detail in db.tblPurchaseServiceDetails on c.purchase_ServiceID equals
detail.purchase_ServiceID
                                 join service in db.tblServices on c.serviceID equals service.serviceID
                                 where folios.Contains(detail.coupon)
                             && (PoSArr.Contains(purchase.pointOfSaleID) || PoSLength == 0)
                             && (ProvidersArr.Contains(service.providerID) || ProvidersLength == 0)
                                      && purchase.terminalID == model.Search_TerminalID
                                      && (auditStatusLength == 0 || auditStatusLength == 2 || (auditStatusLength == 1 && c.audit == auditStatus))
                                      && (couponStatus.Contains(c.serviceStatusID) || couponStatusLength == 0)
                                 select c.purchase_ServiceID).ToList();
                }
            }
            else
            {
                //confirmation dates
                DateTime? fromDate = null;
                DateTime? toDate = null;
                if (model.Search_I_FromDate != null && model.Search_I_FromDate != "")
                {
                    fromDate = DateTime.Parse(model.Search_I_FromDate);
                    toDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);
                }

                //activity dates
                DateTime? activityFromDate = null;
                DateTime? activityToDate = null;
                if (model.Search_I_ActivityFromDate != null && model.Search_I_ActivityFromDate != "")
                {
                    activityFromDate = DateTime.Parse(model.Search_I_ActivityFromDate);
                    activityToDate = DateTime.Parse(model.Search_F_ActivityToDate).AddDays(1);
                }

                //audit dates
                DateTime? auditFromDate = null;
                DateTime? auditToDate = null;
                if (model.Search_I_AuditFromDate != null && model.Search_I_AuditFromDate != "")
                {
                    auditFromDate = DateTime.Parse(model.Search_I_AuditFromDate);
                    auditToDate = DateTime.Parse(model.Search_F_AuditToDate).AddDays(1);
                }


                couponIDs = (from c in db.tblPurchases_Services
                             join purchase in db.tblPurchases on c.purchaseID equals purchase.purchaseID
                             where purchase.terminalID == model.Search_TerminalID
                             && (PoSArr.Contains(purchase.pointOfSaleID) || PoSLength == 0)
                             && (ProvidersArr.Contains(c.tblServices.providerID) || ProvidersLength == 0)
                             && (auditStatusLength == 0 || auditStatusLength == 2 || (auditStatusLength == 1 && c.audit == auditStatus))
                             && (couponStatus.Contains(c.serviceStatusID) || couponStatusLength == 0)
                             && (c.dateSaved >= fromDate || fromDate == null)
                             && (c.dateSaved < toDate || toDate == null)
                             && (c.serviceDateTime >= activityFromDate || activityFromDate == null)
                             && (c.serviceDateTime < activityToDate || activityToDate == null)
                             && (c.auditDate >= auditFromDate || auditFromDate == null)
                             && (c.auditDate < auditToDate || auditToDate == null)

                             select c.purchase_ServiceID).ToList();
            }

            IQueryable<CouponsHistoryModel.CouponQueryItem> couponsQ;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {

                couponsQ = from c in db.tblPurchases_Services
                           where couponIDs.Contains(c.purchase_ServiceID)
                           select new CouponsHistoryModel.CouponQueryItem()
                           {
                               purchaseID = c.purchaseID,
                               purchase_ServiceID = c.purchase_ServiceID,
                               serviceID = c.serviceID,
                               comercialName = c.tblServices.tblProviders.comercialName,
                               service = c.tblServices.service,
                               serviceDateTime = c.serviceDateTime,
                               promoID = c.promoID,
                               promo = c.tblPromos.promo,
                               serviceStatusID = c.serviceStatusID,
                               purchaseServiceStatus = c.tblPurchaseServiceStatus.purchaseServiceStatus,
                               replacementOf = c.replacementOf,
                               coupon = c.tblPurchases_Services2.tblPurchaseServiceDetails.FirstOrDefault().coupon,
                               userID = c.tblPurchases.userID,
                               online = c.tblPurchases.tblPointsOfSale.online,
                               pointOfSaleID = c.tblPurchases.pointOfSaleID,
                               culture = c.tblPurchases.culture,
                               total = c.total,
                               currencyID = c.currencyID,
                               currencyCode = c.tblCurrencies.currencyCode,
                               dateSaved = c.dateSaved,
                               confirmationDateTime = c.confirmationDateTime,
                               confirmedByUserID = c.confirmedByUserID,
                               cancelationDateTime = c.cancelationDateTime,
                               canceledByUserID = c.canceledByUserID,
                               audit = c.audit,
                               auditedByUserID = c.auditedByUserID,
                               auditDate = c.auditDate,
                               auditInvoice = c.auditInvoice,
                               providerInvoiceID = c.providerInvoiceID,
                               invoiceNumber = c.tblProvidersInvoices.invoiceNumber,
                               closeouts = c.tblCloseOuts_Purchases.Select(x => new CouponsHistoryModel.CloseOutQueryItem()
                               {
                                   salesAgentUserID = x.tblCloseOuts.salesAgentUserID,
                                   shortName = x.tblCloseOuts.tblPointsOfSale.shortName,
                                   closeOutDate = x.tblCloseOuts.closeOutDate,
                                   purchase_ServiceID = x.purchase_ServiceID,
                                   paid = x.paid
                               }),
                               details = c.tblPurchaseServiceDetails.Select(x => new CouponsHistoryModel.DetailQueryItem()
                               {
                                   priceTypeID = x.priceTypeID,
                                   priceType = x.tblPriceTypes.priceType,
                                   netPriceID = x.netPriceID,
                                   priceID = x.priceID,
                                   promo = x.promo,
                                   quantity = x.quantity,
                                   purchaseServiceDetailID = x.purchaseServiceDetailID,
                                   customCost = x.customCost,
                                   customCostAlt = x.customCostAlt,
                                   customCostAltNoIVA = x.customCostAltNoIVA,
                                   customCostNoIVA = x.customCostNoIVA,
                                   currencyCode = x.tblPrices1.tblCurrencies.currencyCode
                               }),
                               folio = c.tblPurchaseServiceDetails.FirstOrDefault().coupon,
                               applyToCost = c.tblPromos.applyToCost
                           };
                scope.Complete();
            }

            foreach (var coupon in couponsQ)
            {
                CouponsHistoryModel.CouponItem currentCoupon = new CouponsHistoryModel.CouponItem();
                if (coupon.folio != null)
                {
                    currentCoupon.Folio = coupon.folio.Substring(0, coupon.folio.IndexOf("-"));
                }
                currentCoupon.PurchaseID = coupon.purchaseID;
                currentCoupon.Purchase_ServiceID = coupon.purchase_ServiceID;
                currentCoupon.Provider = coupon.comercialName;
                currentCoupon.Service = coupon.service;
                currentCoupon.ServiceDate = coupon.serviceDateTime.ToString("yyyy:MM:dd hh:mm:dd tt");
                if (coupon.promoID != null)
                {
                    currentCoupon.Promo = coupon.promo;
                }
                currentCoupon.Status = coupon.purchaseServiceStatus;
                if (coupon.replacementOf != null)
                {
                    currentCoupon.Replacements += "<span class=\"block mb-warning\">On Replacement";
                    if (coupon.coupon != null)
                    {
                        currentCoupon.Replacements += " of " + coupon.coupon.Substring(0, coupon.coupon.IndexOf("-"));
                    }
                    currentCoupon.Replacements += "</span>";
                }
                if (db.tblPurchases_Services.Count(x => x.replacementOf == coupon.purchase_ServiceID) > 0)
                {
                    var replacedBy = db.tblPurchases_Services.FirstOrDefault(x => x.replacementOf == coupon.purchase_ServiceID).tblPurchaseServiceDetails.FirstOrDefault().coupon;
                    if (replacedBy != null)
                    {
                        currentCoupon.Replacements += "<span class=\"block mb-warning\">Replaced by ";
                        if (replacedBy != null)
                        {
                            currentCoupon.Replacements += replacedBy.Substring(0, replacedBy.IndexOf("-"));
                        }
                        currentCoupon.Replacements += "</span>";
                    }
                }

                if (coupon.userID != null)
                {
                    var user = (from u in db.tblUserProfiles
                                where u.userID == coupon.userID
                                select new
                                {
                                    u.firstName,
                                    u.lastName
                                }).FirstOrDefault();
                    currentCoupon.AgentPurchase = user.firstName + " " + user.lastName;
                }
                else
                {
                    currentCoupon.AgentPurchase = "Web Site";
                }
                //currentCoupon.PriceType = "";
                //int? lastPriceTypeID = 0;
                //var Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, model.Search_TerminalID, coupon.online, coupon.confirmationDateTime, "es-MX");
                var Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.pointOfSaleID, model.Search_TerminalID, coupon.confirmationDateTime, "es-MX");
                currentCoupon.Cost = new Money();
                currentCoupon.Cost.Currency = "MXN";
                currentCoupon.Details = new List<CouponsHistoryModel.CouponItemDetail>();
                foreach (var detail in coupon.details)
                {
                    CouponsHistoryModel.CouponItemDetail newDetail = new CouponsHistoryModel.CouponItemDetail();
                    newDetail.UnitCostTotal = new Money();

                    if (coupon.serviceStatusID == 3)
                    {
                        if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID) > 0)
                        {
                            if (detail.customCost != null)
                            {
                                if (detail.currencyCode == "USD")
                                {
                                    currentCoupon.Cost.Amount = (decimal)detail.customCostAlt;
                                }
                                else
                                {
                                    currentCoupon.Cost.Amount = (decimal)detail.customCost;
                                }
                            }
                            else
                            {
                                currentCoupon.Cost.Amount += decimal.Round((coupon.applyToCost == true ? PromoDataModel.ApplyPromo(detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price, detail.purchaseServiceDetailID) : detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                            }

                            newDetail.UnitCostTotal.Currency = "MXN";
                            newDetail.UnitCostTotal.Amount = decimal.Round((coupon.applyToCost == true ? PromoDataModel.ApplyPromo(detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price, detail.purchaseServiceDetailID) : detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID).Price), 2, MidpointRounding.AwayFromZero);
                        }
                        else if (Prices.Count(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null) > 0)
                        {
                            if (detail.customCost != null)
                            {
                                if (detail.currencyCode == "USD")
                                {
                                    currentCoupon.Cost.Amount = (decimal)detail.customCostAlt;
                                }
                                else
                                {
                                    currentCoupon.Cost.Amount = (decimal)detail.customCost;
                                }
                            }
                            else
                            {
                                currentCoupon.Cost.Amount += decimal.Round((coupon.applyToCost == true ? PromoDataModel.ApplyPromo(detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price, detail.purchaseServiceDetailID) : detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                            }

                            newDetail.UnitCostTotal.Currency = "MXN";
                            newDetail.UnitCostTotal.Amount = decimal.Round((coupon.applyToCost == true ? PromoDataModel.ApplyPromo(detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price, detail.purchaseServiceDetailID) : detail.quantity * Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == 2 && x.PriceID == detail.netPriceID && x.PromoID == null).Price), 2, MidpointRounding.AwayFromZero);
                        }
                    }

                    newDetail.Quantity = detail.quantity;
                    tblPriceUnits unit = PriceDataModel.GetUnit((detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID), coupon.culture);
                    newDetail.Unit += unit.unit + (unit.additionalInfo != null ? "[" + unit.additionalInfo + "]" : "") + (detail.promo ? " (PROMO)" : "");
                    newDetail.AccAccPriceType = detail.priceType;
                    BillingModel.AccAcc AccAcc = GetApplicableAccountingAccount(coupon.serviceID, (int)detail.priceTypeID, coupon.currencyID, 2);
                    newDetail.AccAccID = AccAcc.AccAccID;
                    newDetail.AccAccNumber = AccAcc.AccAccNumber;
                    newDetail.AccAccName = AccAcc.AccAccName;
                    newDetail.AccAccArticle = AccAcc.AccAccArticle;

                    currentCoupon.Details.Add(newDetail);
                }
                currentCoupon.Total = coupon.total;
                currentCoupon.Currency = coupon.currencyCode;

                currentCoupon.DateSaved = coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                currentCoupon.DateConfirmed = (coupon.confirmationDateTime != null ? coupon.confirmationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                if (coupon.confirmedByUserID != null)
                {
                    tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == coupon.confirmedByUserID);
                    currentCoupon.AgentConfirmed = user.firstName + " " + user.lastName;
                }
                currentCoupon.DateCanceled = (coupon.cancelationDateTime != null ? coupon.cancelationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                if (coupon.canceledByUserID != null)
                {
                    tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == coupon.canceledByUserID);
                    currentCoupon.AgentCanceled = user.firstName + " " + user.lastName;
                }
                foreach (var closeout in coupon.closeouts.Where(x => x.purchase_ServiceID == coupon.purchase_ServiceID))
                {
                    tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == closeout.salesAgentUserID);
                    if (user != null)
                    {
                        currentCoupon.CloseOut += "<span class=\"block\">" + closeout.shortName + " " + user.firstName + " " + user.lastName + " " + closeout.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                    }
                    else
                    {
                        currentCoupon.CloseOut += "<span class=\"block\">" + closeout.shortName + " All Agents " + closeout.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                    }
                }
                if (coupon.audit == true)
                {
                    var auditUser = db.tblUserProfiles.Select(x => new { x.firstName, x.lastName, x.userID }).FirstOrDefault(x => x.userID == coupon.auditedByUserID);
                    currentCoupon.AuditedByUser = auditUser.firstName + " " + auditUser.lastName;
                    currentCoupon.AuditedOnDate = coupon.auditDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                    currentCoupon.AuditedOnInvoice = coupon.auditInvoice;
                }
                else
                {
                    currentCoupon.AuditedByUser = "None";
                    currentCoupon.AuditedOnDate = "";
                    if (coupon.providerInvoiceID != null)
                    {
                        currentCoupon.AuditedOnInvoice = coupon.invoiceNumber;
                    }
                    else
                    {
                        currentCoupon.AuditedOnInvoice = "";
                    }
                }
                report.Coupons.Add(currentCoupon);
            }

            report.Coupons = report.Coupons.OrderBy(x => x.Folio).ToList();

            return report;
        }

        public CouponsHistoryModel GetCouponsHistoryFromCache(CouponsHistoryModel.SearchCouponsHistory model)
        {
            CouponsHistoryModel report = new CouponsHistoryModel();
            List<long> couponIDs = new List<long>();

            int ProvidersLength = 0;
            int[] ProvidersArr = new int[] { };
            if (model.Search_ProviderID != null)
            {
                ProvidersArr = model.Search_ProviderID;
                ProvidersLength = model.Search_ProviderID.Length;
                var ProvQ = from p in db.tblProviders
                            where model.Search_ProviderID.Contains(p.providerID)
                            select new
                            {
                                p.comercialName
                            };

                foreach (var prov in ProvQ)
                {
                    report.Provider += "<span class=\"block\">" + prov.comercialName + "</span>";
                }
            }

            int PoSLength = 0;
            int[] PoSArr = new int[] { };
            string folio = "";
            if (model.Search_PointOfSaleID != null)
            {
                PoSArr = model.Search_PointOfSaleID;
                PoSLength = model.Search_PointOfSaleID.Length;
                var PosQ = from f in db.tblPointsOfSale
                           where model.Search_PointOfSaleID.Contains(f.pointOfSaleID)
                           select new
                           {
                               f.pointOfSale,
                               f.shortName
                           };

                foreach (var PoS in PosQ)
                {
                    report.PointOfSale += "<span class=\"block\">" + PoS.shortName + " - " + PoS.pointOfSale + "</span>";
                    if (PosQ.Count() == 1)
                    {
                        folio = PoS.shortName;
                    }
                }
            }
            else
            {
                report.PointOfSale = "All";
            }

            report.From = model.Search_FromCoupon;
            report.To = model.Search_ToCoupon;

            report.Coupons = new List<CouponsHistoryModel.CouponItem>();

            int auditStatusLength = 0;
            bool auditStatus = new bool();
            if (model.Search_Audited != null)
            {
                auditStatusLength = model.Search_Audited.Length;
                if (auditStatusLength == 1)
                {
                    auditStatus = model.Search_Audited[0];
                    if (auditStatus)
                    {
                        report.AuditedStatus = "Audited";
                    }
                    else
                    {
                        report.AuditedStatus = "Not Audited";
                    }
                }
            }

            int couponStatusLength = 0;
            int[] couponStatus = new int[] { };
            if (model.Search_CouponStatusID != null)
            {
                couponStatus = model.Search_CouponStatusID.ToArray();
                couponStatusLength = model.Search_CouponStatusID.Length;
            }
            if (couponStatusLength > 1)
            {
                foreach (int cs in couponStatus)
                {
                    report.CouponStatus += "<span class=\"block\">" + model.Search_CouponStatus.Find(x => x.Value == cs.ToString()).Text + "</span>";
                }
            }
            else if (couponStatusLength > 0)
            {
                report.CouponStatus += model.Search_CouponStatus.Find(x => x.Value == model.Search_CouponStatusID[0].ToString()).Text;
            }

            IQueryable<tblCouponInfo> couponsQ = null;
            if (PoSLength == 1 && ((model.Search_FromCoupon != "" && model.Search_FromCoupon != null) || (model.Search_ToCoupon != "" && model.Search_ToCoupon != null)))
            {
                int fromNumber = 0;
                int toNumber = 0;
                bool valid = true;
                if (model.Search_FromCoupon.IndexOf(folio) == 0 && model.Search_FromCoupon.Length > 1)
                {
                    fromNumber = int.Parse(model.Search_FromCoupon.Substring(1));
                }
                else
                {
                    if (Utils.GeneralFunctions.Number.IsNumeric(model.Search_FromCoupon))
                    {
                        fromNumber = int.Parse(model.Search_FromCoupon);
                    }
                    else
                    {
                        valid = false;
                    }
                }
                string toCoupon = "";
                if (model.Search_ToCoupon == null)
                {
                    toCoupon = new MasterChartDataModel.Purchases().GetNextCouponFolio(PoSArr[0]).Replace(",", "");
                }
                else
                {
                    toCoupon = model.Search_ToCoupon;
                }
                if (toCoupon.IndexOf(folio) == 0 && toCoupon.Length > 1)
                {
                    toNumber = int.Parse(toCoupon.Substring(1));
                }
                else
                {
                    if (Utils.GeneralFunctions.Number.IsNumeric(toCoupon))
                    {
                        toNumber = int.Parse(toCoupon);
                    }
                    else
                    {
                        valid = false;
                    }
                }

                if (valid)
                {
                    if (model.Search_ToCoupon == null)
                    {
                        toNumber = toNumber - 1;
                    }
                    List<string> folios = new List<string>();
                    for (var i = fromNumber; i <= toNumber; i++)
                    {
                        string currentFolio = folio + i.ToString().PadLeft(5, '0');
                        folios.Add(currentFolio);
                        string currentFolio7 = folio + i.ToString().PadLeft(7, '0');
                        folios.Add(currentFolio7);
                    }

                    using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
                    {

                        couponsQ = from c in db.tblCouponInfo
                                   where folios.Contains(c.folio)
                               && (PoSArr.Contains(c.pointOfSaleID) || PoSLength == 0)
                               && (ProvidersArr.Contains(c.providerID) || ProvidersLength == 0)
                               && c.terminalID == model.Search_TerminalID
                               && (auditStatusLength == 0 || auditStatusLength == 2 || (auditStatusLength == 1 && c.audited == auditStatus))
                               && (couponStatus.Contains(c.serviceStatusID) || couponStatusLength == 0)
                                   select c;
                        scope.Complete();
                    }


                }
            }
            else
            {
                //confirmation dates
                DateTime? fromDate = null;
                DateTime? toDate = null;
                if (model.Search_I_FromDate != null && model.Search_I_FromDate != "")
                {
                    fromDate = DateTime.Parse(model.Search_I_FromDate);
                    toDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);
                }

                //activity dates
                DateTime? activityFromDate = null;
                DateTime? activityToDate = null;
                if (model.Search_I_ActivityFromDate != null && model.Search_I_ActivityFromDate != "")
                {
                    activityFromDate = DateTime.Parse(model.Search_I_ActivityFromDate);
                    activityToDate = DateTime.Parse(model.Search_F_ActivityToDate).AddDays(1);
                }

                //audit dates
                DateTime? auditFromDate = null;
                DateTime? auditToDate = null;
                if (model.Search_I_AuditFromDate != null && model.Search_I_AuditFromDate != "")
                {
                    auditFromDate = DateTime.Parse(model.Search_I_AuditFromDate);
                    auditToDate = DateTime.Parse(model.Search_F_AuditToDate).AddDays(1);
                }

                using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
                {


                    scope.Complete();
                }

                couponsQ = from c in db.tblCouponInfo
                           where c.terminalID == model.Search_TerminalID
                           && (PoSArr.Contains(c.pointOfSaleID) || PoSLength == 0)
                           && (ProvidersArr.Contains(c.providerID) || ProvidersLength == 0)
                           && (auditStatusLength == 0 || auditStatusLength == 2 || (auditStatusLength == 1 && c.audited == auditStatus))
                           && (couponStatus.Contains(c.serviceStatusID) || couponStatusLength == 0)
                           && (c.dateSaved >= fromDate || fromDate == null)
                           && (c.dateSaved < toDate || toDate == null)
                           && (c.dateItem >= activityFromDate || activityFromDate == null)
                           && (c.dateItem < activityToDate || activityToDate == null)
                           && (c.auditedOnDate >= auditFromDate || auditFromDate == null)
                           && (c.auditedOnDate < auditToDate || auditToDate == null)
                           select c;
            }


            foreach (var coupon in couponsQ)
            {
                CouponsHistoryModel.CouponItem currentCoupon = new CouponsHistoryModel.CouponItem();
                if (coupon.folio != null)
                {
                    currentCoupon.Folio = coupon.folio;
                }
                currentCoupon.PurchaseID = coupon.purchaseID;
                currentCoupon.Purchase_ServiceID = coupon.purchase_ServiceID;
                currentCoupon.Provider = coupon.provider;
                currentCoupon.Service = coupon.item;
                currentCoupon.ServiceDate = coupon.dateItem.ToString("yyyy-MM-dd hh:mm:dd tt");
                if (coupon.promo != null)
                {
                    currentCoupon.Promo = coupon.promo;
                }
                currentCoupon.Status = coupon.status;

                currentCoupon.Replacements += "<span class=\"block mb-warning\">" + coupon.replacementOf + "</span>";
                currentCoupon.Replacements += "<span class=\"block mb-warning\">" + coupon.replacedBy + "</span>";
                currentCoupon.AgentPurchase = coupon.confirmedBy;

                currentCoupon.Cost = new Money();
                currentCoupon.Cost.Currency = coupon.currencyCode;
                currentCoupon.Details = new List<CouponsHistoryModel.CouponItemDetail>();
                foreach (var detail in coupon.tblCouponInfoUnits)
                {
                    CouponsHistoryModel.CouponItemDetail newDetail = new CouponsHistoryModel.CouponItemDetail();
                    newDetail.UnitCostTotal = new Money();

                    if (coupon.serviceStatusID == 3 || coupon.serviceStatusID == 6)
                    {
                        if (coupon.currencyID == 1)
                        {
                            currentCoupon.Cost.Amount += detail.costUSD;
                            newDetail.UnitCostTotal.Amount = detail.costUSD;
                        }
                        else
                        {
                            currentCoupon.Cost.Amount += detail.costMXN;
                            newDetail.UnitCostTotal.Amount = detail.costMXN;
                        }
                        newDetail.UnitCostTotal.Currency = coupon.currencyCode;
                    }

                    newDetail.Quantity = detail.quantity;
                    newDetail.Unit += detail.unit + (detail.isPromo ? " (PROMO)" : "");
                    newDetail.AccAccID = detail.incomeAccountID;
                    newDetail.AccAccNumber = detail.incomeAccountNumber;
                    newDetail.AccAccName = detail.incomeAccountName;
                    newDetail.AccAccArticle = detail.incomeAccountArticle;
                    newDetail.AccAccPriceType = detail.priceType;

                    currentCoupon.Details.Add(newDetail);
                }
                if (coupon.currencyID == 1)
                {
                    currentCoupon.Total = coupon.totalUSD;
                }
                else
                {
                    currentCoupon.Total = coupon.totalMXN;
                }
                currentCoupon.Currency = coupon.currencyCode;

                currentCoupon.DateSaved = coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                currentCoupon.DateConfirmed = (coupon.dateConfirmed != null ? coupon.dateConfirmed.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");

                currentCoupon.AgentConfirmed = coupon.confirmedBy;
                currentCoupon.DateCanceled = (coupon.dateCanceled != null ? coupon.dateCanceled.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                if (coupon.canceledByUserID != null)
                {
                    currentCoupon.AgentCanceled = coupon.canceledBy;
                }

                currentCoupon.CloseOut += (coupon.paidCloseOutID != null ? "<span class=\"block\">" + coupon.paidCloseOut + "</span>" : "") + (coupon.canceledCloseOutID != null ? "<span class=\"block\">" + coupon.canceledCloseOut + "</span>" : "");

                if (coupon.audited == true)
                {
                    currentCoupon.AuditedByUser = coupon.auditedBy;
                    currentCoupon.AuditedOnDate = coupon.auditedOnDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                    currentCoupon.AuditedOnInvoice = coupon.auditedProviderInvoice;
                }
                else
                {
                    currentCoupon.AuditedByUser = "None";
                    currentCoupon.AuditedOnDate = "";
                    if (coupon.providerInvoiceID != null)
                    {
                        currentCoupon.AuditedOnInvoice = coupon.auditedProviderInvoice;
                    }
                    else
                    {
                        currentCoupon.AuditedOnInvoice = "";
                    }
                }
                report.Coupons.Add(currentCoupon);
            }

            report.Coupons = report.Coupons.OrderBy(x => x.Folio).ToList();

            return report;
        }

        //public LegacyUserPermissionsModel GetLegacyUserPermissions(LegacyUserPermissionsModel.SearchUserPermissions model)
        //{
        //    LegacyUserPermissionsModel up = new LegacyUserPermissionsModel();
        //    up.Users = new List<LegacyUserPermissionsModel.UserItem>();
        //    up.SysComponents = new List<LegacyUserPermissionsModel.SysComponentItem>();
        //    List<int> sysComponentIDs = new List<int>();

        //    //carga de componentes
        //    ecommerceEntities db = new ecommerceEntities();
        //    var components = from c in db.tbaEplatModulos
        //                     where c.url != "#"
        //                     select new
        //                     {
        //                         c.idModulo,
        //                         c.modulo
        //                     };

        //    foreach (var comp in components)
        //    {
        //        LegacyUserPermissionsModel.SysComponentItem ci = new LegacyUserPermissionsModel.SysComponentItem();
        //        ci.SysComponentID = comp.idModulo;
        //        sysComponentIDs.Add(comp.idModulo);
        //        ci.SysComponent = GetLegacySysComponentPath(ci.SysComponentID, ref db) + comp.modulo;
        //        up.SysComponents.Add(ci);
        //    }

        //    up.SysComponents = up.SysComponents.OrderBy(x => x.SysComponent).ToList();

        //    var users = from u in db.aspnet_Users
        //                orderby u.UserName
        //                select new
        //                {
        //                    u.UserName,
        //                    u.aspnet_Membership.LoweredEmail,
        //                    u.aspnet_Membership.IsLockedOut,
        //                    u.aspnet_Membership.IsApproved,
        //                    u.LastActivityDate,
        //                    terminals = u.tbaTerminalesUsuarios.Select(x => x.tbaTerminales.terminal)
        //                    //roles = u.aspnet_Roles1
        //                };

        //    foreach (var user in users)
        //    {
        //        LegacyUserPermissionsModel.UserItem ui = new LegacyUserPermissionsModel.UserItem();
        //        ui.Username = user.UserName;
        //        ui.Email = user.LoweredEmail;
        //        ui.Status = (user.IsApproved ? "Active" : "Inactive");
        //        ui.Locked = (user.IsLockedOut ? "Locked" : "");
        //        ui.LastActivityDate = user.LastActivityDate;
        //        foreach (var t in user.terminals)
        //        {
        //            if (ui.Terminals != null)
        //            {
        //                ui.Terminals += ", ";
        //            }
        //            ui.Terminals += t;
        //        }
        //        ui.AccessProfiles = new List<LegacyUserPermissionsModel.AccessProfileItem>();
        //        foreach (var ap in user.roles)
        //        {
        //            LegacyUserPermissionsModel.AccessProfileItem newAccessProfile = new LegacyUserPermissionsModel.AccessProfileItem();
        //            newAccessProfile.Role = ap.RoleName;
        //            newAccessProfile.Permissions = new List<LegacyUserPermissionsModel.PermissionItem>();

        //            foreach (var sci in up.SysComponents)
        //            {
        //                LegacyUserPermissionsModel.PermissionItem permItem = new LegacyUserPermissionsModel.PermissionItem();
        //                permItem.SysComponentID = sci.SysComponentID;
        //                var access = user.roles.FirstOrDefault(x => x.RoleId == ap.RoleId).tbaEplatRolesPermisos.FirstOrDefault(x => x.idModulo == sci.SysComponentID);
        //                if (access != null && access.acceso == true)
        //                {
        //                    permItem.Read = true;
        //                }
        //                else
        //                {
        //                    permItem.Read = false;
        //                }
        //                newAccessProfile.Permissions.Add(permItem);
        //            }
        //            ui.AccessProfiles.Add(newAccessProfile);
        //        }
        //        up.Users.Add(ui);
        //    }

        //    return up;
        //}

        private string GetLegacySysComponentPath(int id, ref ecommerceEntities db)
        {
            string path = "";
            var parent = (from p in db.tbaEplatModulos
                          where p.idModulo == id
                          select new
                          {
                              p.idModuloPadre,
                              p.tbaEplatModulos2.modulo
                          }).Single();

            if (parent.idModuloPadre != null)
            {
                path += GetLegacySysComponentPath((int)parent.idModuloPadre, ref db);
                path += parent.modulo + " > ";
            }
            return path;
        }

        public UserPermissionsModel GetUserPermissions(UserPermissionsModel.SearchUserPermissions model)
        {
            UserPermissionsModel up = new UserPermissionsModel();
            up.Users = new List<UserPermissionsModel.UserItem>();
            up.SysComponents = new List<UserPermissionsModel.SysComponentItem>();
            List<long> sysComponentIDs = new List<long>();

            //carga de componentes
            var components = from c in db.tblSysComponents
                             where c.url != null
                             || c.sysParentComponentID == 10637
                             || c.sysComponentID == 10749
                             select new
                             {
                                 c.sysComponentID,
                                 c.sysComponent,
                                 c.description
                             };

            foreach (var comp in components)
            {
                UserPermissionsModel.SysComponentItem ci = new UserPermissionsModel.SysComponentItem();
                ci.SysComponentID = comp.sysComponentID;
                sysComponentIDs.Add(comp.sysComponentID);
                ci.SysComponent = GetSysComponentPath(ci.SysComponentID) + (comp.sysComponent.IndexOf("fds") >= 0 ? comp.description : comp.sysComponent);
                up.SysComponents.Add(ci);
            }

            up.SysComponents = up.SysComponents.OrderBy(x => x.SysComponent).ToList();

            int workGroupsLength = 0;
            int[] workGroups = new int[] { };
            if (model.Search_WorkGroups != null)
            {
                workGroups = model.Search_WorkGroups.ToArray();
                workGroupsLength = model.Search_WorkGroups.Length;
            }

            int rolesLength = 0;
            Guid[] roles = new Guid[] { };
            if (model.Search_Roles != null)
            {
                roles = model.Search_Roles.ToArray();
                rolesLength = model.Search_Roles.Length;
            }

            int sTerminalsLength = 0;
            List<long> sTerminals = new List<long> { };
            if (model.Search_Terminals != null)
            {
                sTerminals = model.Search_Terminals.ToList();
                sTerminalsLength = model.Search_Terminals.Length;
            }
            else
            {
                if (!Utils.GeneralFunctions.IsUserInRole("Administrator", session.UserID, false))
                {
                    sTerminals = session.Terminals != "" ?
                            session.Terminals.Split(',').Select(m => long.Parse(m)).ToList() :
                            session.UserTerminals.Split(',').Select(m => long.Parse(m)).ToList();
                    sTerminalsLength = sTerminals.Count();
                }
            }

            var users = from u in db.aspnet_Users
                        where ((model.Search_Status == true && u.aspnet_Membership.IsApproved == true && u.aspnet_Membership.IsLockedOut != true) || (model.Search_Status == false && (u.aspnet_Membership.IsApproved == false || u.aspnet_Membership.IsLockedOut == true)) || model.Search_Status == null)
                        && (u.tblUsers_SysWorkGroups1.Count(w => workGroups.Contains(w.sysWorkGroupID)) > 0 || workGroupsLength == 0)
                        && (u.tblUsers_SysWorkGroups1.Count(r => roles.Contains(r.roleID)) > 0 || rolesLength == 0)
                        && u.tblUsers_SysWorkGroups1.Count() > 0
                        && (u.tblUsers_Terminals.Count(t => sTerminals.Contains(t.terminalID)) > 0 || sTerminalsLength == 0)
                        orderby u.tblUserProfiles.FirstOrDefault().firstName
                        select new
                        {
                            u.tblUserProfiles.FirstOrDefault().firstName,
                            u.tblUserProfiles.FirstOrDefault().lastName,
                            u.aspnet_Membership.LoweredEmail,
                            jobPositions = u.tblUsers_JobPositions.Select(x => x.tblJobPositions.jobPosition),
                            u.aspnet_Membership.IsLockedOut,
                            u.aspnet_Membership.IsApproved,
                            u.LastActivityDate,
                            terminalids = u.tblUsers_Terminals.Select(x => x.terminalID),
                            terminals = u.tblUsers_Terminals.Select(x => x.tblTerminals.terminal),
                            supervisorFirstName = u.tblSupervisors_Agents1.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().firstName,
                            supervisorLastName = u.tblSupervisors_Agents1.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                            u.tblUsers_SysWorkGroups1
                        };

            foreach (var user in users)
            {
                UserPermissionsModel.UserItem ui = new UserPermissionsModel.UserItem();
                ui.FirstName = user.firstName;
                ui.LastName = user.lastName;
                ui.Email = user.LoweredEmail;
                ui.SupervisedBy = user.supervisorFirstName + " " + user.supervisorLastName;
                ui.Status = (user.IsApproved ? "Active" : "Inactive");
                ui.Locked = (user.IsLockedOut ? "Locked" : "");
                ui.LastActivityDate = user.LastActivityDate;
                foreach (var t in user.terminals)
                {
                    if (ui.Terminals != null)
                    {
                        ui.Terminals += ", ";
                    }
                    ui.Terminals += t;
                }
                foreach (var jp in user.jobPositions)
                {
                    if (ui.JobPosition != null)
                    {
                        ui.JobPosition += ", ";
                    }
                    ui.JobPosition += jp;
                }
                ui.AccessProfiles = new List<UserPermissionsModel.AccessProfileItem>();
                foreach (var ap in user.tblUsers_SysWorkGroups1)
                {
                    UserPermissionsModel.AccessProfileItem newAccessProfile = new UserPermissionsModel.AccessProfileItem();
                    newAccessProfile.WorkGroup = ap.tblSysWorkGroups.sysWorkGroup;
                    newAccessProfile.Role = ap.aspnet_Roles.RoleName;
                    newAccessProfile.Permissions = new List<UserPermissionsModel.PermissionItem>();

                    var permissions = from p in db.tblSysProfiles
                                      where p.roleID == ap.roleID
                                      && p.sysWorkGroupID == ap.sysWorkGroupID
                                      && sysComponentIDs.Contains(p.sysComponentID)
                                      select new
                                      {
                                          p.sysComponentID,
                                          p.view_
                                      };

                    foreach (var sci in up.SysComponents.OrderBy(x => x.SysComponent))
                    {
                        UserPermissionsModel.PermissionItem permItem = new UserPermissionsModel.PermissionItem();
                        permItem.SysComponentID = sci.SysComponentID;
                        if (permissions.FirstOrDefault(x => x.sysComponentID == sci.SysComponentID) != null)
                        {
                            permItem.Read = permissions.FirstOrDefault(x => x.sysComponentID == sci.SysComponentID).view_;
                        }
                        else
                        {
                            permItem.Read = false;
                        }
                        newAccessProfile.Permissions.Add(permItem);
                    }

                    ui.AccessProfiles.Add(newAccessProfile);
                }

                up.Users.Add(ui);
            }

            return up;
        }

        private string GetSysComponentPath(long id)
        {
            string path = "";
            var parent = (from p in db.tblSysComponents
                          where p.sysComponentID == id
                          select new
                          {
                              p.sysParentComponentID,
                              p.tblSysComponents2.sysComponent
                          }).Single();

            if (parent.sysParentComponentID != null)
            {
                path += GetSysComponentPath((long)parent.sysParentComponentID);
                if (parent.sysComponent != "fdsCatalogsManagement" && parent.sysComponent != "frmLeadGeneralInformation" && parent.sysComponent != "fdsLeadInformation")
                {
                    path += parent.sysComponent + " > ";
                }
            }

            return path;
        }

        //GetCommissions from tblPurchase_Services
        public CommissionsReportModel GetCommissions(CommissionsReportModel.SearchCommissionsReportModel model)
        {
            CommissionsReportModel commissionsView = new CommissionsReportModel();
            List<CouponDetailStored> storedCoupons = new List<CouponDetailStored>();
            IQueryable<tblExchangeRates> exchangeRates = null;
            ePlatEntities db = new ePlatEntities();
            commissionsView.FromDate = model.Search_I_FromDate;
            commissionsView.ToDate = model.Search_F_ToDate;
            DateTime fromDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime toDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fromDate.AddDays(1));

            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select new
                                  {
                                      p.shortName,
                                      p.pointOfSale
                                  };

                foreach (var point in PointsQuery)
                {
                    commissionsView.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                commissionsView.PointOfSale = "All";
            }

            commissionsView.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, fromDate, toDate);


            List<CommissionsReportModel.CommissionsWorker> workers = new List<CommissionsReportModel.CommissionsWorker>();
            int requestedAgents = (model.Search_SalesAgentID != null ? model.Search_SalesAgentID.Length : 0);
            if (model.Search_SalesAgentID != null && model.Search_SalesAgentID.Length > 0)
            {
                var commissionableUsers = from u in db.tblUsers_JobPositions
                                          where model.Search_SalesAgentID.Contains(u.userID)
                                          && u.fromDate < toDate && (u.toDate >= fromDate || u.toDate == null)
                                          select new
                                          {
                                              u.userID,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                                              u.jobPositionID,
                                              u.tblJobPositions.jobPosition
                                          };

                foreach (var position in commissionableUsers)
                {
                    workers.Add(GetNewWorkerObject(position.userID, position.firstName, position.lastName, position.jobPositionID, position.jobPosition, commissionsView.PriceTypes));
                }
            }
            else
            {
                var jobPositions = (from j in db.tblCommissions
                                    where j.terminalID == model.Search_TerminalID
                                    select j.jobPositionID).Distinct();

                var commissionableUsers = from u in db.tblUsers_JobPositions
                                          where jobPositions.Contains(u.jobPositionID)
                                          && u.aspnet_Users.tblUsers_Terminals.Count(x => x.terminalID == model.Search_TerminalID) > 0
                                          && u.aspnet_Users.aspnet_Membership.IsApproved == true && u.aspnet_Users.aspnet_Membership.IsLockedOut != true
                                          && u.fromDate < toDate && (u.toDate >= fromDate || u.toDate == null)
                                          orderby u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName, u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName
                                          select new
                                          {
                                              u.userID,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                                              u.tblJobPositions.jobPosition,
                                              u.jobPositionID
                                          };

                foreach (var user in commissionableUsers)
                {
                    workers.Add(GetNewWorkerObject(user.userID, user.firstName, user.lastName, user.jobPositionID, user.jobPosition, commissionsView.PriceTypes));
                }
            }
            commissionsView.Workers = workers;

            //obtencion de cupones de ventas
            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            //revisar si alguno de los solicitantes tiene override
            bool isBonus = (model.Search_ReportType == 1 ? false : true);
            int[] jobPositionsArray = commissionsView.Workers.Select(x => x.JobPositionID).Distinct().ToArray();
            List<int> overridableJobPositions = new List<int>();
            IQueryable<CommissionsReportClass> Commissions;
            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {
                Commissions = from c in db.tblCommissions
                              where jobPositionsArray.Contains(c.jobPositionID)
                              && c.terminalID == model.Search_TerminalID
                              && c.isBonus == isBonus
                              && ((c.permanent_ && c.fromDate <= toDate)
                              || (c.permanent_ == false && (c.fromDate <= toDate && c.toDate >= fromDate)))
                              select new CommissionsReportClass()
                              {
                                  jobPositionID = c.jobPositionID,
                                  terminalID = c.terminalID,
                                  priceTypeID = c.priceTypeID,
                                  commissionPercentage = c.commissionPercentage,
                                  @override = c.@override,
                                  pointOfSaleIDs = c.tblCommissions_PointsOfSale.Select(x => x.pointOfSaleID),
                                  minProfit = c.minProfit,
                                  minVolume = c.minVolume,
                                  maxProfit = c.maxProfit,
                                  maxVolume = c.maxVolume,
                                  volumeCurrencyCode = c.volumeCurrencyCode,
                                  permanent_ = c.permanent_,
                                  fromDate = c.fromDate,
                                  toDate = c.toDate
                              };
                scope.Complete();
            }
            //si no tiene override, obtener solo los cupones vendidos
            bool hasOverride = (Commissions.Count(x => x.@override == true) > 0 ? true : false);
            //List<int> overridableJobPositions = Commissions.Where(x => x.@override).Select(x => x.jobPositionID).Distinct().ToList();
            overridableJobPositions = Commissions.Where(x => x.@override).Select(x => x.jobPositionID).Distinct().ToList();

            //agentes con ventas sin override
            int usersOSALength = workers.Count(x => x.JobPosition.IndexOf("Online Sales Agent") >= 0);
            List<Guid?> usersOSA = new List<Guid?>();
            int usersSALength = workers.Count(x => x.JobPosition.IndexOf("Sales Agent") >= 0 && x.JobPosition.IndexOf("Online") < 0);
            List<Guid?> usersSA = new List<Guid?>();
            int usersRALength = workers.Count(x => x.JobPosition.IndexOf("Reservations Agent") >= 0);
            List<Guid?> usersRA = new List<Guid?>();
            List<Guid?> AllSubordinatedUsersIDs = new List<Guid?>();

            foreach (var worker in workers)
            {
                if (usersOSALength > 0 && worker.JobPosition.IndexOf("Online Sales Agent") >= 0)
                {
                    usersOSA.Add(worker.UserID);
                }
                if (usersSALength > 0 && worker.JobPosition.IndexOf("Sales Agent") >= 0 && worker.JobPosition.IndexOf("Online") < 0)
                {
                    usersSA.Add(worker.UserID);
                }
                if (usersRALength > 0 && worker.JobPosition.IndexOf("Reservations Agent") >= 0)
                {
                    usersRA.Add(worker.UserID);
                }

                if (overridableJobPositions.Contains(worker.JobPositionID))
                {
                    var subordinatedUsers = db.sp_getSubordinatedUsers(worker.UserID);
                    foreach (var u in subordinatedUsers)
                    {
                        if (u.userID != null)
                        {
                            worker.SubordinatedUsers.Add((Guid)u.userID);
                            AllSubordinatedUsersIDs.Add((Guid)u.userID);
                        }
                    }
                    worker.SubordinatedUsers.Add(worker.UserID);
                    AllSubordinatedUsersIDs.Add(worker.UserID);
                }

            }
            AllSubordinatedUsersIDs = AllSubordinatedUsersIDs.Distinct().ToList();

            bool isAgent = (usersOSALength + usersSALength + usersRALength > 0 ? true : false);

            //procesar para obtener los tipos de precio comisionables
            List<int?> commissionablePrices = new List<int?>();
            foreach (var ptid in Commissions.Select(x => x.priceTypeID).Distinct())
            {
                commissionablePrices.Add(ptid);
            };

            IQueryable<tblPurchases_Services> CouponsQuery;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {
                CouponsQuery = (from coupon in db.tblPurchases_Services
                                join purchase in db.tblPurchases on coupon.purchaseID equals purchase.purchaseID
                                //into coupon_purchase
                                //from purchase in coupon_purchase.DefaultIfEmpty()
                                join service in db.tblServices on coupon.serviceID equals service.serviceID
                                //into coupon_service
                                //from service in coupon_service.DefaultIfEmpty()
                                join pos in db.tblPointsOfSale on purchase.pointOfSaleID equals pos.pointOfSaleID
                                //into coupon_pointOfSale
                                //from pos in coupon_pointOfSale.DefaultIfEmpty()
                                join detail in db.tblPurchaseServiceDetails on coupon.purchase_ServiceID equals detail.purchase_ServiceID
                                //into coupon_detail
                                //from detail in coupon_detail.DefaultIfEmpty()
                                join currency in db.tblCurrencies on purchase.currencyID equals currency.currencyID
                                //into coupon_currency
                                //from currency in coupon_currency.DefaultIfEmpty()
                                where (
                               (coupon.confirmationDateTime >= fromDate
                               && coupon.confirmationDateTime < toDate
                               && coupon.serviceStatusID >= 3)
                               ||
                               (coupon.confirmationDateTime < fromDate
                               && coupon.cancelationDateTime >= fromDate
                               && coupon.cancelationDateTime < toDate
                               && (coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5))
                               )
                               && (pointsOfSale.Contains(purchase.pointOfSaleID) || pointsOfSaleLength == 0)
                               && purchase.terminalID == model.Search_TerminalID
                               && purchase.isTest != true
                               && commissionablePrices.Contains(detail.priceTypeID)
                               && ((requestedAgents == 1 && (isAgent && (usersOSA.Contains(purchase.userID) || usersOSALength == 0) || (usersSA.Contains(coupon.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(purchase.agentID) || usersRALength == 0)) || (hasOverride && AllSubordinatedUsersIDs.Contains(coupon.confirmedByUserID)))
                               || (requestedAgents != 1 && ((hasOverride && AllSubordinatedUsersIDs.Contains(coupon.confirmedByUserID)) || ((usersOSA.Contains(purchase.userID) || usersOSALength == 0) || (usersSA.Contains(coupon.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(purchase.agentID) || usersRALength == 0)))))
                                /*where (
                                (coupon.confirmationDateTime >= fromDate
                                && coupon.confirmationDateTime < toDate
                                && coupon.serviceStatusID >= 3)
                                ||
                                (coupon.confirmationDateTime < fromDate
                                && coupon.cancelationDateTime >= fromDate
                                && coupon.cancelationDateTime < toDate
                                && (coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5))
                                )
                                && (pointsOfSale.Contains(coupon.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                                && coupon.tblPurchases.terminalID == model.Search_TerminalID
                                && coupon.tblPurchases.isTest != true
                                && coupon.tblPurchaseServiceDetails.Count(x => commissionablePrices.Contains(x.priceTypeID)) > 0
                                && ((requestedAgents == 1 && (isAgent && (usersOSA.Contains(coupon.tblPurchases.userID) || usersOSALength == 0) || (usersSA.Contains(coupon.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(coupon.tblPurchases.agentID) || usersRALength == 0)) || (hasOverride && AllSubordinatedUsersIDs.Contains(coupon.confirmedByUserID)))
                                || (requestedAgents != 1 && ((hasOverride && AllSubordinatedUsersIDs.Contains(coupon.confirmedByUserID)) || ((usersOSA.Contains(coupon.tblPurchases.userID) || usersOSALength == 0) || (usersSA.Contains(coupon.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(coupon.tblPurchases.agentID) || usersRALength == 0)))))*/
                                select coupon).Distinct();

                scope.Complete();
            }

            //revisar las ventas que aplican para la comision del worker
            foreach (CommissionsReportModel.CommissionsWorker worker in commissionsView.Workers)
            {


                var WorkerCommissions = from c in Commissions
                                        where c.jobPositionID == worker.JobPositionID
                                        && c.terminalID == model.Search_TerminalID
                                        select new
                                        {
                                            c.priceTypeID,
                                            c.commissionPercentage,
                                            c.@override,
                                            c.pointOfSaleIDs,
                                            c.minProfit,
                                            c.minVolume,
                                            c.maxProfit,
                                            c.maxVolume,
                                            c.volumeCurrencyCode,
                                            c.permanent_,
                                            c.fromDate,
                                            c.toDate
                                        };

                //mínimo profit para el bonus
                decimal minProfit = 0;
                if (isBonus)
                {
                    minProfit = WorkerCommissions.OrderBy(x => x.minProfit).Select(x => x.minProfit).FirstOrDefault();
                }

                var Coupons = CouponsQuery;
                if (worker.JobPosition.IndexOf("Online Sales Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.tblPurchases.userID == worker.UserID
                              select c;
                }
                else if (worker.JobPosition.IndexOf("Sales Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.confirmedByUserID == worker.UserID
                              select c;
                }
                else if (worker.JobPosition.IndexOf("Reservations Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.tblPurchases.agentID == worker.UserID
                              select c;
                }

                List<CommissionsReportModel.CommissionsByService> Services = new List<CommissionsReportModel.CommissionsByService>();
                foreach (var coupon in Coupons)
                {
                    if (Services.Where(c => c.ServiceID == coupon.serviceID).Count() == 0)
                    {
                        CommissionsReportModel.CommissionsByService currentCommission = new CommissionsReportModel.CommissionsByService();
                        currentCommission.ServiceID = coupon.serviceID;
                        currentCommission.Service = coupon.tblServices.service;
                        List<CommissionsReportModel.CommissionDetail> commissionDetails = new List<CommissionsReportModel.CommissionDetail>();
                        foreach (var type in commissionsView.PriceTypes)
                        {
                            CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                            detail.PriceTypeID = type.PriceTypeID;
                            detail.Coupons = new List<CouponDetail>();
                            detail.Sales = GetDefaultListOfMoney();
                            detail.SalesMXN = new Money()
                            {
                                Amount = 0,
                                Currency = "MXN"
                            };
                            detail.Commissions = GetDefaultListOfMoney();
                            detail.CommissionMXN = new Money()
                            {
                                Amount = 0,
                                Currency = "MXN"
                            };
                            commissionDetails.Add(detail);
                        }
                        currentCommission.CommissionsPerPrice = commissionDetails;
                        currentCommission.Subtotal = new CommissionsReportModel.CommissionTotal()
                        {
                            Sales = GetDefaultListOfMoney(),
                            SalesMXN = new Money()
                            {
                                Amount = 0,
                                Currency = "MXN"
                            },
                            Commissions = GetDefaultListOfMoney(),
                            CommissionMXN = new Money()
                            {
                                Amount = 0,
                                Currency = "MXN"
                            }
                        };
                        Services.Add(currentCommission);

                    }

                    //coupons
                    int couponPriceTypes = coupon.tblPurchaseServiceDetails.Select(x => x.priceTypeID).Distinct().Count();

                    //comisión por unidad y tipo de precio
                    foreach (int priceTypeID in coupon.tblPurchaseServiceDetails.Select(x => x.priceTypeID).Distinct())
                    {
                        bool isOverride = false;

                        var commissionOverridable = (from c in WorkerCommissions
                                                     where c.priceTypeID == priceTypeID
                                                     && c.pointOfSaleIDs.Where(p => p == coupon.tblPurchases.pointOfSaleID).Count() > 0
                                                     && ((c.permanent_ && c.fromDate <= coupon.confirmationDateTime) || (!c.permanent_ && c.fromDate <= coupon.confirmationDateTime && c.toDate >= coupon.confirmationDateTime))
                                                     select c.@override).FirstOrDefault();

                        if (commissionOverridable != null)
                        {
                            isOverride = commissionOverridable;
                        }

                        bool commissionable = true;
                        if (isOverride && !worker.SubordinatedUsers.Contains(coupon.confirmedByUserID))
                        {
                            commissionable = false;
                        }
                        else if (!isOverride && worker.UserID != coupon.confirmedByUserID && worker.JobPosition.IndexOf("Online Sales Agent") == -1 && worker.JobPosition.IndexOf("Reservations Agent") == -1)
                        {
                            commissionable = false;
                        }

                        if (commissionable)
                        {
                            CouponDetail couponInfo = new CouponDetail();
                            //if (storedCoupons.Count(x => x.PurchaseServiceID == coupon.purchase_ServiceID && x.PriceTypeID == priceTypeID) > 0)
                            //{
                            //    couponInfo = storedCoupons.FirstOrDefault(x => x.PurchaseServiceID == coupon.purchase_ServiceID && x.PriceTypeID == priceTypeID).Coupon;
                            //}
                            //else
                            //{
                            if (couponPriceTypes > 1)
                            {
                                couponInfo = GetCouponDetail(coupon, fromDate, toDate, true, priceTypeID);
                            }
                            else
                            {
                                couponInfo = GetCouponDetail(coupon, fromDate, toDate);
                            }
                            //    storedCoupons.Add(new CouponDetailStored()
                            //    {
                            //        PurchaseServiceID = coupon.purchase_ServiceID,
                            //        Coupon = couponInfo,
                            //        PriceTypeID = priceTypeID
                            //    });

                            //}

                            var processable = true;
                            if (couponInfo.Percentage == -1)
                            {
                                //verificar en la tabla de exclusiones si el jobposition está en la tabla o la tabla no tiene registros. Si para el puesto es procesable, poner couponInfo.Percentage = 0.
                                var Exclusions = from x in db.tblCommissionExclusions
                                                 where x.serviceID == coupon.serviceID
                                                 select x;

                                if (Exclusions.Count() > 0)
                                {
                                    if (Exclusions.Count(x => x.jobPositionID == worker.JobPositionID) > 0)
                                    {
                                        processable = false;
                                    }
                                    else
                                    {
                                        couponInfo.Percentage = 0;
                                    }
                                }
                                else
                                {
                                    processable = false;
                                }
                            }

                            if (isBonus && couponInfo.UtilityPercentage < minProfit)
                            {
                                processable = false;
                            }

                            if (processable)
                            {
                                if (Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                                    detail.PriceTypeID = priceTypeID;
                                    detail.Coupons = new List<CouponDetail>();
                                    detail.Sales = GetDefaultListOfMoney();
                                    detail.SalesMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    detail.Commissions = GetDefaultListOfMoney();
                                    detail.CommissionMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.Add(detail);
                                }
                                if (commissionsView.PriceTypes.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    PriceType pt = new PriceType();
                                    pt.Order = commissionsView.PriceTypes.Count();
                                    pt.PriceTypeID = priceTypeID;
                                    pt.Type = db.tblPriceTypes.FirstOrDefault(x => x.priceTypeID == priceTypeID).priceType;
                                    commissionsView.PriceTypes.Add(pt);
                                }

                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Coupons.Add(couponInfo);

                                if (worker.TotalsPerPrice.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                                    detail.PriceTypeID = priceTypeID;
                                    detail.Coupons = new List<CouponDetail>();
                                    detail.Sales = GetDefaultListOfMoney();
                                    detail.SalesMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    detail.Commissions = GetDefaultListOfMoney();
                                    detail.CommissionMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    worker.TotalsPerPrice.Add(detail);
                                }
                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Coupons.Add(couponInfo);

                                //totales
                                //-total sales per activity price
                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Sales.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //-total sales per activity
                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.Sales.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //-total sales per price type
                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Sales.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //-grand total per worker
                                worker.Total.Sales.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //commissions
                                if (!isBonus)
                                {
                                    if (couponInfo.Percentage >= 0)
                                    {
                                        var commissionPercentage = (from c in WorkerCommissions
                                                                    where c.priceTypeID == priceTypeID
                                                                    && c.pointOfSaleIDs.Where(p => p == coupon.tblPurchases.pointOfSaleID).Count() > 0
                                                                    && ((c.permanent_ && c.fromDate <= coupon.confirmationDateTime) || (!c.permanent_ && c.fromDate <= coupon.confirmationDateTime && c.toDate >= coupon.confirmationDateTime))
                                                                    && c.minProfit <= couponInfo.UtilityPercentage
                                                                    && (c.maxProfit == null || c.maxProfit >= couponInfo.UtilityPercentage)
                                                                    select c.commissionPercentage).FirstOrDefault();

                                        couponInfo.Percentage = commissionPercentage;
                                        couponInfo.Commission.Amount = decimal.Round((couponInfo.TotalNoIVA.Amount * commissionPercentage / 100), 2, MidpointRounding.AwayFromZero);
                                        couponInfo.Commission.Currency = coupon.tblCurrencies.currencyCode;

                                        //si la moneda de venta no es pesos, convertir a pesos con el tipo de cambio de la agencia vigente
                                        if (coupon.currencyID != 2)
                                        {
                                            if (exchangeRates == null)
                                            {
                                                exchangeRates = from r in db.tblExchangeRates
                                                                where r.exchangeRateTypeID == 1
                                                                && r.terminalID == coupon.tblPurchases.terminalID
                                                                && r.providerID == null
                                                                && r.fromCurrencyID == coupon.currencyID
                                                                && r.toCurrencyID == 2
                                                                && ((r.permanent_ && r.fromDate < toDate)
                                                                || (r.permanent_ != true && r.fromDate <= toDate && r.toDate >= fromDate))
                                                                select r;

                                            }

                                            DateTime currentDate = coupon.confirmationDateTime ?? coupon.dateSaved;
                                            tblExchangeRates exchangeRateToApply = null;

                                            exchangeRateToApply = (from x in exchangeRates
                                                                   where ((x.permanent_ && x.fromDate < currentDate)
                                                                   || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                   && x.tblExchangeRates_PointsOfSales.Count(
                                                                        p => p.pointOfSaleID == coupon.tblPurchases.pointOfSaleID
                                                                        && p.dateAdded <= currentDate
                                                                        && (p.dateDeleted == null || p.dateDeleted > currentDate)
                                                                    ) > 0
                                                                   orderby x.fromDate descending
                                                                   select x).FirstOrDefault();

                                            if (exchangeRateToApply == null)
                                            {
                                                exchangeRateToApply = (from x in exchangeRates
                                                                       where ((x.permanent_ && x.fromDate < currentDate)
                                                                       || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                       && x.tblExchangeRates_PointsOfSales.Count() == 0
                                                                       orderby x.fromDate descending
                                                                       select x).FirstOrDefault();

                                                if (exchangeRateToApply == null)
                                                {
                                                    exchangeRateToApply = (from r in db.tblExchangeRates
                                                                           where r.exchangeRateTypeID == 1
                                                                           && r.terminalID == coupon.tblPurchases.terminalID
                                                                           && r.providerID == null
                                                                           && r.fromCurrencyID == coupon.currencyID
                                                                           && r.toCurrencyID == 2
                                                                           && r.fromDate <= toDate
                                                                           && r.tblExchangeRates_PointsOfSales.Count() == 0
                                                                           orderby r.fromDate descending, r.dateSaved descending
                                                                           select r).FirstOrDefault();
                                                }
                                            }

                                            couponInfo.SalesMXN.Amount = decimal.Round(couponInfo.TotalNoIVA.Amount * exchangeRateToApply.exchangeRate, 2, MidpointRounding.AwayFromZero);
                                            couponInfo.CommissionMXN.Amount = decimal.Round(couponInfo.Commission.Amount * exchangeRateToApply.exchangeRate, 2, MidpointRounding.AwayFromZero);
                                            couponInfo.ExchangeRate = exchangeRateToApply.exchangeRate;
                                            couponInfo.ExchangeRateID = exchangeRateToApply.exchangeRateID;
                                            couponInfo.ExchangeRateVigency = exchangeRateToApply.fromDate.ToString("yyyy-MM-dd") + "/" + (exchangeRateToApply.permanent_ ? "permanent" : exchangeRateToApply.toDate.Value.ToString("yyyy-MM-dd"));
                                        }
                                        else
                                        {
                                            couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount;
                                            couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount;
                                            couponInfo.ExchangeRate = 1;
                                        }

                                        //-total commissions per activity price
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Commissions.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Commission.Amount;
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                        //-total commissions per activity
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.Commissions.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Commission.Amount;
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                        Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                        //-total commissions per price type
                                        worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Commissions.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Commission.Amount;
                                        worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                        worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                        //-grand total per worker
                                        worker.Total.Commissions.FirstOrDefault(x => x.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Commission.Amount;
                                        worker.Total.SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                        worker.Total.CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;
                                    }
                                }
                            }
                        }
                    }
                }
                worker.ListServices = Services;

                //revisar total de venta para aplicar comisiones a todos los niveles
                if (isBonus && WorkerCommissions.Count() > 0)
                {
                    decimal bonusVolume = worker.Total.Sales.FirstOrDefault(x => x.Currency == WorkerCommissions.FirstOrDefault().volumeCurrencyCode).Amount;
                    var commisionBonusToApply = (from c in WorkerCommissions
                                                 where c.minVolume <= bonusVolume
                                                 && (c.maxVolume == null || c.maxVolume >= bonusVolume)
                                                 select new
                                                 {
                                                     c.commissionPercentage,
                                                     c.volumeCurrencyCode
                                                 }).FirstOrDefault();

                    if (commisionBonusToApply != null)
                    {
                        foreach (var service in worker.ListServices)
                        {
                            foreach (var commissionPerPrice in service.CommissionsPerPrice)
                            {
                                foreach (var couponInfo in commissionPerPrice.Coupons)
                                {
                                    if (couponInfo.Percentage >= 0)
                                    {
                                        //coupon commission
                                        couponInfo.Percentage = commisionBonusToApply.commissionPercentage;
                                        couponInfo.Commission.Amount = decimal.Round((couponInfo.TotalNoIVA.Amount * commisionBonusToApply.commissionPercentage / 100), 2, MidpointRounding.AwayFromZero);
                                        couponInfo.Commission.Currency = couponInfo.Total.Currency;

                                        //si la moneda de venta no es pesos, convertir a pesos con el tipo de cambio de la agencia vigente
                                        if (couponInfo.Total.Currency != "MXN")
                                        {
                                            if (exchangeRates == null)
                                            {
                                                exchangeRates = from r in db.tblExchangeRates
                                                                where r.exchangeRateTypeID == 1
                                                                && r.terminalID == model.Search_TerminalID
                                                                && r.providerID == null
                                                                && r.tblCurrencies.currencyCode == couponInfo.Total.Currency
                                                                && r.toCurrencyID == 2
                                                                && ((r.permanent_ && r.fromDate < toDate)
                                                                || (r.permanent_ != true && r.fromDate <= toDate && r.toDate >= fromDate))
                                                                select r;

                                            }

                                            DateTime currentDate = couponInfo.ConfirmationDate ?? couponInfo.SavedOnDate;
                                            var exchangeRateToApply = (from x in exchangeRates
                                                                       where ((x.permanent_ && x.fromDate < currentDate)
                                                                       || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                       orderby x.fromDate descending
                                                                       select x).FirstOrDefault();

                                            if (exchangeRateToApply == null)
                                            {
                                                exchangeRateToApply = (from r in db.tblExchangeRates
                                                                       where r.exchangeRateTypeID == 1
                                                                       && r.terminalID == model.Search_TerminalID
                                                                       && r.providerID == null
                                                                       && r.tblCurrencies.currencyCode == couponInfo.Total.Currency
                                                                       && r.toCurrencyID == 2
                                                                       && r.fromDate <= toDate
                                                                       orderby r.fromDate descending, r.dateSaved descending
                                                                       select r).FirstOrDefault();
                                            }
                                            couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount * exchangeRateToApply.exchangeRate;
                                            couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount * exchangeRateToApply.exchangeRate;
                                            couponInfo.ExchangeRate = exchangeRateToApply.exchangeRate;
                                            couponInfo.ExchangeRateID = exchangeRateToApply.exchangeRateID;
                                        }
                                        else
                                        {
                                            couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount;
                                            couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount;
                                            couponInfo.ExchangeRate = 1;
                                        }

                                        //total commissions per activity price
                                        commissionPerPrice.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-total commissions per activity
                                        service.Subtotal.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-total commissions per price type
                                        worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == commissionPerPrice.PriceTypeID).Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-grand total per worker
                                        worker.Total.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return commissionsView;
        }

        public CommissionsReportModel GetCommissionsFromCache(CommissionsReportModel.SearchCommissionsReportModel model)
        {
            CommissionsReportModel commissionsView = new CommissionsReportModel();
            ePlatEntities db = new ePlatEntities();
            IQueryable<tblExchangeRates> exchangeRates = null;
            commissionsView.FromDate = model.Search_I_FromDate;
            commissionsView.ToDate = model.Search_F_ToDate;
            DateTime fromDate = Convert.ToDateTime(model.Search_I_FromDate);
            //DateTime toDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fromDate.AddDays(1));
            DateTime toDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1).AddSeconds(-1) : fromDate.AddDays(1).AddSeconds(-1));

            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select new
                                  {
                                      p.shortName,
                                      p.pointOfSale
                                  };

                foreach (var point in PointsQuery)
                {
                    commissionsView.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                commissionsView.PointOfSale = "All";
            }

            commissionsView.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, fromDate, toDate);

            List<CommissionsReportModel.CommissionsWorker> workers = new List<CommissionsReportModel.CommissionsWorker>();
            int requestedAgents = (model.Search_SalesAgentID != null ? model.Search_SalesAgentID.Length : 0);
            if (model.Search_SalesAgentID != null && model.Search_SalesAgentID.Length > 0)
            {
                var commissionableUsers = from u in db.tblUsers_JobPositions
                                          where model.Search_SalesAgentID.Contains(u.userID)
                                          && u.fromDate < toDate && (u.toDate >= fromDate || u.toDate == null)
                                          select new
                                          {
                                              u.userID,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                                              u.jobPositionID,
                                              u.tblJobPositions.jobPosition
                                          };

                foreach (var position in commissionableUsers)
                {
                    workers.Add(GetNewWorkerObject(position.userID, position.firstName, position.lastName, position.jobPositionID, position.jobPosition, commissionsView.PriceTypes));
                }
            }
            else
            {
                var jobPositions = (from j in db.tblCommissions
                                    where j.terminalID == model.Search_TerminalID
                                    select j.jobPositionID).Distinct();

                var commissionableUsers = from u in db.tblUsers_JobPositions
                                          where jobPositions.Contains(u.jobPositionID)
                                          && u.aspnet_Users.tblUsers_Terminals.Count(x => x.terminalID == model.Search_TerminalID) > 0
                                          && u.aspnet_Users.aspnet_Membership.IsApproved == true && u.aspnet_Users.aspnet_Membership.IsLockedOut != true
                                          && u.fromDate < toDate && (u.toDate >= fromDate || u.toDate == null)
                                          orderby u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName, u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName
                                          select new
                                          {
                                              u.userID,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().firstName,
                                              u.aspnet_Users.tblUserProfiles.FirstOrDefault().lastName,
                                              u.tblJobPositions.jobPosition,
                                              u.jobPositionID
                                          };

                foreach (var user in commissionableUsers)
                {
                    workers.Add(GetNewWorkerObject(user.userID, user.firstName, user.lastName, user.jobPositionID, user.jobPosition, commissionsView.PriceTypes));
                }
            }
            commissionsView.Workers = workers;

            //obtencion de cupones de ventas
            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID.ToArray();
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            //revisar si alguno de los solicitantes tiene override
            bool isBonus = (model.Search_ReportType == 1 ? false : true);
            int[] jobPositionsArray = commissionsView.Workers.Select(x => x.JobPositionID).Distinct().ToArray();
            List<int> overridableJobPositions = new List<int>();
            IQueryable<CommissionsReportClass> Commissions;
            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions
            {
                IsolationLevel = System.Transactions.IsolationLevel.Snapshot
            }))
            {
                Commissions = from c in db.tblCommissions
                              where jobPositionsArray.Contains(c.jobPositionID)
                              && c.terminalID == model.Search_TerminalID
                              && c.isBonus == isBonus
                              && ((c.permanent_ && c.fromDate <= toDate)
                              || (c.permanent_ == false && (c.fromDate <= toDate && c.toDate >= fromDate)))
                              && c.dateDeleted == null && c.deletedByUserID == null
                              select new CommissionsReportClass()
                              {
                                  jobPositionID = c.jobPositionID,
                                  terminalID = c.terminalID,
                                  priceTypeID = c.priceTypeID,
                                  commissionPercentage = c.commissionPercentage,
                                  commissionAmount = c.commissionAmount,
                                  commissionCurrencyID = c.commissionCurrencyID,
                                  @override = c.@override,
                                  pointOfSaleIDs = c.tblCommissions_PointsOfSale.Select(x => x.pointOfSaleID),
                                  minProfit = c.minProfit,
                                  minVolume = c.minVolume,
                                  maxProfit = c.maxProfit,
                                  maxVolume = c.maxVolume,
                                  volumeCurrencyCode = c.volumeCurrencyCode,
                                  permanent_ = c.permanent_,
                                  fromDate = c.fromDate,
                                  toDate = c.toDate,
                                  applyOnSales = c.applyOnSales,
                                  applyOnDealPrice = c.applyOnDealPrice,
                                  applyOnAdultSales = c.applyOnAdultSales,
                                  applyOnChildSales = c.applyOnChildSales,
                                  onlyIfCharged = c.onlyIfCharged
                              };
                scope.Complete();
            }
            //si no tiene override, obtener solo los cupones vendidos
            bool hasOverride = (Commissions.Count(x => x.@override == true) > 0 ? true : false);
            overridableJobPositions = Commissions.Where(x => x.@override).Select(x => x.jobPositionID).Distinct().ToList();

            //agentes con ventas sin override
            int usersOSALength = workers.Count(x => x.JobPosition.IndexOf("Online Sales Agent") >= 0);
            List<Guid?> usersOSA = new List<Guid?>();
            int usersSALength = workers.Count(x => x.JobPosition.IndexOf("Sales Agent") >= 0 && x.JobPosition.IndexOf("Online") < 0);
            List<Guid?> usersSA = new List<Guid?>();
            int usersRALength = workers.Count(x => x.JobPosition.IndexOf("Reservations Agent") >= 0);
            List<Guid?> usersRA = new List<Guid?>();
            List<Guid?> AllSubordinatedUsersIDs = new List<Guid?>();

            foreach (var worker in workers)
            {
                if (usersOSALength > 0 && worker.JobPosition.IndexOf("Online Sales Agent") >= 0)
                {
                    usersOSA.Add(worker.UserID);
                }
                if (usersSALength > 0 && worker.JobPosition.IndexOf("Sales Agent") >= 0 && worker.JobPosition.IndexOf("Online") < 0)
                {
                    usersSA.Add(worker.UserID);
                }
                if (usersRALength > 0 && worker.JobPosition.IndexOf("Reservations Agent") >= 0)
                {
                    usersRA.Add(worker.UserID);
                }

                if (overridableJobPositions.Contains(worker.JobPositionID))
                {
                    var subordinatedUsers = db.sp_getSubordinatedUsers(worker.UserID);
                    foreach (var u in subordinatedUsers)
                    {
                        if (u.userID != null)
                        {
                            worker.SubordinatedUsers.Add((Guid)u.userID);
                            AllSubordinatedUsersIDs.Add((Guid)u.userID);
                        }
                    }
                    worker.SubordinatedUsers.Add(worker.UserID);
                    worker.SubordinatedUsers.Add(null);
                    AllSubordinatedUsersIDs.Add(worker.UserID);
                    AllSubordinatedUsersIDs.Add(null);
                }

            }
            AllSubordinatedUsersIDs = AllSubordinatedUsersIDs.Distinct().ToList();

            bool isAgent = (usersOSALength + usersSALength + usersRALength > 0 ? true : false);

            //procesar para obtener los tipos de precio comisionables
            List<int?> commissionablePrices = new List<int?>();
            foreach (var ptid in Commissions.Select(x => x.priceTypeID).Distinct())
            {
                commissionablePrices.Add(ptid);
            };

            IQueryable<tblCouponInfo> CouponsQuery;

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {
                CouponsQuery = from c in db.tblCouponInfo
                               where (
                               (c.dateConfirmed >= fromDate
                               && c.dateConfirmed < toDate
                               && c.serviceStatusID >= 3)
                               ||
                               (c.dateConfirmed < fromDate
                               && c.dateCanceled >= fromDate
                               && c.dateCanceled < toDate
                               && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                               )
                               && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                               && c.terminalID == model.Search_TerminalID
                               && c.tblCouponInfoUnits.Count(x => commissionablePrices.Contains(x.priceTypeID)) > 0
                               && ((requestedAgents == 1 && (isAgent && (usersOSA.Contains(c.purchaseUserID) || usersOSALength == 0) || (usersSA.Contains(c.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(c.reservedByUserID) || usersRALength == 0)) || (hasOverride && AllSubordinatedUsersIDs.Contains(c.confirmedByUserID)))
                               || (requestedAgents != 1 && ((hasOverride && AllSubordinatedUsersIDs.Contains(c.confirmedByUserID)) || ((usersOSA.Contains(c.purchaseUserID) || usersOSALength == 0) || (usersSA.Contains(c.confirmedByUserID) || usersSALength == 0) || (usersRA.Contains(c.reservedByUserID) || usersRALength == 0)))))
                               select c;

                scope.Complete();
            }

            //revisar las ventas que aplican para la comision del worker
            foreach (CommissionsReportModel.CommissionsWorker worker in commissionsView.Workers)
            {
                var WorkerCommissions = from c in Commissions
                                        where c.jobPositionID == worker.JobPositionID
                                        && c.terminalID == model.Search_TerminalID
                                        select new
                                        {
                                            c.priceTypeID,
                                            c.commissionPercentage,
                                            c.commissionAmount,
                                            c.commissionCurrencyID,
                                            c.@override,
                                            c.pointOfSaleIDs,
                                            c.minProfit,
                                            c.minVolume,
                                            c.maxProfit,
                                            c.maxVolume,
                                            c.volumeCurrencyCode,
                                            c.permanent_,
                                            c.fromDate,
                                            c.toDate,
                                            c.applyOnAdultSales,
                                            c.applyOnChildSales,
                                            c.applyOnDealPrice,
                                            c.applyOnSales,
                                            c.onlyIfCharged
                                        };

                //mínimo profit para el bonus
                decimal minProfit = 0;
                if (isBonus)
                {
                    minProfit = WorkerCommissions.OrderBy(x => x.minProfit).Select(x => x.minProfit).FirstOrDefault();
                }

                var Coupons = CouponsQuery;
                if (worker.JobPosition.IndexOf("Online Sales Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.purchaseUserID == worker.UserID
                              select c;
                }
                else if (worker.JobPosition.IndexOf("Sales Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.confirmedByUserID == worker.UserID
                              select c;
                }
                else if (worker.JobPosition.IndexOf("Reservations Agent") >= 0)
                {
                    Coupons = from c in Coupons
                              where c.reservedByUserID == worker.UserID
                              select c;
                }

                List<CommissionsReportModel.CommissionsByService> Services = new List<CommissionsReportModel.CommissionsByService>();
                foreach (var coupon in Coupons)
                {
                    CommissionsReportModel.CommissionsByService currentCommission = new CommissionsReportModel.CommissionsByService();
                    currentCommission.ServiceID = coupon.serviceID;
                    currentCommission.Service = coupon.item;
                    List<CommissionsReportModel.CommissionDetail> commissionDetails = new List<CommissionsReportModel.CommissionDetail>();
                    foreach (var type in commissionsView.PriceTypes)
                    {
                        CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                        detail.PriceTypeID = type.PriceTypeID;
                        detail.Coupons = new List<CouponDetail>();
                        detail.Sales = GetDefaultListOfMoney();
                        detail.SalesMXN = new Money()
                        {
                            Amount = 0,
                            Currency = "MXN"
                        };
                        detail.Commissions = GetDefaultListOfMoney();
                        detail.CommissionMXN = new Money()
                        {
                            Amount = 0,
                            Currency = "MXN"
                        };
                        commissionDetails.Add(detail);
                    }
                    currentCommission.CommissionsPerPrice = commissionDetails;
                    currentCommission.Subtotal = new CommissionsReportModel.CommissionTotal()
                    {
                        Sales = GetDefaultListOfMoney(),
                        SalesMXN = new Money()
                        {
                            Amount = 0,
                            Currency = "MXN"
                        },
                        Commissions = GetDefaultListOfMoney(),
                        CommissionMXN = new Money()
                        {
                            Amount = 0,
                            Currency = "MXN"
                        }
                    };
                    Services.Add(currentCommission);

                    //coupons
                    int couponPriceTypes = coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct().Count();

                    //comisión por unidad y tipo de precio
                    foreach (int priceTypeID in coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct())
                    {
                        bool isOverride = false;

                        var commissionOverridable = (from c in WorkerCommissions
                                                     where c.priceTypeID == priceTypeID
                                                     && c.pointOfSaleIDs.Where(p => p == coupon.pointOfSaleID).Count() > 0
                                                     && ((c.permanent_ && c.fromDate <= coupon.dateConfirmed) || (!c.permanent_ && c.fromDate <= coupon.dateConfirmed && c.toDate >= coupon.dateConfirmed))
                                                     select c.@override).FirstOrDefault();

                        if (commissionOverridable != null)
                        {
                            isOverride = commissionOverridable;
                        }

                        bool commissionable = true;
                        if (isOverride && !worker.SubordinatedUsers.Contains(coupon.confirmedByUserID))
                        {
                            commissionable = false;
                        }
                        else if (!isOverride && worker.UserID != coupon.confirmedByUserID && worker.JobPosition.IndexOf("Online Sales Agent") == -1 && worker.JobPosition.IndexOf("Reservations Agent") == -1)
                        {
                            commissionable = false;
                        }

                        if (commissionable)
                        {
                            CouponDetail couponInfo = new CouponDetail();
                            if (couponPriceTypes > 1)
                            {
                                couponInfo = GetCouponInfoDetail(coupon, fromDate, toDate, true, priceTypeID);
                            }
                            else
                            {
                                couponInfo = GetCouponInfoDetail(coupon, fromDate, toDate, true, null);
                            }

                            var processable = true;
                            if (couponInfo.Percentage == -1)
                            {
                                processable = false;
                            }

                            if (isBonus && couponInfo.UtilityPercentage < minProfit)
                            {
                                processable = false;
                            }

                            if (processable)
                            {
                                if (Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                                    detail.PriceTypeID = priceTypeID;
                                    detail.Coupons = new List<CouponDetail>();
                                    detail.Sales = GetDefaultListOfMoney();
                                    detail.SalesMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    detail.Commissions = GetDefaultListOfMoney();
                                    detail.CommissionMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.Add(detail);
                                }
                                if (commissionsView.PriceTypes.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    PriceType pt = new PriceType();
                                    pt.Order = commissionsView.PriceTypes.Count();
                                    pt.PriceTypeID = priceTypeID;
                                    pt.Type = db.tblPriceTypes.FirstOrDefault(x => x.priceTypeID == priceTypeID).priceType;
                                    commissionsView.PriceTypes.Add(pt);
                                }

                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Coupons.Add(couponInfo);

                                if (worker.TotalsPerPrice.Count(x => x.PriceTypeID == priceTypeID) == 0)
                                {
                                    CommissionsReportModel.CommissionDetail detail = new CommissionsReportModel.CommissionDetail();
                                    detail.PriceTypeID = priceTypeID;
                                    detail.Coupons = new List<CouponDetail>();
                                    detail.Sales = GetDefaultListOfMoney();
                                    detail.SalesMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    detail.Commissions = GetDefaultListOfMoney();
                                    detail.CommissionMXN = new Money()
                                    {
                                        Amount = 0,
                                        Currency = "MXN"
                                    };
                                    worker.TotalsPerPrice.Add(detail);
                                }
                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Coupons.Add(couponInfo);

                                //commissions
                                if (!isBonus)
                                {
                                    if (couponInfo.Percentage >= 0)
                                    {
                                        decimal couponUtilityPercentage = couponInfo.UtilityPercentage;
                                        if (couponUtilityPercentage < 0)
                                        {
                                            couponUtilityPercentage = couponUtilityPercentage * -1;
                                        }

                                        var _commissionToApply = from c in WorkerCommissions
                                                                 where c.priceTypeID == priceTypeID
                                                                 && c.pointOfSaleIDs.Where(p => p == coupon.pointOfSaleID).Count() > 0
                                                                 && ((c.permanent_ && c.fromDate <= coupon.dateConfirmed) || (!c.permanent_ && c.fromDate <= coupon.dateConfirmed && c.toDate >= coupon.dateConfirmed))
                                                                 && c.minProfit <= couponUtilityPercentage
                                                                 && (c.maxProfit == null || c.maxProfit >= couponUtilityPercentage)
                                                                 //select c).FirstOrDefault();
                                                                 select c;

                                        if (_commissionToApply.Count() > 0)
                                        {
                                            dynamic commissionToApply;
                                            if (_commissionToApply.Count() > 1)
                                            {
                                                if (couponInfo.AdultUnits > 0)
                                                {
                                                    commissionToApply = _commissionToApply.FirstOrDefault(m => m.applyOnAdultSales);
                                                }
                                                else if (couponInfo.ChildUnits > 0)
                                                {
                                                    commissionToApply = _commissionToApply.FirstOrDefault(m => m.applyOnChildSales);
                                                }
                                                else
                                                {
                                                    commissionToApply = _commissionToApply.FirstOrDefault();
                                                }
                                            }
                                            else
                                            {
                                                commissionToApply = _commissionToApply.FirstOrDefault();
                                            }

                                            bool chargeValidation = true;
                                            couponInfo.PendingCharges = "N/A";
                                            if (commissionToApply.onlyIfCharged)
                                            {
                                                var unchargedCharges = from p in db.tblPaymentsAssignation
                                                                       join detail in db.tblPurchaseServiceDetails on p.purchaseServiceDetailID equals detail.purchaseServiceDetailID
                                                                       join payment in db.tblPaymentDetails on p.paymentDetailsID equals payment.paymentDetailsID
                                                                       where detail.purchase_ServiceID == couponInfo.PurchaseServiceID
                                                                       && payment.chargeBackCharged == false
                                                                       && (payment.deleted == null || payment.deleted == false)
                                                                       && payment.paymentType == 3
                                                                       select p.paymentDetailsID;

                                                if (unchargedCharges.Count() > 0)
                                                {
                                                    chargeValidation = false;
                                                    couponInfo.PendingCharges = unchargedCharges.Count().ToString();
                                                }
                                                else
                                                {
                                                    couponInfo.PendingCharges = "0";
                                                }
                                            }

                                            if (chargeValidation)
                                            {
                                                couponInfo.Percentage = commissionToApply.commissionPercentage;
                                                couponInfo.Amount = commissionToApply.commissionAmount;
                                                couponInfo.CommissionCurrencyID = commissionToApply.commissionCurrencyID;
                                                if (commissionToApply.applyOnSales)
                                                {
                                                    //porcentaje
                                                    couponInfo.Commission.Amount = decimal.Round((couponInfo.TotalNoIVA.Amount * commissionToApply.commissionPercentage / 100), 2, MidpointRounding.AwayFromZero);
                                                    couponInfo.Commission.Currency = coupon.currencyCode;
                                                }
                                                else if (commissionToApply.applyOnDealPrice)
                                                {
                                                    //porcentaje
                                                    couponInfo.Commission.Amount = decimal.Round(couponInfo.DealDiffNoIVA.Amount * commissionToApply.commissionPercentage / 100, 2, MidpointRounding.AwayFromZero);
                                                    couponInfo.Commission.Currency = coupon.currencyCode;
                                                }
                                                else if (commissionToApply.applyOnAdultSales)
                                                {
                                                    //cantidad
                                                    couponInfo.Commission.Amount = decimal.Round((decimal)commissionToApply.commissionAmount * couponInfo.AdultUnits, 2, MidpointRounding.AwayFromZero);
                                                    if (couponInfo.TotalNoIVA.Amount == 0)
                                                    {
                                                        couponInfo.Commission.Amount = 0;
                                                    }
                                                    else if (couponInfo.TotalNoIVA.Amount < 0)
                                                    {
                                                        couponInfo.Commission.Amount = couponInfo.Commission.Amount * -1;
                                                    }
                                                    couponInfo.Commission.Currency = commissionToApply.commissionCurrencyID == 1 ? "USD" : "MXN";
                                                }
                                                else if (commissionToApply.applyOnChildSales)//mike
                                                {
                                                    //cantidad
                                                    couponInfo.Commission.Amount = decimal.Round((decimal)commissionToApply.commissionAmount * couponInfo.ChildUnits, 2, MidpointRounding.AwayFromZero);
                                                    if (couponInfo.TotalNoIVA.Amount == 0)
                                                    {
                                                        couponInfo.Commission.Amount = 0;
                                                    }
                                                    else if (couponInfo.TotalNoIVA.Amount < 0)
                                                    {
                                                        couponInfo.Commission.Amount = couponInfo.Commission.Amount * -1;
                                                    }
                                                    couponInfo.Commission.Currency = commissionToApply.commissionCurrencyID == 1 ? "USD" : "MXN";
                                                }

                                                if (coupon.currencyID != 2 || commissionToApply.commissionCurrencyID == 2)
                                                {
                                                    if (exchangeRates == null)
                                                    {
                                                        exchangeRates = from r in db.tblExchangeRates
                                                                        where r.exchangeRateTypeID == 1
                                                                        && r.terminalID == coupon.terminalID
                                                                        && r.providerID == null
                                                                        && r.fromCurrencyID == coupon.currencyID
                                                                        && r.toCurrencyID == 2
                                                                        && ((r.permanent_ && r.fromDate < toDate)
                                                                        || (r.permanent_ != true && r.fromDate <= toDate && r.toDate >= fromDate))
                                                                        select r;
                                                    }

                                                    DateTime currentDate = coupon.dateConfirmed ?? coupon.dateSaved;
                                                    tblExchangeRates exchangeRateToApply = null;

                                                    exchangeRateToApply = (from x in exchangeRates
                                                                           where ((x.permanent_ && x.fromDate < currentDate)
                                                                           || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                           && x.tblExchangeRates_PointsOfSales.Count(
                                                                                p => p.pointOfSaleID == coupon.pointOfSaleID
                                                                                && p.dateAdded <= currentDate
                                                                                && (p.dateDeleted == null || p.dateDeleted > currentDate)
                                                                            ) > 0
                                                                           orderby x.fromDate descending
                                                                           select x).FirstOrDefault();

                                                    if (exchangeRateToApply == null)
                                                    {
                                                        exchangeRateToApply = (from x in exchangeRates
                                                                               where ((x.permanent_ && x.fromDate < currentDate)
                                                                               || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                               && x.tblExchangeRates_PointsOfSales.Count() == 0
                                                                               orderby x.fromDate descending
                                                                               select x).FirstOrDefault();

                                                        if (exchangeRateToApply == null)
                                                        {
                                                            exchangeRateToApply = (from r in db.tblExchangeRates
                                                                                   where r.exchangeRateTypeID == 1
                                                                                   && r.terminalID == coupon.terminalID
                                                                                   && r.providerID == null
                                                                                   && r.fromCurrencyID == coupon.currencyID
                                                                                   && r.toCurrencyID == 2
                                                                                   && r.fromDate <= toDate
                                                                                   && r.tblExchangeRates_PointsOfSales.Count() == 0
                                                                                   orderby r.fromDate descending, r.dateSaved descending
                                                                                   select r).FirstOrDefault();
                                                        }
                                                    }

                                                    if (coupon.currencyID != 2)
                                                    {
                                                        couponInfo.SalesMXN.Amount = decimal.Round(couponInfo.TotalNoIVA.Amount * exchangeRateToApply.exchangeRate, 2, MidpointRounding.AwayFromZero);
                                                        if (couponInfo.Amount != null)
                                                        {
                                                            //cantidad
                                                            if (couponInfo.CommissionCurrencyID == 2)
                                                            {
                                                                couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount;
                                                            }
                                                            else
                                                            {
                                                                couponInfo.CommissionMXN.Amount = decimal.Round(couponInfo.Commission.Amount * exchangeRateToApply.exchangeRate, 2, MidpointRounding.AwayFromZero);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //porcentaje
                                                            couponInfo.CommissionMXN.Amount = decimal.Round(couponInfo.Commission.Amount * exchangeRateToApply.exchangeRate, 2, MidpointRounding.AwayFromZero);
                                                        }
                                                    }

                                                    couponInfo.ExchangeRate = exchangeRateToApply.exchangeRate;
                                                    couponInfo.ExchangeRateID = exchangeRateToApply.exchangeRateID;
                                                    couponInfo.ExchangeRateVigency = exchangeRateToApply.fromDate.ToString("yyyy-MM-dd") + "/" + (exchangeRateToApply.permanent_ ? "permanent" : exchangeRateToApply.toDate.Value.ToString("yyyy-MM-dd"));
                                                }
                                                else
                                                {
                                                    couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount;
                                                    couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount;
                                                    couponInfo.ExchangeRate = 1;
                                                }

                                                //-total commissions per activity price
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Commissions.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.Commission.Amount;
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                                //-total commissions per activity
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.Commissions.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.Commission.Amount;
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                                //-total commissions per price type
                                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Commissions.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.Commission.Amount;
                                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;

                                                //-grand total per worker
                                                worker.Total.Commissions.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.Commission.Amount;
                                                worker.Total.SalesMXN.Amount += couponInfo.SalesMXN.Amount;
                                                worker.Total.CommissionMXN.Amount += couponInfo.CommissionMXN.Amount;
                                            }
                                        }
                                    }
                                }

                                //totales
                                //-total sales per activity price
                                Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).CommissionsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Sales.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //-total sales per activity
                                if (couponInfo.Commission.Amount > 0 || isBonus)
                                {
                                    Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).Subtotal.Sales.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;
                                }

                                //-total sales per price type
                                worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == priceTypeID).Sales.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;

                                //-grand total per worker
                                //if (couponInfo.Commission.Amount > 0 || isBonus)
                                if (couponInfo.Commission.Amount != 0 || isBonus)//mike
                                {
                                    worker.Total.Sales.FirstOrDefault(x => x.Currency == coupon.currencyCode).Amount += couponInfo.TotalNoIVA.Amount;
                                }
                            }
                        }
                    }
                }
                worker.ListServices = Services;

                //revisar total de venta para aplicar comisiones a todos los niveles
                if (isBonus && WorkerCommissions.Count() > 0)
                {
                    decimal bonusVolume = worker.Total.Sales.FirstOrDefault(x => x.Currency == WorkerCommissions.FirstOrDefault().volumeCurrencyCode).Amount;
                    var commisionBonusToApply = (from c in WorkerCommissions
                                                 where c.minVolume <= bonusVolume
                                                 && (c.maxVolume == null || c.maxVolume >= bonusVolume)
                                                 select new
                                                 {
                                                     c.commissionPercentage,
                                                     c.volumeCurrencyCode
                                                 }).FirstOrDefault();

                    if (commisionBonusToApply != null)
                    {
                        foreach (var service in worker.ListServices)
                        {
                            foreach (var commissionPerPrice in service.CommissionsPerPrice)
                            {
                                foreach (var couponInfo in commissionPerPrice.Coupons)
                                {
                                    if (couponInfo.Percentage >= 0)
                                    {
                                        //coupon commission
                                        couponInfo.Percentage = commisionBonusToApply.commissionPercentage;
                                        couponInfo.Commission.Amount = decimal.Round((couponInfo.TotalNoIVA.Amount * commisionBonusToApply.commissionPercentage / 100), 2, MidpointRounding.AwayFromZero);
                                        couponInfo.Commission.Currency = couponInfo.Total.Currency;

                                        //si la moneda de venta no es pesos, convertir a pesos con el tipo de cambio de la agencia vigente
                                        if (couponInfo.Total.Currency != "MXN")
                                        {
                                            if (exchangeRates == null)
                                            {
                                                exchangeRates = from r in db.tblExchangeRates
                                                                where r.exchangeRateTypeID == 1
                                                                && r.terminalID == model.Search_TerminalID
                                                                && r.providerID == null
                                                                && r.tblCurrencies.currencyCode == couponInfo.Total.Currency
                                                                && r.toCurrencyID == 2
                                                                && ((r.permanent_ && r.fromDate < toDate)
                                                                || (r.permanent_ != true && r.fromDate <= toDate && r.toDate >= fromDate))
                                                                select r;

                                            }

                                            DateTime currentDate = couponInfo.ConfirmationDate ?? couponInfo.SavedOnDate;
                                            tblExchangeRates exchangeRateToApply = null;

                                            exchangeRateToApply = (from x in exchangeRates
                                                                   where ((x.permanent_ && x.fromDate < currentDate)
                                                                   || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                   && x.tblExchangeRates_PointsOfSales.Count(
                                                                        p => p.pointOfSaleID == couponInfo.PointOfSaleID
                                                                        && p.dateAdded <= currentDate
                                                                        && (p.dateDeleted == null || p.dateDeleted > currentDate)
                                                                    ) > 0
                                                                   orderby x.fromDate descending
                                                                   select x).FirstOrDefault();

                                            if (exchangeRateToApply == null)
                                            {
                                                exchangeRateToApply = (from x in exchangeRates
                                                                       where ((x.permanent_ && x.fromDate < currentDate)
                                                                       || (x.permanent_ != true && x.fromDate <= currentDate && x.toDate >= currentDate))
                                                                       && x.tblExchangeRates_PointsOfSales.Count() == 0
                                                                       orderby x.fromDate descending
                                                                       select x).FirstOrDefault();

                                                if (exchangeRateToApply == null)
                                                {
                                                    exchangeRateToApply = (from r in db.tblExchangeRates
                                                                           where r.exchangeRateTypeID == 1
                                                                           && r.terminalID == model.Search_TerminalID
                                                                           && r.providerID == null
                                                                           && r.tblCurrencies.currencyCode == couponInfo.Total.Currency
                                                                           && r.toCurrencyID == 2
                                                                           && r.fromDate <= toDate
                                                                           && r.tblExchangeRates_PointsOfSales.Count() == 0
                                                                           orderby r.fromDate descending, r.dateSaved descending
                                                                           select r).FirstOrDefault();
                                                }
                                            }

                                            couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount * exchangeRateToApply.exchangeRate;
                                            couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount * exchangeRateToApply.exchangeRate;
                                            couponInfo.ExchangeRate = exchangeRateToApply.exchangeRate;
                                            couponInfo.ExchangeRateID = exchangeRateToApply.exchangeRateID;
                                        }
                                        else
                                        {
                                            couponInfo.SalesMXN.Amount = couponInfo.TotalNoIVA.Amount;
                                            couponInfo.CommissionMXN.Amount = couponInfo.Commission.Amount;
                                            couponInfo.ExchangeRate = 1;
                                        }

                                        //total commissions per activity price
                                        commissionPerPrice.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-total commissions per activity
                                        service.Subtotal.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-total commissions per price type
                                        worker.TotalsPerPrice.FirstOrDefault(x => x.PriceTypeID == commissionPerPrice.PriceTypeID).Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;

                                        //-grand total per worker
                                        worker.Total.Commissions.FirstOrDefault(x => x.Currency == couponInfo.Total.Currency).Amount += couponInfo.Commission.Amount;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return commissionsView;
        }

        public IncomeOutcomeModel GetIOBalanceFromCache(IncomeOutcomeModel.SearchIncomeOutcomeModel model)
        {
            IncomeOutcomeModel balance = new IncomeOutcomeModel();
            balance.Terminal = model.Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;

            if (model.Search_SelectedPointsOfSale != null && model.Search_SelectedPointsOfSale.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_SelectedPointsOfSale.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    balance.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                balance.PointsOfSale = "All";
            }

            balance.Currency = model.Currencies.FirstOrDefault(x => x.Value == model.Search_Currency.ToString()).Text;
            balance.Date = model.Search_I_FromDate + " - " + model.Search_F_ToDate;

            balance.Details = new List<IncomeOutcomeModel.IncomeOutcomeCouponDetail>();
            balance.Totals = new List<IncomeOutcomeModel.IncomeOutcomeAccountTotal>();
            balance.Profits = new List<IncomeOutcomeModel.BankCommissionProfit>();

            balance.IncomeSubtotal = new Money();
            balance.IncomeIVA = new Money();
            balance.IncomeTotal = new Money();
            balance.OutcomeSubtotal = new Money();
            balance.OutcomeIVA = new Money();
            balance.OutcomeTotal = new Money();
            balance.UtilityTotal = new Money();

            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_SelectedPointsOfSale != null)
            {
                pointsOfSale = model.Search_SelectedPointsOfSale;
                pointsOfSaleLength = model.Search_SelectedPointsOfSale.Length;
            }

            if (fDate < DateTime.Today)
            {
                IQueryable<tblCouponInfo> Coupons;

                using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
                {
                    //var CloseoutIDs = (from x in db.tblCloseOuts
                    //                   where x.closeOutDate >= fDate
                    //                   && x.closeOutDate < tDate
                    //                   && (pointsOfSale.Contains(x.pointOfSaleID) || pointsOfSaleLength == 0)
                    //                   && x.terminalID == model.Search_TerminalID
                    //                   select x.closeOutID).ToList();

                    //Coupons = from c in db.tblCouponInfo
                    //          where CloseoutIDs.Contains((long)c.paidCloseOutID)
                    //          select c;

                    //////

                    Coupons = from c in db.tblCouponInfo
                              where c.terminalID == model.Search_TerminalID
                              && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                              && (
                              (c.dateConfirmed >= fDate
                              && c.dateConfirmed < tDate
                              && c.serviceStatusID >= 3)
                              ||
                              (c.dateConfirmed < fDate
                              && c.dateCanceled >= fDate
                              && c.dateCanceled < tDate
                              && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                              )
                              orderby c.dateCanceled, c.dateConfirmed
                              select c;

                    scope.Complete();
                }

                var purchaseIDs = Coupons.Select(x => x.purchaseID).Distinct().ToList();

                //card info
                var payments = from p in db.tblPaymentDetails
                               join t in db.tblCardTypes on p.ccType equals t.cardTypeID into p_t
                               from t in p_t.DefaultIfEmpty()
                                   //join c in db.tblBankCommissions on new { type = (int?)t.cardTypeID, terminal = p.tblPurchases.terminalID } equals new { type = c.cardTypeID, terminal = c.terminalID }
                               where purchaseIDs.Contains((Guid)p.purchaseID)
                               && p.paymentType == 2
                               && p.dateDeleted == null
                               //select p;
                               select new
                               {
                                   p.purchaseID,
                                   p.tblMoneyTransactions.transactionTypeID,
                                   p.amount,
                                   p.dateSaved,
                                   p.tblCurrencies.currencyCode,
                                   p.ccType,
                                   cardType = p.ccType != null ? p.tblCardTypes.cardType : "",
                                   commission = p.tblCardTypes.tblBankCommissions.Where(m => m.terminalID == p.tblPurchases.terminalID && m.cardTypeID == p.ccType && m.initialDate <= p.dateSaved && m.finalDate >= p.dateSaved).Select(m => new { m.commissionPercentage, m.profitPercentage })
                               };
                //

                var MarketingPrograms = (from p in db.tblPurchases
                                         where purchaseIDs.Contains(p.purchaseID)
                                         select new
                                         {
                                             p.purchaseID,
                                             p.spiMarketingProgram
                                         }).ToList();

                foreach (var coupon in Coupons)
                {
                    decimal cancelationCharge = coupon.cancelationCharge ?? 0;
                    foreach (var detail in coupon.tblCouponInfoUnits)
                    {
                        //newdetail
                        IncomeOutcomeModel.IncomeOutcomeCouponDetail newDetail = new IncomeOutcomeModel.IncomeOutcomeCouponDetail();
                        newDetail.UnitTotal = new Money();
                        newDetail.PurchaseServiceID = coupon.purchase_ServiceID;
                        newDetail.PurchaseID = coupon.purchaseID;
                        newDetail.PointOfSale = coupon.pointOfSale;
                        newDetail.MarketingProgram = MarketingPrograms.FirstOrDefault(x => x.purchaseID == coupon.purchaseID).spiMarketingProgram;
                        newDetail.Customer = coupon.customerFirstName + " " + coupon.customerLastName;
                        newDetail.Customer = newDetail.Customer.Replace(".", " ");
                        newDetail.Folio = detail.unitFolio;
                        newDetail.CouponReference = coupon.couponReference;
                        newDetail.Date = coupon.dateConfirmed.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                        if (coupon.dateCanceled != null)
                        {
                            newDetail.CancelationDate = coupon.dateCanceled.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                        }
                        newDetail.Service = coupon.item;
                        if (coupon.dateCanceled != null && coupon.dateCanceled >= tDate)
                        {
                            newDetail.Status = "Confirmed [" + coupon.status + " on " + coupon.dateCanceled.Value.ToString("yyyy-MM-dd") + "]";
                        }
                        else
                        {
                            newDetail.Status = coupon.status;
                        }
                        newDetail.Status += (coupon.replacedBy != null ? " [" + coupon.replacedBy + "]" : "");
                        newDetail.CloseOut = coupon.paidCloseOut;
                        newDetail.CancelationCloseOut = coupon.canceledCloseOut;

                        if (coupon.audited == true)
                        {
                            newDetail.Audited = "<span class=\"block\">Audited by " + coupon.auditedBy + "</span>";
                            newDetail.Audited += "<span class=\"block\">On " + coupon.auditedOnDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") + "</span>";
                            newDetail.InvoiceNumber = coupon.auditedProviderInvoice;
                        }
                        else
                        {
                            newDetail.Audited = "No";
                        }

                        newDetail.Quantity = detail.quantity;
                        newDetail.Unit += detail.unit + (detail.isPromo ? " (PROMO)" : "");
                        newDetail.PriceType = detail.priceType;
                        newDetail.Total = new Money();
                        newDetail.Cost = new Money();

                        bool neg = false;
                        bool zero = false;
                        //casos en que debe ser negativo
                        if ((coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && (coupon.dateConfirmed != null && coupon.dateConfirmed.Value.Date != coupon.dateCanceled.Value.Date && coupon.dateConfirmed < fDate) && (coupon.dateCanceled >= fDate && coupon.dateCanceled < tDate))
                        {
                            neg = true;
                        }

                        //casos en que debe ser cero
                        if ((coupon.serviceStatusID == 4 || coupon.serviceStatusID == 5) && (coupon.dateConfirmed == null || (coupon.dateConfirmed != null && coupon.dateConfirmed >= fDate && coupon.dateConfirmed < tDate)) && (coupon.dateCanceled >= fDate && coupon.dateCanceled < tDate))
                        {
                            zero = true;
                        }

                        if (coupon.currencyID == model.Search_Currency)
                        {
                            newDetail.IncomeExchangeRate = 1;
                        }
                        else
                        {
                            newDetail.IncomeExchangeRate = (detail.priceExchangeRate != null ? (decimal)detail.priceExchangeRate : 1);
                        }

                        //en moneda del cupón
                        if (coupon.currencyID == 1)
                        {
                            if (!zero)
                            {
                                newDetail.UnitTotal.Amount = detail.totalUSD * (neg ? -1 : 1);
                            }
                        }
                        else
                        {
                            if (!zero)
                            {
                                newDetail.UnitTotal.Amount = detail.totalMXN * (neg ? -1 : 1); ;
                            }
                        }
                        newDetail.UnitTotal.Currency = coupon.currencyCode;

                        //considerar el cancelation charge
                        if (cancelationCharge > 0)
                        {
                            if (coupon.currencyID == 1)
                            { //cupón en dólares
                                if (cancelationCharge >= detail.totalUSD)
                                { //cancelation charge es mayor que el total de unidad
                                    newDetail.UnitTotal.Amount = 0;
                                    cancelationCharge -= detail.totalUSD;
                                }
                                else
                                { //cancelation charge es menor que el total de unidad
                                    newDetail.UnitTotal.Amount = newDetail.UnitTotal.Amount + cancelationCharge;
                                    cancelationCharge -= cancelationCharge;
                                }
                            }
                            else
                            { //cupón en pesos
                                if (cancelationCharge >= detail.totalMXN)
                                { //cancelation charge es mayor que el total de unidad
                                    newDetail.UnitTotal.Amount = 0;
                                    cancelationCharge -= detail.totalMXN;
                                }
                                else
                                { //cancelation charge es menor que el total de unidad
                                    newDetail.UnitTotal.Amount = newDetail.UnitTotal.Amount + cancelationCharge;
                                    cancelationCharge -= cancelationCharge;
                                }
                            }
                        }

                        //en moneda del reporte //newDetail.UnitTotal.Amount
                        if (!zero || (coupon.cancelationCharge != null && coupon.cancelationCharge > 0))
                        {
                            if (model.Search_Currency == coupon.currencyID)
                            {
                                newDetail.Total.Amount = newDetail.UnitTotal.Amount;
                            }
                            else
                            {
                                if (coupon.currencyID == 1 && model.Search_Currency == 2)
                                {
                                    newDetail.Total.Amount = decimal.Round(newDetail.UnitTotal.Amount * newDetail.IncomeExchangeRate, 2);
                                }
                                else if (coupon.currencyID == 2 && model.Search_Currency == 1)
                                {
                                    newDetail.Total.Amount = decimal.Round(newDetail.UnitTotal.Amount / newDetail.IncomeExchangeRate, 2);
                                }
                            }
                        }

                        newDetail.Total.Currency = model.Search_Currency == 1 ? "USD" : "MXN";

                        newDetail.IncomeAccAccID = detail.incomeAccountID;
                        newDetail.IncomeAccAccNumber = detail.incomeAccountNumber;
                        newDetail.IncomeAccAccName = detail.incomeAccountName;
                        newDetail.CustomCost = detail.customCost;
                        if (model.Search_Currency == 1)
                        {
                            if (!zero)
                            {
                                newDetail.Cost.Amount = detail.costUSD * (neg ? -1 : 1); ;
                            }
                        }
                        else
                        {
                            if (!zero)
                            {
                                newDetail.Cost.Amount = detail.costMXN * (neg ? -1 : 1); ;
                            }
                        }

                        if (coupon.currencyID == model.Search_Currency)
                        {
                            newDetail.OutcomeExchangeRate = 1;
                        }
                        else
                        {
                            newDetail.OutcomeExchangeRate = (detail.costExchangeRate != null ? (decimal)detail.costExchangeRate : 1);
                        }

                        newDetail.Cost.Currency = model.Search_Currency == 1 ? "USD" : "MXN";

                        newDetail.OutcomeAccAccID = detail.outcomeAccountID;
                        newDetail.OutcomeAccAccNumber = detail.outcomeAccountNumber;
                        newDetail.OutcomeAccAccName = detail.outcomeAccountName;

                        balance.Details.Add(newDetail);
                        //obtener summary por cuenta
                        if (balance.Totals.Count(a => a.AccAccName == newDetail.IncomeAccAccName && a.AccAccIncomeNumber == newDetail.IncomeAccAccNumber && a.PriceType == newDetail.PriceType) == 0)
                        {
                            IncomeOutcomeModel.IncomeOutcomeAccountTotal account = new IncomeOutcomeModel.IncomeOutcomeAccountTotal();
                            account.AccAccName = newDetail.IncomeAccAccName;
                            account.PriceType = newDetail.PriceType;

                            account.AccAccIncomeID = newDetail.IncomeAccAccID;
                            account.AccAccIncomeNumber = newDetail.IncomeAccAccNumber;

                            account.IncomeSubtotal = new Money();
                            account.IncomeIVA = new Money();
                            account.IncomeTotal = new Money();
                            account.IncomeTotal.Amount = newDetail.Total.Amount;
                            account.IncomeTotal.Currency = newDetail.Total.Currency;

                            account.AccAccOutcomeID = newDetail.OutcomeAccAccID;
                            account.AccAccOutcomeNumber = newDetail.OutcomeAccAccNumber;

                            account.OutcomeSubtotal = new Money();
                            account.OutcomeIVA = new Money();
                            account.OutcomeTotal = new Money();
                            account.OutcomeTotal.Amount = newDetail.Cost.Amount;
                            account.OutcomeTotal.Currency = newDetail.Cost.Currency;

                            account.Utility = new Money();
                            account.Utility.Currency = newDetail.Total.Currency;
                            balance.Totals.Add(account);
                        }
                        else
                        {
                            IncomeOutcomeModel.IncomeOutcomeAccountTotal account = balance.Totals.FirstOrDefault(a => a.AccAccName == newDetail.IncomeAccAccName && a.AccAccIncomeNumber == newDetail.IncomeAccAccNumber && a.PriceType == newDetail.PriceType);
                            account.IncomeTotal.Amount += newDetail.Total.Amount;
                            account.OutcomeTotal.Amount += newDetail.Cost.Amount;
                        }
                    }
                }
                //obtención de subtotal, iva y utilidad
                foreach (IncomeOutcomeModel.IncomeOutcomeAccountTotal item in balance.Totals)
                {
                    item.IncomeSubtotal.Amount = Math.Round(item.IncomeTotal.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    item.IncomeSubtotal.Currency = item.IncomeTotal.Currency;
                    item.IncomeIVA.Amount = item.IncomeTotal.Amount - item.IncomeSubtotal.Amount;
                    item.IncomeIVA.Currency = item.IncomeTotal.Currency;

                    item.OutcomeSubtotal.Amount = Math.Round(item.OutcomeTotal.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    item.OutcomeSubtotal.Currency = item.OutcomeTotal.Currency;
                    item.OutcomeIVA.Amount = item.OutcomeTotal.Amount - item.OutcomeSubtotal.Amount;
                    item.OutcomeIVA.Currency = item.OutcomeTotal.Currency;

                    item.Utility.Amount = item.IncomeSubtotal.Amount - item.OutcomeSubtotal.Amount;

                    balance.IncomeSubtotal.Amount += item.IncomeSubtotal.Amount;
                    balance.IncomeSubtotal.Currency = item.IncomeSubtotal.Currency;
                    balance.IncomeIVA.Amount += item.IncomeIVA.Amount;
                    balance.IncomeIVA.Currency = item.IncomeIVA.Currency;
                    balance.IncomeTotal.Amount += item.IncomeTotal.Amount;
                    balance.IncomeTotal.Currency = item.IncomeTotal.Currency;

                    balance.OutcomeSubtotal.Amount += item.OutcomeSubtotal.Amount;
                    balance.OutcomeSubtotal.Currency = item.OutcomeSubtotal.Currency;
                    balance.OutcomeIVA.Amount += item.OutcomeIVA.Amount;
                    balance.OutcomeIVA.Currency = item.OutcomeIVA.Currency;
                    balance.OutcomeTotal.Amount += item.OutcomeTotal.Amount;
                    balance.OutcomeTotal.Currency = item.OutcomeTotal.Currency;

                    balance.UtilityTotal.Amount += item.Utility.Amount;
                    balance.UtilityTotal.Currency = item.Utility.Currency;
                }
                balance.Totals = balance.Totals.OrderBy(x => x.AccAccName).ToList();

                foreach (var type in payments.GroupBy(m => m.cardType))
                {
                    decimal amountUSD = 0;
                    decimal commissionUSD = 0;
                    decimal profitUSD = 0;
                    decimal amountMXN = 0;
                    decimal commissionMXN = 0;
                    decimal profitMXN = 0;

                    foreach (var item in type)
                    {
                        var amount = item.transactionTypeID == 1 ? item.amount : (item.amount * -1);
                        var commission = item.commission.Count() > 0 ? amount * Decimal.Round((item.commission.FirstOrDefault().commissionPercentage / 100), 2) : 0;
                        var profit = item.commission.Count() > 0 ? commission * Decimal.Round((((decimal)(item.commission.FirstOrDefault().profitPercentage ?? 0)) / 100), 2) : 0;

                        if (item.currencyCode == "USD")
                        {
                            amountUSD += amount;
                            commissionUSD += commission;
                            profitUSD += profit;
                        }
                        else if (item.currencyCode == "MXN")
                        {
                            amountMXN += amount;
                            commissionMXN += commission;
                            profitMXN += profit;
                        }
                    }
                    balance.Profits.Add(new IncomeOutcomeModel.BankCommissionProfit()
                    {
                        CardType = type.Key,
                        AmountUSD = amountUSD,
                        CommissionVolumeUSD = commissionUSD,
                        ProfitVolumeUSD = profitUSD,
                        AmountMXN = amountMXN,
                        CommissionVolumeMXN = commissionMXN,
                        ProfitVolumeMXN = profitMXN
                    });
                    //var amount = i.Sum(m => (m.transactionTypeID == 1 ? m.amount : m.amount * -1));
                    //var commission = amount * Decimal.Round((i.FirstOrDefault().commission.FirstOrDefault().commissionPercentage / 100), 2);
                    //var profit = commission * Decimal.Round((i.FirstOrDefault().commission.FirstOrDefault().profitPercentage / 100), 2);
                    //balance.Profits.Add(new IncomeOutcomeModel.BankCommissionProfit()
                    //{
                    //    CardType = i.Key,
                    //    Amount = i.Sum(m => (m.transactionTypeID == 1 ? m.amount : m.amount * -1)),
                    //    CommissionVolume = commission,
                    //    ProfitVolume = profit
                    //});
                }
            }

            return balance;
        }

        public IncomeOutcomeModel GetIOBalance(IncomeOutcomeModel.SearchIncomeOutcomeModel model)
        {
            IncomeOutcomeModel balance = new IncomeOutcomeModel();
            List<ComputedPriceModel> Prices = new List<ComputedPriceModel>();
            List<IncomeOutcomeModel.ExchangeRateItem> Exchanges = new List<IncomeOutcomeModel.ExchangeRateItem>();
            balance.Terminal = model.Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;

            if (model.Search_SelectedPointsOfSale != null && model.Search_SelectedPointsOfSale.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_SelectedPointsOfSale.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    balance.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                balance.PointsOfSale = "All";
            }

            balance.Currency = model.Currencies.FirstOrDefault(x => x.Value == model.Search_Currency.ToString()).Text;
            balance.Date = model.Search_I_FromDate + " - " + model.Search_F_ToDate;

            balance.Details = new List<IncomeOutcomeModel.IncomeOutcomeCouponDetail>();
            balance.Totals = new List<IncomeOutcomeModel.IncomeOutcomeAccountTotal>();

            balance.IncomeSubtotal = new Money();
            balance.IncomeIVA = new Money();
            balance.IncomeTotal = new Money();
            balance.OutcomeSubtotal = new Money();
            balance.OutcomeIVA = new Money();
            balance.OutcomeTotal = new Money();
            balance.UtilityTotal = new Money();

            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_SelectedPointsOfSale != null)
            {
                pointsOfSale = model.Search_SelectedPointsOfSale;
                pointsOfSaleLength = model.Search_SelectedPointsOfSale.Length;
            }

            bool testApproved = true;
            var priceErrors = (from detail in db.tblPurchaseServiceDetails
                               join price in db.tblPrices on detail.netPriceID equals price.priceID into detail_price
                               from price in detail_price.DefaultIfEmpty()
                               join coupon in db.tblPurchases_Services on detail.purchase_ServiceID equals coupon.purchase_ServiceID into detail_coupon
                               from coupon in detail_coupon.DefaultIfEmpty()
                               join purchase in db.tblPurchases on detail.tblPurchases_Services.purchaseID equals purchase.purchaseID into detail_purchase
                               from purchase in detail_purchase.DefaultIfEmpty()
                               where detail.tblPurchases_Services.confirmationDateTime >= fDate && detail.tblPurchases_Services.confirmationDateTime < tDate
                               && pointsOfSale.Contains(detail.tblPurchases_Services.tblPurchases.pointOfSaleID)
                               && (
                               (detail.tblPrices1.permanent_ && detail.tblPrices1.fromDate > detail.tblPurchases_Services.confirmationDateTime)
                               || (detail.tblPrices1.twPermanent_ && detail.tblPrices1.twFromDate > detail.tblPurchases_Services.confirmationDateTime)
                               || (detail.tblPrices1.permanent_ != true
                                    && (detail.tblPrices1.fromDate > detail.tblPurchases_Services.confirmationDateTime || detail.tblPrices1.toDate < detail.tblPurchases_Services.confirmationDateTime))
                               || (detail.tblPrices1.twPermanent_ != true
                                    && (detail.tblPrices1.twFromDate > detail.tblPurchases_Services.confirmationDateTime || detail.tblPrices1.twToDate < detail.tblPurchases_Services.confirmationDateTime))
                               )
                               select detail).Distinct();

            if (priceErrors.Count() > 0)
            {
                testApproved = false;
                foreach (var error in priceErrors)
                {
                    if (balance.Message != null && balance.Message != "")
                    {
                        balance.Message += "<br>";
                    }
                    balance.Message += "Report cannot be generated because there is an error in coupon unit: " + error.coupon + ". ERRORID: " + error.purchase_ServiceID + "-" + error.purchaseServiceDetailID + "-" + error.netPriceID;
                }
            }

            if (testApproved && fDate < DateTime.Today)
            {
                IQueryable<IncomeOutcomeModel.CouponQuery> Coupons;

                using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
                {
                    Coupons = from c in db.tblCloseOuts_Purchases
                              where (c.tblCloseOuts.closeOutDate >= fDate && c.tblCloseOuts.closeOutDate < tDate)
                              && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                              && c.tblPurchases.terminalID == model.Search_TerminalID
                              && (c.tblPurchases_Services.serviceStatusID == 3 || c.tblPurchases_Services.serviceStatusID == 6)
                              select new IncomeOutcomeModel.CouponQuery()
                              {
                                  terminalID = c.tblPurchases.terminalID,
                                  culture = c.tblPurchases.culture,
                                  online = c.tblPurchases.tblPointsOfSale.online,
                                  pointOfSaleID = c.tblPurchases.pointOfSaleID,
                                  paid = c.paid,
                                  canceled = c.canceled,
                                  purchaseID = c.tblPurchases.purchaseID,
                                  shortName = c.tblPurchases.tblPointsOfSale.shortName,
                                  pointOfSale = c.tblPurchases.tblPointsOfSale.pointOfSale,
                                  firstName = c.tblPurchases.tblLeads.firstName,
                                  lastName = c.tblPurchases.tblLeads.lastName,
                                  confirmationDateTime = c.tblPurchases_Services.confirmationDateTime,
                                  service = c.tblPurchases_Services.tblServices.service,
                                  purchaseServiceStatus = c.tblPurchases_Services.tblPurchaseServiceStatus.purchaseServiceStatus,
                                  closeouts = c.tblPurchases_Services.tblCloseOuts_Purchases.Select(s => new IncomeOutcomeModel.CloseoutDetailQuery
                                  {
                                      closeOutDate = s.tblCloseOuts.closeOutDate,
                                      shortName = s.tblCloseOuts.tblPointsOfSale.shortName,
                                      firstName = s.tblCloseOuts.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName,
                                      lastName = s.tblCloseOuts.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                                      paid = s.paid
                                  }),
                                  audit = c.tblPurchases_Services.audit,
                                  auditDate = c.tblPurchases_Services.auditDate,
                                  auditUserID = c.tblPurchases_Services.auditedByUserID,
                                  auditFirstName = c.tblPurchases_Services.aspnet_Users1.tblUserProfiles.FirstOrDefault().firstName,
                                  auditLastName = c.tblPurchases_Services.aspnet_Users1.tblUserProfiles.FirstOrDefault().lastName,
                                  auditInvoice = c.tblPurchases_Services.tblProvidersInvoices.invoiceNumber,
                                  serviceID = c.tblPurchases_Services.serviceID,
                                  serviceDateTime = c.tblPurchases_Services.serviceDateTime,
                                  dateSaved = c.tblPurchases_Services.dateSaved,
                                  currencyID = c.tblPurchases.currencyID,
                                  currencyCode = c.tblPurchases.tblCurrencies.currencyCode,
                                  promoID = c.tblPurchases_Services.promoID,
                                  applyToCost = c.tblPurchases_Services.tblPromos.applyToCost,
                                  details = c.tblPurchases_Services.tblPurchaseServiceDetails.Select(x => new IncomeOutcomeModel.CouponDetailQuery
                                  {
                                      coupon = x.coupon,
                                      quantity = x.quantity,
                                      priceID = x.priceID,
                                      netPriceID = x.netPriceID,
                                      dealPrice = x.dealPrice,
                                      promo = x.promo,
                                      priceType = x.tblPriceTypes.priceType,
                                      priceTypeID = x.priceTypeID,
                                      purchaseServiceDetailID = x.purchaseServiceDetailID,
                                      customPrice = x.customPrice,
                                      customCost = x.customCost,
                                      customCostAlt = x.customCostAlt,
                                      customExchangeRate = x.customCostExchangeRate,
                                      priceCurrencyID = x.tblPrices1.currencyID
                                  })
                              };
                    scope.Complete();
                }

                foreach (var coupon in Coupons)
                {
                    foreach (var detail in coupon.details)
                    {
                        //newdetail
                        IncomeOutcomeModel.IncomeOutcomeCouponDetail newDetail = new IncomeOutcomeModel.IncomeOutcomeCouponDetail();
                        newDetail.UnitTotal = new Money();

                        newDetail.PurchaseID = coupon.purchaseID;
                        newDetail.PointOfSale = coupon.shortName + " - " + coupon.pointOfSale;
                        newDetail.Customer = coupon.firstName + " " + coupon.lastName;
                        newDetail.Customer = newDetail.Customer.Replace(".", " ");
                        newDetail.Folio = detail.coupon;
                        newDetail.Date = coupon.confirmationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt");
                        newDetail.Service = coupon.service;
                        newDetail.Status = coupon.purchaseServiceStatus;

                        foreach (var closeout in coupon.closeouts.OrderBy(x => x.closeOutDate))
                        {
                            if (closeout.firstName != null)
                            {
                                newDetail.CloseOut += "<span class=\"block\">" + closeout.shortName + " " + closeout.firstName + " " + closeout.lastName + " " + closeout.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                            }
                            else
                            {
                                newDetail.CloseOut += "<span class=\"block\">" + closeout.shortName + " All Agents " + closeout.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                            }
                        }

                        if (coupon.audit == true)
                        {
                            newDetail.Audited = "<span class=\"block\">Audited by " + coupon.auditFirstName + " " + coupon.auditLastName + "</span>";
                            newDetail.Audited += "<span class=\"block\">On " + coupon.auditDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") + "</span>";
                            newDetail.InvoiceNumber = coupon.auditInvoice;
                        }
                        else
                        {
                            newDetail.Audited = "No";
                        }

                        newDetail.Quantity = detail.quantity;
                        tblPriceUnits unit = PriceDataModel.GetUnit((detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID), coupon.culture);
                        newDetail.Unit += unit.unit + (unit.additionalInfo != null ? "[" + unit.additionalInfo + "]" : "") + (detail.promo ? " (PROMO)" : "");
                        newDetail.PriceType = detail.priceType;
                        newDetail.Total = new Money();
                        newDetail.Cost = new Money();

                        Prices = PriceDataModel.GetComputedPrices(coupon.serviceID, coupon.serviceDateTime, coupon.pointOfSaleID, coupon.terminalID, coupon.dateSaved, coupon.culture);
                        if (detail.netPriceID != null)
                        {
                            //en moneda del cupón
                            newDetail.UnitTotal.Amount = decimal.Round(PromoDataModel.ApplyPromo(detail.quantity * (detail.dealPrice != null ? (decimal)detail.dealPrice : Prices.FirstOrDefault(x => x.PriceTypeID == detail.priceTypeID && x.CurrencyID == coupon.currencyID && x.PriceID == detail.netPriceID).Price), detail.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);
                            newDetail.UnitTotal.Currency = coupon.currencyCode;

                            //en moneda del reporte
                            ComputedPriceModel iPrice = Prices.FirstOrDefault(x => x.PriceTypeID == detail.priceTypeID && x.CurrencyID == model.Search_Currency && x.PriceID == detail.netPriceID);
                            if (iPrice != null)
                            {
                                if (Exchanges.Count(x => x.ExchangeRateID == iPrice.ExchangeRateID) == 0 && iPrice.ExchangeRateID != null)
                                {
                                    IncomeOutcomeModel.ExchangeRateItem newRate = new IncomeOutcomeModel.ExchangeRateItem();
                                    newRate.ExchangeRateID = iPrice.ExchangeRateID;
                                    newRate.ExchangeRate = db.tblExchangeRates.FirstOrDefault(x => x.exchangeRateID == iPrice.ExchangeRateID).exchangeRate;
                                    Exchanges.Add(newRate);
                                }
                                if (iPrice.ExchangeRateID != null)
                                {
                                    newDetail.IncomeExchangeRate = Exchanges.FirstOrDefault(x => x.ExchangeRateID == iPrice.ExchangeRateID).ExchangeRate;
                                }
                                else
                                {
                                    newDetail.IncomeExchangeRate = 1;
                                }
                                newDetail.Total.Amount = decimal.Round(PromoDataModel.ApplyPromo(detail.quantity * (detail.dealPrice != null ? (decimal)detail.dealPrice : iPrice.Price), detail.purchaseServiceDetailID), 2, MidpointRounding.AwayFromZero);
                                newDetail.Total.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                            }
                            else
                            {
                                newDetail.Total.Amount = 0;
                                newDetail.Total.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                            }
                            BillingModel.AccAcc IAccAcc = GetApplicableAccountingAccount(coupon.serviceID, (int)detail.priceTypeID, coupon.currencyID, 1);
                            newDetail.IncomeAccAccID = IAccAcc.AccAccID;
                            newDetail.IncomeAccAccNumber = IAccAcc.AccAccNumber;
                            newDetail.IncomeAccAccName = IAccAcc.AccAccName;

                            ComputedPriceModel oPrice = new ComputedPriceModel();
                            if (Prices.Count(x => x.IsCost && x.CurrencyID == model.Search_Currency && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID) > 0)
                            {
                                oPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == model.Search_Currency && x.PriceID == detail.netPriceID && x.PromoID == coupon.promoID);
                            }
                            else if (Prices.Count(x => x.IsCost && x.CurrencyID == model.Search_Currency && x.PriceID == detail.netPriceID && x.PromoID == null) > 0)
                            {
                                oPrice = Prices.FirstOrDefault(x => x.IsCost && x.CurrencyID == model.Search_Currency && x.PriceID == detail.netPriceID && x.PromoID == null);
                            }

                            if (oPrice != null)
                            {
                                if (Exchanges.Count(x => x.ExchangeRateID == oPrice.ExchangeRateID) == 0 && oPrice.ExchangeRateID != null)
                                {
                                    IncomeOutcomeModel.ExchangeRateItem newRate = new IncomeOutcomeModel.ExchangeRateItem();
                                    newRate.ExchangeRateID = oPrice.ExchangeRateID;
                                    newRate.ExchangeRate = db.tblExchangeRates.FirstOrDefault(x => x.exchangeRateID == oPrice.ExchangeRateID).exchangeRate;
                                    Exchanges.Add(newRate);
                                }
                                if (oPrice.ExchangeRateID != null)
                                {
                                    newDetail.OutcomeExchangeRate = Exchanges.FirstOrDefault(x => x.ExchangeRateID == oPrice.ExchangeRateID).ExchangeRate;
                                }
                                else
                                {
                                    newDetail.OutcomeExchangeRate = 1;
                                }

                                if (detail.customCost != null)
                                {
                                    newDetail.CustomCost = true;
                                    newDetail.OutcomeExchangeRate = (decimal)detail.customExchangeRate;
                                    if (detail.priceCurrencyID == model.Search_Currency)
                                    {
                                        newDetail.Cost.Amount = (decimal)detail.customCost;
                                    }
                                    else
                                    {
                                        newDetail.Cost.Amount = (decimal)detail.customCostAlt;
                                    }
                                }
                                else
                                {
                                    newDetail.CustomCost = false;
                                    newDetail.Cost.Amount = decimal.Round((coupon.applyToCost == true ? PromoDataModel.ApplyPromo(detail.quantity * oPrice.Price, detail.purchaseServiceDetailID) : detail.quantity * oPrice.Price), 2, MidpointRounding.AwayFromZero);
                                }
                                newDetail.Cost.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                            }
                            else
                            {
                                newDetail.Cost.Amount = 0;
                                newDetail.Cost.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                            }
                            BillingModel.AccAcc OAccAcc = GetApplicableAccountingAccount(coupon.serviceID, (int)detail.priceTypeID, coupon.currencyID, 1);
                            newDetail.OutcomeAccAccID = OAccAcc.AccAccID;
                            newDetail.OutcomeAccAccNumber = OAccAcc.AccAccNumber;
                            newDetail.OutcomeAccAccName = OAccAcc.AccAccName;
                        }
                        else
                        {
                            newDetail.UnitTotal.Amount = PromoDataModel.ApplyPromo(detail.quantity * (detail.customPrice != null ? (decimal)detail.customPrice : unit.tblPrices.price), detail.purchaseServiceDetailID);
                            newDetail.UnitTotal.Currency = coupon.currencyCode;
                            newDetail.Total.Amount = 0;
                            newDetail.Total.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                            newDetail.Cost.Amount = 0;
                            newDetail.Cost.Currency = model.Search_Currency == 1 ? "USD" : "MXN";
                        }

                        balance.Details.Add(newDetail);
                        //obtener summary por cuenta
                        if (balance.Totals.Count(a => a.AccAccName == newDetail.IncomeAccAccName && a.AccAccIncomeNumber == newDetail.IncomeAccAccNumber && a.PriceType == newDetail.PriceType) == 0)
                        {
                            IncomeOutcomeModel.IncomeOutcomeAccountTotal account = new IncomeOutcomeModel.IncomeOutcomeAccountTotal();
                            account.AccAccName = newDetail.IncomeAccAccName;
                            account.PriceType = newDetail.PriceType;

                            account.AccAccIncomeID = newDetail.IncomeAccAccID;
                            account.AccAccIncomeNumber = newDetail.IncomeAccAccNumber;

                            account.IncomeSubtotal = new Money();
                            account.IncomeIVA = new Money();
                            account.IncomeTotal = new Money();
                            account.IncomeTotal.Amount = newDetail.Total.Amount;
                            account.IncomeTotal.Currency = newDetail.Total.Currency;

                            account.AccAccOutcomeID = newDetail.OutcomeAccAccID;
                            account.AccAccOutcomeNumber = newDetail.OutcomeAccAccNumber;

                            account.OutcomeSubtotal = new Money();
                            account.OutcomeIVA = new Money();
                            account.OutcomeTotal = new Money();
                            account.OutcomeTotal.Amount = newDetail.Cost.Amount;
                            account.OutcomeTotal.Currency = newDetail.Cost.Currency;

                            account.Utility = new Money();
                            account.Utility.Currency = newDetail.Total.Currency;
                            balance.Totals.Add(account);
                        }
                        else
                        {
                            IncomeOutcomeModel.IncomeOutcomeAccountTotal account = balance.Totals.FirstOrDefault(a => a.AccAccName == newDetail.IncomeAccAccName && a.AccAccIncomeNumber == newDetail.IncomeAccAccNumber && a.PriceType == newDetail.PriceType);
                            account.IncomeTotal.Amount += newDetail.Total.Amount;
                            account.OutcomeTotal.Amount += newDetail.Cost.Amount;
                        }
                    }
                }
                //obtención de subtotal, iva y utilidad
                foreach (IncomeOutcomeModel.IncomeOutcomeAccountTotal item in balance.Totals)
                {
                    item.IncomeSubtotal.Amount = Math.Round(item.IncomeTotal.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    item.IncomeSubtotal.Currency = item.IncomeTotal.Currency;
                    item.IncomeIVA.Amount = item.IncomeTotal.Amount - item.IncomeSubtotal.Amount;
                    item.IncomeIVA.Currency = item.IncomeTotal.Currency;

                    item.OutcomeSubtotal.Amount = Math.Round(item.OutcomeTotal.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    item.OutcomeSubtotal.Currency = item.OutcomeTotal.Currency;
                    item.OutcomeIVA.Amount = item.OutcomeTotal.Amount - item.OutcomeSubtotal.Amount;
                    item.OutcomeIVA.Currency = item.OutcomeTotal.Currency;

                    item.Utility.Amount = item.IncomeSubtotal.Amount - item.OutcomeSubtotal.Amount;

                    balance.IncomeSubtotal.Amount += item.IncomeSubtotal.Amount;
                    balance.IncomeSubtotal.Currency = item.IncomeSubtotal.Currency;
                    balance.IncomeIVA.Amount += item.IncomeIVA.Amount;
                    balance.IncomeIVA.Currency = item.IncomeIVA.Currency;
                    balance.IncomeTotal.Amount += item.IncomeTotal.Amount;
                    balance.IncomeTotal.Currency = item.IncomeTotal.Currency;

                    balance.OutcomeSubtotal.Amount += item.OutcomeSubtotal.Amount;
                    balance.OutcomeSubtotal.Currency = item.OutcomeSubtotal.Currency;
                    balance.OutcomeIVA.Amount += item.OutcomeIVA.Amount;
                    balance.OutcomeIVA.Currency = item.OutcomeIVA.Currency;
                    balance.OutcomeTotal.Amount += item.OutcomeTotal.Amount;
                    balance.OutcomeTotal.Currency = item.OutcomeTotal.Currency;

                    balance.UtilityTotal.Amount += item.Utility.Amount;
                    balance.UtilityTotal.Currency = item.Utility.Currency;
                }
                balance.Totals = balance.Totals.OrderBy(x => x.AccAccName).ToList();
            }
            return balance;
        }


        public BudgetsViewModel GetBudgets(BudgetsViewModel.SearchBudgetsViewModel model)
        {
            decimal exchangeRate1 = 0;
            decimal exchangeRate2 = 0;
            BudgetsViewModel BudgetsView = new BudgetsViewModel();
            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));
            BudgetsView.Terminal = model.Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;
            if (model.Search_F_ToDate != null && model.Search_I_FromDate != null)
            {
                BudgetsView.Date = model.Search_I_FromDate + " - " + model.Search_F_ToDate;
            }
            if (model.Search_SelectedPointsOfSale != null && model.Search_SelectedPointsOfSale.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_SelectedPointsOfSale.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    BudgetsView.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                BudgetsView.PointsOfSale = "All";
            }
            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_SelectedPointsOfSale != null)
            {
                pointsOfSale = model.Search_SelectedPointsOfSale;
                pointsOfSaleLength = model.Search_SelectedPointsOfSale.Length;
            }

            //filtro para tipo de budget "egresses, payment and all"
            string[] typeValue = new string[] { };
            var typeText = "";
            if (model.Search_SelectedBudgetType != null && model.Search_SelectedBudgetType.Length > 0)
            {
                typeValue = model.Search_SelectedBudgetType;
                foreach (var x in typeValue)
                {
                    BudgetsView.BudgetsType += "<span class=\"block\">" + model.BudgetsTypeListItem.FirstOrDefault(y => y.Value == x).Text + "</span>";
                    typeText += model.BudgetsTypeListItem.FirstOrDefault(y => y.Value == x).Text;
                }
            }
            else
            {
                BudgetsView.BudgetsType = "All";
                typeText = "All";
            }

            var Budgets = from c in db.tblBudgets
                          select c;

            var query = (from p in db.tblPaymentDetails
                         where (p.budgetID != null)
                         && (p.dateSaved >= fDate && p.dateSaved <= tDate)
                         && (pointsOfSale.Contains(p.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                         && (p.tblPurchases.terminalID == model.Search_TerminalID)
                         && ((p.deleted == null) || (p.deleted == false))
                         select new BudgetsViewModel.BudgetQuery
                         {   //budget
                             ID = p.paymentDetailsID,
                             pointOfSaleID = p.tblPurchases.pointOfSaleID,
                             budgetID = p.budgetID.Value,
                             dateSaved = p.dateSaved,
                             Type = p.tblBudgets.perWeek ? " Week " : " Per Client ",
                             Team = p.tblPromotionTeams.promotionTeam,
                             Description = p.tblBudgets.leadCode + " " + p.tblBudgets.leadQualification,
                             //detail budget
                             BudgetAmount = p.amount,
                             CurrencyCode = p.tblCurrencies.currencyCode,
                             TransactionType = p.tblMoneyTransactions.transactionTypeID == 2 ? "Refund" : "Payment",
                             OpcName = p.tblOPCS.firstName + " " + p.tblOPCS.lastName,
                             Location = p.tblLocations.location,
                             Client = p.tblPurchases.tblLeads.firstName + "  " + p.tblPurchases.tblLeads.lastName,
                             UserID = (Guid)p.savedByUserID,
                             LastModifyUser = p.modifiedByUserID.Value,
                             LastDateModify = p.lastDateModified.Value,
                             List = "Payments"
                         }).Concat
                         (from e in db.tblEgresses
                          where (e.budgetID != null)
                          && (e.dateSaved >= fDate && e.dateSaved <= tDate)
                          && (pointsOfSale.Contains(e.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (e.terminalID == model.Search_TerminalID)
                          select new BudgetsViewModel.BudgetQuery
                          {   //budget
                              ID = e.egressID,
                              pointOfSaleID = e.pointOfSaleID,
                              budgetID = e.budgetID.Value,
                              dateSaved = e.dateSaved,
                              Type = e.tblBudgets.perWeek ? "Week" : "Per Client",
                              Team = e.tblPromotionTeams.promotionTeam,
                              Description = e.tblBudgets.leadCode + " - " + e.tblBudgets.leadQualification,
                              //detailBudget
                              BudgetAmount = e.amount,
                              CurrencyCode = e.tblCurrencies.currencyCode,
                              TransactionType = "Egresses",
                              OpcName = e.tblOPCS.firstName != null ? e.tblOPCS.firstName + " " + e.tblOPCS.lastName : e.opcOther != null ? e.opcOther : "Unknown",
                              Location = e.tblLocations.location,
                              Client = e.customer,
                              UserID = (Guid)e.savedByUserID,
                              LastModifyUser = e.modifiedByUserID,
                              LastDateModify = e.dateLastModification,
                              List = "Egresses"
                          }
                            );

            var Agents = from a in db.tblUserProfiles
                         where query.Select(x => x.UserID).Contains(a.userID)
                         select new
                         {
                             a.userID,
                             a.firstName,
                             a.lastName
                         };

            BudgetsView.Summary = new List<BudgetsViewModel.BudgetsResult>();

            //TypText = "Egresses" || "Payments" || "ALL"
            var _query = typeText != "All" && model.Search_SelectedBudgetType.Length < 2 ? query.Where(x => x.List == typeText) : query;

            foreach (var detail in _query)
            {
                var initDate = Budgets.FirstOrDefault(x => x.budgetID == detail.budgetID).perWeek == true ? GetBudgetEndDate(Budgets.FirstOrDefault(x => x.budgetID == detail.budgetID).resetDayOfWeek, detail.dateSaved, tDate).AddDays(-7).Date : fDate;
                var EndDate = Budgets.FirstOrDefault(x => x.budgetID == detail.budgetID).perWeek == true ? GetBudgetEndDate(Budgets.FirstOrDefault(x => x.budgetID == detail.budgetID).resetDayOfWeek, detail.dateSaved, tDate).AddDays(-1).Date : tDate.AddDays(-1);
                //Contar Budgets con ID, fecha de inicio y fin igual

                if (BudgetsView.Summary.Count(x => x.StartDate == initDate && x.EndDate == EndDate && x.BudgetID == detail.budgetID) == 0)
                {
                    BudgetsViewModel.BudgetsResult BudgetsList = new BudgetsViewModel.BudgetsResult();
                    BudgetsList.StartDate = detail.Type == "Per Client" ? fDate : initDate;
                    BudgetsList.EndDate = detail.Type == "Per Client" ? tDate.AddDays(-1) : EndDate;
                    BudgetsList.BudgetID = detail.budgetID;
                    BudgetsList.Cant = 0;
                    BudgetsList.Description = detail.Description;
                    BudgetsList.Type = detail.Type;
                    BudgetsList.Team = detail.Team;
                    BudgetsList.Budget = new Money();
                    BudgetsList.Used = new Money();
                    BudgetsList.Available = new Money();
                    BudgetsList.Details = new List<BudgetsViewModel.DetailsBudget>();
                    BudgetsView.Summary.Add(BudgetsList);
                }

                BudgetsViewModel.DetailsBudget list = new BudgetsViewModel.DetailsBudget();
                list.DetailBudgetID = detail.ID.Value;
                list.ExchangeRate = 0;
                list.Date = detail.dateSaved;
                list.Type = detail.TransactionType;
                list.Opc = detail.OpcName;
                list.Location = detail.Location != null ? detail.Location : "Unknown";
                list.Agent = Agents.First(x => x.userID == detail.UserID).firstName + " " + Agents.First(x => x.userID == detail.UserID).lastName;
                list.Client = detail.Client;
                list.ModifiedByUser = detail.LastModifyUser == null ? "" : Agents.FirstOrDefault(x => x.userID == detail.LastModifyUser).firstName + " " + Agents.FirstOrDefault(x => x.userID == detail.LastModifyUser).lastName;
                list.LastModification = detail.LastDateModify == null ? "" : detail.LastDateModify.Value.Date.ToString("yyyy-MM-dd hh:mm:ss tt");
                list.Amount = new Money();
                list.Budget = new Money();
                BudgetsView.Summary.FirstOrDefault(x => x.StartDate == initDate && x.EndDate == EndDate && x.BudgetID == detail.budgetID).Details.Add(list);

                var BudgetTable = BudgetsView.Summary.FirstOrDefault(x => x.StartDate == initDate && x.EndDate == EndDate && x.BudgetID == detail.budgetID);
                var DetailTable = BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID);
                var DetailRow = BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID && x.Date == detail.dateSaved);
                var BudgetRow = Budgets.FirstOrDefault(x => x.budgetID == detail.budgetID);

                DetailRow.Amount.Amount = detail.BudgetAmount; //Cantidad de Payment
                DetailRow.Amount.Currency = detail.CurrencyCode; //Tipo de Cambio Payment
                DetailRow.Budget.Amount = BudgetRow.budget; //Cantidad de Budget
                DetailRow.Budget.Currency = BudgetRow.tblCurrencies.currencyCode; //Tipo de Cambio Budget

                //payment y budgetcurrency = paymentcurrency
                if (detail.CurrencyCode != BudgetRow.tblCurrencies.currencyCode)
                {
                    //convertir a tipo de cambio y sumar                       
                    //exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(detail.dateSaved, detail.CurrencyCode, model.Search_TerminalID);
                    //exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(detail.dateSaved, BudgetRow.tblCurrencies.currencyCode, model.Search_TerminalID);
                    exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(detail.dateSaved, detail.CurrencyCode, model.Search_TerminalID, detail.pointOfSaleID);
                    exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(detail.dateSaved, BudgetRow.tblCurrencies.currencyCode, model.Search_TerminalID, detail.pointOfSaleID);

                    if (exchangeRate1 != 1)
                    {
                        BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID).ExchangeRate = exchangeRate1;
                    }
                    else
                    {
                        BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID).ExchangeRate = exchangeRate2;
                    }
                    //tipo de cambio
                    DetailRow.Budget.Amount = Math.Round(detail.BudgetAmount * exchangeRate1 / exchangeRate2, 2, MidpointRounding.AwayFromZero);
                    BudgetTable.Used.Amount += DetailRow.Budget.Amount;

                    BudgetTable.Available.Amount += (BudgetRow.budget - DetailRow.Budget.Amount);
                    BudgetTable.Available.Currency = BudgetRow.tblCurrencies.currencyCode;
                }
                else
                {
                    BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID).ExchangeRate = 1;

                    if (BudgetTable.Details.FirstOrDefault(x => x.DetailBudgetID == detail.ID).Type == "Refund")
                    {
                        //Resta Used "Refound" Type
                        BudgetTable.Used.Amount -= DetailRow.Amount.Amount;
                        BudgetTable.Used.Currency = DetailTable.Amount.Currency;

                        //suma Available
                        BudgetTable.Available.Amount += (DetailTable.Budget.Amount - DetailRow.Amount.Amount);
                        BudgetTable.Available.Currency = BudgetRow.tblCurrencies.currencyCode;
                    }
                    //Suma Used "Payment" Type
                    BudgetTable.Used.Amount += DetailRow.Amount.Amount;
                    BudgetTable.Used.Currency = DetailTable.Amount.Currency;

                    //suma Available
                    BudgetTable.Available.Amount += (DetailTable.Budget.Amount - DetailRow.Amount.Amount);
                    BudgetTable.Available.Currency = BudgetRow.tblCurrencies.currencyCode;
                    DetailRow.Budget.Amount = detail.BudgetAmount;
                }
                BudgetTable.Budget.Amount = BudgetRow.budget;
                BudgetTable.Budget.Currency = BudgetRow.tblCurrencies.currencyCode;
                BudgetTable.Cant = BudgetTable.Details.Count();
            }
            return BudgetsView;
        }


        public BillingModel GetBilling(BillingModel.SearchBilling model)
        {
            BillingModel billing = new BillingModel();
            billing.Terminal = model.Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;
            bool existCatalogIncome = (db.tblCatalogs_Terminals.Where(x => x.terminalID == model.Search_TerminalID && x.tblCatalogs.catalog == "Ingresos").Count() > 0 ? true : false);

            List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates = new List<ExchangeRatesModel.ExchangeRateForDate>();
            decimal exchangeRate1 = 0;
            decimal exchangeRate2 = 0;

            if (model.Search_SelectedCompanies != null && model.Search_SelectedCompanies.Length > 0)
            {
                var CompaniesQuery = from c in db.tblCompanies
                                     where model.Search_SelectedCompanies.Contains(c.companyID)
                                     select c;

                foreach (var company in CompaniesQuery)
                {
                    billing.Companies += "<span class=\"block\">" + company.company + "</span>";
                }
            }
            else
            {
                billing.Companies = "All";
            }
            if (model.Search_SelectedPointsOfSale != null && model.Search_SelectedPointsOfSale.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_SelectedPointsOfSale.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    billing.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                billing.PointsOfSale = "All";
            }

            billing.Currency = model.Currencies.FirstOrDefault(x => x.Value == model.Search_Currency).Text;
            billing.Date = model.Search_I_FromDate + " - " + model.Search_F_ToDate;
            billing.ReportType = model.MoneyTransactions.FirstOrDefault(x => x.Value == model.Search_MoneyTransactionType.ToString()).Text;

            billing.Details = new List<BillingModel.BillingDetail>();
            billing.CompaniesTotals = new List<BillingModel.CompanyBilling>();

            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);

            if (fDate < DateTime.Today)
            {
                int pointsOfSaleLength = 0;
                int[] pointsOfSale = new int[] { };
                if (model.Search_SelectedPointsOfSale != null)
                {
                    pointsOfSale = model.Search_SelectedPointsOfSale;
                    pointsOfSaleLength = model.Search_SelectedPointsOfSale.Length;
                }

                int companiesLength = 0;
                int?[] companies = new int?[] { };
                if (model.Search_SelectedCompanies != null)
                {
                    companies = model.Search_SelectedCompanies;
                    companiesLength = model.Search_SelectedCompanies.Length;
                }

                //var Coupons = from c in db.tblPurchases_Services
                //              where (c.tblPurchases.tblPaymentDetails.Count(x => companies.Contains(x.chargedToCompanyID)) > 0 || companiesLength == 0)
                //              && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                //              && c.tblPurchases.terminalID == model.Search_TerminalID
                //              && c.tblPurchases.isTest != true
                //              && c.tblPurchases.purchaseStatusID < 5
                //              orderby c.confirmationDateTime
                //              select c;

                var Coupons = from c in db.tblCloseOuts_Purchases
                              where (c.tblCloseOuts.closeOutDate >= fDate && c.tblCloseOuts.closeOutDate < tDate)
                              && (c.tblPurchases.tblPaymentDetails.Count(x => companies.Contains(x.chargedToCompanyID) && (x.deleted == null || x.deleted == false)) > 0 || companiesLength == 0)
                              && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                              && c.tblPurchases.terminalID == model.Search_TerminalID
                              select new
                              {
                                  c.tblPurchases_Services,
                                  c.paid,
                                  c.canceled
                              };

                if (model.Search_MoneyTransactionType == 1)
                {
                    //Coupons = from x in Coupons
                    //          where (x.confirmationDateTime >= fDate && x.confirmationDateTime < tDate)
                    //          && (x.serviceStatusID == 3 || x.serviceStatusID == 6)
                    //          orderby x.confirmationDateTime
                    //          select x;

                    Coupons = from x in Coupons
                              where x.paid == true
                              select x;
                }
                else
                {
                    //Coupons = from x in Coupons
                    //          where (x.cancelationDateTime >= fDate && x.cancelationDateTime < tDate)
                    //          && (x.serviceStatusID == 4 || x.serviceStatusID == 5)
                    //          orderby x.cancelationDateTime
                    //          select x;

                    Coupons = from x in Coupons
                              where x.canceled == true
                              select x;
                }

                foreach (var coupon in Coupons)
                {
                    foreach (var detail in coupon.tblPurchases_Services.tblPurchaseServiceDetails)
                    {
                        //newdetail
                        BillingModel.BillingDetail newDetail = new BillingModel.BillingDetail();
                        newDetail.UnitTotal = new Money();

                        newDetail.PurchaseID = coupon.tblPurchases_Services.purchaseID;
                        newDetail.PointOfSale = coupon.tblPurchases_Services.tblPurchases.tblPointsOfSale.shortName + " - " + coupon.tblPurchases_Services.tblPurchases.tblPointsOfSale.pointOfSale;
                        newDetail.Customer = coupon.tblPurchases_Services.tblPurchases.tblLeads.firstName + " " + coupon.tblPurchases_Services.tblPurchases.tblLeads.lastName;
                        newDetail.Customer = newDetail.Customer.Replace(".", " ");
                        newDetail.Folio = detail.coupon;
                        newDetail.CouponReference = coupon.tblPurchases_Services.couponReference;
                        newDetail.Date = (model.Search_MoneyTransactionType == 1 ? (coupon.tblPurchases_Services.confirmationDateTime != null ? coupon.tblPurchases_Services.confirmationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : coupon.tblPurchases_Services.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt")) : (coupon.tblPurchases_Services.cancelationDateTime != null ? coupon.tblPurchases_Services.cancelationDateTime.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : coupon.tblPurchases_Services.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt")));
                        if (coupon.tblPurchases_Services.audit == true)
                        {
                            var auditUser = db.tblUserProfiles.Select(x => new { x.firstName, x.lastName, x.userID }).FirstOrDefault(x => x.userID == coupon.tblPurchases_Services.auditedByUserID);
                            newDetail.Audited = "<span class=\"block\">Audited by " + auditUser.firstName + " " + auditUser.lastName + "</span>";
                            newDetail.Audited += "<span class=\"block\">On " + coupon.tblPurchases_Services.auditDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") + "</span>";
                        }
                        else
                        {
                            newDetail.Audited = "No";
                        }

                        if (existCatalogIncome)
                        {
                            var catIngreso = coupon.tblPurchases_Services.tblServices.tblCategories_Services.FirstOrDefault(c => c.tblCategories.tblCatalogs.catalog == "Ingresos");
                            if (catIngreso != null)
                            {
                                newDetail.Category = catIngreso.tblCategories.category;
                            }
                        }
                        else
                        {
                            var catIngreso = coupon.tblPurchases_Services.tblServices.tblCategories_Services.FirstOrDefault();
                            if (catIngreso != null)
                            {
                                newDetail.Category = catIngreso.tblCategories.category;
                            }
                        }
                        newDetail.Service = coupon.tblPurchases_Services.tblServices.service;
                        newDetail.Quantity = detail.quantity;
                        tblPriceUnits unit = PriceDataModel.GetUnit((detail.priceID != null ? (long)detail.priceID : (long)detail.netPriceID), coupon.tblPurchases_Services.tblPurchases.culture);
                        newDetail.Unit += unit.unit + (unit.additionalInfo != null ? "[" + unit.additionalInfo + "]" : "") + (detail.promo ? " (PROMO)" : "");

                        var assignations = db.tblPaymentsAssignation.Where(a => a.purchaseServiceDetailID == detail.purchaseServiceDetailID && a.tblCloseOuts.closeOutDate >= fDate && a.tblCloseOuts.closeOutDate < tDate && (companies.Contains(a.tblPaymentDetails.chargedToCompanyID) || companiesLength == 0));

                        if (assignations.Count() > 0)
                        {

                            List<long> closeoutIDs = assignations.Select(s => s.closeOutID).ToList();
                            var closeouts = coupon.tblPurchases_Services.tblCloseOuts_Purchases.Where(x => closeoutIDs.Contains(x.closeOutID));

                            foreach (var closeout in closeouts)
                            {
                                tblUserProfiles user = db.tblUserProfiles.FirstOrDefault(x => x.userID == closeout.tblCloseOuts.salesAgentUserID);
                                if (user != null)
                                {
                                    newDetail.CloseOut += "<span class=\"block\">" + closeout.tblCloseOuts.tblPointsOfSale.shortName + " " + user.firstName + " " + user.lastName + " " + closeout.tblCloseOuts.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                                }
                                else
                                {
                                    newDetail.CloseOut += "<span class=\"block\">" + closeout.tblCloseOuts.tblPointsOfSale.shortName + " All Agents " + closeout.tblCloseOuts.closeOutDate.ToString("yyyy-MM-dd") + (closeout.paid ? " paid" : " canceled") + "</span>";
                                }
                            }

                            newDetail.UnitTotal.Amount = assignations.FirstOrDefault().unitAmount;
                            newDetail.UnitTotal.Currency = assignations.FirstOrDefault().tblCurrencies.currencyCode;
                        }


                        newDetail.PriceType = detail.tblPriceTypes.priceType;
                        newDetail.Assignations = new List<BillingModel.BillingAssignation>();
                        if (assignations.Count() > 0)
                        {
                            foreach (var assignation in assignations.Where(x => x.moneyTransactionTypeID == model.Search_MoneyTransactionType))
                            {
                                BillingModel.BillingAssignation newAssignation = new BillingModel.BillingAssignation();
                                newAssignation.Payment = new Money();
                                newAssignation.Total = new Money();

                                newAssignation.PaymentType = assignation.description;
                                if (assignation.paymentDetailsID != null)
                                {
                                    if (assignation.tblPaymentDetails.paymentType == 2)
                                    {
                                        if (assignation.tblPaymentDetails.ccType != null)
                                        {
                                            //tarjeta por referencia
                                            newAssignation.PaymentType += " [" + assignation.tblPaymentDetails.tblCardTypes.cardType + " " + assignation.tblPaymentDetails.ccReferenceNumber + "]";
                                        }
                                        else if (assignation.tblPaymentDetails.tblMoneyTransactions.billingInfoID != null)
                                        {
                                            //tarjeta por billing info
                                            newAssignation.PaymentType += " [" + assignation.tblPaymentDetails.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType + " " + Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(assignation.tblPaymentDetails.tblMoneyTransactions.tblBillingInfo.cardNumber)) + "]";
                                        }

                                    }
                                    else if (assignation.tblPaymentDetails.paymentType == 3)
                                    {
                                        newAssignation.PaymentType = assignation.tblPaymentDetails.tblEgressConcepts.egressConcept;
                                    }
                                    newAssignation.CxCCompany = (assignation.tblPaymentDetails.chargedToCompanyID != null ? assignation.tblPaymentDetails.tblCompanies.company : "General Public");

                                    if (billing.CompaniesTotals.Count(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID) == 0)
                                    {
                                        BillingModel.CompanyBilling newCompany = new BillingModel.CompanyBilling();
                                        newCompany.CxCCompanyID = assignation.tblPaymentDetails.chargedToCompanyID;
                                        newCompany.CxCCompany = newAssignation.CxCCompany;
                                        newCompany.AccountingAccounts = new List<BillingModel.AccAccDetail>();
                                        newCompany.Subtotal = new Money();
                                        newCompany.IVA = new Money();
                                        newCompany.Total = new Money();
                                        billing.CompaniesTotals.Add(newCompany);
                                    }


                                    BillingModel.AccAcc AccAcc = GetApplicableAccountingAccount(coupon.tblPurchases_Services.serviceID, (int)detail.priceTypeID, coupon.tblPurchases_Services.currencyID, 1);
                                    newAssignation.CxCOPC = (assignation.tblPaymentDetails.opcID != null ? assignation.tblPaymentDetails.tblOPCS.opc : assignation.tblPaymentDetails.other);
                                    newAssignation.CxCOPCTeam = (assignation.tblPaymentDetails.promotionTeamID != null ? assignation.tblPaymentDetails.tblPromotionTeams.promotionTeam : "");
                                    if (assignation.tblPaymentDetails.opcID != null)
                                    {
                                        newAssignation.CxCOPCLegacyKey = assignation.tblPaymentDetails.tblOPCS.legacyKey;
                                    }
                                    if (assignation.tblPaymentDetails.budgetID != null)
                                    {
                                        newAssignation.PaymentType += " [Budget]";
                                        newAssignation.CxCBudget = assignation.tblPaymentDetails.tblBudgets.leadQualification;
                                    }
                                    newAssignation.CxCInvitation = assignation.tblPaymentDetails.invitation;

                                    if (AccAcc != null)
                                    {
                                        newAssignation.AccAccID = AccAcc.AccAccID;
                                        newAssignation.AccAccNumber = AccAcc.AccAccNumber;
                                        newAssignation.AccAccName = AccAcc.AccAccName;
                                        newAssignation.AccAccArticle = AccAcc.AccAccArticle;

                                        if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.Count(a => a.AccAccID == AccAcc.AccAccID) == 0)
                                        {
                                            BillingModel.AccAccDetail accAccDetail = new BillingModel.AccAccDetail();
                                            accAccDetail.AccAccID = AccAcc.AccAccID;
                                            accAccDetail.AccAccNumber = AccAcc.AccAccNumber;
                                            accAccDetail.AccAccName = AccAcc.AccAccName;
                                            accAccDetail.AccAccArticle = AccAcc.AccAccArticle;
                                            accAccDetail.AccAccPriceType = AccAcc.AccAccPriceType;
                                            accAccDetail.Units = 0;
                                            accAccDetail.AverageUnit = new Money();
                                            accAccDetail.Subtotal = new Money();
                                            accAccDetail.IVA = new Money();
                                            accAccDetail.Total = new Money();

                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.Add(accAccDetail);
                                        }

                                        billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == AccAcc.AccAccID).Units += 1;
                                    }
                                }

                                newAssignation.Payment.Amount = assignation.paymentAmount;
                                newAssignation.Payment.Currency = assignation.tblCurrencies1.currencyCode;

                                if (model.Search_Currency == "1")
                                {
                                    newAssignation.Total.Currency = "USD";
                                }
                                else
                                {
                                    newAssignation.Total.Currency = "MXN";
                                }

                                DateTime exchangeDate = (coupon.tblPurchases_Services.confirmationDateTime != null ? (DateTime)coupon.tblPurchases_Services.confirmationDateTime.Value : coupon.tblPurchases_Services.dateSaved);
                                //exchangeRate1
                                //if (ExchangeRates.FirstOrDefault(x => x.Date == fDate && x.CurrencyCode == newAssignation.Payment.Currency) != null)
                                //{
                                //    exchangeRate1 = ExchangeRates.FirstOrDefault(x => x.Date == fDate && x.CurrencyCode == newAssignation.Payment.Currency).ExchangeRate;
                                //}
                                //else
                                //{
                                //exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newAssignation.Payment.Currency, model.Search_TerminalID);
                                exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newAssignation.Payment.Currency, model.Search_TerminalID, (assignation.paymentDetailsID != null ? assignation.tblPaymentDetails.tblPurchases.pointOfSaleID : 0));
                                //    ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                                //    {
                                //        Date = fDate,
                                //        CurrencyCode = newAssignation.Payment.Currency,
                                //        ExchangeRate = exchangeRate1
                                //    });
                                //}

                                //exchangeRate2
                                //if (ExchangeRates.FirstOrDefault(x => x.Date == fDate && x.CurrencyCode == model.Search_Currency) != null)
                                //{
                                //    exchangeRate2 = ExchangeRates.FirstOrDefault(x => x.Date == fDate && x.CurrencyCode == model.Search_Currency).ExchangeRate;
                                //}
                                //else
                                //{
                                //exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, model.Search_Currency, model.Search_TerminalID);
                                exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, model.Search_Currency, model.Search_TerminalID, (assignation.paymentDetailsID != null ? assignation.tblPaymentDetails.tblPurchases.pointOfSaleID : 0));
                                //    ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                                //    {
                                //        Date = fDate,
                                //        CurrencyCode = model.Search_Currency,
                                //        ExchangeRate = exchangeRate2
                                //    });
                                //}

                                if (exchangeRate1 != 1)
                                {
                                    newAssignation.ExchangeRate = exchangeRate1;
                                }
                                else
                                {
                                    newAssignation.ExchangeRate = exchangeRate2;
                                }

                                newAssignation.Total.Amount = Math.Round(newAssignation.Payment.Amount * exchangeRate1 / exchangeRate2, 2, MidpointRounding.AwayFromZero);

                                //AccAccDetail
                                if (assignation.paymentDetailsID != null)
                                {
                                    billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Amount += newAssignation.Total.Amount;
                                    billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Currency = newAssignation.Total.Currency;
                                }

                                newDetail.Assignations.Add(newAssignation);
                            }
                        }
                        else
                        {
                            //buscar corte
                            var serviceCloseout = from c in db.tblCloseOuts_Purchases
                                                  where c.purchase_ServiceID == coupon.tblPurchases_Services.purchase_ServiceID
                                                  && c.paid == true
                                                  select c;
                            if (serviceCloseout.Count() == 0)
                            {
                                //no hay corte
                                newDetail.CloseOut = "No Closed Out";
                            }
                        }
                        billing.Details.Add(newDetail);
                    }
                }
            }

            billing.Details = billing.Details.OrderBy(x => x.Folio).ToList();

            //obtención de subtotales
            foreach (var company in billing.CompaniesTotals)
            {
                foreach (var acc in company.AccountingAccounts)
                {
                    acc.Subtotal.Currency = acc.Total.Currency;
                    acc.IVA.Currency = acc.Total.Currency;
                    acc.AverageUnit.Currency = acc.Total.Currency;

                    acc.Subtotal.Amount = Math.Round(acc.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    acc.IVA.Amount = Math.Round(acc.Subtotal.Amount * IVA / 100, 2, MidpointRounding.AwayFromZero);
                    acc.AverageUnit.Amount = acc.Subtotal.Amount / acc.Units;

                    company.Subtotal.Currency = acc.Subtotal.Currency;
                    company.IVA.Currency = acc.IVA.Currency;
                    company.Total.Currency = acc.Total.Currency;

                    company.Subtotal.Amount += acc.Subtotal.Amount;
                    company.IVA.Amount += acc.IVA.Amount;
                    company.Total.Amount += acc.Total.Amount;
                }

                company.AccountingAccounts = company.AccountingAccounts.OrderBy(x => x.AccAccName).ToList();
            }

            return billing;
        }

        public BillingModel GetBillingFromCache(BillingModel.SearchBilling model)
        {
            BillingModel billing = new BillingModel();
            decimal exchangeRate1 = 0;
            decimal exchangeRate2 = 0;
            billing.Terminal = model.Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;

            var BillingByOPC = (from q in db.tblTerminals
                                where q.terminalID == model.Search_TerminalID
                                select q.billingByOPC).FirstOrDefault();

            if (model.Search_SelectedCompanies != null && model.Search_SelectedCompanies.Length > 0)
            {
                var CompaniesQuery = from c in db.tblCompanies
                                     where model.Search_SelectedCompanies.Contains(c.companyID)
                                     select c;

                foreach (var company in CompaniesQuery)
                {
                    billing.Companies += "<span class=\"block\">" + company.company + "</span>";
                }
            }
            else
            {
                billing.Companies = "All";
            }
            if (model.Search_SelectedPointsOfSale != null && model.Search_SelectedPointsOfSale.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_SelectedPointsOfSale.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    billing.PointsOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                billing.PointsOfSale = "All";
            }

            billing.Currency = model.Currencies.FirstOrDefault(x => x.Value == model.Search_Currency).Text;
            billing.Date = model.Search_I_FromDate + " - " + model.Search_F_ToDate;
            billing.ReportType = model.MoneyTransactions.FirstOrDefault(x => x.Value == model.Search_MoneyTransactionType.ToString()).Text;

            billing.Details = new List<BillingModel.BillingDetail>();
            billing.CompaniesTotals = new List<BillingModel.CompanyBilling>();

            DateTime fDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime tDate = DateTime.Parse(model.Search_F_ToDate).AddDays(1);

            if (fDate <= DateTime.Today)
            {
                int pointsOfSaleLength = 0;
                int[] pointsOfSale = new int[] { };
                if (model.Search_SelectedPointsOfSale != null)
                {
                    pointsOfSale = model.Search_SelectedPointsOfSale;
                    pointsOfSaleLength = model.Search_SelectedPointsOfSale.Length;
                }

                int companiesLength = 0;
                int?[] companies = new int?[] { };
                if (model.Search_SelectedCompanies != null)
                {
                    companies = model.Search_SelectedCompanies;
                    companiesLength = model.Search_SelectedCompanies.Length;
                }

                var Coupons = from c in db.tblCloseOuts_Purchases
                              where (c.tblCloseOuts.closeOutDate >= fDate && c.tblCloseOuts.closeOutDate < tDate)
                              && (c.tblPurchases.tblPaymentDetails.Count(x => companies.Contains(x.chargedToCompanyID) && (x.deleted == null || x.deleted == false)) > 0 || (companiesLength == 0 && c.tblPurchases.tblPaymentDetails.Count(x => x.deleted == null || x.deleted == false) > 0))
                              && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                              && c.tblPurchases.terminalID == model.Search_TerminalID
                              select new
                              {
                                  c.purchase_ServiceID,
                                  c.paid,
                                  c.canceled
                              };

                List<long> CouponIDs = new List<long>();
                if (model.Search_MoneyTransactionType == 1)
                {
                    Coupons = from x in Coupons
                              where x.paid == true
                              select x;
                }
                else
                {
                    Coupons = from x in Coupons
                              where x.canceled == true
                              select x;
                }

                CouponIDs = Coupons.Select(x => x.purchase_ServiceID).ToList();

                var CouponInfo = from c in db.tblCouponInfo
                                 where CouponIDs.Contains(c.purchase_ServiceID)
                                 select c;

                foreach (var coupon in CouponInfo)
                {
                    foreach (var detail in coupon.tblCouponInfoUnits)
                    {
                        //newdetail
                        BillingModel.BillingDetail newDetail = new BillingModel.BillingDetail();
                        newDetail.UnitTotal = new Money();

                        newDetail.PurchaseID = coupon.purchaseID;
                        newDetail.PointOfSale = coupon.pointOfSale;
                        newDetail.Customer = coupon.customerFirstName + " " + coupon.customerLastName;
                        newDetail.Customer = newDetail.Customer.Replace(".", " ");
                        newDetail.Folio = detail.unitFolio;
                        newDetail.CouponReference = coupon.couponReference;
                        newDetail.Date = (model.Search_MoneyTransactionType == 1 ? (coupon.dateConfirmed != null ? coupon.dateConfirmed.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt")) : (coupon.dateCanceled != null ? coupon.dateCanceled.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : coupon.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt")));
                        if (coupon.audited == true)
                        {
                            newDetail.Audited = "<span class=\"block\">Audited by " + coupon.auditedBy + "</span>";
                            newDetail.Audited += "<span class=\"block\">On " + coupon.auditedOnDate.Value.ToString("yyyy-MM-dd hh:mm:ss tt") + "</span>";
                        }
                        else
                        {
                            newDetail.Audited = "No";
                        }

                        if (model.Search_MoneyTransactionType == 1)
                        {
                            newDetail.Category = detail.incomeAccountName;
                        }
                        else
                        {
                            newDetail.Category = detail.outcomeAccountName;
                        }

                        newDetail.Service = coupon.item;
                        newDetail.Quantity = detail.quantity;
                        newDetail.Unit += detail.unit + (detail.isPromo ? " (PROMO)" : "");

                        var assignations = db.tblPaymentsAssignation.Where(a => a.purchaseServiceDetailID == detail.purchaseServiceDetailID && a.tblCloseOuts.closeOutDate >= fDate && a.tblCloseOuts.closeOutDate < tDate && (companies.Contains(a.tblPaymentDetails.chargedToCompanyID) || companiesLength == 0));

                        if (assignations.Count() > 0)
                        {

                            List<long> closeoutIDs = assignations.Select(s => s.closeOutID).ToList();

                            if (coupon.paidCloseOutID != null)
                            {
                                newDetail.CloseOut += "<span class=\"block\">" + coupon.paidCloseOut + "</span>";
                            }
                            if (coupon.canceledCloseOutID != null)
                            {
                                newDetail.CloseOut += "<span class=\"block\">" + coupon.canceledCloseOut + "</span>";
                            }

                            newDetail.UnitTotal.Amount = assignations.FirstOrDefault().unitAmount;
                            newDetail.UnitTotal.Currency = assignations.FirstOrDefault().tblCurrencies.currencyCode;
                        }


                        newDetail.PriceType = detail.priceType;
                        newDetail.Assignations = new List<BillingModel.BillingAssignation>();
                        if (assignations.Count() > 0)
                        {
                            foreach (var assignation in assignations.Where(x => x.moneyTransactionTypeID == model.Search_MoneyTransactionType))
                            {
                                BillingModel.BillingAssignation newAssignation = new BillingModel.BillingAssignation();
                                newAssignation.Payment = new Money();
                                newAssignation.Total = new Money();

                                newAssignation.PaymentType = assignation.description;
                                if (assignation.paymentDetailsID != null)
                                {
                                    if (assignation.tblPaymentDetails.paymentType == 2)
                                    {
                                        if (assignation.tblPaymentDetails.ccType != null)
                                        {
                                            //tarjeta por referencia
                                            newAssignation.PaymentType += " [" + assignation.tblPaymentDetails.tblCardTypes.cardType + " " + assignation.tblPaymentDetails.ccReferenceNumber + "]";
                                        }
                                        else if (assignation.tblPaymentDetails.tblMoneyTransactions.billingInfoID != null)
                                        {
                                            //tarjeta por billing info
                                            newAssignation.PaymentType += " [" + assignation.tblPaymentDetails.tblMoneyTransactions.tblBillingInfo.tblCardTypes.cardType + " " + Utils.GeneralFunctions.MaskCreditCard(mexHash.mexHash.DecryptString(assignation.tblPaymentDetails.tblMoneyTransactions.tblBillingInfo.cardNumber)) + "]";
                                        }

                                    }
                                    else if (assignation.tblPaymentDetails.paymentType == 3)
                                    {
                                        newAssignation.PaymentType = assignation.tblPaymentDetails.tblEgressConcepts.egressConcept;
                                    }

                                    if (assignation.tblPaymentDetails.paymentType == 6)
                                    {
                                        newAssignation.CxCCompany = "Certificate";
                                    }
                                    else
                                    {
                                        newAssignation.CxCCompany = (assignation.tblPaymentDetails.chargedToCompanyID != null ? assignation.tblPaymentDetails.tblCompanies.company : "General Public");
                                    }

                                    //-------COMPANIES----------

                                    if (assignation.tblPaymentDetails.paymentType == 6)
                                    {
                                        if (billing.CompaniesTotals.Count(x => x.CxCCompany == "Certificate") == 0)
                                        {
                                            BillingModel.CompanyBilling newCompany = new BillingModel.CompanyBilling();
                                            newCompany.CxCCompanyID = null;
                                            newCompany.CxCCompany = "Certificate";
                                            newCompany.AccountingAccounts = new List<BillingModel.AccAccDetail>();
                                            newCompany.Subtotal = new Money();
                                            newCompany.IVA = new Money();
                                            newCompany.Total = new Money();
                                            billing.CompaniesTotals.Add(newCompany);
                                        }
                                    }
                                    else
                                    {
                                        if (BillingByOPC == true && assignation.tblPaymentDetails.paymentType == 3 && assignation.tblPaymentDetails.opcID != null)
                                        {
                                            if (billing.CompaniesTotals.Count(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000) == 0)
                                            {
                                                BillingModel.CompanyBilling newCompany = new BillingModel.CompanyBilling();
                                                newCompany.CxCCompanyID = int.Parse((assignation.tblPaymentDetails.opcID + 1000000).ToString());
                                                newCompany.CxCCompany = assignation.tblPaymentDetails.tblOPCS.opc;
                                                newCompany.AccountingAccounts = new List<BillingModel.AccAccDetail>();
                                                newCompany.Subtotal = new Money();
                                                newCompany.IVA = new Money();
                                                newCompany.Total = new Money();
                                                billing.CompaniesTotals.Add(newCompany);
                                            }
                                        }
                                        else
                                        {
                                            if (billing.CompaniesTotals.Count(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID) == 0)
                                            {
                                                BillingModel.CompanyBilling newCompany = new BillingModel.CompanyBilling();
                                                newCompany.CxCCompanyID = assignation.tblPaymentDetails.chargedToCompanyID;
                                                newCompany.CxCCompany = newAssignation.CxCCompany;
                                                newCompany.AccountingAccounts = new List<BillingModel.AccAccDetail>();
                                                newCompany.Subtotal = new Money();
                                                newCompany.IVA = new Money();
                                                newCompany.Total = new Money();
                                                billing.CompaniesTotals.Add(newCompany);
                                            }
                                        }
                                    }
                                    //-----------COMPANIES--------------
                                    if (assignation.tblPaymentDetails.paymentType == 3)
                                    {
                                        newAssignation.CxCOPC = (assignation.tblPaymentDetails.opcID != null ? assignation.tblPaymentDetails.tblOPCS.opc : assignation.tblPaymentDetails.other);
                                        newAssignation.CxCOPCTeam = (assignation.tblPaymentDetails.promotionTeamID != null ? assignation.tblPaymentDetails.tblPromotionTeams.promotionTeam : "");
                                        if (assignation.tblPaymentDetails.opcID != null)
                                        {
                                            newAssignation.CxCOPCLegacyKey = assignation.tblPaymentDetails.tblOPCS.legacyKey;
                                        }
                                        if (assignation.tblPaymentDetails.budgetID != null)
                                        {
                                            newAssignation.PaymentType += " [Budget]";
                                            newAssignation.CxCBudget = assignation.tblPaymentDetails.tblBudgets.leadQualification;
                                        }
                                        newAssignation.CxCInvitation = assignation.tblPaymentDetails.invitation;
                                    }

                                    if (detail.incomeAccountID != null)
                                    {
                                        newAssignation.AccAccID = detail.incomeAccountID;
                                        newAssignation.AccAccNumber = detail.incomeAccountNumber;
                                        newAssignation.AccAccName = detail.incomeAccountName;
                                        newAssignation.AccAccArticle = detail.incomeAccountArticle;
                                    }
                                    else
                                    {
                                        newAssignation.AccAccID = detail.incomeAccountID;
                                        newAssignation.AccAccNumber = "000000000";
                                        newAssignation.AccAccName = "Not Assigned";
                                        newAssignation.AccAccArticle = "";
                                    }

                                    //-------------COMPANIES--------------
                                    //---------------------------------------------
                                    if (assignation.tblPaymentDetails.paymentType == 6)
                                    {
                                        if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompany == "Certificate").AccountingAccounts.Count(a => a.AccAccID == detail.incomeAccountID) == 0)
                                        {
                                            BillingModel.AccAccDetail accAccDetail = new BillingModel.AccAccDetail();
                                            accAccDetail.AccAccID = detail.incomeAccountID;
                                            accAccDetail.AccAccNumber = newAssignation.AccAccNumber;
                                            accAccDetail.AccAccName = newAssignation.AccAccName;
                                            accAccDetail.AccAccArticle = detail.incomeAccountArticle;
                                            accAccDetail.AccAccPriceType = detail.priceType;
                                            accAccDetail.Units = 0;
                                            accAccDetail.AverageUnit = new Money();
                                            accAccDetail.Subtotal = new Money();
                                            accAccDetail.IVA = new Money();
                                            accAccDetail.Total = new Money();

                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompany == "Certificate").AccountingAccounts.Add(accAccDetail);
                                        }
                                        billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompany == "Certificate").AccountingAccounts.FirstOrDefault(a => a.AccAccID == detail.incomeAccountID).Units += 1;
                                    }
                                    else//----------------------------------------
                                    {
                                        if (BillingByOPC == true && assignation.tblPaymentDetails.paymentType == 3 && assignation.tblPaymentDetails.opcID != null)
                                        {
                                            if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.Count(a => a.AccAccID == detail.incomeAccountID) == 0)
                                            {
                                                BillingModel.AccAccDetail accAccDetail = new BillingModel.AccAccDetail();
                                                accAccDetail.AccAccID = detail.incomeAccountID;
                                                accAccDetail.AccAccNumber = newAssignation.AccAccNumber;
                                                accAccDetail.AccAccName = newAssignation.AccAccName;
                                                accAccDetail.AccAccArticle = detail.incomeAccountArticle;
                                                accAccDetail.AccAccPriceType = detail.priceType;
                                                accAccDetail.Units = 0;
                                                accAccDetail.AverageUnit = new Money();
                                                accAccDetail.Subtotal = new Money();
                                                accAccDetail.IVA = new Money();
                                                accAccDetail.Total = new Money();

                                                billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.Add(accAccDetail);
                                            }

                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.FirstOrDefault(a => a.AccAccID == detail.incomeAccountID).Units += 1;
                                        }
                                        else
                                        {
                                            if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.Count(a => a.AccAccID == detail.incomeAccountID) == 0)
                                            {
                                                BillingModel.AccAccDetail accAccDetail = new BillingModel.AccAccDetail();
                                                accAccDetail.AccAccID = detail.incomeAccountID;
                                                accAccDetail.AccAccNumber = newAssignation.AccAccNumber;
                                                accAccDetail.AccAccName = newAssignation.AccAccName;
                                                accAccDetail.AccAccArticle = detail.incomeAccountArticle;
                                                accAccDetail.AccAccPriceType = detail.priceType;
                                                accAccDetail.Units = 0;
                                                accAccDetail.AverageUnit = new Money();
                                                accAccDetail.Subtotal = new Money();
                                                accAccDetail.IVA = new Money();
                                                accAccDetail.Total = new Money();

                                                billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.Add(accAccDetail);
                                            }

                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == detail.incomeAccountID).Units += 1;
                                        }
                                    }

                                    //-----------COMPANIES-------------
                                    //}
                                }

                                newAssignation.Payment.Amount = assignation.paymentAmount;
                                newAssignation.Payment.Currency = assignation.tblCurrencies1.currencyCode;

                                if (model.Search_Currency == "1")
                                {
                                    newAssignation.Total.Currency = "USD";
                                }
                                else
                                {
                                    newAssignation.Total.Currency = "MXN";
                                }

                                DateTime exchangeDate = (model.Search_MoneyTransactionType == 1 ? (coupon.dateConfirmed != null ? (DateTime)coupon.dateConfirmed.Value : coupon.dateSaved) : (coupon.dateCanceled != null ? (DateTime)coupon.dateCanceled : coupon.dateSaved));

                                //exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newAssignation.Payment.Currency, model.Search_TerminalID);

                                //exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, model.Search_Currency, model.Search_TerminalID);
                                exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newAssignation.Payment.Currency, model.Search_TerminalID, (assignation.paymentDetailsID != null ? assignation.tblPaymentDetails.tblPurchases.pointOfSaleID : 0));

                                exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, model.Search_Currency, model.Search_TerminalID, (assignation.paymentDetailsID != null ? assignation.tblPaymentDetails.tblPurchases.pointOfSaleID : 0));

                                if (exchangeRate1 != 1)
                                {
                                    newAssignation.ExchangeRate = exchangeRate1;
                                }
                                else
                                {
                                    newAssignation.ExchangeRate = exchangeRate2;
                                }

                                newAssignation.Total.Amount = Math.Round(newAssignation.Payment.Amount * exchangeRate1 / exchangeRate2, 2, MidpointRounding.AwayFromZero);

                                //AccAccDetail
                                if (assignation.paymentDetailsID != null)
                                {
                                    //-----------COMPANIES----------
                                    if (BillingByOPC == true && assignation.tblPaymentDetails.paymentType == 3 && assignation.tblPaymentDetails.opcID != null)
                                    {
                                        if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID) != null)
                                        {
                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Amount += newAssignation.Total.Amount;
                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.opcID + 1000000).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Currency = newAssignation.Total.Currency;
                                        }
                                        //else
                                        //{
                                        if (newAssignation.AccAccID == null)
                                        {
                                            billing.ErrorMessage = "There is a problem processing Coupon " + newDetail.Folio + ". " + newDetail.Service + " doesn't have a related Accounting Account and it affects the total per account. Please assign the accounting account and process the cache for this coupon again. Then repeat the report.";
                                        }
                                        //}
                                    }
                                    else
                                    {
                                        if (assignation.tblPaymentDetails.paymentType == 6)
                                        {
                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompany == "Certificate").AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Amount += newAssignation.Total.Amount;
                                            billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompany == "Certificate").AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Currency = newAssignation.Total.Currency;
                                        }
                                        else
                                        {
                                            if (billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID) != null)
                                            {
                                                billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Amount += newAssignation.Total.Amount;
                                                billing.CompaniesTotals.FirstOrDefault(c => c.CxCCompanyID == assignation.tblPaymentDetails.chargedToCompanyID).AccountingAccounts.FirstOrDefault(a => a.AccAccID == newAssignation.AccAccID).Total.Currency = newAssignation.Total.Currency;
                                            }
                                            //else
                                            //{
                                            if (newAssignation.AccAccID == null)
                                            {
                                                billing.ErrorMessage = "There is a problem processing Coupon " + newDetail.Folio + ". " + newDetail.Service + " doesn't have a related Accounting Account and it affects the total per account. Please assign the accounting account and process the cache for this coupon again. Then repeat the report.";
                                            }
                                            //}
                                        }
                                    }
                                    //----------COMPANIES--------------
                                }

                                newDetail.Assignations.Add(newAssignation);
                            }
                        }
                        else
                        {
                            //buscar corte
                            var serviceCloseout = from c in db.tblCloseOuts_Purchases
                                                  where c.purchase_ServiceID == coupon.purchase_ServiceID
                                                  && c.paid == true
                                                  select c;
                            if (serviceCloseout.Count() == 0)
                            {
                                //no hay corte
                                newDetail.CloseOut = "No Closed Out";
                            }
                            else
                            {
                                newDetail.CloseOut = coupon.paidCloseOut + coupon.canceledCloseOut;
                            }
                        }
                        billing.Details.Add(newDetail);
                    }
                }
            }

            billing.Details = billing.Details.OrderBy(x => x.Folio).ToList();

            //obtención de subtotales
            foreach (var company in billing.CompaniesTotals)
            {
                foreach (var acc in company.AccountingAccounts)
                {
                    acc.Subtotal.Currency = acc.Total.Currency;
                    acc.IVA.Currency = acc.Total.Currency;
                    acc.AverageUnit.Currency = acc.Total.Currency;

                    acc.Subtotal.Amount = Math.Round(acc.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                    acc.IVA.Amount = Math.Round(acc.Subtotal.Amount * IVA / 100, 2, MidpointRounding.AwayFromZero);
                    acc.AverageUnit.Amount = acc.Subtotal.Amount / acc.Units;

                    company.Subtotal.Currency = acc.Subtotal.Currency;
                    company.IVA.Currency = acc.IVA.Currency;
                    company.Total.Currency = acc.Total.Currency;

                    company.Subtotal.Amount += acc.Subtotal.Amount;
                    company.IVA.Amount += acc.IVA.Amount;
                    company.Total.Amount += acc.Total.Amount;
                }

                company.AccountingAccounts = company.AccountingAccounts.OrderBy(x => x.AccAccNumber).ToList();
            }

            return billing;
        }

        public BillingModel.AccAcc GetApplicableAccountingAccount(long serviceID, int priceTypeID, int currencyID, int type)
        {
            BillingModel.AccAcc accacc = new BillingModel.AccAcc();
            bool accountType = (type == 1 ? true : false);
            var companyIDQ = (from c in db.tblServices
                              where c.serviceID == serviceID
                              select c.tblTerminals.companyID).FirstOrDefault();

            var AccAccIDs = (from x in db.tblAccountingAccounts
                             where x.accountType == accountType
                             && x.companyID == companyIDQ
                             && (x.priceTypeID == priceTypeID || x.priceTypeID == null)
                             select x.accountingAccountID).ToList();

            var AccAccQ = (from a in db.tblServices_AccountingAccounts
                           where a.serviceID == serviceID
                           && AccAccIDs.Contains(a.accountingAccountID)
                           orderby a.tblAccountingAccounts.priceTypeID descending
                           select a).FirstOrDefault();

            if (AccAccQ != null)
            {
                accacc.AccAccID = AccAccQ.accountingAccountID;
                accacc.AccAccNumber = AccAccQ.tblAccountingAccounts.account;
                accacc.AccAccName = AccAccQ.tblAccountingAccounts.accountName;
                accacc.AccAccArticle = (currencyID == 1 ? AccAccQ.tblAccountingAccounts.articleUSD : AccAccQ.tblAccountingAccounts.articleMXN);
                accacc.AccAccPriceType = (AccAccQ.tblAccountingAccounts.priceTypeID != null ? AccAccQ.tblAccountingAccounts.tblPriceTypes.priceType : "All Types");
            }

            return accacc;
        }

        //public InvoiceModel GetInvoice(InvoiceModel.SearchInvoice model)
        //{
        //    InvoiceModel invoice = new InvoiceModel();
        //    invoice.Date = model.Search_Date;
        //    if (model.Search_CompanyID != null)
        //    {
        //        if (model.Search_CompanyID != null)
        //        {
        //            tblCompanies company = db.tblCompanies.Single(x => x.companyID == model.Search_CompanyID);
        //            invoice.LegalEntity = company.company;
        //            invoice.RFC = company.rfc;
        //            invoice.Address = company.address + ", " + company.city + ", " + company.state + ", " + company.tblCountries.country;
        //            invoice.CP = company.zipCode;
        //        }
        //        else
        //        {
        //            invoice.LegalEntity = "Público en General";
        //        }
        //    }

        //    List<InvoiceModel.InvoiceItem> Items = new List<InvoiceModel.InvoiceItem>();

        //    DateTime invoiceDate = DateTime.Parse(model.Search_Date);
        //    var CouponIDs = from c in db.tblCloseOuts_Purchases
        //                    where c.tblCloseOuts.terminalID == model.Search_TerminalID
        //                    && (c.datePaid == invoiceDate || c.dateCanceled == invoiceDate)
        //                    select c.purchase_ServiceID;

        //    var PaymentIDs = from p in db.tblCloseOuts_PaymentDetails
        //                     where p.tblCloseOuts.terminalID == model.Search_TerminalID
        //                     && p.tblCloseOuts.closeOutDate == invoiceDate
        //                     select p.paymentDetailsID;

        //    var Purchases = (from x in db.tblCloseOuts_Purchases
        //                     where x.tblCloseOuts.terminalID == model.Search_TerminalID
        //                     && (x.datePaid == invoiceDate || x.dateCanceled == invoiceDate)
        //                     select x.tblPurchases).Distinct();

        //    foreach (tblPurchases purchase in Purchases)
        //    {
        //        var PaymentsQuery = from q in purchase.tblPaymentDetails
        //                            where PaymentIDs.Contains(q.paymentDetailsID)
        //                            && q.chargedToCompanyID == model.Search_CompanyID
        //                            select q.paymentDetailsID;

        //        if (PaymentsQuery.Count() > 0)
        //        {
        //            InvoiceModel.InvoiceItem newItem = new InvoiceModel.InvoiceItem();
        //            newItem.NumberOfPurchases = 1;
        //            newItem.PurchaseID = purchase.purchaseID;
        //            newItem.PurchaseDateID = purchase.purchaseDateTime.ToString("yyMMdd-HHmmdd");
        //            //coupons
        //            var coupons = from c in db.tblPurchases_Services
        //                          where c.purchaseID == newItem.PurchaseID
        //                          && CouponIDs.Contains(c.purchase_ServiceID)
        //                          select c;

        //            List<CouponDetail> couponsList = new List<CouponDetail>();
        //            foreach (var c in coupons)
        //            {
        //                CouponDetail detail = GetCouponDetail(c, 0, invoiceDate, invoiceDate.AddDays(1));
        //                couponsList.Add(detail);
        //            }
        //            newItem.Coupons = couponsList;

        //            //payments
        //            MasterChartDataModel.Purchases pdm = new MasterChartDataModel.Purchases();
        //            List<tblBankCommissions> bankCommissions = new List<tblBankCommissions>();
        //            List<PurchasesModel.PurchasePaymentModel> paymentsList = pdm.GetPurchasePayments(purchase.purchaseID.ToString()).Where(x => PaymentsQuery.Contains(x.PurchasePayment_PaymentDetailsID)).ToList();
        //            foreach (var i in paymentsList)
        //            {
        //                //reducir comision a tarjetas
        //                if (i.PurchasePayment_PaymentType == "Credit Card")
        //                {
        //                    decimal bankCommission = 0;
        //                    if (bankCommissions.Count(b => b.terminalID == model.Search_TerminalID && b.initialDate <= DateTime.Parse(model.Search_Date) && b.finalDate > DateTime.Parse(model.Search_Date)) == 0)
        //                    {
        //                        bankCommissions.Add(MasterChartDataModel.Purchases.GetBankCommissionObject(model.Search_TerminalID, DateTime.Parse(model.Search_Date)));
        //                    }

        //                    bankCommission = bankCommissions.First(b => b.terminalID == model.Search_TerminalID && b.initialDate <= DateTime.Parse(model.Search_Date) && b.finalDate > DateTime.Parse(model.Search_Date)).commissionPercentage;

        //                    i.PurchasePayment_Amount = i.PurchasePayment_Amount / (bankCommission / 100 + 1);
        //                }

        //                //agregar pago a total de compra en pesos
        //                decimal totalIVA = 0;
        //                if (i.PurchasePayment_Currency != "MXN")
        //                {
        //                    totalIVA = i.PurchasePayment_Amount * i.PurchasePayment_ExchangeRate;
        //                }
        //                else
        //                {
        //                    totalIVA = i.PurchasePayment_Amount;
        //                }

        //                newItem.TotalNoIVA += totalIVA / (1 + (IVA / 100));
        //            }
        //            newItem.TotalNoIVA = decimal.Round(newItem.TotalNoIVA, 2, MidpointRounding.AwayFromZero);
        //            invoice.Subtotal += newItem.TotalNoIVA;
        //            newItem.Payments = paymentsList;

        //            Items.Add(newItem);
        //        }
        //    }

        //    invoice.Items = Items.OrderByDescending(i => i.TotalNoIVA).ToList();
        //    invoice.IVA = decimal.Round(invoice.Subtotal * IVA / 100, 2, MidpointRounding.AwayFromZero);
        //    invoice.Total = decimal.Round(invoice.Subtotal + invoice.IVA, 2, MidpointRounding.AwayFromZero);
        //    invoice.TotalInText = Utils.GeneralFunctions.Number.GetAmountInText(invoice.Total.ToString());

        //    return invoice;
        //}

        public IncomePolicyModel GetPolicy(ProductionModel.SearchProduction model)
        {
            IncomePolicyModel policy = new IncomePolicyModel();
            ePlatEntities db = new ePlatEntities();
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    policy.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                policy.PointOfSale = "All";
            }
            policy.Date = model.Search_I_FromDate + (model.Search_F_ToDate != null ? " " + model.Search_F_ToDate : "");
            DateTime policyDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime toPolicyDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : policyDate.AddDays(1));
            policy.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, policyDate, toPolicyDate);
            List<IncomePolicyModel.PolicyItem> incomes = new List<IncomePolicyModel.PolicyItem>();
            List<IncomePolicyModel.PolicyItem> refunds = new List<IncomePolicyModel.PolicyItem>();
            List<ProductionModel.TotalDetail> totalsPrice = new List<ProductionModel.TotalDetail>();
            List<ProductionModel.TotalDetail> totalsRefundPrice = new List<ProductionModel.TotalDetail>();
            foreach (var type in policy.PriceTypes)
            {
                ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                detail.PriceTypeID = type.PriceTypeID;
                detail.Coupons = new List<CouponDetail>();
                detail.Sales = GetDefaultListOfMoney();
                totalsPrice.Add(detail);
            }
            foreach (var type in policy.PriceTypes)
            {
                ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                detail.PriceTypeID = type.PriceTypeID;
                detail.Coupons = new List<CouponDetail>();
                detail.Sales = GetDefaultListOfMoney();
                totalsRefundPrice.Add(detail);
            }
            policy.IncomesTotalPerPrice = totalsPrice;
            policy.IncomesTotal = GetDefaultListOfMoney();
            policy.IncomesIVATotal = GetDefaultListOfMoney();
            policy.RefundsTotalPerPrice = totalsRefundPrice;
            policy.RefundsTotal = GetDefaultListOfMoney();
            policy.RefundsIVATotal = GetDefaultListOfMoney();
            policy.GrandTotal = GetDefaultListOfMoney();
            policy.GrandIVATotal = GetDefaultListOfMoney();

            int companyID = (from c in db.tblTerminals_Companies
                             where c.terminalID == model.Search_TerminalID
                             && c.tblCompanies.companyTypeID == 1
                             select c.companyID).FirstOrDefault();

            //obtener solo accounting accounts con actividades vendidas en el periodo
            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID;
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }
            var ActiveAccountingAccounts = (from c in db.tblCloseOuts_Purchases
                                            where c.tblCloseOuts.terminalID == model.Search_TerminalID
                                            && ((c.datePaid >= policyDate && c.datePaid < toPolicyDate) || (c.dateCanceled >= policyDate && c.dateCanceled < toPolicyDate))
                                            && (pointsOfSale.Contains(c.tblCloseOuts.pointOfSaleID) || pointsOfSaleLength == 0)
                                            select c.tblPurchases_Services.tblServices.tblServices_AccountingAccounts.FirstOrDefault().accountingAccountID).Distinct();


            int accountingAccountsLength = 0;
            int[] accountingAccounts = new int[] { };
            if (model.Search_AccountingAccountID != null)
            {
                accountingAccounts = model.Search_AccountingAccountID;
                accountingAccountsLength = model.Search_AccountingAccountID.Length;
            }
            var AccountsQuery = from a in db.tblAccountingAccounts
                                where a.companyID == companyID
                                && ActiveAccountingAccounts.Contains(a.accountingAccountID)
                                && (accountingAccounts.Contains(a.accountingAccountID) || accountingAccountsLength == 0)
                                select new
                                {
                                    a.accountingAccountID,
                                    a.account,
                                    a.accountName
                                };

            foreach (var a in AccountsQuery)
            {
                IncomePolicyModel.PolicyItem newIAccount = new IncomePolicyModel.PolicyItem();
                newIAccount.AccountingAccountID = a.accountingAccountID;
                newIAccount.Account = a.account;
                newIAccount.AccountName = a.accountName;
                newIAccount.Total = GetDefaultListOfMoney();
                incomes.Add(newIAccount);
            }
            foreach (var a in AccountsQuery)
            {
                IncomePolicyModel.PolicyItem newRAccount = new IncomePolicyModel.PolicyItem();
                newRAccount.AccountingAccountID = a.accountingAccountID;
                newRAccount.Account = a.account;
                newRAccount.AccountName = a.accountName;
                newRAccount.Total = GetDefaultListOfMoney();
                refunds.Add(newRAccount);
            }
            if (accountingAccountsLength == 0)
            {
                IncomePolicyModel.PolicyItem nullAccount = new IncomePolicyModel.PolicyItem();
                nullAccount.AccountingAccountID = null;
                nullAccount.Account = "000000000";
                nullAccount.AccountName = "Undefined";
                nullAccount.Total = GetDefaultListOfMoney();
                incomes.Add(nullAccount);

                IncomePolicyModel.PolicyItem nullRefundsAccount = new IncomePolicyModel.PolicyItem();
                nullRefundsAccount.AccountingAccountID = null;
                nullRefundsAccount.Account = "000000000";
                nullRefundsAccount.AccountName = "Undefined";
                nullRefundsAccount.Total = GetDefaultListOfMoney();
                refunds.Add(nullRefundsAccount);
            }

            //obtener corte guardado
            CloseOutModel closeOut = new CloseOutModel();

            var savedCloseOut = from s in db.tblCloseOuts
                                where s.closeOutDate >= policyDate
                                && s.closeOutDate < toPolicyDate
                                && (pointsOfSale.Contains(s.pointOfSaleID) || pointsOfSaleLength == 0)
                                && s.terminalID == model.Search_TerminalID
                                select s;

            if (savedCloseOut.Count() > 0)
            {
                foreach (var income in incomes)
                {
                    List<ProductionModel.ServiceIncomeItem> Services = new List<ProductionModel.ServiceIncomeItem>();
                    foreach (var cl in savedCloseOut)
                    {
                        System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                        closeOut = js.Deserialize<CloseOutModel>(cl.jsonModel);

                        //sales
                        DateTime closeOutDate = DateTime.Parse(closeOut.Date);
                        var CouponsQuery = from c in db.tblCloseOuts_Purchases
                                           where c.tblCloseOuts.terminalID == model.Search_TerminalID
                                           && c.datePaid == closeOutDate
                                           && (pointsOfSale.Contains(c.tblCloseOuts.pointOfSaleID) || pointsOfSaleLength == 0)
                                           && (c.tblPurchases_Services.tblServices.tblServices_AccountingAccounts.Where(x => x.accountingAccountID == income.AccountingAccountID).Count() > 0 || (income.AccountingAccountID == null && c.tblPurchases_Services.tblServices.tblServices_AccountingAccounts.Count() == 0))
                                           select c.tblPurchases_Services;

                        foreach (var coupon in CouponsQuery.OrderByDescending(x => x.total))
                        {
                            if (Services.Where(c => c.ServiceID == coupon.serviceID).Count() == 0)
                            {
                                Services.Add(GetServiceIncomeItem(coupon.serviceID, coupon.tblServices.service, policy.PriceTypes));
                            }

                            CouponDetail couponInfo = GetCouponDetail(coupon, policyDate, toPolicyDate, false);
                            //actualizar couponInfo con Total, TotalNoIVA y Status
                            foreach (CloseOutModel.CloseOutListItem item in closeOut.ListSales)
                            {
                                if (item.Coupons.Count(x => x.Purchase_ServiceID == couponInfo.PurchaseServiceID) > 0)
                                {
                                    CloseOutModel.CloseOutCouponDetails savedCoupon = item.Coupons.FirstOrDefault(x => x.Purchase_ServiceID == couponInfo.PurchaseServiceID);
                                    couponInfo.Total.Amount = savedCoupon.Total;
                                    couponInfo.Total.Currency = savedCoupon.Currency;
                                    couponInfo.TotalNoIVA.Amount = decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                                    couponInfo.TotalNoIVA.Currency = savedCoupon.Currency;
                                    couponInfo.Status = savedCoupon.Status;
                                }
                            }

                            Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);
                            policy.IncomesTotalPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);

                            //totals
                            Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.IncomesTotalPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            Services.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            income.Total.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.IncomesTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.IncomesIVATotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                        }
                    }

                    income.Services = Services;
                }

                foreach (var refund in refunds)
                {
                    //refunds
                    List<ProductionModel.ServiceIncomeItem> ServicesRefunded = new List<ProductionModel.ServiceIncomeItem>();

                    foreach (var cl in savedCloseOut)
                    {
                        System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                        closeOut = js.Deserialize<CloseOutModel>(cl.jsonModel);

                        var CouponsQuery = from c in db.tblCloseOuts_Purchases
                                           where c.tblCloseOuts.terminalID == model.Search_TerminalID
                                           && c.dateCanceled >= policyDate
                                           && c.dateCanceled < toPolicyDate
                                           && (pointsOfSale.Contains(c.tblCloseOuts.pointOfSaleID) || pointsOfSaleLength == 0)
                                           && c.tblPurchases_Services.serviceStatusID == 5
                                           && (c.tblPurchases_Services.tblServices.tblServices_AccountingAccounts.Where(x => x.accountingAccountID == refund.AccountingAccountID).Count() > 0 || (refund.AccountingAccountID == null && c.tblPurchases_Services.tblServices.tblServices_AccountingAccounts.Count() == 0))
                                           select c.tblPurchases_Services;

                        foreach (var coupon in CouponsQuery.OrderByDescending(x => x.total))
                        {
                            if (ServicesRefunded.Where(c => c.ServiceID == coupon.serviceID).Count() == 0)
                            {
                                ServicesRefunded.Add(GetServiceIncomeItem(coupon.serviceID, coupon.tblServices.service, policy.PriceTypes));
                            }

                            CouponDetail couponInfo = GetCouponDetail(coupon, policyDate, toPolicyDate);
                            //actualizar couponInfo con Total, TotalNoIVA y Status
                            foreach (CloseOutModel.CloseOutListItem item in closeOut.ListCancelations)
                            {
                                if (item.Coupons.Count(x => x.Purchase_ServiceID == couponInfo.PurchaseServiceID) > 0)
                                {
                                    CloseOutModel.CloseOutCouponDetails savedCoupon = item.Coupons.FirstOrDefault(x => x.Purchase_ServiceID == couponInfo.PurchaseServiceID);
                                    couponInfo.Total.Amount = savedCoupon.Total;
                                    couponInfo.Total.Currency = savedCoupon.Currency;
                                    couponInfo.TotalNoIVA.Amount = decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                                    couponInfo.TotalNoIVA.Currency = savedCoupon.Currency;
                                    couponInfo.Status = savedCoupon.Status;
                                }
                            }

                            ServicesRefunded.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);
                            policy.RefundsTotalPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);

                            //totals
                            ServicesRefunded.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.RefundsTotalPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            ServicesRefunded.FirstOrDefault(c => c.ServiceID == coupon.serviceID).SalesTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            refund.Total.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.RefundsTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                            policy.RefundsIVATotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += decimal.Round(couponInfo.Total.Amount / (1 + (IVA / 100)), 2, MidpointRounding.AwayFromZero);
                        }
                    }

                    refund.Services = ServicesRefunded;
                }

                policy.Incomes = incomes.Where(x => x.Services.Count() > 0).OrderByDescending(i => i.Total.FirstOrDefault().Amount).ToList();
                policy.Refunds = refunds.Where(x => x.Services.Count() > 0).OrderByDescending(i => i.Total.FirstOrDefault().Amount).ToList();
                foreach (var total in policy.GrandTotal)
                {
                    total.Amount = policy.IncomesTotal.FirstOrDefault(p => p.Currency == total.Currency).Amount + policy.RefundsTotal.FirstOrDefault(p => p.Currency == total.Currency).Amount;
                }
                foreach (var total in policy.GrandIVATotal)
                {
                    total.Amount = policy.IncomesIVATotal.FirstOrDefault(p => p.Currency == total.Currency).Amount + policy.RefundsIVATotal.FirstOrDefault(p => p.Currency == total.Currency).Amount;
                }
            }

            return policy;
        }

        public ProvidersProductionModel GetProvidersProduction(ProvidersProductionModel.SearchProviderProduction model)
        {
            ProvidersProductionModel report = new ProvidersProductionModel();
            ePlatEntities db = new ePlatEntities();
            //mostrar datos del reporte
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    report.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                report.PointOfSale = "All";
            }
            report.Dates = model.Search_I_FromDate + (model.Search_F_ToDate != null ? " - " + model.Search_F_ToDate : "");

            if (model.Search_ProviderID != null && model.Search_ProviderID.Length > 0)
            {
                var Providers = from c in db.tblProviders
                                where model.Search_ProviderID.Contains(c.providerID)
                                select new
                                {
                                    c.providerID,
                                    c.comercialName
                                };

                foreach (var prov in Providers)
                {
                    report.SelectedProviders += "<span class=\"block\">" + prov.comercialName + "</span>";
                }
            }
            else
            {
                report.SelectedProviders = "All";
            }
            DateTime fDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));
            report.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, fDate, tDate);
            report.Totals = GetDefaultListOfMoney(false);

            List<ProvidersProductionModel.TotalByProvider> providers = new List<ProvidersProductionModel.TotalByProvider>();
            List<ProvidersProductionModel.ServiceIncomeItem> activities = new List<ProvidersProductionModel.ServiceIncomeItem>();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID;
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            int providersLength = 0;
            int[] selectedProviders = new int[] { };
            if (model.Search_ProviderID != null)
            {
                selectedProviders = model.Search_ProviderID;
                providersLength = model.Search_ProviderID.Length;
            }

            var Coupons = from c in db.tblPurchases_Services
                          where (
                          (c.confirmationDateTime >= fDate
                          && c.confirmationDateTime < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.confirmationDateTime < fDate
                          && c.cancelationDateTime >= fDate
                          && c.cancelationDateTime < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (selectedProviders.Contains(c.tblServices.providerID) || providersLength == 0)
                          && c.tblPurchases.terminalID == model.Search_TerminalID
                          && c.tblPurchases.isTest != true
                          && c.tblPurchases.purchaseStatusID < 5
                          orderby c.cancelationDateTime, c.confirmationDateTime
                          select new
                          {
                              c.purchase_ServiceID,
                              c.serviceID,
                              c.tblServices.service,
                              priceTypeIDs = c.tblPurchaseServiceDetails.Select(x => x.priceTypeID).Distinct(),
                              c.tblServices.tblProviders.providerID,
                              c.tblServices.tblProviders.comercialName,
                              c.tblPurchases.pointOfSaleID
                          };


            foreach (var coupon in Coupons)
            {
                if (providers.Count(x => x.ProviderID == coupon.providerID) == 0)
                {
                    ProvidersProductionModel.TotalByProvider totalByProvider = new ProvidersProductionModel.TotalByProvider();
                    totalByProvider.ProviderID = coupon.providerID;
                    totalByProvider.Provider = coupon.comercialName;
                    List<ProductionModel.TotalDetail> totalDetails = new List<ProductionModel.TotalDetail>();
                    foreach (var type in report.PriceTypes)
                    {
                        ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                        detail.PriceTypeID = type.PriceTypeID;
                        detail.Coupons = new List<CouponDetail>();
                        detail.Sales = GetDefaultListOfMoney();
                        totalDetails.Add(detail);
                    }
                    totalByProvider.SalesPerPrice = totalDetails;
                    totalByProvider.ProviderTotal = GetDefaultListOfMoney(false);
                    providers.Add(totalByProvider);
                }
                if (activities.Count(x => x.ServiceID == coupon.serviceID) == 0)
                {
                    ProvidersProductionModel.ServiceIncomeItem item = new ProvidersProductionModel.ServiceIncomeItem();
                    item.ServiceID = coupon.serviceID;
                    item.Provider = coupon.comercialName;
                    item.Service = coupon.service;
                    item.NumberOfCoupons = 0;
                    List<ProductionModel.TotalDetail> totalDetails = new List<ProductionModel.TotalDetail>();
                    foreach (var type in report.PriceTypes)
                    {
                        ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                        detail.PriceTypeID = type.PriceTypeID;
                        detail.Coupons = new List<CouponDetail>();
                        detail.Sales = GetDefaultListOfMoney();
                        totalDetails.Add(detail);
                    }
                    item.SalesPerPrice = totalDetails;
                    item.ServiceTotal = GetDefaultListOfMoney(false);
                    activities.Add(item);
                }

                int couponPriceTypes = coupon.priceTypeIDs.Count();
                foreach (int priceTypeID in coupon.priceTypeIDs)
                {
                    CouponDetail couponInfo = new CouponDetail();


                    var couponObject = (from o in db.tblPurchases_Services
                                        where o.purchase_ServiceID == coupon.purchase_ServiceID
                                        select o).FirstOrDefault();
                    if (couponPriceTypes > 1)
                    {
                        couponInfo = GetCouponDetail(couponObject, fDate, tDate, true, priceTypeID);
                    }
                    else
                    {
                        couponInfo = GetCouponDetail(couponObject, fDate, tDate);
                    }
                    providers.FirstOrDefault(x => x.ProviderID == coupon.providerID).ProviderTotal.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    activities.FirstOrDefault(x => x.ServiceID == coupon.serviceID).ServiceTotal.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    report.Totals.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    if (couponInfo.Status.Contains("Confirmed"))
                    {
                        activities.First(x => x.ServiceID == coupon.serviceID).NumberOfCoupons += 1;
                    }


                    providers.FirstOrDefault(x => x.ProviderID == coupon.providerID).SalesPerPrice.FirstOrDefault(t => t.PriceTypeID == priceTypeID).Sales.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    activities.FirstOrDefault(x => x.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(t => t.PriceTypeID == priceTypeID).Sales.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                }
            }
            report.TotalsByProvider = providers;
            report.ActivitiesIncomes = activities;

            return report;
        }

        public ProvidersProductionModel GetProvidersProductionFromCache(ProvidersProductionModel.SearchProviderProduction model)
        {
            ProvidersProductionModel report = new ProvidersProductionModel();
            ePlatEntities db = new ePlatEntities();
            //mostrar datos del reporte
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    report.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                report.PointOfSale = "All";
            }
            report.Dates = model.Search_I_FromDate + (model.Search_F_ToDate != null ? " - " + model.Search_F_ToDate : "");

            if (model.Search_ProviderID != null && model.Search_ProviderID.Length > 0)
            {
                var Providers = from c in db.tblProviders
                                where model.Search_ProviderID.Contains(c.providerID)
                                select new
                                {
                                    c.providerID,
                                    c.comercialName
                                };

                foreach (var prov in Providers)
                {
                    report.SelectedProviders += "<span class=\"block\">" + prov.comercialName + "</span>";
                }
            }
            else
            {
                report.SelectedProviders = "All";
            }
            DateTime fDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));
            report.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, fDate, tDate);
            report.Totals = GetDefaultListOfMoney(false);

            List<ProvidersProductionModel.TotalByProvider> providers = new List<ProvidersProductionModel.TotalByProvider>();
            List<ProvidersProductionModel.ServiceIncomeItem> activities = new List<ProvidersProductionModel.ServiceIncomeItem>();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID;
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }

            int providersLength = 0;
            int[] selectedProviders = new int[] { };
            if (model.Search_ProviderID != null)
            {
                selectedProviders = model.Search_ProviderID;
                providersLength = model.Search_ProviderID.Length;
            }

            var Coupons = from c in db.tblCouponInfo
                          where (
                          (c.dateConfirmed >= fDate
                          && c.dateConfirmed < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.dateConfirmed < fDate
                          && c.dateCanceled >= fDate
                          && c.dateCanceled < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          && (pointsOfSale.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (selectedProviders.Contains(c.providerID) || providersLength == 0)
                          && c.terminalID == model.Search_TerminalID
                          orderby c.dateCanceled, c.dateConfirmed
                          select c;

            foreach (var coupon in Coupons)
            {
                if (providers.Count(x => x.ProviderID == coupon.providerID) == 0)
                {
                    ProvidersProductionModel.TotalByProvider totalByProvider = new ProvidersProductionModel.TotalByProvider();
                    totalByProvider.ProviderID = coupon.providerID;
                    totalByProvider.Provider = coupon.provider;
                    List<ProductionModel.TotalDetail> totalDetails = new List<ProductionModel.TotalDetail>();
                    foreach (var type in report.PriceTypes)
                    {
                        ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                        detail.PriceTypeID = type.PriceTypeID;
                        detail.Coupons = new List<CouponDetail>();
                        detail.Sales = GetDefaultListOfMoney();
                        totalDetails.Add(detail);
                    }
                    totalByProvider.SalesPerPrice = totalDetails;
                    totalByProvider.ProviderTotal = GetDefaultListOfMoney(false);
                    providers.Add(totalByProvider);
                }
                if (activities.Count(x => x.ServiceID == coupon.serviceID) == 0)
                {
                    ProvidersProductionModel.ServiceIncomeItem item = new ProvidersProductionModel.ServiceIncomeItem();
                    item.ServiceID = coupon.serviceID;
                    item.Provider = coupon.provider;
                    item.Service = coupon.item;
                    item.NumberOfCoupons = 0;
                    List<ProductionModel.TotalDetail> totalDetails = new List<ProductionModel.TotalDetail>();
                    foreach (var type in report.PriceTypes)
                    {
                        ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                        detail.PriceTypeID = type.PriceTypeID;
                        detail.Coupons = new List<CouponDetail>();
                        detail.Sales = GetDefaultListOfMoney();
                        totalDetails.Add(detail);
                    }
                    item.SalesPerPrice = totalDetails;
                    item.ServiceTotal = GetDefaultListOfMoney(false);
                    activities.Add(item);
                }

                int couponPriceTypes = coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct().Count();
                foreach (int priceTypeID in coupon.tblCouponInfoUnits.Select(x => x.priceTypeID).Distinct())
                {
                    CouponDetail couponInfo = new CouponDetail();

                    if (couponPriceTypes > 1)
                    {
                        couponInfo = GetCouponInfoDetail(coupon, fDate, tDate, true, priceTypeID);
                    }
                    else
                    {
                        couponInfo = GetCouponInfoDetail(coupon, fDate, tDate, true, null);
                    }
                    providers.FirstOrDefault(x => x.ProviderID == coupon.providerID).ProviderTotal.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    activities.FirstOrDefault(x => x.ServiceID == coupon.serviceID).ServiceTotal.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    report.Totals.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    if (couponInfo.Status.Contains("Confirmed"))
                    {
                        activities.First(x => x.ServiceID == coupon.serviceID).NumberOfCoupons += 1;
                    }

                    providers.FirstOrDefault(x => x.ProviderID == coupon.providerID).SalesPerPrice.FirstOrDefault(t => t.PriceTypeID == priceTypeID).Sales.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                    activities.FirstOrDefault(x => x.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(t => t.PriceTypeID == priceTypeID).Sales.FirstOrDefault(c => c.Currency == couponInfo.Total.Currency).Amount += couponInfo.Total.Amount;

                }
            }
            report.TotalsByProvider = providers;
            report.ActivitiesIncomes = activities;

            return report;
        }

        public CategoriesProductionModel GetCategoriesProduction(ProductionModel.SearchProduction model)
        {
            CategoriesProductionModel report = new CategoriesProductionModel();
            ePlatEntities db = new ePlatEntities();
            //mostrar datos del reporte
            if (model.Search_PointOfSaleID != null && model.Search_PointOfSaleID.Length > 0)
            {
                var PointsQuery = from p in db.tblPointsOfSale
                                  where model.Search_PointOfSaleID.Contains(p.pointOfSaleID)
                                  select p;

                foreach (var point in PointsQuery)
                {
                    report.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                report.PointOfSale = "All";
            }
            report.Dates = model.Search_I_FromDate + (model.Search_F_ToDate != null ? " " + model.Search_F_ToDate : "");
            if (model.Search_CategoryID != null && model.Search_CategoryID.Length > 0)
            {
                var Categories = from c in db.tblCategories
                                 where model.Search_CategoryID.Contains(c.categoryID)
                                 select new
                                 {
                                     CategoryID = c.categoryID,
                                     Category = c.category,
                                     CategoryParent = c.tblCategories2.category,
                                     Catalog = c.tblCatalogs.catalog
                                 };

                foreach (var cat in Categories)
                {
                    report.SelectedCategories += "<span class=\"block\">" + cat.Catalog + " > " + cat.CategoryParent + " > " + cat.Category + "</span>";
                }
            }
            else
            {
                report.SelectedCategories = "All";
            }
            DateTime fDate = Convert.ToDateTime(model.Search_I_FromDate);
            DateTime tDate = (model.Search_F_ToDate != null ? Convert.ToDateTime(model.Search_F_ToDate).AddDays(1) : fDate.AddDays(1));
            report.PriceTypes = GetListOfPriceTypes(model.Search_TerminalID, false, 0, fDate, tDate);
            List<CategoriesProductionModel.CategoryItem> categories = new List<CategoriesProductionModel.CategoryItem>();
            List<ProductionModel.TotalDetail> totalsPrice = new List<ProductionModel.TotalDetail>();
            foreach (var type in report.PriceTypes)
            {
                ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                detail.PriceTypeID = type.PriceTypeID;
                detail.Coupons = new List<CouponDetail>();
                detail.Sales = GetDefaultListOfMoney();
                totalsPrice.Add(detail);
            }
            report.CategoriesTotalPrice = totalsPrice;
            report.CategoriesTotal = GetDefaultListOfMoney();

            int pointsOfSaleLength = 0;
            int[] pointsOfSale = new int[] { };
            if (model.Search_PointOfSaleID != null)
            {
                pointsOfSale = model.Search_PointOfSaleID;
                pointsOfSaleLength = model.Search_PointOfSaleID.Length;
            }
            int categoriesLength = 0;
            long[] selectedCategories = new long[] { };
            if (model.Search_CategoryID != null)
            {
                selectedCategories = model.Search_CategoryID;
                categoriesLength = model.Search_CategoryID.Length;
            }

            //obtener cupones para ordenarlos por categoría
            var Coupons = from c in db.tblPurchases_Services
                          where (
                          (c.confirmationDateTime >= fDate
                          && c.confirmationDateTime < tDate
                          && c.serviceStatusID >= 3)
                          ||
                          (c.confirmationDateTime < fDate
                          && c.cancelationDateTime >= fDate
                          && c.cancelationDateTime < tDate
                          && (c.serviceStatusID == 4 || c.serviceStatusID == 5))
                          )
                          && (pointsOfSale.Contains(c.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                          && (c.tblServices.tblCategories_Services.Where(x => selectedCategories.Contains(x.categoryID)).Count() > 0 || categoriesLength == 0)
                          && c.tblPurchases.terminalID == model.Search_TerminalID
                          && c.tblPurchases.isTest != true
                          && c.tblPurchases.purchaseStatusID < 5
                          orderby c.cancelationDateTime, c.confirmationDateTime
                          select c;

            foreach (var coupon in Coupons)
            {
                CouponDetail couponInfo = GetCouponDetail(coupon, fDate, tDate);
                long couponCategoryID = 0;
                if (categoriesLength == 0)
                {
                    //todas las categorias
                    if (coupon.tblServices.tblCategories_Services.Count() > 0)
                    {
                        couponCategoryID = coupon.tblServices.tblCategories_Services.FirstOrDefault().categoryID;
                    }
                }
                else
                {
                    //categorías seleccionadas
                    couponCategoryID = coupon.tblServices.tblCategories_Services.Where(x => selectedCategories.Contains(x.categoryID)).OrderBy(y => y.category_ServiceID).FirstOrDefault().categoryID;
                }
                //si no existe la categoría en el reporte aún, crearla
                if (categories.Count(x => x.CategoryID == couponCategoryID) == 0 && couponCategoryID != 0)
                {
                    CategoriesProductionModel.CategoryItem categoryItem = new CategoriesProductionModel.CategoryItem();
                    categoryItem.CategoryID = couponCategoryID;
                    var categoryDetail = coupon.tblServices.tblCategories_Services.FirstOrDefault(x => x.categoryID == couponCategoryID).tblCategories;
                    categoryItem.Category = (categoryDetail.parentCategoryID != null ? categoryDetail.tblCategories2.category + " > " : "") + categoryDetail.category;
                    categoryItem.Services = new List<ProductionModel.ServiceIncomeItem>();
                    categoryItem.Total = GetDefaultListOfMoney();
                    categories.Add(categoryItem);
                }
                //si no existe el servicio en la categoría aún, crearlo
                if (categories.First(x => x.CategoryID == couponCategoryID).Services.Count(x => x.ServiceID == coupon.serviceID) == 0)
                {
                    categories.First(x => x.CategoryID == couponCategoryID).Services.Add(GetServiceIncomeItem(coupon.serviceID, couponInfo.Service, report.PriceTypes));
                }

                if (couponInfo.Status.Contains("Confirmed"))
                {
                    categories.First(x => x.CategoryID == couponCategoryID).Services.FirstOrDefault(x => x.ServiceID == coupon.serviceID).NumberOfCoupons += 1;
                }

                categories.First(x => x.CategoryID == couponCategoryID).Services.FirstOrDefault(x => x.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);

                report.CategoriesTotalPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Coupons.Add(couponInfo);

                //totals
                categories.First(x => x.CategoryID == couponCategoryID).Services.FirstOrDefault(x => x.ServiceID == coupon.serviceID).SalesPerPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                report.CategoriesTotalPrice.FirstOrDefault(x => x.PriceTypeID == coupon.tblPurchaseServiceDetails.FirstOrDefault().priceTypeID).Sales.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                categories.First(x => x.CategoryID == couponCategoryID).Services.FirstOrDefault(x => x.ServiceID == coupon.serviceID).SalesTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                categories.First(x => x.CategoryID == couponCategoryID).Total.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;

                report.CategoriesTotal.FirstOrDefault(s => s.Currency == coupon.tblCurrencies.currencyCode).Amount += couponInfo.Total.Amount;
            }

            foreach (var c in categories)
            {
                c.Services = c.Services.OrderByDescending(x => x.NumberOfCoupons).ThenByDescending(x => x.SalesTotal.FirstOrDefault().Amount).ToList();
            }

            report.Categories = categories.OrderByDescending(i => i.Total.FirstOrDefault().Amount).ToList(); ;

            return report;
        }

        public ProductionModel.ServiceIncomeItem GetServiceIncomeItem(long serviceID, string service, List<PriceType> priceTypes)
        {
            ProductionModel.ServiceIncomeItem currentService = new ProductionModel.ServiceIncomeItem();
            currentService.ServiceID = serviceID;
            currentService.Service = service;
            List<ProductionModel.TotalDetail> serviceDetails = new List<ProductionModel.TotalDetail>();
            foreach (var type in priceTypes)
            {
                ProductionModel.TotalDetail detail = new ProductionModel.TotalDetail();
                detail.PriceTypeID = type.PriceTypeID;
                detail.Coupons = new List<CouponDetail>();
                detail.Sales = GetDefaultListOfMoney();
                serviceDetails.Add(detail);
            }
            currentService.SalesPerPrice = serviceDetails;
            currentService.SalesTotal = GetDefaultListOfMoney();
            return currentService;
        }

        public CashStatementModel.CashStatementResults SearchCashStatement(CashStatementModel.SearchStatement model)
        {
            CashStatementModel.CashStatementResults results = new CashStatementModel.CashStatementResults();
            List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates = new List<ExchangeRatesModel.ExchangeRateForDate>();
            DateTime fromDate = DateTime.Parse(model.Search_Month);
            DateTime toDate = DateTime.Parse(fromDate.AddMonths(1).Year.ToString() + "-" + fromDate.AddMonths(1).Month.ToString() + "-01");

            results.Month = model.Search_Months.FirstOrDefault(x => x.Value == model.Search_Month.ToString()).Text;
            results.Terminal = model.Search_Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;
            var fund = (from f in db.tblFunds
                        where f.fundID == model.Search_FundID
                        select new
                        {
                            Fund = f.fundName,
                            Currency = f.tblCurrencies.currencyCode,
                            InitialAmount = f.initialAmount,
                            InitialDate = f.dateSaved
                        }).FirstOrDefault();

            results.Fund = fund.Fund;
            results.FundCurrencyCode = fund.Currency;

            //buscar el estado de cuenta 
            var SavedStatementQ = from s in db.tblFundsStatements
                                  where s.year == fromDate.Year
                                  && s.month == fromDate.Month
                                  && s.fundID == model.Search_FundID
                                  select s;

            if (SavedStatementQ.Count() > 0)
            {
                //mostrar
                results.InitialAmount = SavedStatementQ.FirstOrDefault().initialAmount;
                results.FinalAmount = SavedStatementQ.FirstOrDefault().finalAmount;
                results.TotalEgress = SavedStatementQ.FirstOrDefault().totalEgress;
                results.TotalIncome = SavedStatementQ.FirstOrDefault().totalIncome;
                System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                results.Items = js.Deserialize<List<CashStatementModel.StatementItem>>(SavedStatementQ.FirstOrDefault().jsonModel);
            }
            else
            {
                DateTime initialDate = fund.InitialDate;
                results.FinalAmount = fund.InitialAmount ?? 0;
                //revisar si hay statements anteriores creados de ese fondo
                var LastStatementQ = (from l in db.tblFundsStatements
                                      where l.fundID == model.Search_FundID
                                      orderby l.year descending, l.month descending
                                      select l).FirstOrDefault();

                if (LastStatementQ != null)
                {
                    initialDate = DateTime.Parse(LastStatementQ.year + "-" + LastStatementQ.month + "-01").AddMonths(1);
                    results.FinalAmount = LastStatementQ.finalAmount;
                }

                var EgressesQ = from e in db.tblEgresses
                                where e.dateSaved >= initialDate
                                && e.dateSaved < toDate
                                && e.fundID == model.Search_FundID
                                && e.tblEgressConcepts.cashTransaction == true
                                select e;

                var IncomesQ = from o in db.tblIncomes
                               where o.dateSaved >= initialDate
                               && o.dateSaved < toDate
                               && o.fundID == model.Search_FundID
                               select o;

                //generar a partir de la fecha señalada
                for (int i = 0; initialDate.AddMonths(i) < toDate; i++)
                {
                    results.InitialAmount = results.FinalAmount;
                    DateTime currentFromDate = DateTime.Parse(initialDate.AddMonths(i).Year + "-" + initialDate.AddMonths(i).Month + "-01");
                    DateTime currentToDate = DateTime.Parse(initialDate.AddMonths(i + 1).Year + "-" + initialDate.AddMonths(i + 1).Month + "-01");

                    if (initialDate.AddMonths(i).Year == fromDate.Year && initialDate.AddMonths(i).Month == fromDate.Month && toDate > DateTime.Today)
                    {
                        //generar estado parcial, sin guardar
                        GetCashStatementPartial(
                            EgressesQ.Where(x => x.dateSaved >= currentFromDate && x.dateSaved < currentToDate).OrderBy(o => o.dateSaved),
                            IncomesQ.Where(x => x.dateSaved >= currentFromDate && x.dateSaved < currentToDate).OrderBy(o => o.dateSaved),
                            ref results,
                            ref ExchangeRates
                            );
                    }
                    else
                    {
                        //generar estado completo y guardar
                        GetCashStatementPartial(
                            EgressesQ.Where(x => x.dateSaved >= currentFromDate && x.dateSaved < currentToDate).OrderBy(o => o.dateSaved),
                            IncomesQ.Where(x => x.dateSaved >= currentFromDate && x.dateSaved < currentToDate).OrderBy(o => o.dateSaved),
                            ref results,
                            ref ExchangeRates
                            );

                        tblFundsStatements fs = new tblFundsStatements();
                        fs.fundID = model.Search_FundID;
                        fs.year = currentFromDate.Year;
                        fs.month = currentFromDate.Month;
                        fs.initialAmount = results.InitialAmount;
                        fs.finalAmount = results.FinalAmount;
                        fs.totalEgress = results.TotalEgress;
                        fs.totalIncome = results.TotalIncome;
                        fs.jsonModel = System.Web.Helpers.Json.Encode(results.Items);
                        fs.dateSaved = DateTime.Now;
                        fs.savedByUserId = session.UserID;
                        db.tblFundsStatements.AddObject(fs);
                        db.SaveChanges();
                    }
                }
            }

            return results;
        }
        //Accounting Account
        public AccountingAccountsViewModel SearchAccounts(AccountingAccountsViewModel.searchAccountingAccounts model)
        {
            //categoryID = AccountAccoutingID
            AccountingAccountsViewModel AccountingAcc = new AccountingAccountsViewModel();

            var terminalSession = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            long terminalsFromModel = model.searchTerminals == null ? 0 : long.Parse(model.searchTerminals);
            //var CategoryList = model.searchCategory == null ? new int[] { } : model.searchCategory;             
            var ProviderID = model.searchProvider == null ? new int[] { } : model.searchProvider;
            List<string> CategoryList = new List<string>();

            var flag = false;
            if (model.searchCategory == null)
            {
                AccountingAcc.Category = "All";
                flag = true;
            }
            else if (model.searchCategory.Count() > 0 && model.searchCategory != null)
            {
                var Category = from x in db.tblAccountingAccounts
                               where model.searchCategory.Contains(x.accountingAccountID)
                               select new
                               {
                                   categoryName = x.accountName
                               };
                foreach (var x in Category)
                {
                    AccountingAcc.Category += "<span class=\"block\">" + x.categoryName + "</span>";
                    CategoryList.Add(x.categoryName);
                }
                foreach (var value in model.searchCategory)
                {
                    if (value.ToString() == "No Assigned")//Value = no assaigned text = no assaigened
                    {
                        flag = true;
                        AccountingAcc.Category += "<span class=\"block\">Not Assigned</span>";
                    }
                }
            }

            if (model.searchProvider != null && model.searchProvider.Count() > 0)
            {
                var Name = (from x in db.tblServices_AccountingAccounts
                            where ProviderID.Contains(x.tblServices.providerID)
                            select x).GroupBy(y => y.tblServices.tblProviders.comercialName);

                foreach (var x in Name)
                {
                    AccountingAcc.Provider += "<span class=\"block\">" + x.FirstOrDefault().tblServices.tblProviders.comercialName + "</span>";
                }
            }
            else
            {
                AccountingAcc.Provider = "All";
            }
            #region Company coment
            //if (companyID.Count() != 0)
            //{
            //    var Name = from x in db.tblAccountingAccounts
            //                        where companyID.Contains(x.companyID)
            //                        select x;

            //    foreach (var x in Name)
            //    {
            //        AccountingAcc.Company += "<span class=\"block\">"+ x.tblCompanies.company +"</span>";
            //    }
            //}
            //else
            //{
            //    AccountingAcc.Company = "All";
            //}
            #endregion
            if (model.searchTerminals != "0")
            {
                var Name = from x in db.tblTerminals
                           where x.terminalID == terminalsFromModel
                           select x;

                foreach (var x in Name)
                {
                    AccountingAcc.Terminals += "<span class=\"block\">" + x.terminal + "</span>";
                }
            }
            else
            {
                AccountingAcc.Terminals = "All";
            }
            //var data = String.Empty;

            var _query = (from Service in db.tblServices
                          join ServiceCategory in db.tblCategories_Services on Service.serviceID equals ServiceCategory.serviceID into CategoryGroup
                          from ServiceCategory in CategoryGroup.DefaultIfEmpty()
                          join ServiceProvider in db.tblProviders on Service.providerID equals ServiceProvider.providerID into ProviderGroup
                          from ServiceProvider in ProviderGroup.DefaultIfEmpty()
                          join ServiceTerminal in db.tblTerminals on Service.originalTerminalID equals ServiceTerminal.terminalID into TerminalGroup
                          from ServiceTerminal in TerminalGroup.DefaultIfEmpty()
                          join ServiceAccount in db.tblServices_AccountingAccounts on Service.serviceID equals ServiceAccount.serviceID into ServiceAccountGroup
                          from ServiceAccount in ServiceAccountGroup.DefaultIfEmpty()
                          join Account in db.tblAccountingAccounts on ServiceAccount.accountingAccountID equals Account.accountingAccountID into AccountGroup
                          from Account in AccountGroup.DefaultIfEmpty()
                          where
                               (terminalsFromModel == 0 && terminalSession.Contains(ServiceTerminal.terminalID) || (terminalsFromModel != 0 && terminalsFromModel == ServiceTerminal.terminalID))
                            && (CategoryList.Contains(Account.accountName) || CategoryList.Count() == 0)
                            && (ProviderID.Count() == 0 || ProviderID.Contains(Service.providerID))
                            && Service.deleted == false
                          select new AccountingAccountsViewModel.ServiceAccountQuery()
                          {
                              //AccountID = ServiceAccount.tblAccountingAccounts.accountingAccountID == null ? 0 : ServiceAccount.tblAccountingAccounts.accountingAccountID,
                              AccountName = Account.accountName == null ? "" : Account.accountName,
                              ServiceID = Service.serviceID,
                              ProviderName = ServiceProvider.comercialName,  //Service.tblProviders.comercialName,
                              TerminalName = ServiceTerminal.terminal, //Service.tblTerminals.terminal,
                              ServiceName = Service.service,
                              CategoryName = ServiceCategory.tblCategories.category
                          }).Distinct().ToList();

            AccountingAcc.Summary = new List<AccountingAccountsViewModel.AccountingAccountsResult>();

            foreach (var Accounts in _query)
            {
                AccountingAccountsViewModel.AccountingAccountsResult AccResult = new AccountingAccountsViewModel.AccountingAccountsResult();
                AccResult.AccountAccountsServiceID = Accounts.ServiceID.ToString();
                AccResult.AccountAccountsProvider = Accounts.ProviderName;
                AccResult.AccountAccountsTerminals = Accounts.TerminalName;
                AccResult.AccountAccountsServiceName = Accounts.ServiceName;
                AccResult.AccountAccountsName = Accounts.AccountName;
                AccResult.AccountAccountsCategories = Accounts.CategoryName;

                AccountingAcc.Summary.Add(AccResult);
            }
            return AccountingAcc;
        }

        public List<PreArrivalReportModel> SearchPreArrivalManifestReport(SearchPreArrivalWeeklyReportModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();
            List<ManifestReportModel> q = new List<ManifestReportModel>();

            var bookingStatus = db.tblBookingStatus.ToList();
            var leadSources = model.Search_DrpLeadSources;
            var terminals = model.Search_Terminals != null && model.Search_Terminals.Count() > 0 ? model.Search_Terminals.Select(m => (long)m).ToArray() : session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadStatusExcluded = new int?[] { 10, 35 };//duplicate, canceled, no show
            var bookingStatusExcluded = new int?[] { 5 };//not interested
            var aiDate = model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var afDate = model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var tiDate = model.Search_I_RealTourDate != null && model.Search_I_RealTourDate != "" ? DateTime.Parse(model.Search_I_RealTourDate) : (DateTime?)null;
            var tfDate = model.Search_F_RealTourDate != null && model.Search_F_RealTourDate != "" ? DateTime.Parse(model.Search_F_RealTourDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var bookingStatusIncluded = new List<int?>() { 1, 16, 32 };

            if (model.Search_Version == 2)
            {
                #region "new query"

                #region "sql build"
                var sqlStr = "SELECT l.leadGroupID,l.frontOfficeResortID,r.frontOfficeReservationID,r.reservationID,l.assignedToUserID,l.firstName,l.lastName,l.leadSourceID,l.leadStatusID,p.place,"
                    + "r.hotelConfirmationNumber,r.arrivalDate,r.frontOfficeAgencyName,r.totalNights,l.bookingStatusID,l.secondaryBookingStatusID,a.bookingStatusID AS 'arrivalBookingStatus',r.reservationStatusID,r.placeID"
                    + " FROM tblLeads AS l"
                    + " JOIN tblReservations AS r ON l.leadID = r.leadID"
                    + " LEFT OUTER JOIN tblArrivals AS a ON l.frontOfficeResortID = a.frontOfficeResortID AND r.frontOfficeReservationID = a.frontOfficeReservationID"
                    + " LEFT OUTER JOIN tblSPIManifest as m ON a.arrivalID = m.arrivalID"
                    //+ " LEFT OUTER JOIN tblInteractions as i ON l.leadID = i.leadID"
                    //+ " LEFT OUTER JOIN aspnet_Roles as role ON i."
                    + " INNER JOIN tblPlaces as p ON r.placeID = p.placeID"
                    + " WHERE l.terminalID IN(" + string.Join(",", terminals) + ")"
                    + " AND r.placeID IN(" + string.Join(",", resorts) + ")"
                    + " AND l.isTest <> 1"
                    + " AND l.bookingStatusID = 16"
                    + " AND l.leadStatusID NOT IN(" + string.Join(",", leadStatusExcluded) + ")"
                    + " AND l.leadSourceID IN(" + string.Join(",", sources) + ")";
                if (aiDate != null)
                {
                    sqlStr += " AND r.arrivalDate BETWEEN '" + aiDate.Value.ToString("yyyy-MM-dd") + "' AND '" + afDate.Value.ToString("yyyy-MM-dd HH:mm:ss") + "'";
                }
                if (tiDate != null)
                {
                    sqlStr += " AND m.tourDate BETWEEN '" + tiDate.Value.ToString("yyyy-MM-dd") + "' AND '" + tfDate.Value.ToString("yyyy-MM-dd HH:mm:ss") + "'";
                }
                #endregion

                #region "sql execution"
                EntityConnection connection = db.Connection as EntityConnection;
                string cs = "";
                if (connection != null)
                {
                    cs = connection.StoreConnection.ConnectionString;
                }

                if (cs != "")
                {
                    using (SqlConnection conn = new SqlConnection(cs))
                    {
                        try
                        {
                            conn.Open();
                            DataTable dataTable = new DataTable();
                            SqlCommand cmd = new SqlCommand(sqlStr, conn);
                            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                            adapter.Fill(dataTable);

                            foreach (DataRow row in dataTable.Rows)
                            {
                                q.Add(new ManifestReportModel()
                                {
                                    leadGroupID = row["leadGroupID"] != DBNull.Value ? (Guid?)row["leadGroupID"] : (Guid?)null,
                                    frontOfficeResortID = row["frontOfficeResortID"] != DBNull.Value ? (int)row["frontOfficeResortID"] : 0,
                                    frontOfficeReservationID = row["frontOfficeReservationID"] != DBNull.Value ? (long)row["frontOfficeReservationID"] : 0,
                                    reservationID = row["reservationID"] != DBNull.Value ? (Guid)row["reservationID"] : Guid.Empty,
                                    assignedToUserID = row["assignedToUserID"] != DBNull.Value ? (Guid)row["assignedToUserID"] : Guid.Empty,
                                    firstName = row["firstName"] != DBNull.Value ? row["firstName"].ToString() : "",
                                    lastName = row["lastName"] != DBNull.Value ? row["lastName"].ToString() : "",
                                    leadSourceID = row["leadSourceID"] != DBNull.Value ? (long?)row["leadSourceID"] : (long?)null,
                                    leadStatusID = row["leadStatusID"] != DBNull.Value ? (int)row["leadStatusID"] : 0,
                                    place = row["place"] != DBNull.Value ? row["place"].ToString() : "",
                                    hotelConfirmationNumber = row["hotelConfirmationNumber"] != DBNull.Value ? row["hotelConfirmationNumber"].ToString() : "",
                                    arrivalDate = row["arrivalDate"] != DBNull.Value ? (DateTime?)row["arrivalDate"] : (DateTime?)null,
                                    frontOfficeAgencyName = row["frontOfficeAgencyName"] != DBNull.Value ? row["frontOfficeAgencyName"].ToString() : "",
                                    totalNights = row["totalNights"] != DBNull.Value ? (int?)row["totalNights"] : (int?)null,
                                    bookingStatusID = row["bookingStatusID"] != DBNull.Value ? (int)row["bookingStatusID"] : 0,
                                    secondaryBookingStatusID = row["secondaryBookingStatusID"] != DBNull.Value ? (int?)row["secondaryBookingStatusID"] : (int?)null,
                                    arrivalBookingStatusID = row["arrivalBookingStatus"] != DBNull.Value ? (int?)row["arrivalBookingStatus"] : (int?)null,
                                    reservationStatusID = row["reservationStatusID"] != DBNull.Value ? row["reservationStatusID"].ToString() : "",
                                    placeID = row["placeID"] != DBNull.Value ? (long?)row["placeID"] : (long?)null
                                });
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
                #endregion

                var group1 = q.Where(m => m.leadGroupID != null).GroupBy(m => m.leadGroupID);
                var group2 = q.Where(m => m.leadGroupID == null).GroupBy(m => m.hotelConfirmationNumber);

                var c1 = group1.Count();
                var c2 = group2.Count();

                foreach (var x in group1)
                {
                    var reservations = x.Select(m => m.reservationID);
                    var _item = db.tblReservations.Where(m => reservations.Contains(m.reservationID)).OrderByDescending(m => m.tblOptionsSold.Count(z => z.deleted != true)).FirstOrDefault();
                    var item = x.FirstOrDefault(m => m.reservationID == _item.reservationID);
                    item.options = _item.tblOptionsSold.ToList();
                    //item.options = db.tblOptionsSold.Where(m => m.reservationID == item.reservationID && m.deleted != true).ToList();

                    if (item.options.Count(m => m.deleted != true) > 0)
                    {
                        var frontOfficeResortID = item.frontOfficeResortID;
                        var frontOfficeReservationID = item.frontOfficeReservationID;
                        var arrivals = (from a in db.tblArrivals
                                        where a.frontOfficeResortID == frontOfficeResortID
                                        && a.frontOfficeReservationID == frontOfficeReservationID
                                        select (Guid?)a.arrivalID).ToList();

                        var tours = from spi in db.tblSPIManifest
                                    where arrivals.Contains(spi.arrivalID)
                                    select new TourInfo()
                                    {
                                        ResortID = spi.frontOfficeResortID,
                                        ReservationID = spi.frontOfficeReservationID,
                                        TourStatus = spi.tourStatus,
                                        TourDate = spi.tourDate,
                                        Volume = spi.volume,
                                        ContractStatus = spi.contractStatus,
                                        Source = spi.source,
                                        CustomerID = spi.customerID,
                                        ArrivalID = spi.arrivalID
                                    };

                        var secondaryTours = tours == null || tours.Count() == 0 ? db.tblSPIManifest.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, Source = m.source, CustomerID = m.customerID, ArrivalID = m.arrivalID }).ToList() : null;

                        #region "options info"
                        var flightInfo = "";
                        var categories = new List<string>();
                        var options = new List<SelectListItem>();
                        var optionInfo = "";
                        decimal total = 0;

                        foreach (var opt in item.options)
                        {
                            if (opt.deleted != true)
                            {
                                categories.Add(opt.tblOptionTypes.optionType);
                                options.Add(new SelectListItem() { Value = opt.optionID.ToString(), Text = opt.tblOptions.optionName });
                                total += (opt.totalPaid != null ? decimal.Parse(opt.totalPaid) : 0);
                            }
                        }

                        var flights = db.tblFlights.Where(m => m.reservationID == item.reservationID);
                        foreach (var a in flights.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }

                        foreach (var option in options.GroupBy(m => m.Value))
                        {
                            optionInfo += (optionInfo == "" ? "" : "; ") + option.Count().ToString() + " " + option.FirstOrDefault().Text;
                        }
                        #endregion


                        var _tour = new TourInfo();

                        if (tours.Count() > 1)
                        {
                            if (tours.Count(m => m.Volume > 0) > 0)
                            {
                                _tour = tours.Where(m => m.Volume > 0).OrderByDescending(m => m.ContractStatus).FirstOrDefault();
                            }
                            else
                            {
                                _tour = tours.OrderByDescending(m => m.TourDate).FirstOrDefault();
                            }
                        }
                        else if (tours.Count() == 1)
                        {
                            _tour = tours.FirstOrDefault();
                        }

                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = item.reservationID.ToString(),
                            LeadSourceID = item.leadSourceID != null ? item.leadSourceID.ToString() : "0",
                            LeadSource = item.leadSourceID != null ? leadSources.FirstOrDefault(m => long.Parse(m.Value) == item.leadSourceID).Text : "Not Defined",
                            FirstName = item.firstName,
                            LastName = item.lastName,
                            Resort = item.place,
                            ConfirmationNumber = item.hotelConfirmationNumber,
                            BookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.bookingStatusID).bookingStatus,
                            SecondaryBookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.secondaryBookingStatusID).bookingStatus,
                            ArrivalDate = item.arrivalDate != null ? item.arrivalDate.Value.ToString("yyyy-MM-dd") : "",
                            FrontAgencyName = item.frontOfficeAgencyName ?? "",
                            OptionTypes = string.Join(", ", categories.Distinct()),
                            Options = optionInfo,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            NumberNights = item.totalNights != null ? item.totalNights.ToString() : "",
                            FlightInfo = flightInfo,
                            AssignedToUser = "",
                            Hooked = item.arrivalBookingStatusID == 7 ? "Yes" : "No",
                            IsBooked = item.arrivalBookingStatusID == 7,
                            IsLinked = tours != null && tours.Count() > 0,
                            Source = _tour.ResortID != null ? _tour.Source : "",
                            TourStatus = _tour.ResortID != null ? _tour.TourStatus != null && _tour.TourStatus != "" ? _tour.Volume != null && _tour.Volume > 0 && ((_tour.ContractStatus.Contains("LQD") || _tour.ContractStatus.Contains("Procesable") || _tour.ContractStatus.Contains("Full")) || _tour.ContractStatus.Contains("Cancel")) ? "Full Tour(Q)" : _tour.TourStatus : "" : "",
                            TourDate = _tour.ResortID != null ? _tour.TourDate != null ? _tour.TourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            SalesVolume = _tour.ResortID != null ? _tour.ContractStatus != null && _tour.ContractStatus.IndexOf("ancel") == -1 ? _tour.Volume != null ? _tour.Volume.ToString() : "0.00" : "0.00" : "0.00",
                            TourFound = tours != null && tours.Count() > 0 ? true : secondaryTours != null && secondaryTours.Count(m => m.ArrivalID == null) > 0 ? true : false,
                            Concierge = "",
                            ConciergeComments = ""
                        });
                    }
                }

                foreach (var x in group2)
                {
                    var reservations = x.Select(m => m.reservationID);
                    var _item = db.tblReservations.Where(m => reservations.Contains(m.reservationID)).OrderByDescending(m => m.tblOptionsSold.Count(z => z.deleted != true)).FirstOrDefault();
                    var item = x.FirstOrDefault(m => m.reservationID == _item.reservationID);
                    item.options = _item.tblOptionsSold.ToList();



                    if (item.options.Count(m => m.deleted != true) > 0)
                    {
                        var frontOfficeResortID = item.frontOfficeResortID;
                        var frontOfficeReservationID = item.frontOfficeReservationID;

                        var arrivals = (from a in db.tblArrivals
                                        where a.frontOfficeResortID == frontOfficeResortID
                                        && a.frontOfficeReservationID == frontOfficeReservationID
                                        select (Guid?)a.arrivalID).ToList();

                        var tours = from spi in db.tblSPIManifest
                                    where arrivals.Contains(spi.arrivalID)
                                    select new TourInfo()
                                    {
                                        ResortID = spi.frontOfficeResortID,
                                        ReservationID = spi.frontOfficeReservationID,
                                        TourStatus = spi.tourStatus,
                                        TourDate = spi.tourDate,
                                        Volume = spi.volume,
                                        ContractStatus = spi.contractStatus,
                                        Source = spi.source,
                                        CustomerID = spi.customerID,
                                        ArrivalID = spi.arrivalID
                                    };

                        var secondaryTours = tours == null || tours.Count() == 0 ? db.tblSPIManifest.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, Source = m.source, CustomerID = m.customerID, ArrivalID = m.arrivalID }).ToList() : null;

                        var interactions = (from i in db.tblInteractions
                                            join u in db.tblUsers_SysWorkGroups on i.interactedWithUserID equals u.userID
                                            join r in db.aspnet_Roles on u.roleID equals r.RoleId
                                            join up in db.tblUserProfiles on i.interactedWithUserID equals up.userID
                                            where i.leadID == _item.leadID
                                            && r.RoleName.IndexOf("Concierge") != -1
                                            select new
                                            {
                                                i.interactionComments,
                                                user = up.firstName + " " + up.lastName,
                                                i.dateSaved
                                            }).ToList();

                        #region "options info"
                        var flightInfo = "";
                        var interactionInfo = "";
                        var categories = new List<string>();
                        var options = new List<SelectListItem>();
                        var optionInfo = "";
                        decimal total = 0;

                        foreach (var opt in item.options)
                        {
                            if (opt.deleted != true)
                            {
                                categories.Add(opt.tblOptionTypes.optionType);
                                options.Add(new SelectListItem() { Value = opt.optionID.ToString(), Text = opt.tblOptions.optionName });
                                total += (opt.totalPaid != null ? decimal.Parse(opt.totalPaid) : 0);
                            }
                        }

                        var flights = db.tblFlights.Where(m => m.reservationID == item.reservationID);
                        foreach (var a in flights.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }


                        foreach (var option in options.GroupBy(m => m.Value))
                        {
                            optionInfo += (optionInfo == "" ? "" : "; ") + option.Count().ToString() + " " + option.FirstOrDefault().Text;
                        }

                        foreach (var interaction in interactions.OrderByDescending(m => m.dateSaved))
                        {
                            interactionInfo += (interactionInfo == "" ? "" : "<br /> ")
                                + interaction.user + " (" + interaction.dateSaved.ToString("yyyy-MM-dd hh:mm tt") + "): " + interaction.interactionComments;
                        }
                        #endregion


                        var _tour = new TourInfo();

                        if (tours.Count() > 1)
                        {
                            if (tours.Count(m => m.Volume > 0) > 0)
                            {
                                _tour = tours.Where(m => m.Volume > 0).OrderByDescending(m => m.ContractStatus).FirstOrDefault();
                            }
                            else
                            {
                                _tour = tours.OrderByDescending(m => m.TourDate).FirstOrDefault();
                            }
                        }
                        else if (tours.Count() == 1)
                        {
                            _tour = tours.FirstOrDefault();
                        }

                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = item.reservationID.ToString(),
                            LeadSourceID = item.leadSourceID != null ? item.leadSourceID.ToString() : "0",
                            LeadSource = item.leadSourceID != null ? leadSources.FirstOrDefault(m => long.Parse(m.Value) == item.leadSourceID).Text : "Not Defined",
                            FirstName = item.firstName,
                            LastName = item.lastName,
                            Resort = item.place,
                            ConfirmationNumber = item.hotelConfirmationNumber,
                            BookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.bookingStatusID).bookingStatus,
                            SecondaryBookingStatus = item.secondaryBookingStatusID != null ? bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.secondaryBookingStatusID).bookingStatus : "",
                            ArrivalDate = item.arrivalDate != null ? item.arrivalDate.Value.ToString("yyyy-MM-dd") : "",
                            FrontAgencyName = item.frontOfficeAgencyName ?? "",
                            OptionTypes = string.Join(", ", categories.Distinct()),
                            Options = optionInfo,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            NumberNights = item.totalNights != null ? item.totalNights.ToString() : "",
                            FlightInfo = flightInfo,
                            AssignedToUser = "",
                            Hooked = item.arrivalBookingStatusID == 7 ? "Yes" : "No",
                            IsBooked = item.arrivalBookingStatusID == 7,
                            IsLinked = tours != null && tours.Count() > 0,
                            Source = _tour != null ? _tour.Source : "",
                            TourStatus = _tour.ResortID != null ? _tour.TourStatus != null && _tour.TourStatus != "" ? _tour.Volume != null && _tour.Volume > 0 && ((_tour.ContractStatus.Contains("LQD") || _tour.ContractStatus.Contains("Procesable") || _tour.ContractStatus.Contains("Full")) || _tour.ContractStatus.Contains("Cancel")) ? "Full Tour(Q)" : _tour.TourStatus : "" : "",
                            TourDate = _tour.ResortID != null ? _tour.TourDate != null ? _tour.TourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            SalesVolume = _tour.ResortID != null ? _tour.ContractStatus != null && _tour.ContractStatus.IndexOf("ancel") == -1 ? _tour.Volume != null ? _tour.Volume.ToString() : "0.00" : "0.00" : "0.00",
                            TourFound = tours != null && tours.Count() > 0 ? true : secondaryTours != null && secondaryTours.Count(m => m.ArrivalID == null) > 0 ? true : false,
                            Concierge = "",
                            ConciergeComments = interactionInfo
                        });
                    }
                }
                #endregion
            }
            else
            {
                var _query = (from lead in db.tblLeads
                              join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                              join option in db.tblOptionsSold on rsv.reservationID equals option.reservationID into rsv_option
                              from option in rsv_option.DefaultIfEmpty()
                              join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                              from pst in rsv_pst.DefaultIfEmpty()
                              where terminals.Contains(lead.terminalID)
                              && lead.isTest != true
                                && !leadStatusExcluded.Contains(lead.leadStatusID)
                                && lead.bookingStatusID == 16
                              && (sources.Contains(lead.leadSourceID) || sources.Count() == 0)
                              && (aiDate == null || (aiDate <= rsv.arrivalDate && rsv.arrivalDate <= afDate))
                              && (tiDate == null || (tiDate <= pst.realTourDate && pst.realTourDate <= tfDate))
                              && resorts.Contains(rsv.placeID)
                              select rsv.reservationID).ToList().Distinct();

                var query = (from lead in db.tblLeads
                             join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                             join option in db.tblOptionsSold on rsv.reservationID equals option.reservationID into rsv_option
                             from option in rsv_option.DefaultIfEmpty()
                             join arr in db.tblArrivals on new { resort = rsv.tblLeads.frontOfficeResortID, reservation = rsv.frontOfficeReservationID } equals new { resort = (int?)arr.frontOfficeResortID, reservation = (long?)arr.frontOfficeReservationID } into rsv_arr
                             from arr in rsv_arr.DefaultIfEmpty()
                             where _query.Contains(rsv.reservationID)
                             select new
                             {
                                 lead.leadGroupID,
                                 rsv.reservationID,
                                 lead.assignedToUserID,
                                 lead.firstName,
                                 lead.lastName,
                                 lead.leadSourceID,
                                 lead.tblLeadSources.leadSource,
                                 rsv.tblPlaces.place,
                                 rsv.hotelConfirmationNumber,
                                 rsv.arrivalDate,
                                 rsv.frontOfficeAgencyName,
                                 rsv.totalNights,
                                 lead.bookingStatusID,
                                 lead.secondaryBookingStatusID,
                                 lead.tblBookingStatus.bookingStatus,
                                 secondaryBookingStatus = lead.tblBookingStatus1.bookingStatus,
                                 rsv.reservationStatusID,
                                 option = rsv.tblOptionsSold,
                                 flight = rsv.tblFlights,
                                 pst = rsv.tblPresentations,
                                 profile = arr.tblOPCS,
                                 tourID = rsv.spiTourID,
                                 lead.frontOfficeResortID,
                                 rsv.frontOfficeReservationID,
                                 arrivalID = (Guid?)arr.arrivalID
                             }).ToList();

                var qq = query.GroupBy(m => m.hotelConfirmationNumber);
                var tourIds = query.Select(x => x.tourID).ToList();
                var tours = db.tblSPIManifest.Where(m => tourIds.Contains(m.tourID)).ToList();

                foreach (var x in qq)
                {
                    var o = x.Where(m => m.option.Count(z => z.deleted != true) > 0);
                    var i = o.Count() > 0 ? o.FirstOrDefault() : null;

                    var assignedToUser = "";
                    var flightInfo = "";
                    var categories = "";
                    var options = "";
                    decimal total = 0;

                    if (i != null)
                    {
                        foreach (var a in i.option)
                        {
                            if (a.deleted != true)
                            {
                                var optionType = a.tblOptionTypes.optionType;
                                var option = a.tblOptions.optionName;
                                categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                                options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + a.tblOptions.optionName : "";
                                total += (a.totalPaid != null ? decimal.Parse(a.totalPaid) : 0);
                            }
                        }
                        foreach (var a in i.flight.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }
                        if (model.Search_DrpUsers.Count(m => m.Value == i.assignedToUserID.ToString()) > 0)
                        {
                            assignedToUser = model.Search_DrpUsers.FirstOrDefault(m => m.Value == i.assignedToUserID.ToString()).Text.Split('-')[0];
                        }
                        else
                        {
                            var u = db.tblUserProfiles.Single(m => m.userID == i.assignedToUserID);
                            assignedToUser = u.firstName + " " + u.lastName;
                        }

                        var spiTour = db.tblSPIManifest.FirstOrDefault(m => m.tourID == i.tourID);
                        var pst = i.pst.Count() > 0 ? i.pst.FirstOrDefault() : null;
                        var volume = spiTour != null && spiTour.contractStatus != null && spiTour.contractStatus.IndexOf("lowout") == -1 ? spiTour.volume : (decimal?)null;

                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = i.reservationID.ToString(),
                            LeadSourceID = i.leadSourceID != null ? i.leadSourceID.ToString() : "0",
                            LeadSource = i.leadSourceID != null ? i.leadSource : "Not Defined",
                            FirstName = i.firstName,
                            LastName = i.lastName,
                            Resort = i.place,
                            ConfirmationNumber = i.hotelConfirmationNumber,
                            BookingStatus = i.bookingStatus,
                            SecondaryBookingStatus = i.secondaryBookingStatus,
                            ReservationStatus = i.reservationStatusID != null ? i.reservationStatusID.ToString() : "",
                            ArrivalDate = i.arrivalDate != null ? i.arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            FrontAgencyName = i.frontOfficeAgencyName ?? "",
                            OptionTypes = categories,
                            Options = options,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            Source = spiTour != null && spiTour.source != null ? spiTour.source : "",
                            NumberNights = i.totalNights != null ? i.totalNights.ToString() : "",
                            FlightInfo = flightInfo.Replace(",", "."),
                            AssignedToUser = assignedToUser,
                            Hooked = pst != null ? pst.finalBookingStatusID != null ? pst.finalBookingStatusID == 7 ? "Yes" : "No" : "No" : "No",
                            IsBooked = pst != null ? pst.finalBookingStatusID != null ? pst.finalBookingStatusID == 7 ? true : false : false : false,
                            IsExternal = true,
                            SalesVolume = volume != null ? volume.ToString() : "0.00",
                            TourStatus = volume != null && (spiTour.contractStatus.IndexOf("LQD") != -1 || spiTour.contractStatus.IndexOf("rocesable") != -1 || spiTour.contractStatus.IndexOf("Full") != -1 || spiTour.contractStatus.IndexOf("ancel") != -1) ? "Qualified Tour" : pst != null ? pst.finalTourStatusID != null ? pst.tblTourStatus1.tourStatus : "" : "",
                            TourDate = pst != null ? pst.realTourDate != null ? pst.realTourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            Concierge = i.profile != null ? i.profile.firstName + " " + i.profile.lastName : "",
                            ConciergeComments = pst != null ? pst.hostessComments : "",
                            PresentationModificationDate = pst != null ? pst.dateLastModification == null ? pst.dateSaved.ToString("yyyy-MM-dd hh:mm tt") : pst.dateLastModification.Value.ToString("yyyy-MM-dd hh:mm tt") : ""
                        });
                    }
                }
            }
            return list;
        }

        public List<PreArrivalReportModel> _SearchPreArrivalManifestReport(SearchPreArrivalWeeklyReportModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();
            List<ManifestReportModel> q = new List<ManifestReportModel>();

            var bookingStatus = db.tblBookingStatus.ToList();
            var leadSources = model.Search_DrpLeadSources;
            var terminals = model.Search_Terminals != null && model.Search_Terminals.Count() > 0 ? model.Search_Terminals.Select(m => (long)m).ToArray() : session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var leadStatusExcluded = new int?[] { 10, 35 };//duplicate, canceled, no show
            var bookingStatusExcluded = new int?[] { 5 };//not interested
            var aiDate = model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var afDate = model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var tiDate = model.Search_I_RealTourDate != null && model.Search_I_RealTourDate != "" ? DateTime.Parse(model.Search_I_RealTourDate) : (DateTime?)null;
            var tfDate = model.Search_F_RealTourDate != null && model.Search_F_RealTourDate != "" ? DateTime.Parse(model.Search_F_RealTourDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var bookingStatusIncluded = new List<int?>() { 1, 16, 32 };

            if (model.Search_Version == 2)
            {
                #region "new query"

                #region "sql build"
                var sqlStr = "SELECT l.leadGroupID,l.frontOfficeResortID,r.frontOfficeReservationID,r.reservationID,l.assignedToUserID,l.firstName,l.lastName,l.leadSourceID,l.leadStatusID,p.place,"
                    + "r.hotelConfirmationNumber,r.arrivalDate,r.frontOfficeAgencyName,r.totalNights,l.bookingStatusID,l.secondaryBookingStatusID,a.bookingStatusID AS 'arrivalBookingStatus',r.reservationStatusID,r.placeID"
                    + " FROM tblLeads AS l"
                    + " JOIN tblReservations AS r ON l.leadID = r.leadID"
                    + " LEFT OUTER JOIN tblArrivals AS a ON l.frontOfficeResortID = a.frontOfficeResortID AND r.frontOfficeReservationID = a.frontOfficeReservationID"
                    + " LEFT OUTER JOIN tblSPIManifest as m ON a.arrivalID = m.arrivalID"
                    //+ " LEFT OUTER JOIN tblInteractions as i ON l.leadID = i.leadID"
                    //+ " LEFT OUTER JOIN aspnet_Roles as role ON i."
                    + " INNER JOIN tblPlaces as p ON r.placeID = p.placeID"
                    + " WHERE l.terminalID IN(" + string.Join(",", terminals) + ")"
                    + " AND r.placeID IN(" + string.Join(",", resorts) + ")"
                    + " AND l.isTest <> 1"
                    + " AND l.bookingStatusID = 16"
                    + " AND l.leadStatusID NOT IN(" + string.Join(",", leadStatusExcluded) + ")"
                    + " AND l.leadSourceID IN(" + string.Join(",", sources) + ")";
                if (aiDate != null)
                {
                    sqlStr += " AND r.arrivalDate BETWEEN '" + aiDate.Value.ToString("yyyy-MM-dd") + "' AND '" + afDate.Value.ToString("yyyy-MM-dd HH:mm:ss") + "'";
                }
                if (tiDate != null)
                {
                    sqlStr += " AND m.tourDate BETWEEN '" + tiDate.Value.ToString("yyyy-MM-dd") + "' AND '" + tfDate.Value.ToString("yyyy-MM-dd HH:mm:ss") + "'";
                }
                #endregion

                #region "sql execution"
                EntityConnection connection = db.Connection as EntityConnection;
                string cs = "";
                if (connection != null)
                {
                    cs = connection.StoreConnection.ConnectionString;
                }

                if (cs != "")
                {
                    using (SqlConnection conn = new SqlConnection(cs))
                    {
                        try
                        {
                            conn.Open();
                            DataTable dataTable = new DataTable();
                            SqlCommand cmd = new SqlCommand(sqlStr, conn);
                            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                            adapter.Fill(dataTable);

                            foreach (DataRow row in dataTable.Rows)
                            {
                                q.Add(new ManifestReportModel()
                                {
                                    leadGroupID = row["leadGroupID"] != DBNull.Value ? (Guid?)row["leadGroupID"] : (Guid?)null,
                                    frontOfficeResortID = row["frontOfficeResortID"] != DBNull.Value ? (int)row["frontOfficeResortID"] : 0,
                                    frontOfficeReservationID = row["frontOfficeReservationID"] != DBNull.Value ? (long)row["frontOfficeReservationID"] : 0,
                                    reservationID = row["reservationID"] != DBNull.Value ? (Guid)row["reservationID"] : Guid.Empty,
                                    assignedToUserID = row["assignedToUserID"] != DBNull.Value ? (Guid)row["assignedToUserID"] : Guid.Empty,
                                    firstName = row["firstName"] != DBNull.Value ? row["firstName"].ToString() : "",
                                    lastName = row["lastName"] != DBNull.Value ? row["lastName"].ToString() : "",
                                    leadSourceID = row["leadSourceID"] != DBNull.Value ? (long?)row["leadSourceID"] : (long?)null,
                                    leadStatusID = row["leadStatusID"] != DBNull.Value ? (int)row["leadStatusID"] : 0,
                                    place = row["place"] != DBNull.Value ? row["place"].ToString() : "",
                                    hotelConfirmationNumber = row["hotelConfirmationNumber"] != DBNull.Value ? row["hotelConfirmationNumber"].ToString() : "",
                                    arrivalDate = row["arrivalDate"] != DBNull.Value ? (DateTime?)row["arrivalDate"] : (DateTime?)null,
                                    frontOfficeAgencyName = row["frontOfficeAgencyName"] != DBNull.Value ? row["frontOfficeAgencyName"].ToString() : "",
                                    totalNights = row["totalNights"] != DBNull.Value ? (int?)row["totalNights"] : (int?)null,
                                    bookingStatusID = row["bookingStatusID"] != DBNull.Value ? (int)row["bookingStatusID"] : 0,
                                    secondaryBookingStatusID = row["secondaryBookingStatusID"] != DBNull.Value ? (int?)row["secondaryBookingStatusID"] : (int?)null,
                                    arrivalBookingStatusID = row["arrivalBookingStatus"] != DBNull.Value ? (int?)row["arrivalBookingStatus"] : (int?)null,
                                    reservationStatusID = row["reservationStatusID"] != DBNull.Value ? row["reservationStatusID"].ToString() : "",
                                    placeID = row["placeID"] != DBNull.Value ? (long?)row["placeID"] : (long?)null
                                });
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
                #endregion

                var group1 = q.Where(m => m.leadGroupID != null).GroupBy(m => m.leadGroupID);
                var group2 = q.Where(m => m.leadGroupID == null).GroupBy(m => m.hotelConfirmationNumber);

                var c1 = group1.Count();
                var c2 = group2.Count();

                foreach (var x in group1)
                {
                    var reservations = x.Select(m => m.reservationID);
                    var _item = db.tblReservations.Where(m => reservations.Contains(m.reservationID)).OrderByDescending(m => m.tblOptionsSold.Count(z => z.deleted != true)).FirstOrDefault();
                    var item = x.FirstOrDefault(m => m.reservationID == _item.reservationID);
                    item.options = _item.tblOptionsSold.ToList();
                    //item.options = db.tblOptionsSold.Where(m => m.reservationID == item.reservationID && m.deleted != true).ToList();

                    if (item.options.Count(m => m.deleted != true) > 0)
                    {
                        var frontOfficeResortID = item.frontOfficeResortID;
                        var frontOfficeReservationID = item.frontOfficeReservationID;
                        var arrivals = (from a in db.tblArrivals
                                        where a.frontOfficeResortID == frontOfficeResortID
                                        && a.frontOfficeReservationID == frontOfficeReservationID
                                        select (Guid?)a.arrivalID).ToList();

                        var tours = from spi in db.tblSPIManifest
                                    where arrivals.Contains(spi.arrivalID)
                                    select new TourInfo()
                                    {
                                        ResortID = spi.frontOfficeResortID,
                                        ReservationID = spi.frontOfficeReservationID,
                                        TourStatus = spi.tourStatus,
                                        TourDate = spi.tourDate,
                                        Volume = spi.volume,
                                        ContractStatus = spi.contractStatus,
                                        Source = spi.source,
                                        CustomerID = spi.customerID,
                                        ArrivalID = spi.arrivalID
                                    };

                        var secondaryTours = tours == null || tours.Count() == 0 ? db.tblSPIManifest.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, Source = m.source, CustomerID = m.customerID, ArrivalID = m.arrivalID }).ToList() : null;

                        #region "options info"
                        var flightInfo = "";
                        var categories = new List<string>();
                        var options = new List<SelectListItem>();
                        var optionInfo = "";
                        decimal total = 0;

                        foreach (var opt in item.options)
                        {
                            if (opt.deleted != true)
                            {
                                categories.Add(opt.tblOptionTypes.optionType);
                                options.Add(new SelectListItem() { Value = opt.optionID.ToString(), Text = opt.tblOptions.optionName });
                                total += (opt.totalPaid != null ? decimal.Parse(opt.totalPaid) : 0);
                            }
                        }

                        var flights = db.tblFlights.Where(m => m.reservationID == item.reservationID);
                        foreach (var a in flights.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }

                        foreach (var option in options.GroupBy(m => m.Value))
                        {
                            optionInfo += (optionInfo == "" ? "" : "; ") + option.Count().ToString() + " " + option.FirstOrDefault().Text;
                        }
                        #endregion


                        var _tour = new TourInfo();

                        if (tours.Count() > 1)
                        {
                            if (tours.Count(m => m.Volume > 0) > 0)
                            {
                                _tour = tours.Where(m => m.Volume > 0).OrderByDescending(m => m.ContractStatus).FirstOrDefault();
                            }
                            else
                            {
                                _tour = tours.OrderByDescending(m => m.TourDate).FirstOrDefault();
                            }
                        }
                        else if (tours.Count() == 1)
                        {
                            _tour = tours.FirstOrDefault();
                        }

                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = item.reservationID.ToString(),
                            LeadSourceID = item.leadSourceID != null ? item.leadSourceID.ToString() : "0",
                            LeadSource = item.leadSourceID != null ? leadSources.FirstOrDefault(m => long.Parse(m.Value) == item.leadSourceID).Text : "Not Defined",
                            FirstName = item.firstName,
                            LastName = item.lastName,
                            Resort = item.place,
                            ConfirmationNumber = item.hotelConfirmationNumber,
                            BookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.bookingStatusID).bookingStatus,
                            SecondaryBookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.secondaryBookingStatusID).bookingStatus,
                            ArrivalDate = item.arrivalDate != null ? item.arrivalDate.Value.ToString("yyyy-MM-dd") : "",
                            FrontAgencyName = item.frontOfficeAgencyName ?? "",
                            OptionTypes = string.Join(", ", categories.Distinct()),
                            Options = optionInfo,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            NumberNights = item.totalNights != null ? item.totalNights.ToString() : "",
                            FlightInfo = flightInfo,
                            AssignedToUser = "",
                            Hooked = item.arrivalBookingStatusID == 7 ? "Yes" : "No",
                            IsBooked = item.arrivalBookingStatusID == 7,
                            IsLinked = tours != null && tours.Count() > 0,
                            Source = _tour.ResortID != null ? _tour.Source : "",
                            TourStatus = _tour.ResortID != null ? _tour.TourStatus != null && _tour.TourStatus != "" ? _tour.Volume != null && _tour.Volume > 0 && ((_tour.ContractStatus.Contains("LQD") || _tour.ContractStatus.Contains("Procesable") || _tour.ContractStatus.Contains("Full")) || _tour.ContractStatus.Contains("Cancel")) ? "Full Tour(Q)" : _tour.TourStatus : "" : "",
                            TourDate = _tour.ResortID != null ? _tour.TourDate != null ? _tour.TourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            SalesVolume = _tour.ResortID != null ? _tour.ContractStatus != null && _tour.ContractStatus.IndexOf("ancel") == -1 ? _tour.Volume != null ? _tour.Volume.ToString() : "0.00" : "0.00" : "0.00",
                            TourFound = tours != null && tours.Count() > 0 ? true : secondaryTours != null && secondaryTours.Count(m => m.ArrivalID == null) > 0 ? true : false,
                            Concierge = "",
                            ConciergeComments = ""
                        });
                    }
                }

                foreach (var x in group2)
                {
                    var reservations = x.Select(m => m.reservationID);
                    var _item = db.tblReservations.Where(m => reservations.Contains(m.reservationID)).OrderByDescending(m => m.tblOptionsSold.Count(z => z.deleted != true)).FirstOrDefault();
                    var item = x.FirstOrDefault(m => m.reservationID == _item.reservationID);
                    item.options = _item.tblOptionsSold.ToList();



                    if (item.options.Count(m => m.deleted != true) > 0)
                    {
                        var frontOfficeResortID = item.frontOfficeResortID;
                        var frontOfficeReservationID = item.frontOfficeReservationID;

                        var arrivals = (from a in db.tblArrivals
                                        where a.frontOfficeResortID == frontOfficeResortID
                                        && a.frontOfficeReservationID == frontOfficeReservationID
                                        select (Guid?)a.arrivalID).ToList();

                        var tours = from spi in db.tblSPIManifest
                                    where arrivals.Contains(spi.arrivalID)
                                    select new TourInfo()
                                    {
                                        ResortID = spi.frontOfficeResortID,
                                        ReservationID = spi.frontOfficeReservationID,
                                        TourStatus = spi.tourStatus,
                                        TourDate = spi.tourDate,
                                        Volume = spi.volume,
                                        ContractStatus = spi.contractStatus,
                                        Source = spi.source,
                                        CustomerID = spi.customerID,
                                        ArrivalID = spi.arrivalID
                                    };

                        var secondaryTours = tours == null || tours.Count() == 0 ? db.tblSPIManifest.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, Source = m.source, CustomerID = m.customerID, ArrivalID = m.arrivalID }).ToList() : null;

                        var interactions = (from i in db.tblInteractions
                                            join u in db.tblUsers_SysWorkGroups on i.interactedWithUserID equals u.userID
                                            join r in db.aspnet_Roles on u.roleID equals r.RoleId
                                            join up in db.tblUserProfiles on i.interactedWithUserID equals up.userID
                                            where i.leadID == _item.leadID
                                            && r.RoleName.IndexOf("Concierge") != -1
                                            select new
                                            {
                                                i.interactionComments,
                                                user = up.firstName + " " + up.lastName,
                                                i.dateSaved
                                            }).ToList();

                        #region "options info"
                        var flightInfo = "";
                        var interactionInfo = "";
                        var categories = new List<string>();
                        var options = new List<SelectListItem>();
                        var optionInfo = "";
                        decimal total = 0;

                        foreach (var opt in item.options)
                        {
                            if (opt.deleted != true)
                            {
                                categories.Add(opt.tblOptionTypes.optionType);
                                options.Add(new SelectListItem() { Value = opt.optionID.ToString(), Text = opt.tblOptions.optionName });
                                total += (opt.totalPaid != null ? decimal.Parse(opt.totalPaid) : 0);
                            }
                        }

                        var flights = db.tblFlights.Where(m => m.reservationID == item.reservationID);
                        foreach (var a in flights.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }


                        foreach (var option in options.GroupBy(m => m.Value))
                        {
                            optionInfo += (optionInfo == "" ? "" : "; ") + option.Count().ToString() + " " + option.FirstOrDefault().Text;
                        }

                        foreach (var interaction in interactions.OrderByDescending(m => m.dateSaved))
                        {
                            interactionInfo += (interactionInfo == "" ? "" : "<br /> ")
                                + interaction.user + " (" + interaction.dateSaved.ToString("yyyy-MM-dd hh:mm tt") + "): " + interaction.interactionComments;
                        }
                        #endregion


                        var _tour = new TourInfo();

                        if (tours.Count() > 1)
                        {
                            if (tours.Count(m => m.Volume > 0) > 0)
                            {
                                _tour = tours.Where(m => m.Volume > 0).OrderByDescending(m => m.ContractStatus).FirstOrDefault();
                            }
                            else
                            {
                                _tour = tours.OrderByDescending(m => m.TourDate).FirstOrDefault();
                            }
                        }
                        else if (tours.Count() == 1)
                        {
                            _tour = tours.FirstOrDefault();
                        }

                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = item.reservationID.ToString(),
                            LeadSourceID = item.leadSourceID != null ? item.leadSourceID.ToString() : "0",
                            LeadSource = item.leadSourceID != null ? leadSources.FirstOrDefault(m => long.Parse(m.Value) == item.leadSourceID).Text : "Not Defined",
                            FirstName = item.firstName,
                            LastName = item.lastName,
                            Resort = item.place,
                            ConfirmationNumber = item.hotelConfirmationNumber,
                            BookingStatus = bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.bookingStatusID).bookingStatus,
                            SecondaryBookingStatus = item.secondaryBookingStatusID != null ? bookingStatus.FirstOrDefault(m => m.bookingStatusID == item.secondaryBookingStatusID).bookingStatus : "",
                            ArrivalDate = item.arrivalDate != null ? item.arrivalDate.Value.ToString("yyyy-MM-dd") : "",
                            FrontAgencyName = item.frontOfficeAgencyName ?? "",
                            OptionTypes = string.Join(", ", categories.Distinct()),
                            Options = optionInfo,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            NumberNights = item.totalNights != null ? item.totalNights.ToString() : "",
                            FlightInfo = flightInfo,
                            AssignedToUser = "",
                            Hooked = item.arrivalBookingStatusID == 7 ? "Yes" : "No",
                            IsBooked = item.arrivalBookingStatusID == 7,
                            IsLinked = tours != null && tours.Count() > 0,
                            Source = _tour != null ? _tour.Source : "",
                            TourStatus = _tour.ResortID != null ? _tour.TourStatus != null && _tour.TourStatus != "" ? _tour.Volume != null && _tour.Volume > 0 && ((_tour.ContractStatus.Contains("LQD") || _tour.ContractStatus.Contains("Procesable") || _tour.ContractStatus.Contains("Full")) || _tour.ContractStatus.Contains("Cancel")) ? "Full Tour(Q)" : _tour.TourStatus : "" : "",
                            TourDate = _tour.ResortID != null ? _tour.TourDate != null ? _tour.TourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            SalesVolume = _tour.ResortID != null ? _tour.ContractStatus != null && _tour.ContractStatus.IndexOf("ancel") == -1 ? _tour.Volume != null ? _tour.Volume.ToString() : "0.00" : "0.00" : "0.00",
                            TourFound = tours != null && tours.Count() > 0 ? true : secondaryTours != null && secondaryTours.Count(m => m.ArrivalID == null) > 0 ? true : false,
                            Concierge = "",
                            ConciergeComments = interactionInfo
                        });
                    }
                }
                #endregion
            }
            else
            {
                var _query = (from lead in db.tblLeads
                              join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                              join option in db.tblOptionsSold on rsv.reservationID equals option.reservationID into rsv_option
                              from option in rsv_option.DefaultIfEmpty()
                              join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID into rsv_pst
                              from pst in rsv_pst.DefaultIfEmpty()
                              where terminals.Contains(lead.terminalID)
                              && lead.isTest != true
                                && !leadStatusExcluded.Contains(lead.leadStatusID)
                                && lead.bookingStatusID == 16
                              && (sources.Contains(lead.leadSourceID) || sources.Count() == 0)
                              && (aiDate == null || (aiDate <= rsv.arrivalDate && rsv.arrivalDate <= afDate))
                              && (tiDate == null || (tiDate <= pst.realTourDate && pst.realTourDate <= tfDate))
                              && resorts.Contains(rsv.placeID)
                              select rsv.reservationID).ToList().Distinct();

                var query = (from lead in db.tblLeads
                             join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                             join option in db.tblOptionsSold on rsv.reservationID equals option.reservationID into rsv_option
                             from option in rsv_option.DefaultIfEmpty()
                             join arr in db.tblArrivals on new { resort = rsv.tblLeads.frontOfficeResortID, reservation = rsv.frontOfficeReservationID } equals new { resort = (int?)arr.frontOfficeResortID, reservation = (long?)arr.frontOfficeReservationID } into rsv_arr
                             from arr in rsv_arr.DefaultIfEmpty()
                             where _query.Contains(rsv.reservationID)
                             select new
                             {
                                 lead.leadGroupID,
                                 rsv.reservationID,
                                 lead.assignedToUserID,
                                 lead.firstName,
                                 lead.lastName,
                                 lead.leadSourceID,
                                 lead.tblLeadSources.leadSource,
                                 rsv.tblPlaces.place,
                                 rsv.hotelConfirmationNumber,
                                 rsv.arrivalDate,
                                 rsv.frontOfficeAgencyName,
                                 rsv.totalNights,
                                 lead.bookingStatusID,
                                 lead.secondaryBookingStatusID,
                                 lead.tblBookingStatus.bookingStatus,
                                 secondaryBookingStatus = lead.tblBookingStatus1.bookingStatus,
                                 rsv.reservationStatusID,
                                 option = rsv.tblOptionsSold,
                                 flight = rsv.tblFlights,
                                 pst = rsv.tblPresentations,
                                 profile = arr.tblOPCS,
                                 tourID = rsv.spiTourID,
                                 lead.frontOfficeResortID,
                                 rsv.frontOfficeReservationID,
                                 arrivalID = (Guid?)arr.arrivalID
                             }).ToList();

                var grouped = query.Where(m => m.leadGroupID != null);

                var qq = query.GroupBy(m => m.hotelConfirmationNumber);
                var tourIds = query.Select(x => x.tourID).ToList();
                var tours = db.tblSPIManifest.Where(m => tourIds.Contains(m.tourID)).ToList();

                foreach (var x in qq)
                {
                    var o = x.Where(m => m.option.Count(z => z.deleted != true) > 0);
                    var i = o.Count() > 0 ? o : x;
                    var flightInfo = "";
                    var categories = "";
                    var options = "";
                    var assignedToUser = "";
                    decimal total = 0;

                    if (o.Count() > 0)
                    {
                        foreach (var a in i.FirstOrDefault().option)
                        {
                            if (a.deleted != true)
                            {
                                var optionType = a.tblOptionTypes.optionType;
                                var option = a.tblOptions.optionName;
                                categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                                options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + a.tblOptions.optionName : "";
                                total += (a.totalPaid != null ? decimal.Parse(a.totalPaid) : 0);
                            }
                        }
                        foreach (var a in i.FirstOrDefault().flight.OrderBy(m => m.flightDateTime))
                        {
                            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                        }
                    }

                    var _profile = i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.FirstOrDefault().dateLastModification == null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users != null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault() : null : i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users1 != null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users1.tblUserProfiles.FirstOrDefault() : null : null;

                    if (model.Search_DrpUsers.Count(m => m.Value == i.FirstOrDefault().assignedToUserID.ToString()) > 0)
                    {
                        assignedToUser = model.Search_DrpUsers.FirstOrDefault(m => m.Value == i.FirstOrDefault().assignedToUserID.ToString()).Text.Split('-')[0];
                    }
                    else
                    {
                        var uid = i.FirstOrDefault().assignedToUserID;
                        var p = db.tblUserProfiles.FirstOrDefault(m => m.userID == uid);
                        assignedToUser = p.firstName + " " + p.lastName;
                    }

                    if (options != "")
                    {
                        var tourID = i.FirstOrDefault().tourID;
                        var resortID = i.FirstOrDefault().frontOfficeResortID;
                        var reservationID = i.FirstOrDefault().frontOfficeReservationID;
                        var spiTours = db.tblSPIManifest.Where(m => m.frontOfficeResortID == resortID && m.frontOfficeReservationID == reservationID);
                        ///preguntar si excluir cancel de esta linea es correcto 2021-03-10
                        //var volumeTour = tours.Count(m => m.tourID == tourID && m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.contractStatus.IndexOf("ancel") == -1 && m.volume != null) > 0 ? tours.Where(m => m.tourID == tourID && m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.contractStatus.IndexOf("ancel") == -1 && m.volume != null).OrderByDescending(m => m.volume).FirstOrDefault() : null;
                        var volumeTour = tours.Count(m => m.tourID == tourID && m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.volume != null) > 0 ? tours.Where(m => m.tourID == tourID && m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.volume != null).OrderByDescending(m => m.volume).FirstOrDefault() : null;
                        var pst = i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.OrderByDescending(m => m.tblReservations.tblOptionsSold.Count()).FirstOrDefault() : null;
                        var volume = volumeTour != null && volumeTour.contractStatus != null && volumeTour.contractStatus.IndexOf("ancel") == -1 ? volumeTour.volume != null ? volumeTour.volume.ToString() : "0.00" : "0.00";
                        list.Add(new PreArrivalReportModel()
                        {
                            ReservationID = i.FirstOrDefault().reservationID.ToString(),
                            LeadSourceID = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSourceID.ToString() : "0",
                            LeadSource = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSource : "Not Defined",
                            FirstName = i.FirstOrDefault().firstName,
                            LastName = i.FirstOrDefault().lastName,
                            Resort = i.FirstOrDefault().place,
                            ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                            BookingStatus = i.FirstOrDefault().bookingStatus,
                            SecondaryBookingStatus = i.FirstOrDefault().secondaryBookingStatus,
                            ReservationStatus = i.FirstOrDefault().reservationStatusID != null ? i.FirstOrDefault().reservationStatusID.ToString() : "",
                            ArrivalDate = i.FirstOrDefault().arrivalDate != null ? i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            FrontAgencyName = i.FirstOrDefault().frontOfficeAgencyName ?? "",
                            OptionTypes = categories,
                            Options = options,
                            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                            Source = volumeTour != null ? volumeTour.source : "",
                            NumberNights = i.FirstOrDefault().totalNights != null ? i.FirstOrDefault().totalNights.ToString() : "",
                            FlightInfo = flightInfo != null ? flightInfo.Replace(",", ".") : "",
                            AssignedToUser = assignedToUser,
                            Hooked = pst != null ? pst.finalBookingStatusID != null ? pst.finalBookingStatusID == 7 ? "Yes" : "No" : "No" : "No",
                            IsBooked = pst != null ? pst.finalBookingStatusID != null ? pst.finalBookingStatusID == 7 ? true : false : false : false,
                            IsExternal = true,
                            SalesVolume = volume,
                            //TourStatus = pst != null ? pst.finalTourStatusID != null ? pst.tblTourStatus1.tourStatus : "" : "",
                            //TourStatus = volume != "0.00" ? "Qualified Tour" : pst != null ? pst.finalTourStatusID != null ? pst.tblTourStatus1.tourStatus : "" : "",
                            TourStatus = volume != "0.00" && (volumeTour.contractStatus.IndexOf("LQD") != -1 || volumeTour.contractStatus.IndexOf("Procesable") != -1 || volumeTour.contractStatus.IndexOf("Full") != -1 || volumeTour.contractStatus.IndexOf("Cancel") != -1) ? "Qualified Tour" : pst != null ? pst.finalTourStatusID != null ? pst.tblTourStatus1.tourStatus : "" : "",
                            TourDate = pst != null ? pst.realTourDate != null ? pst.realTourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                            Concierge = i.FirstOrDefault().profile != null ? i.FirstOrDefault().profile.firstName + " " + i.FirstOrDefault().profile.lastName : "",
                            ConciergeComments = pst != null ? pst.hostessComments : "",
                            PresentationModificationDate = pst != null ? pst.dateLastModification == null ? pst.dateSaved.ToString("yyyy-MM-dd hh:mm tt") : pst.dateLastModification.Value.ToString("yyyy-MM-dd tt") : "",
                            PresentationModifiedByUser = _profile != null ? _profile.firstName + " " + _profile.lastName : ""
                        });
                    }
                }
                //using (ePlatEntities context = new ePlatEntities())
                //{
                //var query = (from lead in db.tblLeads
                //             join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                //             join opt in db.tblOptionsSold on rsv.reservationID equals opt.reservationID into rsv_opt
                //             from opt in rsv_opt.DefaultIfEmpty()
                //             join arr in db.tblArrivals on new { resort = rsv.tblLeads.frontOfficeResortID, reservation = rsv.frontOfficeReservationID } equals new { resort = (int?)arr.frontOfficeResortID, reservation = (long?)arr.frontOfficeReservationID } into rsv_arr
                //             from arr in rsv_arr.DefaultIfEmpty()
                //             join spi in db.tblSPIManifest on arr.arrivalID equals spi.arrivalID into arr_spi
                //             from spi in arr_spi.DefaultIfEmpty()
                //             join bs in db.tblBookingStatus on lead.bookingStatusID equals bs.bookingStatusID
                //             join sbs in db.tblBookingStatus on lead.secondaryBookingStatusID equals sbs.bookingStatusID into lead_sbs
                //             from sbs in lead_sbs.DefaultIfEmpty()
                //             join bss in db.tblBookingStatus on arr.bookingStatusID equals bss.bookingStatusID into arr_bss
                //             from bss in arr_bss.DefaultIfEmpty()
                //             join f in db.tblFlights on rsv.reservationID equals f.reservationID into rsv_f
                //             from f in rsv_f.DefaultIfEmpty()
                //             join opc in db.tblOPCS on arr.opcID equals opc.opcID into arr_opc
                //             from opc in arr_opc.DefaultIfEmpty()
                //             where terminals.Contains(lead.terminalID)
                //             && resorts.Contains(rsv.placeID)
                //             && (aiDate == null || (aiDate <= rsv.arrivalDate && rsv.arrivalDate <= afDate))
                //             && (tiDate == null || (spi.regionID > 0 && spi.tourDate != null && (tiDate <= spi.tourDate && spi.tourDate <= tfDate)))
                //             //&& (tiDate == null || (tiDate <= spi.tourDate && spi.tourDate <= tfDate))
                //             && lead.bookingStatusID == 16
                //             && !leadStatusExcluded.Contains(lead.leadStatusID)
                //             && (sources.Contains(lead.leadSourceID) || sources.Count() == 0)
                //             && lead.isTest != true
                //             select new
                //             {
                //                 lead.leadGroupID,
                //                 lead.frontOfficeResortID,
                //                 rsv.frontOfficeReservationID,
                //                 rsv.reservationID,
                //                 lead.assignedToUserID,
                //                 lead.firstName,
                //                 lead.lastName,
                //                 lead.leadSourceID,
                //                 rsv.tblPlaces.place,
                //                 rsv.hotelConfirmationNumber,
                //                 rsv.arrivalDate,
                //                 rsv.frontOfficeAgencyName,
                //                 rsv.totalNights,
                //                 lead.bookingStatusID,
                //                 lead.secondaryBookingStatusID,
                //                 bs.bookingStatus,
                //                 secondaryBookingStatus = sbs.bookingStatus,
                //                 arrivalBookingStatus = bss.bookingStatus,
                //                 rsv.reservationStatusID,
                //                 spi.source,
                //                 options = rsv.tblOptionsSold,
                //                 flight = f,
                //                 profile = opc,
                //                 tourID = (int?)spi.tourID,
                //                 spi.contractStatus,
                //                 spi.tourStatus,
                //                 spi.tourDate
                //             };
                //}
                //var grouped = query.Where(m => m.leadGroupID != null);

                //var qq = query.GroupBy(m => m.hotelConfirmationNumber);

                //foreach (var x in qq)
                //{

                //    //var o = x.Where(m => m.option.Count(z => z.deleted != true) > 0);
                //    var o = x.Where(m => m.options.Count(z => z.deleted != true) > 0);
                //    var i = o.Count() > 0 ? o : x;//seleccionar la reservacion que tiene opcionales por sobre la que no.
                //    var frontOfficeResortID = i.FirstOrDefault().frontOfficeResortID;
                //    var frontOfficeReservationID = i.FirstOrDefault().frontOfficeReservationID;
                //    var reservationID = i.FirstOrDefault().reservationID;
                //    var arrivals = db.tblArrivals.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => (Guid?)m.arrivalID).ToArray();
                //    var tours = db.tblSPIManifest.Where(m => arrivals.Contains(m.arrivalID)).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, CustomerID = m.customerID }).ToList();
                //    var secondaryTours = tours == null || tours.Count() == 0 ? db.tblSPIManifest.Where(m => m.frontOfficeResortID == frontOfficeResortID && m.frontOfficeReservationID == frontOfficeReservationID).Select(m => new TourInfo() { ResortID = m.frontOfficeResortID, ReservationID = m.frontOfficeReservationID, TourStatus = m.tourStatus, TourDate = m.tourDate, Volume = m.volume, ContractStatus = m.contractStatus, CustomerID = m.customerID, ArrivalID = m.arrivalID }).ToList() : null;

                //    var flightInfo = "";
                //    var categories = "";
                //    var options = "";
                //    var assignedToUser = "";
                //    decimal total = 0;

                //    if (o.Count() > 0)
                //    {
                //        foreach (var a in i.FirstOrDefault().options)
                //        {
                //            if (a.deleted != true)
                //            {
                //                var optionType = a.tblOptionTypes.optionType;
                //                var option = a.tblOptions.optionName;
                //                categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                //                options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + a.tblOptions.optionName : "";
                //                total += (a.totalPaid != null ? decimal.Parse(a.totalPaid) : 0);
                //            }
                //        }
                //        var flights = db.tblFlights.Where(m => m.reservationID == reservationID);
                //        foreach (var a in flights.OrderBy(m => m.flightDateTime))
                //        {
                //            flightInfo += (flightInfo == "" ? "" : "; ") + (a.flightTypeID == 1 ? "Arrival" : "Departure") + ": " + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") + ", " + a.tblAirLines.airLine + "-" + a.flightNumber + (a.pickupTime != null ? ", PickUp At Lobby: " + a.pickupTime.Value.ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "");
                //        }
                //    }

                //    //var _profile = i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.FirstOrDefault().dateLastModification == null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users != null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users.tblUserProfiles.FirstOrDefault() : null : i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users1 != null ? i.FirstOrDefault().pst.FirstOrDefault().aspnet_Users1.tblUserProfiles.FirstOrDefault() : null : null;

                //    if (model.Search_DrpUsers.Count(m => m.Value == i.FirstOrDefault().assignedToUserID.ToString()) > 0)
                //    {
                //        assignedToUser = model.Search_DrpUsers.FirstOrDefault(m => m.Value == i.FirstOrDefault().assignedToUserID.ToString()).Text.Split('-')[0];
                //    }
                //    else
                //    {
                //        var uid = i.FirstOrDefault().assignedToUserID;
                //        var p = db.tblUserProfiles.FirstOrDefault(m => m.userID == uid);
                //        assignedToUser = p.firstName + " " + p.lastName;
                //    }

                //    if (options != "")
                //    {
                //        //el contractstatus del tour 1448860 es null, preguntar qué hacer en estos casos.
                //        //var volumeTour = tours.Count(m => m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.volume != null) > 0 ? tours.Where(m => m.contractStatus != null && m.contractStatus.IndexOf("lowout") == -1 && m.volume != null).OrderByDescending(m => m.volume).FirstOrDefault() : null;

                //        //var tour = tours != null ? tours.OrderByDescending(m => m.volume).FirstOrDefault() : null;

                //        //si tours.Count() > 1
                //        //    agrupar por customer
                //        //    si grupo.Count(volume > 0) > 0
                //        //        seleccionar volume > 0, ordenar por contractStatus y seleccionar primero
                //        //    sino
                //        //        ordenar por tourdate desc y seleccionar primero
                //        var _tour = new TourInfo();

                //        if (tours.Count() > 1)
                //        {
                //            var _tours = tours.GroupBy(m => m.CustomerID);
                //            if (_tours.FirstOrDefault().Count(m => m.Volume > 0) > 0)
                //            {
                //                _tour = _tours.FirstOrDefault().Where(m => m.Volume > 0).OrderByDescending(m => m.ContractStatus).FirstOrDefault();
                //            }
                //            else
                //            {
                //                _tour = _tours.FirstOrDefault().OrderBy(m => m.TourDate).FirstOrDefault();
                //            }
                //        }
                //        else if (tours.Count() == 1)
                //        {
                //            _tour = tours.FirstOrDefault();
                //        }

                //        //var _tour = tours.Count() > 0 ? tours.GroupBy(m => m.CustomerID).Select(m => m.Where(z => z.Volume > 0).OrderByDescending(z => z.ContractStatus).FirstOrDefault()) : null;
                //        list.Add(new PreArrivalReportModel()
                //        {
                //            ReservationID = i.FirstOrDefault().reservationID.ToString(),
                //            LeadSourceID = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSourceID.ToString() : "0",
                //            LeadSource = i.FirstOrDefault().leadSourceID != null ? leadSources.FirstOrDefault(m => long.Parse(m.Value) == i.FirstOrDefault().leadSourceID).Text : "Not Defined",
                //            FirstName = i.FirstOrDefault().firstName,
                //            LastName = i.FirstOrDefault().lastName,
                //            Resort = i.FirstOrDefault().place,
                //            ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                //            BookingStatus = i.FirstOrDefault().bookingStatus,
                //            SecondaryBookingStatus = i.FirstOrDefault().secondaryBookingStatus ?? "",
                //            ReservationStatus = i.FirstOrDefault().reservationStatusID != null ? i.FirstOrDefault().reservationStatusID.ToString() : "",
                //            ArrivalDate = i.FirstOrDefault().arrivalDate != null ? i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                //            FrontAgencyName = i.FirstOrDefault().frontOfficeAgencyName ?? "",
                //            OptionTypes = categories,
                //            Options = options,
                //            OptionsTotal = total != 0 ? total.ToString() : "0.00",
                //            Source = i.FirstOrDefault().source ?? "",
                //            NumberNights = i.FirstOrDefault().totalNights != null ? i.FirstOrDefault().totalNights.ToString() : "",
                //            FlightInfo = flightInfo != null ? flightInfo.Replace(",", ".") : "",
                //            AssignedToUser = assignedToUser,
                //            Hooked = i.FirstOrDefault().arrivalBookingStatus == "Booked" ? "Yes" : "No",
                //            IsBooked = i.FirstOrDefault().arrivalBookingStatus == "Booked",
                //            //(i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.FirstOrDefault().finalBookingStatusID != null && i.FirstOrDefault().pst.FirstOrDefault().finalBookingStatusID == 7 ? "Yes" : "No" : "No"),
                //            //TourStatus = i.FirstOrDefault().tourStatus != null ? i.FirstOrDefault().tourStatus.IndexOf("Full") != -1 ? i.FirstOrDefault().tourStatus : volumeTour != null && volumeTour.volume > 0 && ((volumeTour.contractStatus.Contains("LQD") || volumeTour.contractStatus.Contains("Procesable") || volumeTour.contractStatus.Contains("Full")) || volumeTour.contractStatus.Contains("Cancel")) ? "Full Tour (Q)" : i.FirstOrDefault().tourStatus : "",
                //            //TourDate = i.FirstOrDefault().tourDate != null ? i.FirstOrDefault().tourDate.Value.ToString("yyyy-MM-dd") : "",
                //            //SalesVolume = volumeTour != null && volumeTour.contractStatus.IndexOf("ancel") == -1 ? volumeTour.volume.ToString() : "0.00",

                //            ToursInfo = tours ?? new List<TourInfo>(),
                //            TourStatus = _tour != null ? _tour.TourStatus != null ? _tour.Volume != null && _tour.Volume > 0 && ((_tour.ContractStatus.Contains("LQD") || _tour.ContractStatus.Contains("Procesable") || _tour.ContractStatus.Contains("Full")) || _tour.ContractStatus.Contains("Cancel")) ? "Full Tour(Q)" : _tour.TourStatus : "" : "",
                //            TourDate = _tour != null ? _tour.TourDate != null ? _tour.TourDate.Value.ToString("yyyy-MM-dd") : "" : "",
                //            SalesVolume = _tour != null ? _tour.ContractStatus != null && _tour.ContractStatus.IndexOf("ancel") == -1 ? _tour.Volume != null ? _tour.Volume.ToString() : "0.00" : "0.00" : "0.00",
                //            TourFound = tours != null && tours.Count() > 0 ? true : secondaryTours != null && secondaryTours.Count(m => m.ArrivalID == null) > 0 ? true : false,
                //            IsLinked = tours != null && tours.Count() > 0 ? true : false,

                //            Concierge = i.FirstOrDefault().profile != null ? i.FirstOrDefault().profile.firstName + " " + i.FirstOrDefault().profile.lastName : "",
                //            ConciergeComments = "",//i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.FirstOrDefault().hostessComments : "",

                //            //PresentationModifiedByUser = "",///_profile != null ? _profile.firstName + " " + _profile.lastName : "",
                //            //PresentationModificationDate = ""//i.FirstOrDefault().pst.Count() > 0 ? i.FirstOrDefault().pst.FirstOrDefault().dateLastModification == null ? i.FirstOrDefault().pst.FirstOrDefault().dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt") : ((DateTime)i.FirstOrDefault().pst.FirstOrDefault().dateLastModification).ToString("yyyy-MM-dd hh:mm:ss tt") : ""

                //        });
                //    }
                //}
            }
            return list;
        }

        //weekly budget
        public List<PreArrivalReportModel> SearchPreArrivalWeeklyBudgetReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var users = model.Search_AssignedToUsers ?? model.Search_DrpUsers.Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var bookingStatusExcluded = new int?[] { 5, 15 };//not interested, not contactable
            var iDate = DateTime.Parse(model.Search_I_ArrivalDate);
            var fDate = DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1);

            var _query = (from lead in db.tblLeads
                          join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                          where terminals.Contains(lead.terminalID)
                          && lead.isTest != true
                              && lead.leadStatusID != 10//duplicate
                              && !bookingStatusExcluded.Contains(lead.bookingStatusID)
                          && (sources.Contains(lead.leadSourceID) || lead.leadSourceID == null)
                          && users.Contains(lead.assignedToUserID)
                          && (rsv.arrivalDate >= iDate && rsv.arrivalDate <= fDate)
                          && resorts.Contains(rsv.placeID)
                          select lead.leadID).ToList().Distinct();

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join user in db.tblUserProfiles on lead.assignedToUserID equals user.userID
                         where _query.Contains(lead.leadID)
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             lead.assignedToUserID,
                             userName = user.firstName + " " + user.lastName,
                             rsv.hotelConfirmationNumber,
                             rsv.tblPlaces.place,
                             rsv.tblDestinations.destination,
                             rsv.certificateNumber,
                             rsv.arrivalDate,
                             rsv.departureDate,
                             rsv.totalNights,
                             option = rsv.tblOptionsSold,
                             payments = rsv.tblPaymentDetails,
                             marketCode = rsv.frontOfficeMarketCode
                         }).ToList();

            var groupsByUser = query.GroupBy(m => m.assignedToUserID);

            foreach (var user in groupsByUser)
            {
                var qq = user.GroupBy(m => m.hotelConfirmationNumber);

                foreach (var i in qq)
                {
                    var categories = "";
                    var options = "";
                    decimal totalSold = 0;

                    //new
                    foreach (var a in i.Select(m => m.option.Where(x => x.deleted != true)))
                    {
                        var optionType = string.Join(", ", a.Select(x => x.tblOptionTypes.optionType).Distinct());
                        var option = string.Join(", ", a.Select(x => x.tblOptions.optionName).Distinct());
                        categories += optionType;
                        options += option;
                        totalSold += a.Sum(x => (x.totalPaid != null && x.totalPaid != "" ? decimal.Parse(x.totalPaid) : 0));
                    }
                    decimal payments = 0;
                    foreach (var p in i.Select(x => x.payments.Where(m => m.tblMoneyTransactions.transactionTypeID == 1 && m.deleted != true && m.tblMoneyTransactions.errorCode == "0")))
                    {
                        payments += p.Sum(x => x.amount);
                    }
                    //


                    //foreach (var a in i.FirstOrDefault().option.Where(m => m.deleted != true))
                    //{
                    //    var optionType = a.tblOptionTypes.optionType;
                    //    var option = a.tblOptions.optionName;
                    //    categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                    //    options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + a.tblOptions.optionName : "";
                    //    totalSold += (a.totalPaid != null && a.totalPaid != "" ? decimal.Parse(a.totalPaid) : 0);
                    //}
                    //decimal payments = 0;
                    //foreach (var p in i.FirstOrDefault().payments.Where(m => m.tblMoneyTransactions.transactionTypeID == 1 && m.deleted != true && m.tblMoneyTransactions.errorCode == "0"))
                    //{
                    //    payments += p.amount;
                    //}

                    list.Add(new PreArrivalReportModel()
                    {
                        AssignedToUserID = user.Key.ToString(),
                        AssignedToUser = i.FirstOrDefault().userName,
                        FirstName = i.FirstOrDefault().firstName,
                        LastName = i.FirstOrDefault().lastName,
                        ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                        Resort = i.FirstOrDefault().place + " " + i.FirstOrDefault().destination,
                        CertificateNumber = i.FirstOrDefault().certificateNumber,
                        ArrivalDate = i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                        DepartureDate = i.FirstOrDefault().departureDate != null ? i.FirstOrDefault().departureDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                        NumberNights = i.FirstOrDefault().totalNights.ToString(),
                        OptionTypes = categories,
                        Options = options,
                        SalesVolume = Decimal.Round(totalSold, 2).ToString(),
                        Paid = payments >= totalSold,
                        MarketCode = i.FirstOrDefault().marketCode
                    });
                }
            }

            return list;
        }

        //public List<PreArrivalReportModel> SearchPreArrivalOptionsPercentageReport(PreArrivalReport.SearchPreArrivalReport model)
        public List<PreArrivalReportModel> SearchPreArrivalOptionsPercentageReport(SearchPreArrivalWeeklyReportModel model)
        {
            ePlatEntities db = new ePlatEntities();
            resortConnectEntities dba = new resortConnectEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = model.Search_Terminals != null && model.Search_Terminals.Count() > 0 ? model.Search_Terminals.Select(m => (long)m).ToArray() : session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);
            var optionTypes = MasterChartDataModel.LeadsCatalogs.FillDrpOptionCategories().Select(m => m.Text);
            var _query = new List<Guid>();
            var leadStatusExcluded = new int?[] { 10, 4 };//duplicate, canceled

            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {
                _query = (from lead in db.tblLeads
                          join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                          join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID into rsv_p
                          from p in rsv_p.DefaultIfEmpty()
                          where terminals.Contains(lead.terminalID)
                          && lead.isTest != true && rsv.isTest != true
                          //&& lead.leadStatusID != 10//duplicate
                          && !leadStatusExcluded.Contains(lead.leadStatusID)
                          && (sources.Contains(lead.leadSourceID) || lead.leadSourceID == null)
                          && (iDate <= p.dateSaved && p.dateSaved <= fDate)
                          && resorts.Contains(rsv.placeID)
                          select rsv.reservationID).Distinct().ToList();
                scope.Complete();
            }

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join user in db.tblUserProfiles on lead.assignedToUserID equals user.userID
                         where _query.Contains(rsv.reservationID)
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             lead.assignedToUserID,
                             lead.leadSourceID,
                             leadSource = lead.leadSourceID != null ? lead.tblLeadSources.leadSource : "Not Classified",
                             userName = user.firstName + " " + user.lastName,
                             rsv.hotelConfirmationNumber,
                             rsv.placeID,
                             rsv.tblPlaces.place,
                             rsv.tblDestinations.destination,
                             rsv.certificateNumber,
                             rsv.arrivalDate,
                             rsv.departureDate,
                             rsv.totalNights,
                             option = rsv.tblOptionsSold,
                             payments = rsv.tblPaymentDetails.Where(m => iDate <= m.dateSaved && m.dateSaved <= fDate)
                         }).ToList();

            var groupedByResort = query.GroupBy(m => m.placeID);

            foreach (var resort in groupedByResort)
            {
                var groupedBySource = resort.GroupBy(m => m.leadSourceID);

                foreach (var source in groupedBySource)
                {
                    Dictionary<string, decimal> optionsArr = new Dictionary<string, decimal>();
                    var groupByConfirmation = source.GroupBy(m => m.hotelConfirmationNumber);

                    foreach (var i in optionTypes)
                    {
                        optionsArr.Add(i, 0);
                    }

                    foreach (var rsv in groupByConfirmation)
                    {

                        //var optionsSold = rsv.Where(x => x.option.Count(m => (m.dateDeleted == null || (m.dateDeleted > fDate || m.dateDeleted < iDate)) || (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0") > 0).Select(m => m.option);
                        var optionsSold = rsv.Where(x => x.option.Count(m => (m.dateDeleted == null || (m.dateDeleted > fDate || m.dateDeleted < iDate)) && (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0") > 0).Select(x => x.option.Where(m => (m.dateDeleted == null || (m.dateDeleted > fDate || m.dateDeleted < iDate)) && (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0"));
                        var categories = "";
                        var options = "";

                        var paymentsData = rsv.Where(x => x.payments.Count(m => m.deleted != true && m.tblMoneyTransactions.errorCode == "0") > 0).Select(m => m.payments.Where(x => x.deleted != true && x.tblMoneyTransactions.errorCode == "0"));
                        decimal payments = 0;

                        foreach (var oSold in optionsSold)
                        {
                            foreach (var option in oSold)
                            {
                                var optionType = option.tblOptionTypes.optionType;
                                var name = option.tblOptions.optionName;
                                var quantity = option.quantity;

                                categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ", ") + optionType : "";
                                options += options.IndexOf(name) == -1 ? (options == "" ? "" : ", ") + quantity.ToString() + " " + name : "";
                                if (!optionsArr.ContainsKey(optionType))
                                {
                                    optionsArr.Add(optionType, quantity);
                                }
                                else
                                {
                                    var value = optionsArr[optionType];
                                    optionsArr[optionType] = (value + quantity);
                                }
                            }
                        }

                        foreach (var pData in paymentsData)
                        {
                            foreach (var payment in pData)
                            {
                                if (payment.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    payments += payment.amount;
                                }
                                else
                                {
                                    payments -= payment.amount;
                                }
                            }
                        }

                        list.Add(new PreArrivalReportModel()
                        {
                            AssignedToUserID = rsv.FirstOrDefault().assignedToUserID != null ? rsv.FirstOrDefault().assignedToUserID.ToString() : "",
                            AssignedToUser = rsv.FirstOrDefault().assignedToUserID != null ? rsv.FirstOrDefault().userName : "",
                            LeadSourceID = rsv.FirstOrDefault().leadSourceID != null ? rsv.FirstOrDefault().leadSourceID.ToString() : "",
                            LeadSource = rsv.FirstOrDefault().leadSourceID != null ? rsv.FirstOrDefault().leadSource : "Not Classified",
                            FirstName = rsv.FirstOrDefault().firstName,
                            LastName = rsv.FirstOrDefault().lastName,
                            ConfirmationNumber = rsv.FirstOrDefault().hotelConfirmationNumber,
                            Resort = (rsv.FirstOrDefault().place != null ? rsv.FirstOrDefault().place : "") + " " + (rsv.FirstOrDefault().destination != null ? rsv.FirstOrDefault().destination : ""),
                            CertificateNumber = rsv.FirstOrDefault().certificateNumber != null ? rsv.FirstOrDefault().certificateNumber : "",
                            ArrivalDate = rsv.FirstOrDefault().arrivalDate != null ? rsv.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            DepartureDate = rsv.FirstOrDefault().departureDate != null ? rsv.FirstOrDefault().departureDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            NumberNights = rsv.FirstOrDefault().totalNights != null ? rsv.FirstOrDefault().totalNights.ToString() : "",
                            OptionTypes = categories,
                            Options = options,
                            SalesVolume = payments > 0 ? Decimal.Round(payments, 2).ToString() : Decimal.Round(0, 2).ToString(),
                            Paid = true
                        });
                    }

                    if (groupByConfirmation.Count() > 0)
                    {
                        var chart = new List<KeyValuePair<string, string>>();
                        foreach (var a in optionsArr)
                        {
                            chart.Add(new KeyValuePair<string, string>(a.Key, a.Value.ToString()));
                        }

                        list.Last().Chart = new JavaScriptSerializer().Serialize(chart);
                    }
                }
            }
            return list;
        }

        //options percentage
        public List<PreArrivalReportModel> _SearchPreArrivalOptionsPercentageReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);
            var optionTypes = MasterChartDataModel.LeadsCatalogs.FillDrpOptionCategories().Select(m => m.Text);


            var _query = (from lead in db.tblLeads
                          join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                          join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID
                          where terminals.Contains(lead.terminalID)
                          && lead.isTest != true
                          && lead.leadStatusID != 10//duplicate
                          && (sources.Contains(lead.leadSourceID) || lead.leadSourceID == null)
                          && iDate <= p.dateSaved && p.dateSaved <= fDate
                          && resorts.Contains(rsv.placeID)
                          select lead.leadID).ToList().Distinct();

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join user in db.tblUserProfiles on lead.assignedToUserID equals user.userID
                         where _query.Contains(lead.leadID)
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             lead.assignedToUserID,
                             lead.leadSourceID,
                             leadSource = lead.leadSourceID != null ? lead.tblLeadSources.leadSource : "Not Classified",
                             userName = user.firstName + " " + user.lastName,
                             rsv.hotelConfirmationNumber,
                             rsv.placeID,
                             rsv.tblPlaces.place,
                             rsv.tblDestinations.destination,
                             rsv.certificateNumber,
                             rsv.arrivalDate,
                             rsv.departureDate,
                             rsv.totalNights,
                             option = rsv.tblOptionsSold,
                             payments = rsv.tblPaymentDetails.Where(m => iDate <= m.dateSaved && m.dateSaved <= fDate)
                         }).ToList();

            var groupedByResort = query.GroupBy(m => m.placeID);

            foreach (var resort in groupedByResort)
            {
                var groupedBySource = resort.GroupBy(m => m.leadSourceID);

                foreach (var source in groupedBySource)
                {
                    Dictionary<string, decimal> optionsArr = new Dictionary<string, decimal>();
                    var groupByConfirmation = source.GroupBy(m => m.hotelConfirmationNumber);

                    foreach (var i in optionTypes)
                    {
                        optionsArr.Add(i, 0);
                    }

                    foreach (var rsv in groupByConfirmation)
                    {

                        //var optionsSold = rsv.FirstOrDefault().option.Where(m => (m.dateDeleted >= iDate && m.dateDeleted <= fDate) || (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0");
                        //var optionsSold = rsv.Where(x => x.option.Count(m => (m.dateDeleted >= iDate && m.dateDeleted <= fDate) || (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0") > 0).Select(m => m.option);
                        var optionsSold = rsv.Where(x => x.option.Count(m => (m.dateDeleted == null || (m.dateDeleted > fDate || m.dateDeleted < iDate)) || (m.dateSaved >= iDate && m.dateSaved <= fDate) && m.totalPaid != null && m.totalPaid != "0") > 0).Select(m => m.option);
                        var categories = "";
                        var options = "";

                        //var paymentsData = rsv.Where(x => x.payments.Count(m => m.deleted != true && m.tblMoneyTransactions.errorCode == "0") > 0).Select(m => m.payments);
                        var paymentsData = rsv.Where(x => x.payments.Count(m => m.deleted != true && m.tblMoneyTransactions.errorCode == "0") > 0).Select(m => m.payments.Where(x => x.deleted != true && x.tblMoneyTransactions.errorCode == "0"));
                        decimal payments = 0;

                        foreach (var oSold in optionsSold)
                        {
                            foreach (var option in oSold)
                            {
                                var optionType = option.tblOptionTypes.optionType;
                                var name = option.tblOptions.optionName;
                                var quantity = option.quantity;

                                categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ", ") + optionType : "";
                                options += options.IndexOf(name) == -1 ? (options == "" ? "" : ", ") + quantity.ToString() + " " + name : "";
                                if (!optionsArr.ContainsKey(optionType))
                                {
                                    optionsArr.Add(optionType, quantity);
                                }
                                else
                                {
                                    var value = optionsArr[optionType];
                                    optionsArr[optionType] = (value + quantity);
                                }
                            }
                        }

                        //foreach (var option in optionsSold)
                        //{
                        //    var optionType = option.tblOptionTypes.optionType;
                        //    var name = option.tblOptions.optionName;
                        //    var quantity = option.quantity;

                        //    categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ", ") + optionType : "";
                        //    options += options.IndexOf(name) == -1 ? (options == "" ? "" : ", ") + quantity.ToString() + " " + name : "";
                        //    if (!optionsArr.ContainsKey(optionType))
                        //    {
                        //        optionsArr.Add(optionType, quantity);
                        //    }
                        //    else
                        //    {
                        //        var value = optionsArr[optionType];
                        //        optionsArr[optionType] = (value + quantity);
                        //    }
                        //}

                        foreach (var pData in paymentsData)
                        {
                            foreach (var payment in pData)
                            {
                                if (payment.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    payments += payment.amount;
                                }
                                else
                                {
                                    payments -= payment.amount;
                                }
                            }
                        }
                        //foreach (var payment in paymentsData)
                        //{
                        //    if (payment.tblMoneyTransactions.transactionTypeID == 1)
                        //    {
                        //        payments += payment.amount;
                        //    }
                        //    else
                        //    {
                        //        payments -= payment.amount;
                        //    }
                        //}

                        list.Add(new PreArrivalReportModel()
                        {
                            AssignedToUserID = rsv.FirstOrDefault().assignedToUserID != null ? rsv.FirstOrDefault().assignedToUserID.ToString() : "",
                            AssignedToUser = rsv.FirstOrDefault().assignedToUserID != null ? rsv.FirstOrDefault().userName : "",
                            LeadSourceID = rsv.FirstOrDefault().leadSourceID != null ? rsv.FirstOrDefault().leadSourceID.ToString() : "",
                            LeadSource = rsv.FirstOrDefault().leadSourceID != null ? rsv.FirstOrDefault().leadSource : "Not Classified",
                            FirstName = rsv.FirstOrDefault().firstName,
                            LastName = rsv.FirstOrDefault().lastName,
                            ConfirmationNumber = rsv.FirstOrDefault().hotelConfirmationNumber,
                            Resort = (rsv.FirstOrDefault().place != null ? rsv.FirstOrDefault().place : "") + " " + (rsv.FirstOrDefault().destination != null ? rsv.FirstOrDefault().destination : ""),
                            CertificateNumber = rsv.FirstOrDefault().certificateNumber != null ? rsv.FirstOrDefault().certificateNumber : "",
                            ArrivalDate = rsv.FirstOrDefault().arrivalDate != null ? rsv.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            DepartureDate = rsv.FirstOrDefault().departureDate != null ? rsv.FirstOrDefault().departureDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            NumberNights = rsv.FirstOrDefault().totalNights != null ? rsv.FirstOrDefault().totalNights.ToString() : "",
                            OptionTypes = categories,
                            Options = options,
                            SalesVolume = payments > 0 ? Decimal.Round(payments, 2).ToString() : Decimal.Round(0, 2).ToString(),
                            Paid = true
                        });
                    }

                    if (groupByConfirmation.Count() > 0)
                    {
                        var chart = new List<KeyValuePair<string, string>>();
                        foreach (var a in optionsArr)
                        {
                            chart.Add(new KeyValuePair<string, string>(a.Key, a.Value.ToString()));
                        }

                        list.Last().Chart = new JavaScriptSerializer().Serialize(chart);
                    }
                }
            }

            return list;
        }

        //sales by agent
        /// <summary>
        /// Get Agents Sales amount, including refunds ONLY if there are payments on the same range and if refund its also into the range
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        //public List<PreArrivalReportModel> SearchPreArrivalWeeklyBudgetPerPurchaseReport(PreArrivalReport.SearchPreArrivalReport model)
        public List<PreArrivalReportModel> SearchPreArrivalSalesByAgentReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var usersLength = model.Search_AssignedToUsers != null ? model.Search_AssignedToUsers.Count() : 0;
            var users = model.Search_AssignedToUsers ?? model.Search_DrpUsers.Where(m => m.Text.IndexOf("Locked") == -1).Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var isExternal = model.Search_SortByResort;//db.tblUsers_SysWorkGroups.Count(m => m.userID == session.UserID) > 1 && users.Count() == 1;
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);
            var leadStatusExcluded = new int?[] { 4, 10 };//Cancelled, Duplicate
            var isAgent = GeneralFunctions.IsUserInRole("Agent", null, true);
            var _query = new List<Guid>();
            var q = new List<ResortConnectOptionals>();
            //if (terminals.Contains(10))
            //{
            //    var resortNumbers = db.tblPlaces.Where(m => resorts.Contains(m.placeID)).Select(m => m.resortConnectResortID).ToList();
            //    q = PublicDataModel.GetResortConnectOptionals(resortNumbers, iDate, fDate);
            //    var hc = q.Select(m => m.ConfirmationNumber).ToList();

            //    using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            //    {
            //        _query = (from rsv in db.tblReservations
            //                  join lead in db.tblLeads on rsv.leadID equals lead.leadID
            //                  join place in db.tblPlaces on rsv.placeID equals place.placeID
            //                  where lead.terminalID == 10
            //                  && resortNumbers.Contains(place.resortConnectResortID)
            //                  //&& resorts.Contains(rsv.placeID)
            //                  && lead.isTest != true
            //                  && lead.leadStatusID != 10
            //                  && lead.bookingStatusID == 16
            //                  && ((!isAgent && usersLength == 0) || users.Contains(lead.assignedToUserID))
            //                  && (hc.Contains(rsv.hotelConfirmationNumber) || hc.Contains(rsv.frontOfficeCertificateNumber))
            //                  //select lead.leadID).Distinct().ToList();
            //                  select rsv.reservationID).Distinct().ToList();
            //        scope.Complete();
            //    }
            //}
            //else
            {
                using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
                {
                    _query = (from lead in db.tblLeads
                              join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                              join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID
                              where terminals.Contains(lead.terminalID)
                              && lead.isTest != true
                              && lead.leadStatusID != 10//duplicate
                                                        //&& !leadStatusExcluded.Contains(lead.leadStatusID)
                              && ((!isAgent && usersLength == 0) || users.Contains(lead.assignedToUserID))
                              && iDate <= p.dateSaved && p.dateSaved <= fDate
                              && resorts.Contains(rsv.placeID)
                              //select lead.leadID).Distinct().ToList();
                              select rsv.reservationID).Distinct().ToList();
                    scope.Complete();
                }
            }

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join user in db.tblUserProfiles on lead.assignedToUserID equals user.userID
                         //where _query.Contains(lead.leadID)
                         where _query.Contains(rsv.reservationID)
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             lead.assignedToUserID,
                             lead.leadSourceID,
                             lead.tblLeadSources.leadSource,
                             lead.tblLeadStatus.leadStatus,
                             userName = user.firstName + " " + user.lastName,
                             rsv.hotelConfirmationNumber,
                             rsv.frontOfficeCertificateNumber,
                             rsv.tblPlaces.place,
                             rsv.tblPlaces.resortConnectResortID,
                             rsv.tblDestinations.destination,
                             rsv.certificateNumber,
                             rsv.arrivalDate,
                             rsv.departureDate,
                             rsv.totalNights,
                             rsv.foundInFront,
                             rsv.tblReservationStatus.reservationStatus,
                             option = rsv.tblOptionsSold,
                             payments = rsv.tblPaymentDetails.Where(m => iDate <= m.dateSaved && m.dateSaved <= fDate)
                         }).ToList();


            var groupsByUser = query.GroupBy(m => m.assignedToUserID);

            foreach (var user in groupsByUser)
            {
                var alistOptionTypes = new List<KeyValuePair<string, int>>();
                var qq = user.GroupBy(m => m.hotelConfirmationNumber);

                foreach (var i in qq)
                {
                    var categories = "";
                    var options = "";
                    decimal payments = 0;

                    //if (terminals.Contains(10))
                    //{
                    //    var optionsSold = q.Where(m => m.ResortID == i.FirstOrDefault().resortConnectResortID && (m.ConfirmationNumber == i.Key.ToLower() || (i.FirstOrDefault().frontOfficeCertificateNumber != null && m.ConfirmationNumber == i.FirstOrDefault().frontOfficeCertificateNumber.ToLower())));
                    //    foreach (var o in optionsSold.Where(m => m.Quantity != null && m.Quantity > 0))
                    //    {
                    //        options += options.IndexOf(o.ProductName) == -1 ? (options == "" ? "" : ", ") + o.ProductName : "";
                    //        payments += ((decimal)o.Quantity * decimal.Parse(o.BaseCurrencyAmount));
                    //    }
                    //}
                    //else
                    {
                        foreach (var x in i.Where(m => m.option.Count() > 0).Select(m => m.option))
                        {
                            foreach (var a in x)
                            {
                                if (a.deleted != true && a.totalPaid != null && decimal.Parse(a.totalPaid) != 0)
                                {
                                    var optionType = a.tblOptionTypes.optionType;
                                    var option = a.tblOptions.optionName;
                                    categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                                    options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + a.tblOptions.optionName : "";
                                }
                            }
                        }
                        //decimal payments = 0;
                        foreach (var x in i.Where(m => m.payments.Count(z => z.deleted != true && z.tblMoneyTransactions.errorCode == "0") > 0).Select(m => m.payments.Where(x => x.deleted != true && x.tblMoneyTransactions.errorCode == "0")))
                        {
                            foreach (var p in x)
                            {
                                if (p.tblMoneyTransactions.transactionTypeID == 1)
                                {
                                    payments += p.amount;
                                }
                                else
                                {
                                    if (x.Count(m => m.tblMoneyTransactions.transactionTypeID == 1 && m.deleted != true && m.tblMoneyTransactions.errorCode == "0" && iDate <= m.dateSaved && m.dateSaved <= fDate) > 0)//if (iDate <= p.dateSaved && p.dateSaved <= fDate)
                                    {
                                        payments -= p.amount;
                                    }
                                }
                            }
                        }
                    }

                    if (payments > 0)
                    {
                        list.Add(new PreArrivalReportModel()
                        {
                            IsExternal = isExternal,
                            AssignedToUserID = user.Key.ToString(),
                            AssignedToUser = i.FirstOrDefault().userName,
                            LeadSourceID = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSourceID.ToString() : "",
                            LeadSource = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSource : "Not Classified",
                            FirstName = i.FirstOrDefault().firstName,
                            LastName = i.FirstOrDefault().lastName,
                            ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                            Resort = i.FirstOrDefault().place + " " + i.FirstOrDefault().destination,
                            CertificateNumber = i.FirstOrDefault().certificateNumber,
                            ArrivalDate = i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                            DepartureDate = i.FirstOrDefault().departureDate != null ? i.FirstOrDefault().departureDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "",
                            NumberNights = i.FirstOrDefault().totalNights.ToString(),
                            ReservationStatus = i.FirstOrDefault().reservationStatus,
                            LeadStatus = i.FirstOrDefault().leadStatus,
                            OptionTypes = categories,
                            Options = options,
                            SalesVolume = payments > 0 ? Decimal.Round(payments, 2).ToString() : Decimal.Round(0, 2).ToString(),
                            Paid = true
                        });
                    }
                }
            }

            return list;
        }

        //weekly commissions
        public List<PreArrivalReportModel> SearchPreArrivalWeeklyCommissionsReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? model.Search_DrpResorts.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var users = model.Search_AssignedToUsers ?? model.Search_DrpUsers.Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);
            var commissionSchema = db.tblCommissions.Where(m => terminals.Contains(m.terminalID) && m.fromDate <= iDate && (m.toDate == null || m.toDate >= fDate));
            var jobPositions = db.tblUsers_JobPositions.Where(m => users.Contains(m.userID) && m.toDate == null);

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID into lead_rsv
                         from rsv in lead_rsv.DefaultIfEmpty()
                         join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID into rsv_p//new
                         from p in rsv_p.DefaultIfEmpty()
                         join mt in db.tblMoneyTransactions on p.moneyTransactionID equals mt.moneyTransactionID into p_mt
                         from mt in p_mt.DefaultIfEmpty()
                         join user in db.tblUserProfiles on lead.assignedToUserID equals user.userID into lead_user
                         from user in lead_user.DefaultIfEmpty()
                         where terminals.Contains(lead.terminalID)
                         && lead.isTest != true
                          && lead.leadStatusID != 10//duplicate
                          && iDate <= p.dateSaved && p.dateSaved <= fDate
                          && resorts.Contains(rsv.placeID)
                          && users.Contains(lead.assignedToUserID)
                         select new
                         {
                             lead.firstName,
                             lead.lastName,
                             lead.assignedToUserID,
                             lead.leadSourceID,
                             lead.tblLeadSources.leadSource,
                             userName = user.firstName + " " + user.lastName,
                             rsv.hotelConfirmationNumber,
                             rsv.tblPlaces.place,
                             rsv.tblDestinations.destination,
                             rsv.arrivalDate,
                             rsv.totalNights,
                             option = rsv.tblOptionsSold,
                             payments = rsv.tblPaymentDetails.Where(m => iDate <= m.dateSaved && m.dateSaved <= fDate)
                         }).ToList();

            var groupsByUser = query.GroupBy(m => m.assignedToUserID);

            foreach (var user in groupsByUser)
            {
                var qq = user.GroupBy(m => m.hotelConfirmationNumber).OrderBy(m => m.Key);
                var jobPositionID = jobPositions.FirstOrDefault(m => m.userID == user.Key).jobPositionID;

                if (commissionSchema.Count(m => m.jobPositionID == jobPositionID) > 0)
                {
                    foreach (var i in qq)
                    {
                        var categories = "";
                        var options = "";
                        var optionsSold = i.FirstOrDefault().option.Where(m => m.deleted != true && m.totalPaid != null && m.totalPaid != "0");
                        var paymentsData = i.FirstOrDefault().payments.Where(m => m.deleted != true && m.tblMoneyTransactions.errorCode == "0");
                        decimal payments = 0;
                        decimal percentage = commissionSchema.Where(m => m.jobPositionID == jobPositionID).OrderByDescending(m => m.fromDate).FirstOrDefault().commissionPercentage;

                        foreach (var a in optionsSold)
                        {
                            var optionType = a.tblOptionTypes.optionType;
                            var option = a.tblOptions.optionName;
                            var quantity = a.quantity;
                            categories += categories.IndexOf(optionType) == -1 ? (categories == "" ? "" : ",") + a.tblOptionTypes.optionType : "";
                            options += options.IndexOf(option) == -1 ? (options == "" ? "" : ",") + quantity + " " + a.tblOptions.optionName : "";
                        }
                        foreach (var p in paymentsData)
                        {
                            decimal commission = Decimal.Round((((p.tblMoneyTransactions.transactionTypeID == 1 ? p.amount : (p.amount * -1)) * percentage) / 100), 2);
                            list.Add(new PreArrivalReportModel()
                            {
                                AssignedToUserID = user.Key.ToString(),
                                AssignedToUser = i.FirstOrDefault().userName,
                                CommissionPercentage = percentage.ToString(),
                                LeadSourceID = i.FirstOrDefault().leadSourceID != null ? i.FirstOrDefault().leadSourceID.ToString() : "",
                                LeadSource = i.FirstOrDefault().leadSource != null ? i.FirstOrDefault().leadSource : "Not Classified",
                                FirstName = i.FirstOrDefault().firstName,
                                LastName = i.FirstOrDefault().lastName,
                                ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                                Resort = i.FirstOrDefault().place + " " + i.FirstOrDefault().destination,
                                ArrivalDate = i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                InvoiceNumber = p.tblMoneyTransactions.authCode ?? "",
                                PurchaseDate = p.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                NumberNights = i.FirstOrDefault().totalNights.ToString(),
                                OptionTypes = categories,
                                Options = options,
                                SalesVolume = Decimal.Round((p.tblMoneyTransactions.transactionTypeID == 1 ? p.amount : (p.amount * -1)), 2).ToString(),
                                CommissionVolume = commission.ToString(),
                                Paid = true
                            });
                        }
                    }
                }
            }

            var volumeSold = list.Sum(m => decimal.Parse(m.SalesVolume));
            var commissions = commissionSchema.Where(m => m.@override);
            var positions = commissions.Select(m => m.jobPositionID);
            var supervisors = from u in db.tblUserProfiles
                              join jp in db.tblUsers_JobPositions on u.userID equals jp.userID
                              join sw in db.tblUsers_SysWorkGroups on u.userID equals sw.userID
                              where sw.sysWorkGroupID == session.WorkGroupID
                              && (jp.toDate == null || jp.toDate >= fDate)
                              && positions.Contains(jp.jobPositionID)
                              select new
                              {
                                  u.userID,
                                  u.firstName,
                                  u.lastName,
                                  jp.jobPositionID
                              };

            foreach (var i in supervisors)
            {
                list.Add(new PreArrivalReportModel()
                {
                    AssignedToUserID = i.userID.ToString(),
                    AssignedToUser = i.firstName + " " + i.lastName,
                    CommissionVolume = Decimal.Round((volumeSold * (commissions.FirstOrDefault(m => m.jobPositionID == i.jobPositionID).commissionPercentage)) / 100, 2).ToString()
                });
            }


            return list;
        }

        public List<PreArrivalReportModel> SearchPreArrivalCommissionsReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            model.Search_Resorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var resorts = model.Search_Resorts;
            var users = model.Search_AssignedToUsers ?? model.Search_DrpUsers.Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);

            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID
                         where terminals.Contains(lead.terminalID)
                         && lead.isTest != true
                         && lead.leadStatusID != 10//duplicate
                         && users.Contains(lead.assignedToUserID)
                         && iDate <= p.dateSaved && p.dateSaved <= fDate
                         && resorts.Contains(rsv.placeID)
                         select rsv).ToList();

            var groupsByUser = query.GroupBy(m => m.tblLeads.assignedToUserID);

            foreach (var user in groupsByUser)
            {
                var alistOptionTypes = new List<KeyValuePair<string, int>>();
                var groupByConfirmation = user.GroupBy(m => m.hotelConfirmationNumber);

                foreach (var i in groupByConfirmation)
                {
                    var listPayments = new List<GenericStringModel>();
                    var categories = "";
                    var options = "";
                    var lead = i.FirstOrDefault().tblLeads;

                    var paymentData = i.Count(m => m.tblPaymentDetails.Count() > 0) > 0 ? i.FirstOrDefault(m => m.tblPaymentDetails.Count() > 0).tblPaymentDetails.Where(m => m.deleted != true && (iDate <= m.dateSaved && m.dateSaved <= fDate) && m.tblMoneyTransactions.errorCode == "0") : null;
                    //var paymentData = i.FirstOrDefault(m => m.tblPaymentDetails.Count() > 0).tblPaymentDetails.Where(m => m.deleted != true && (iDate <= m.dateSaved && m.dateSaved <= fDate) && m.tblMoneyTransactions.errorCode == "0");
                    if (paymentData != null)
                    {
                        foreach (var a in paymentData)
                        {
                            listPayments.Add(new GenericStringModel()
                            {
                                Generic_Property1 = a.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                                Generic_Property2 = a.tblMoneyTransactions.authCode ?? "",
                                Generic_Property3 = Decimal.Round((a.tblMoneyTransactions.transactionTypeID == 1 ? a.amount : (a.amount * -1)), 2).ToString(),
                                Generic_Property4 = a.reservationID.ToString(),
                                Generic_Property5 = a.paymentType.ToString()
                            });
                        }
                    }

                    var optionsSold = i.Count(m => m.tblOptionsSold.Count() > 0) > 0 ? i.Where(m => m.tblOptionsSold.Count() > 0).Select(m => m.tblOptionsSold.Where(x => x.deleted != true && x.totalPaid != null && x.totalPaid != "0")) : null;

                    if (optionsSold != null)
                    {
                        foreach (var opt in optionsSold)
                        {
                            foreach (var o in opt)
                            {
                                categories += categories.IndexOf(o.tblOptionTypes.optionType) == -1 ? (categories == "" ? "" : ", ") + o.tblOptionTypes.optionType : "";
                                options += options.IndexOf(o.tblOptions.optionName) == -1 ? (options == "" ? "" : ", ") + o.tblOptions.optionName : "";
                            }

                            foreach (var a in opt.GroupBy(m => m.tblOptionTypes.optionType))
                            {
                                var index = alistOptionTypes.FindIndex(m => m.Key == a.Key);

                                if (listPayments.Where(m => m.Generic_Property4 == i.FirstOrDefault().reservationID.ToString()).Sum(m => decimal.Parse(m.Generic_Property3)) > 0)
                                {
                                    if (index != -1)
                                    {
                                        alistOptionTypes[index] = new KeyValuePair<string, int>(a.Key, alistOptionTypes[index].Value + a.Count());
                                    }
                                    else
                                    {
                                        alistOptionTypes.Add(new KeyValuePair<string, int>(a.Key, a.Count()));
                                    }
                                }
                            }
                        }
                    }

                    list.Add(new PreArrivalReportModel()
                    {
                        AssignedToUserID = user.Key.ToString(),
                        AssignedToUser = model.Search_DrpUsers.Single(m => Guid.Parse(m.Value) == lead.assignedToUserID).Text,
                        LeadSourceID = lead.leadSourceID != null ? lead.leadSourceID.ToString() : "",
                        //LeadSource = lead.leadSourceID != null ? model.Search_DrpLeadSources.Single(m => m.Value == lead.leadSourceID.ToString()).Text : "Not Classified",
                        LeadSource = lead.leadSourceID != null ? model.Search_DrpLeadSources.Count(m => m.Value == lead.leadSourceID.ToString()) > 0 ? model.Search_DrpLeadSources.Single(m => m.Value == lead.leadSourceID.ToString()).Text : "Not Classified" : "Not Classified",
                        FirstName = lead.firstName,
                        LastName = lead.lastName,
                        ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                        Resort = model.Search_DrpResorts.Single(m => m.Value == i.FirstOrDefault().placeID.ToString()).Text,// i.FirstOrDefault().place + " " + i.FirstOrDefault().destination,
                        ArrivalDate = i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                        NumberNights = i.FirstOrDefault().totalNights.ToString(),
                        OptionTypes = categories,
                        Options = options,
                        aListOptionTypes = alistOptionTypes,
                        ListPayments = listPayments,
                        Paid = true
                    });
                }
            }
            return list.OrderBy(m => m.FirstName).ToList();
        }

        //real sales
        //public List<PreArrivalReportModel> SearchPreArrivalSalesReport(PreArrivalReport.SearchPreArrivalReport model)
        public List<PreArrivalReportModel> _SearchPreArrivalCommissionsReport(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            model.Search_Resorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var resorts = model.Search_Resorts;
            var users = model.Search_AssignedToUsers ?? model.Search_DrpUsers.Select(m => (Guid?)Guid.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = DateTime.Parse(model.Search_I_PurchaseDate);
            var fDate = DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1);

            var query = from lead in db.tblLeads
                        join rsv in db.tblReservations on lead.leadID equals rsv.leadID //into lead_rsv
                        //from lead in lead_rsv.DefaultIfEmpty()
                        join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID
                        where terminals.Contains(lead.terminalID)
                         //&& lead.isTest == false
                         && lead.isTest != true
                         && lead.leadStatusID != 10//duplicate
                         && (iDate <= p.dateSaved && p.dateSaved <= fDate)
                         && resorts.Contains(rsv.placeID)
                         && users.Contains(lead.assignedToUserID)
                        select rsv;

            var groupsByUser = query.GroupBy(m => m.tblLeads.assignedToUserID);

            foreach (var user in groupsByUser)
            {
                var alistOptionTypes = new List<KeyValuePair<string, int>>();
                var qq = user.GroupBy(m => m.hotelConfirmationNumber).OrderBy(m => m.Key);

                foreach (var i in qq)
                {
                    var listPayments = new List<GenericStringModel>();
                    var lead = i.FirstOrDefault().tblLeads;
                    var categories = "";
                    var options = "";
                    var optionsSold = i.FirstOrDefault().tblOptionsSold.Where(m => m.deleted != true && m.totalPaid != null && m.totalPaid != "0");
                    var paymentsData = i.FirstOrDefault().tblPaymentDetails.Where(m => m.deleted != true && m.tblMoneyTransactions.errorCode == "0" && (iDate <= m.dateSaved && m.dateSaved <= fDate));
                    decimal payments = 0;

                    var cosa = optionsSold.Select(m => new { m.reservationID, m.tblOptionTypes.optionType, m.tblOptions.optionName, m.quantity });

                    foreach (var a in paymentsData)
                    {
                        listPayments.Add(new GenericStringModel()
                        {
                            Generic_Property1 = a.dateSaved.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                            Generic_Property2 = a.tblMoneyTransactions.authCode ?? "",
                            Generic_Property3 = Decimal.Round((a.tblMoneyTransactions.transactionTypeID == 1 ? a.amount : (a.amount * -1)), 2).ToString(),
                            Generic_Property4 = a.reservationID.ToString(),
                            Generic_Property5 = a.paymentType.ToString()
                        });
                    }

                    foreach (var a in cosa.GroupBy(m => m.optionType))
                    {
                        var index = alistOptionTypes.FindIndex(m => m.Key == a.Key);
                        categories += (categories == "" ? "" : ",") + a.Count() + " " + a.Key;
                        foreach (var x in a)
                        {
                            options += options.IndexOf(x.optionName) == -1 ? (options == "" ? "" : ",") + x.quantity + " " + x.optionName : "";
                        }
                        if (listPayments.Where(m => m.Generic_Property4 == i.FirstOrDefault().reservationID.ToString()).Sum(m => decimal.Parse(m.Generic_Property3)) > 0)
                        {
                            if (index != -1)
                            {
                                alistOptionTypes[index] = new KeyValuePair<string, int>(a.Key, alistOptionTypes[index].Value + a.Count());
                            }
                            else
                            {
                                alistOptionTypes.Add(new KeyValuePair<string, int>(a.Key, a.Count()));
                            }
                        }
                    }

                    list.Add(new PreArrivalReportModel()
                    {
                        AssignedToUserID = user.Key.ToString(),
                        AssignedToUser = model.Search_DrpUsers.Single(m => Guid.Parse(m.Value) == lead.assignedToUserID).Text,
                        LeadSourceID = lead.leadSourceID != null ? lead.leadSourceID.ToString() : "",
                        LeadSource = lead.leadSourceID != null ? model.Search_DrpLeadSources.Single(m => m.Value == lead.leadSourceID.ToString()).Text : "Not Classified",
                        FirstName = lead.firstName,
                        LastName = lead.lastName,
                        ConfirmationNumber = i.FirstOrDefault().hotelConfirmationNumber,
                        Resort = model.Search_DrpResorts.Single(m => m.Value == i.FirstOrDefault().placeID.ToString()).Text,// i.FirstOrDefault().place + " " + i.FirstOrDefault().destination,
                        ArrivalDate = i.FirstOrDefault().arrivalDate.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture),
                        NumberNights = i.FirstOrDefault().totalNights.ToString(),
                        OptionTypes = categories,
                        Options = options,
                        aListOptionTypes = alistOptionTypes,
                        ListPayments = listPayments,
                        Paid = true
                    });

                }
            }

            return list.OrderBy(m => m.FirstName).ToList();
        }

        public List<PreArrivalWeeklyReportResults> SearchNewPreArrivalReportingReport(SearchPreArrivalWeeklyReportModel model)
        {
            DateTime iDate = DateTime.Parse(model.Search_I_ArrivalDate);
            DateTime lastDay = DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1);
            DateTime pwiDate = iDate.AddDays(-7);
            DateTime pwfDate = iDate.AddDays(-1);
            DateTime pyiDate = iDate.AddYears(-1);
            DateTime pyfDate = lastDay.AddYears(-1);

            var listResults = new List<PreArrivalWeeklyReportResults>();
            for (var i = 0; i < 3; i++)
            {
                if (i == 0)
                {
                    listResults.Concat(SearchPreArrivalReportingReport(model));
                }
                else if (i == 1)
                {
                    model.Search_I_ArrivalDate = pwiDate.ToString("yyyy-MM-dd");
                    model.Search_F_ArrivalDate = pwfDate.ToString("yyyy-MM-dd");
                    var _results = SearchPreArrivalReportingReport(model);
                    //_results.
                    listResults.Concat(SearchPreArrivalReportingReport(model));
                }
                else if (i == 2)
                {
                    model.Search_I_ArrivalDate = pyiDate.ToString("yyyy-MM-dd");
                    model.Search_F_ArrivalDate = pyfDate.ToString("yyyy-MM-dd");
                    listResults.Concat(SearchPreArrivalReportingReport(model));
                }
            }

            return listResults;
        }



        //reporting
        public List<PreArrivalWeeklyReportResults> SearchPreArrivalReportingReport(SearchPreArrivalWeeklyReportModel model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalWeeklyReportResults> _results = new List<PreArrivalWeeklyReportResults>();

            var terminals = model.Search_Terminals != null && model.Search_Terminals.Count() > 0 ? model.Search_Terminals.Select(m => (long)m).ToArray() : session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var modelResorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            //var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var sources = model.Search_LeadSources ?? new long?[] { };
            var leadStatusExcluded = new int?[] { 4, 10, 35 };//Cancelled, Duplicate, No Show
            var bsNotContacted = new int?[] { 10, 15, 18, 25 };//not contacted, not contactable, email sent, left voice message
            var iDate = DateTime.Parse(model.Search_I_ArrivalDate);
            var lastDay = DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1);
            var _iDate = iDate;
            DateTime fDate;

            var item = new PreArrivalWeeklyReportResults();
            var _list = new List<ResultsPerResort>();
            var counter = 0;

            item.Range = iDate.ToString("yyyy-MM-dd") + " - " + lastDay.ToString("yyyy-MM-dd");
            IQueryable<tblReservations> query;
            using (var scope = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Required, new System.Transactions.TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Snapshot }))
            {
                query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                         where terminals.Contains(lead.terminalID)
                         && lead.isTest != true
                         && rsv.isTest != true
                         && !leadStatusExcluded.Contains(lead.leadStatusID)
                         && (iDate <= rsv.arrivalDate && rsv.arrivalDate <= lastDay)
                         && modelResorts.Contains(rsv.placeID)
                         && (sources.Count() == 0 || sources.Contains(lead.leadSourceID))
                         select rsv).Distinct();
                scope.Complete();
            }

            var groupsPerResort = query.ToList().GroupBy(m => m.placeID);
            var llist = new List<ResultsPerResort>();
            var rescomList = new List<tblReservations>();
            foreach (var resort in groupsPerResort)
            {
                List<PreArrivalWeeklyReportModel> list = new List<PreArrivalWeeklyReportModel>();
                var groupsByConfirmation = resort.Where(m => m.hotelConfirmationNumber != null).GroupBy(m => m.hotelConfirmationNumber.Trim());
                var resortName = model.Search_DrpResorts.FirstOrDefault(m => long.Parse(m.Value) == resort.Key).Text;
                var leadSourcesCounter = new Dictionary<string, int>();
                List<PreArrivalWeeklyReportModel> listt = new List<PreArrivalWeeklyReportModel>();

                foreach (var _arrival in groupsByConfirmation)
                {
                    var listItem = new PreArrivalWeeklyReportModel();
                    var leadSources = _arrival.Where(m => m.reservationStatusID == null || m.reservationStatusID != 3).GroupBy(m => m.tblLeads.leadSourceID);
                    if (leadSources.Count() > 0)
                    {
                        if (leadSources.Count() > 1)//diferent lead sources under same confirmation number
                        {
                            if (leadSources.Count(m => m.Any(x => x.tblLeads.leadSourceID != null && x.tblLeads.tblLeadSources.leadSource == "Member")) > 0)
                            {
                                listItem.LeadSourceID = leadSources.Where(m => m.Count(x => x.tblLeads.leadSourceID != null && x.tblLeads.tblLeadSources.leadSource == "Member") > 0).FirstOrDefault().FirstOrDefault().tblLeads.leadSourceID.ToString();
                                listItem.LeadSource = "Member";
                            }
                            else
                            {
                                //caso de error. averiguar cómo reportar
                                listItem.LeadSource = "Not Defined";
                                listItem.LeadSourceID = null;
                            }
                        }
                        else
                        {
                            if (leadSources.FirstOrDefault().FirstOrDefault().tblLeads.leadSourceID != null)
                            {
                                var ls = leadSources.FirstOrDefault().FirstOrDefault().tblLeads.leadSourceID;
                                if (model.Search_Expanded == false && (ls == 4 || ls == 5 || ls == 22))//Exchange, Guest Of Member, Trial Member
                                {
                                    ls = 15;
                                }
                                listItem.LeadSource = model.Search_DrpLeadSources.Count(m => long.Parse(m.Value) == ls) > 0 ? model.Search_DrpLeadSources.FirstOrDefault(m => long.Parse(m.Value) == ls).Text : "Not Defined";
                                listItem.LeadSourceID = ls.ToString();
                            }
                            else
                            {
                                listItem.LeadSource = "Not Defined";
                                listItem.LeadSourceID = null;
                            }
                        }
                        listItem.ConfirmationNumber = _arrival.Key.ToLower();
                        listItem.CertificateNumber = _arrival.Where(m => m.frontOfficeCertificateNumber != null).Select(m => m.frontOfficeCertificateNumber.ToLower()).ToList();
                        listItem.CertificateNumber.Add(_arrival.Key);
                        listItem.TotalArrivals = "1";
                        listItem.NotAllowed = "0";
                        listItem.Resort = resortName;
                        listItem.RealArrivals = "1";
                        listItem.NonContactable = _arrival.Count(m => m.tblLeads.bookingStatusID == 15) == _arrival.Count() && _arrival.Count(m => m.tblLeads.bookingStatusID == 15) > 0 ? "1" : "0";
                        listItem.Contactable = (float.Parse(listItem.RealArrivals) - float.Parse(listItem.NonContactable)).ToString();
                        listItem.Contacted = _arrival.Count(m => !bsNotContacted.Contains(m.tblLeads.bookingStatusID)) > 0 ? "1" : "0";
                        var optionsSold = _arrival.Select(m => m.tblOptionsSold.Where(x => x.deleted != true));
                        listItem.ArrivalsTotalSold = "0";
                        listItem.ArrivalsSold = "0";

                        if (optionsSold.Where(m => m.Count(x => x.deleted != true) > 0).Count() > 0)
                        {
                            listItem.ArrivalsTotalSold = optionsSold.Sum(m => m.Sum(x => float.Parse(x.totalPaid))).ToString();
                            listItem.ArrivalsSold = float.Parse(listItem.ArrivalsTotalSold) > 0 ? "1" : "0";
                        }

                        listt.Add(listItem);
                    }
                }

                //if (rescomList.Count() > 0)
                //{
                //    var rcOptionals = PublicDataModel.GetResortConnectOptionals(rescomList);
                //    foreach (var i in rcOptionals.GroupBy(m => m.ConfirmationNumber))
                //    {
                //        decimal sum = i.Sum(m => ((decimal)m.Quantity * decimal.Parse(m.BaseCurrencyAmount)));
                //        if (listt.Where(m => m.CertificateNumber.Contains(i.Key) || m.ConfirmationNumber.Contains(i.Key)).Count() > 0)
                //        {
                //            try
                //            {
                //                var a = listt.FirstOrDefault(m => m.Resort == resortName && m.CertificateNumber.Contains(i.Key));
                //                listt.FirstOrDefault(m => m.Resort == resortName && m.CertificateNumber.Contains(i.Key)).ArrivalsTotalSold = sum.ToString();
                //                listt.FirstOrDefault(m => m.Resort == resortName && m.CertificateNumber.Contains(i.Key)).ArrivalsSold = sum > 0 ? "1" : "0";
                //            }
                //            catch (Exception ex) { }
                //        }
                //        else
                //        {

                //        }
                //    }
                //}

                var listGrouped = listt.GroupBy(m => m.LeadSource);
                foreach (var source in listGrouped)
                {
                    float _totalArrivals = source.Sum(m => float.Parse(m.TotalArrivals));
                    float _realArrivals = source.Sum(m => float.Parse(m.RealArrivals));
                    float _nonContactable = source.Sum(m => float.Parse(m.NonContactable));
                    float _contactable = _realArrivals - _nonContactable;
                    float _contacted = source.Sum(m => float.Parse(m.Contacted));
                    float _arrivalsSold = source.Sum(m => float.Parse(m.ArrivalsSold));
                    float _salesAmount = source.Sum(m => float.Parse(m.ArrivalsTotalSold));

                    var row = new PreArrivalWeeklyReportModel();
                    row.ConfirmationNumber = string.Join(",", source.Select(m => m.ConfirmationNumber));
                    row.TotalArrivals = source.Sum(m => float.Parse(m.TotalArrivals)).ToString();
                    row.NotAllowed = "0";
                    row.Resort = resortName;
                    row.LeadSource = source.Key;
                    row.RealArrivals = source.Sum(m => float.Parse(m.RealArrivals)).ToString();
                    row.NonContactable = source.Sum(m => float.Parse(m.NonContactable)).ToString();
                    row.Contactable = source.Sum(m => float.Parse(m.Contactable)).ToString();
                    row.Contacted = source.Sum(m => float.Parse(m.Contacted)).ToString();
                    row.ContactPenetration = _contactable != 0 ? ReportsCatalogs.Truncate(((_contacted / _contactable) * 100), 2).ToString() : "0.00";
                    row.ArrivalsSold = _arrivalsSold != 0 ? _arrivalsSold.ToString() : "0";
                    row.Penetration = _contactable != 0 ? ReportsCatalogs.Truncate(((_arrivalsSold / _contacted) * 100), 2).ToString() : "0.00";
                    row.ArrivalsTotalSold = _salesAmount.ToString();
                    row.AvgPerContactableArrival = _contactable != 0 ? ReportsCatalogs.Truncate((_salesAmount / _contactable), 2).ToString() : "0.00";
                    row.AvgPerContactedArrival = _contacted != 0 ? ReportsCatalogs.Truncate((_salesAmount / _contacted), 2).ToString() : "0.00";
                    row.AvgPerPurchase = _arrivalsSold != 0 ? ReportsCatalogs.Truncate((_salesAmount / _arrivalsSold), 2).ToString() : "0.00";
                    list.Add(row);
                }

                llist.Add(new ResultsPerResort()
                {
                    Resort = resortName,
                    Results = list
                });
            }
            item.ItemsPerResort = llist;
            _results.Add(item);

            return _results;
        }

        public List<SearchPreArrivalWeeklyReportModel> SearchPreArrivalWeeklyReport(SearchPreArrivalWeeklyReportModel model)
        {
            var list = new List<SearchPreArrivalWeeklyReportModel>();
            var initADate = model.Search_I_ArrivalDate;
            var initFDate = model.Search_F_ArrivalDate;
            foreach (var terminal in model.Search_Terminals)
            {
                model.Search_Terminals = new long?[] { terminal };
                model.Search_I_ArrivalDate = initADate;
                model.Search_F_ArrivalDate = initFDate;
                model.Search_I_PurchaseDate = initADate;
                model.Search_F_PurchaseDate = initFDate;

                var reporting = SearchPreArrivalReportingReport(model);
                var manifest = SearchPreArrivalManifestReport(model);
                var options = SearchPreArrivalOptionsPercentageReport(model);

                model.Search_I_ArrivalDate = DateTime.Parse(initADate).AddYears(-1).ToString();
                model.Search_F_ArrivalDate = DateTime.Parse(initFDate).AddYears(-1).ToString();
                model.Search_I_PurchaseDate = DateTime.Parse(initADate).AddYears(-1).ToString();
                model.Search_F_PurchaseDate = DateTime.Parse(initFDate).AddYears(-1).ToString();

                var reportingLY = SearchPreArrivalReportingReport(model);
                var optionsLY = SearchPreArrivalOptionsPercentageReport(model);

                var item = new SearchPreArrivalWeeklyReportModel();
                item.Terminal = model.Search_DrpTerminals.Single(m => long.Parse(m.Value) == terminal).Text;
                item.Results = reporting;
                item.ResultsLY = reportingLY;
                item.Results1 = manifest;
                item.Results2 = options;
                item.Results2LY = optionsLY;

                list.Add(item);
            }
            return list;
        }

        //prearrival invoices
        public List<PreArrivalReportModel> SearchPreArrivalInvoices(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var accounts = model.Search_MerchantAccount != null ? model.Search_MerchantAccount : ReportDataModel.ReportsCatalogs.FillDrpMerchantAccounts().Select(m => (int?)int.Parse(m.Value));
            var iADate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var fADate = model.Search_F_ArrivalDate != null ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var iPDate = model.Search_I_PurchaseDate != null ? DateTime.Parse(model.Search_I_PurchaseDate) : (DateTime?)null;
            var fPDate = model.Search_F_PurchaseDate != null ? DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var resorts = model.Search_Resorts != null ? model.Search_Resorts : PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();

            var q = from lead in db.tblLeads
                    join rsv in db.tblReservations on lead.leadID equals rsv.leadID
                    join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID
                    join mt in db.tblMoneyTransactions on p.moneyTransactionID equals mt.moneyTransactionID
                    join pl in db.tblPlaces on rsv.placeID equals pl.placeID
                    join d in db.tblDestinations on rsv.destinationID equals d.destinationID
                    where terminals.Contains(lead.terminalID) && lead.leadStatusID != 10
                    && lead.isTest != true
                    && accounts.Contains(mt.merchantAccountID)
                    && ((iADate <= rsv.arrivalDate && rsv.arrivalDate <= fADate) || iADate == null)
                    && ((iPDate <= p.dateSaved && p.dateSaved <= fPDate) || iPDate == null)
                    && resorts.Contains(rsv.placeID)
                    && mt.errorCode == "0"
                    select new
                    {
                        p.paymentType,
                        p.savedByUserID,
                        mt.tblMerchantAccounts.merchantAccountBillingName,
                        mt.authCode,
                        mt.reference,
                        lead.assignedToUserID,
                        p.amount,
                        p.tblCurrencies.currencyCode,
                        mt.transactionTypeID,
                        p.dateSaved,
                        rsv.arrivalDate,
                        rsv.departureDate,
                        rsv.hotelConfirmationNumber,
                        passengersNames = rsv.tblFlights.Count() > 0 ? rsv.tblFlights.Count(m => m.passengersNames != null) > 0 ? rsv.tblFlights.FirstOrDefault(m => m.passengersNames != null).passengersNames : "" : "",
                        lead.firstName,
                        lead.lastName,
                        memberNumber = (lead.tblMemberInfo.Count() > 0 ? lead.tblMemberInfo.FirstOrDefault().memberNumber ?? "" : ""),
                        resort = pl.place + " " + d.destination,
                        rsv.certificateNumber
                    };

            foreach (var i in q)
            {
                var user = model.Search_DrpUsers.Count(m => (Guid?)Guid.Parse(m.Value) == i.assignedToUserID) > 0 ? model.Search_DrpUsers.FirstOrDefault(m => (Guid?)Guid.Parse(m.Value) == i.assignedToUserID).Text : db.tblUserProfiles.Count(m => m.userID == i.assignedToUserID) > 0 ? db.tblUserProfiles.FirstOrDefault(m => m.userID == i.assignedToUserID).firstName + " " + db.tblUserProfiles.FirstOrDefault(m => m.userID == i.assignedToUserID).lastName : "";
                var charge = model.Search_DrpUsers.Count(m => (Guid?)Guid.Parse(m.Value) == i.savedByUserID) > 0 ? model.Search_DrpUsers.FirstOrDefault(m => (Guid?)Guid.Parse(m.Value) == i.savedByUserID).Text : db.tblUserProfiles.Count(m => m.userID == i.savedByUserID) > 0 ? db.tblUserProfiles.FirstOrDefault(m => m.userID == i.savedByUserID).firstName + " " + db.tblUserProfiles.FirstOrDefault(m => m.userID == i.savedByUserID).lastName : "";
                list.Add(new PreArrivalReportModel()
                {
                    TransactionReference = i.reference,
                    PaymentType = GeneralFunctions.PaymentTypes.Single(m => int.Parse(m.Key) == i.paymentType).Value,
                    InvoiceNumber = i.authCode,
                    MerchantAccount = i.merchantAccountBillingName,
                    PricePaid = (i.transactionTypeID == 1 ? "" : "-") + i.amount.ToString() + " " + i.currencyCode,
                    PurchaseDate = i.dateSaved.ToString("yyyy-MM-dd"),
                    ArrivalDate = ((DateTime)i.arrivalDate).ToString("yyyy-MM-dd"),
                    ConfirmationNumber = i.hotelConfirmationNumber,
                    Passengers = i.passengersNames,
                    Resort = i.resort,
                    CertificateNumber = i.certificateNumber,
                    DepartureDate = i.departureDate != null ? i.departureDate.Value.ToString("yyyy-MM-dd") : "",
                    Paid = i.transactionTypeID == 1,
                    AssignedToUser = user,
                    ChargedByUser = charge,
                    MemberNumber = i.memberNumber
                });
            }

            return list;
        }

        //sales per option
        public List<PreArrivalReportModel> SearchPreArrivalSalesByResortOptionType(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();

            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();

            model.Search_Resorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByUser().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var resorts = model.Search_Resorts;
            var users = model.Search_AssignedToUsers ?? new Guid?[] { };
            var uLength = model.Search_AssignedToUsers != null ? model.Search_AssignedToUsers.Count() : 0;
            var sources = model.Search_LeadSources ?? model.Search_DrpLeadSources.Select(m => (long?)long.Parse(m.Value)).ToArray();
            var iDate = model.Search_I_PurchaseDate != null ? DateTime.Parse(model.Search_I_PurchaseDate) : DateTime.MinValue;
            var fDate = model.Search_F_PurchaseDate != null ? DateTime.Parse(model.Search_F_PurchaseDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;
            var resortNames = model.Search_DrpResorts;
            var query = (from lead in db.tblLeads
                         join rsv in db.tblReservations on lead.leadID equals rsv.leadID into lead_rsv
                         from rsv in lead_rsv.DefaultIfEmpty()
                         join p in db.tblPaymentDetails on rsv.reservationID equals p.reservationID into rsv_p//new
                         from p in rsv_p.DefaultIfEmpty()
                         join mt in db.tblMoneyTransactions on p.moneyTransactionID equals mt.moneyTransactionID into p_mt
                         from mt in p_mt.DefaultIfEmpty()
                         where terminals.Contains(lead.terminalID)
                         && lead.isTest != true
                          && lead.leadStatusID != 10//duplicate
                                                    //&& lead.bookingStatusID == 16//sold
                          && (iDate <= p.dateSaved && p.dateSaved <= fDate)
                          && resorts.Contains(rsv.placeID)
                          && (users.Contains(lead.assignedToUserID) || uLength == 0)
                          //&& (model.Search_HotelConfirmationNumber == null || rsv.hotelConfirmationNumber.Contains(model.Search_HotelConfirmationNumber))
                          && (model.Search_HotelConfirmationNumber == null || rsv.hotelConfirmationNumber.Contains(model.Search_HotelConfirmationNumber) || rsv.frontOfficeCertificateNumber.Contains(model.Search_HotelConfirmationNumber))
                         select new
                         {
                             lead.leadSourceID,
                             rsv.reservationID,
                             rsv.hotelConfirmationNumber,
                             lead.tblBookingStatus.bookingStatus,
                             rsv.placeID,
                             mt.authCode,
                             option = rsv.tblOptionsSold,
                             notifications = rsv.tblEmailNotificationLogs
                         }).ToList();

            var groupsByResort = query.GroupBy(m => m.placeID);
            foreach (var resort in groupsByResort)
            {
                var groupsBySource = resort.GroupBy(m => m.leadSourceID);
                var resortName = resortNames.FirstOrDefault(m => m.Value == resort.FirstOrDefault().placeID.ToString()).Text;
                foreach (var source in groupsBySource)
                {
                    var groupedByConfirmation = source.GroupBy(m => m.hotelConfirmationNumber);
                    foreach (var x in groupedByConfirmation)
                    {
                        var notifications = x.FirstOrDefault().notifications;
                        var options = x.FirstOrDefault().option.Where(m => (m.dateDeleted >= iDate && m.dateDeleted <= fDate) || (m.dateSaved >= iDate && m.dateSaved <= fDate));
                        var letters = notifications.Count() > 0 ? notifications.Where(m => m.subject != null && m.subject.IndexOf("Payment") != -1) : null;//.FirstOrDefault(m => m.subject.IndexOf("Payment") != -1) : null;
                        var letter = letters != null && letters.Count() > 0 ? letters.OrderByDescending(m => m.dateSent).FirstOrDefault() : null;

                        foreach (var i in options)
                        {
                            var amount = i.totalPaid;
                            if (((i.dateSaved >= iDate && i.dateSaved <= fDate) && (i.dateDeleted == null || i.dateDeleted > fDate)))
                            {

                            }
                            else if (((i.dateSaved >= iDate && i.dateSaved <= fDate) && (i.dateDeleted != null && i.dateDeleted >= fDate && i.dateDeleted <= fDate)))
                            {
                                amount = "0.00";
                            }
                            else if (((i.dateSaved < iDate && (i.dateDeleted != null && i.dateDeleted >= iDate && i.dateDeleted <= fDate))))
                            {
                                amount = "-" + Decimal.Round(i.quantity * decimal.Parse(i.optionPrice), 2).ToString();
                            }

                            list.Add(new PreArrivalReportModel()
                            {
                                OptionTypes = i.optionTypeID != null ? i.tblOptionTypes.optionType : "",
                                OptionsQuantity = i.quantity.ToString(),
                                Options = i.tblOptions.optionName,
                                InvoiceNumber = string.Join(", ", x.Where(m => m.authCode != null).Select(m => m.authCode).Distinct()),
                                OptionsTotal = amount,
                                PricePaid = i.optionPrice ?? "",
                                Resort = resortName,
                                LeadSourceID = source.Key != null && source.Key != 0 ? source.Key.ToString() : "",
                                LeadSource = source.Key != null && source.Key != 0 ? i.tblReservations.tblLeads.tblLeadSources.leadSource : "Not Defined",
                                FirstName = i.tblReservations.tblLeads.firstName,
                                LastName = i.tblReservations.tblLeads.lastName,
                                ConfirmationNumber = x.Key,
                                ReservationID = x.FirstOrDefault().reservationID.ToString(),
                                EmailNotificationID = letter != null ? letter.emailNotificationID.ToString() : "",
                                TransactionID = letter != null ? letter.trackingID.ToString() : "",
                                EmailBody = letter != null ? letter.emailPreviewJson : ""
                            });
                        }
                    }
                }
            }

            return list;
        }

        public List<PreArrivalReportModel> SearchTransportations(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();
            List<PreArrivalReportModel> listArrivals = new List<PreArrivalReportModel>();
            List<PreArrivalReportModel> listDepartures = new List<PreArrivalReportModel>();

            var leadStatusExcluded = new int?[] { 10, 4 };
            var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var aiDate = model.Search_DateType == 1 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var afDate = model.Search_DateType == 1 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var diDate = model.Search_DateType == 2 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var dfDate = model.Search_DateType == 2 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var piDate = model.Search_DateType == 3 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var pfDate = model.Search_DateType == 3 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var airlines = MasterChartDataModel.LeadsCatalogs.FillDrpAirlines();

            var query = (from r in db.tblReservations
                         join l in db.tblLeads on r.leadID equals l.leadID
                         join o in db.tblOptionsSold on r.reservationID equals o.reservationID
                         join p in db.tblPaymentDetails on r.reservationID equals p.reservationID
                         join ot in db.tblOptionTypes on o.optionTypeID equals ot.optionTypeID
                         join f in db.tblFlights on r.reservationID equals f.reservationID
                         where l.isTest != true
                         && terminals.Contains(l.terminalID)
                         && !leadStatusExcluded.Contains(l.leadStatusID)
                         && l.bookingStatusID == 16
                         && (r.reservationStatusID == null || r.reservationStatusID != 3)
                         && resorts.Contains(r.placeID)
                         && o.deleted != true
                         && ot.optionType.IndexOf("Transportation") != -1
                         && (aiDate == null || (f.flightTypeID == 1 && (aiDate <= f.flightDateTime && f.flightDateTime <= afDate)))
                         && (diDate == null || (f.flightTypeID == 2 && (diDate <= f.flightDateTime && f.flightDateTime <= dfDate)))
                         && (piDate == null || (piDate <= p.dateSaved && p.dateSaved <= pfDate))
                         select r
                        ).Distinct();


            foreach (var i in query)
            {
                var lead = i.tblLeads;
                var flights = model.Search_DateType != 3 ? i.tblFlights.Where(m => m.flightTypeID == model.Search_DateType) : i.tblFlights;
                flights = flights.Where(f => (aiDate == null || (f.flightTypeID == 1 && (aiDate <= f.flightDateTime && f.flightDateTime <= afDate))) && (diDate == null || (f.flightTypeID == 2 && (diDate <= f.flightDateTime && f.flightDateTime <= dfDate))));
                var str = "";
                var _options = i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true);
                var options = string.Join("<br />", _options.Select(m => m.quantity + " " + m.tblOptions.optionName + (m.comments != null ? "(" + m.comments + ")" : "")));

                var date = "";
                if (model.Search_DateType == 3 && i.tblPaymentDetails.Count(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)) > 0)
                {
                    date = i.tblPaymentDetails.FirstOrDefault(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)).dateSaved.ToString("yyyy-MM-dd");
                    foreach (var x in _options)
                    {
                        if (x.dateSaved >= piDate && x.dateSaved <= pfDate)
                        {
                            options += "<br /><span style=\"color:red;\">" + x.quantity + " " + x.tblOptions.optionName + (x.comments != null ? "(" + x.comments + ")" : "") + "</span>";
                        }
                        else
                        {
                            options += "<br /><span>" + x.quantity + " " + x.tblOptions.optionName + (x.comments != null ? "(" + x.comments + ")" : "") + "</span>";
                        }
                    }

                    options = string.Join("<br />", i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true).Select(m => m.quantity + " " + m.tblOptions.optionName + (m.comments != null ? "(" + m.comments + ")" : "")));
                }

                foreach (var a in flights)
                {
                    date = date == "" && model.Search_DateType != 3 ? a.flightDateTime.ToString("yyyy-MM-dd") : date;
                    if (options != "" && date != "")
                    {
                        list.Add(new PreArrivalReportModel()
                        {
                            Terminals = terminals,
                            ArrivalDate = date,
                            FirstName = a.passengersNames,
                            LeadSource = lead.tblLeadSources.leadSource,
                            ConfirmationNumber = i.hotelConfirmationNumber,
                            CertificateNumber = i.certificateNumber,
                            Resort = model.Search_DrpResorts.Single(m => m.Value == i.placeID.ToString()).Text,
                            Options = options,
                            SalesVolume = _options.Sum(m => decimal.Parse(m.totalPaid??"0")).ToString(),
                            Airline = airlines.Single(m => m.Value == a.airLineID.ToString()).Text,
                            FlightType = a.flightTypeID.ToString(),
                            FlightNumber = a.flightNumber,
                            FlightDate = a.flightDateTime != null ? a.flightDateTime.ToString("yyyy-MM-dd") : "",
                            FlightTime = a.flightDateTime != null ? a.flightDateTime.ToString("HH:mm") : "",
                            PickUpTime = a.pickupTime != null ? ((TimeSpan)a.pickupTime).ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "",
                            NumberOfPassengers = a.passengers.ToString(),
                            FlightComments = a.flightComments ?? ""
                        });
                    }
                }
            }

            return list;
        }

        //trasportation
        public List<PreArrivalReportModel> _SearchTransportations(PreArrivalReport.SearchPreArrivalReport model)
        {
            ePlatEntities db = new ePlatEntities();
            List<PreArrivalReportModel> list = new List<PreArrivalReportModel>();
            List<PreArrivalReportModel> listArrivals = new List<PreArrivalReportModel>();
            List<PreArrivalReportModel> listDepartures = new List<PreArrivalReportModel>();

            var leadStatusExcluded = new int?[] { 10, 4 };
            var terminals = session.Terminals.Split(',').Select(m => (long?)long.Parse(m)).ToArray();
            var resorts = model.Search_Resorts ?? PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();
            var aiDate = model.Search_DateType == 1 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var afDate = model.Search_DateType == 1 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var diDate = model.Search_DateType == 2 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var dfDate = model.Search_DateType == 2 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var piDate = model.Search_DateType == 3 && model.Search_I_ArrivalDate != null && model.Search_I_ArrivalDate != "" ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var pfDate = model.Search_DateType == 3 && model.Search_F_ArrivalDate != null && model.Search_F_ArrivalDate != "" ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;
            var airlines = MasterChartDataModel.LeadsCatalogs.FillDrpAirlines();

            var query = (from r in db.tblReservations
                         join l in db.tblLeads on r.leadID equals l.leadID
                         join o in db.tblOptionsSold on r.reservationID equals o.reservationID
                         join p in db.tblPaymentDetails on r.reservationID equals p.reservationID
                         join ot in db.tblOptionTypes on o.optionTypeID equals ot.optionTypeID
                         join f in db.tblFlights on r.reservationID equals f.reservationID
                         where l.isTest != true
                         && terminals.Contains(l.terminalID)
                         && !leadStatusExcluded.Contains(l.leadStatusID)
                         && l.bookingStatusID == 16
                         && (r.reservationStatusID == null || r.reservationStatusID != 3)
                         && resorts.Contains(r.placeID)
                         && o.deleted != true
                         && ot.optionType.IndexOf("Transportation") != -1
                         && (aiDate == null || (aiDate <= r.arrivalDate && r.arrivalDate <= afDate))
                         && (diDate == null || (diDate <= r.departureDate && r.departureDate <= dfDate))
                         && (piDate == null || (piDate <= p.dateSaved && p.dateSaved <= pfDate))
                         select r
                        ).Distinct();


            foreach (var i in query)
            {
                var lead = i.tblLeads;
                var flights = model.Search_DateType != 3 ? i.tblFlights.Where(m => m.flightTypeID == model.Search_DateType) : i.tblFlights;
                var str = "";
                var options = string.Join("<br />", i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true).Select(m => m.quantity + " " + m.tblOptions.optionName + (m.comments != null ? "(" + m.comments + ")" : "")));

                var date = "";
                if (model.Search_DateType == 3 && i.tblPaymentDetails.Count(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)) > 0)
                {
                    //date = i.tblPaymentDetails.FirstOrDefault(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)).dateSaved.ToString("yyyy-MM-dd");
                    //options = string.Join("<br />", i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true && (m.dateSaved >= piDate && m.dateSaved <= pfDate)).Select(m => m.quantity + " " + m.tblOptions.optionName + (m.comments != null ? "(" + m.comments + ")" : "")));

                    date = i.tblPaymentDetails.FirstOrDefault(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)).dateSaved.ToString("yyyy-MM-dd");
                    foreach (var x in i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true))
                    {
                        if (x.dateSaved >= piDate && x.dateSaved <= pfDate)
                        {
                            options += "<br /><span style=\"color:red;\">" + x.quantity + " " + x.tblOptions.optionName + (x.comments != null ? "(" + x.comments + ")" : "") + "</span>";
                        }
                        else
                        {
                            options += "<br /><span>" + x.quantity + " " + x.tblOptions.optionName + (x.comments != null ? "(" + x.comments + ")" : "") + "</span>";
                        }
                    }

                    options = string.Join("<br />", i.tblOptionsSold.Where(m => m.tblOptionTypes.optionType.IndexOf("Transportation") != -1 && m.deleted != true).Select(m => m.quantity + " " + m.tblOptions.optionName + (m.comments != null ? "(" + m.comments + ")" : "")));
                }
                else
                {
                    date = model.Search_DateType == 1 ? (i.arrivalDate != null ? i.arrivalDate.Value.ToString("yyyy-MM-dd") : "") : model.Search_DateType == 2 ? (i.departureDate != null ? i.departureDate.Value.ToString("yyyy-MM-dd") : "") : "";
                }

                foreach (var a in flights)
                {
                    if (options != "" && date != "")
                    {
                        list.Add(new PreArrivalReportModel()
                        {
                            ArrivalDate = date,
                            FirstName = a.passengersNames,
                            LeadSource = lead.tblLeadSources.leadSource,
                            ConfirmationNumber = i.hotelConfirmationNumber,
                            CertificateNumber = i.certificateNumber,
                            Resort = model.Search_DrpResorts.Single(m => m.Value == i.placeID.ToString()).Text,
                            Options = options,
                            Airline = airlines.Single(m => m.Value == a.airLineID.ToString()).Text,
                            FlightType = a.flightTypeID.ToString(),
                            FlightNumber = a.flightNumber,
                            FlightDate = a.flightDateTime != null ? a.flightDateTime.ToString("yyyy-MM-dd") : "",
                            FlightTime = a.flightDateTime != null ? a.flightDateTime.ToString("HH:mm") : "",
                            PickUpTime = a.pickupTime != null ? ((TimeSpan)a.pickupTime).ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "",
                            NumberOfPassengers = a.passengers.ToString(),
                            FlightComments = a.flightComments ?? ""
                        });
                    }
                }

                //foreach (var a in flights)
                //{
                //    var date = "";
                //    if (model.Search_DateType == 3 && i.tblPaymentDetails.Count(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)) > 0)
                //    {
                //        date = i.tblPaymentDetails.FirstOrDefault(m => m.deleted != true && m.tblMoneyTransactions.transactionTypeID == 1 && (m.dateSaved >= piDate && m.dateSaved <= pfDate)).dateSaved.ToString("yyyy-MM-dd");
                //    }
                //    else
                //    {
                //        date = model.Search_DateType == 1 ? (i.arrivalDate != null ? i.arrivalDate.Value.ToString("yyyy-MM-dd") : "") : model.Search_DateType == 2 ? (i.departureDate != null ? i.departureDate.Value.ToString("yyyy-MM-dd") : "") : "";
                //    }
                //    if (date != "")
                //    {
                //        list.Add(new PreArrivalReportModel()
                //        {
                //            ArrivalDate = date,
                //            FirstName = a.FirstOrDefault().passengersNames,
                //            LeadSource = lead.tblLeadSources.leadSource,
                //            ConfirmationNumber = i.hotelConfirmationNumber,
                //            CertificateNumber = i.certificateNumber,
                //            Resort = model.Search_DrpResorts.Single(m => m.Value == i.placeID.ToString()).Text,
                //            Options = options,
                //            Airline = airlines.Single(m => m.Value == a.FirstOrDefault().airLineID.ToString()).Text,
                //            FlightNumber = a.FirstOrDefault().flightNumber,
                //            //FlightDateTime = a.flightDateTime != null ? (a.flightTypeID == 1 ? "A: " : "D: ") + a.flightDateTime.ToString("yyyy-MM-dd HH:mm") : "",
                //            FlightDate = a.FirstOrDefault().flightDateTime != null ? a.FirstOrDefault().flightDateTime.ToString("yyyy-MM-dd") : "",
                //            FlightTime = a.FirstOrDefault().flightDateTime != null ? a.FirstOrDefault().flightDateTime.ToString("HH:mm") : "",
                //            PickUpTime = a.FirstOrDefault().pickupTime != null ? ((TimeSpan)a.FirstOrDefault().pickupTime).ToString(@"hh\:mm", CultureInfo.InvariantCulture) : "",
                //            NumberOfPassengers = a.FirstOrDefault().passengers.ToString(),
                //            FlightComments = a.FirstOrDefault().flightComments ?? ""
                //        });
                //    }
                //}
            }

            return list;
        }

        //import history
        public List<PreArrivalImportHistory.Response> SearchPreArrivalImportHistory(PreArrivalImportHistory.Search model)
        {
            ePlatEntities db = new ePlatEntities();
            var response = new List<PreArrivalImportHistory.Response>();

            var terminals = new long?[] { 10, 80 };//session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var aIDate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_I_ArrivalDate) : DateTime.MinValue;
            var aFDate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;
            var iIDate = model.Search_I_InputDate != null ? DateTime.Parse(model.Search_I_InputDate) : DateTime.MinValue;
            var iFDate = model.Search_I_InputDate != null ? DateTime.Parse(model.Search_F_InputDate).AddDays(1).AddSeconds(-1) : DateTime.MaxValue;
            var resorts = model.Search_Resorts != null ? model.Search_Resorts : PlaceDataModel.GetResortsByProfile().Select(m => (long?)long.Parse(m.Value)).ToArray();


            var query = from l in db.tblLeads
                        join r in db.tblReservations on l.leadID equals r.leadID
                        join u in db.tblUserProfiles on l.inputByUserID equals u.userID
                        join up in db.tblUserProfiles on l.assignedToUserID equals up.userID into l_up
                        from up in l_up.DefaultIfEmpty()
                        where terminals.Contains(l.terminalID)
                        && resorts.Contains(r.placeID)
                        && (aIDate <= r.arrivalDate && r.arrivalDate <= aFDate)
                        && (iIDate <= l.inputDateTime && l.inputDateTime <= iFDate)
                        && l.inputMethodID == 2
                        && l.isTest != true
                        select new
                        {
                            r.hotelConfirmationNumber,
                            r.frontOfficeCertificateNumber,
                            r.arrivalDate,
                            teamAssigned = l.terminalID == 10 ? "Pre Arrival RC" : l.terminalID == 80 ? "Pre Arrival VG" : l.tblTerminals.terminal,
                            assignedToUser = up.firstName + " " + up.lastName,
                            inputByUser = u.firstName + " " + u.lastName,
                            r.placeID
                        };

            foreach (var i in query.OrderBy(m => m.teamAssigned))
            {
                response.Add(new PreArrivalImportHistory.Response()
                {
                    HotelConfirmationNumber = i.hotelConfirmationNumber,
                    FrontOfficeCertificateNumber = i.frontOfficeCertificateNumber,
                    ArrivalDate = i.arrivalDate.Value.ToString("yyyy-MM-dd"),
                    TeamAssigned = i.teamAssigned,
                    AssignedToUser = i.assignedToUser,
                    InputByUser = i.inputByUser,
                    Resort = model.Resorts.FirstOrDefault(m => m.Value == i.placeID.ToString()).Text
                });
            }

            return response;
        }

        public void SearchPreArrivalBonusPayroll(PreArrivalBonusPayroll.Search model)
        {
            ePlatEntities db = new ePlatEntities();
            var terminals = session.Terminals.Split(',').Select(m => long.Parse(m)).ToArray();
            var iDate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_I_ArrivalDate) : (DateTime?)null;
            var fDate = model.Search_I_ArrivalDate != null ? DateTime.Parse(model.Search_F_ArrivalDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;

            var iTDate = model.Search_I_TourDate != null ? DateTime.Parse(model.Search_I_TourDate) : (DateTime?)null;
            var fTDate = model.Search_I_TourDate != null ? DateTime.Parse(model.Search_F_TourDate).AddDays(1).AddSeconds(-1) : (DateTime?)null;

            var users = model.Search_Users != null ? model.Search_Users : UserDataModel.GetUsersBySupervisor(null, true).Select(m => (Guid?)Guid.Parse(m.Value));

            var query = from l in db.tblLeads
                        join r in db.tblReservations on l.leadID equals r.leadID
                        join a in db.tblArrivals on new { resort = l.frontOfficeResortID, reservation = r.frontOfficeReservationID } equals new { resort = (int?)a.frontOfficeResortID, reservation = (long?)a.frontOfficeReservationID } into l_a
                        from a in l_a.DefaultIfEmpty()
                        join m in db.tblSPIManifest on a.arrivalID equals m.arrivalID into a_m
                        from m in a_m.DefaultIfEmpty()
                        where terminals.Contains(l.terminalID)
                        && (iDate == null || (iDate <= r.arrivalDate && r.arrivalDate <= fDate))
                        && users.Contains(l.assignedToUserID)
                        select l;


        }

        private void GetCashStatementPartial(
            IQueryable<tblEgresses> EgressesQ,
            IQueryable<tblIncomes> IncomesQ,
            ref CashStatementModel.CashStatementResults results,
            ref List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates)
        {
            decimal exchangeRate1 = 0;
            decimal exchangeRate2 = 0;
            string exchangeCurrency = "USD";
            List<CashStatementModel.StatementItem> items = new List<CashStatementModel.StatementItem>();
            //egresses
            foreach (var egress in EgressesQ)
            {
                CashStatementModel.StatementItem newItem = new CashStatementModel.StatementItem();
                newItem.OriginalDate = egress.dateSaved;
                newItem.Date = egress.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                newItem.DateModified = (egress.dateLastModification != null ? egress.dateLastModification.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                //newItem.Concept = Utils.GeneralFunctions.EgressTypes[egress.egressTypeID.ToString()] + (egress.egressConceptID != null ? " > " + egress.tblEgressConcepts.egressConcept : "");
                newItem.Concept = Utils.GeneralFunctions.EgressTypes.Single(m => m.Key == egress.egressTypeID.ToString()).Value + (egress.egressConceptID != null ? " > " + egress.tblEgressConcepts.egressConcept : "");
                newItem.Invitation = egress.invitationNumber;
                tblUserProfiles agent = egress.aspnet_Users.tblUserProfiles.FirstOrDefault();
                newItem.Agent = agent.firstName + " " + agent.lastName;
                newItem.Amount = egress.amount;
                newItem.CurrencyCode = egress.tblCurrencies.currencyCode;
                newItem.AmountIncome = 0;
                if (newItem.CurrencyCode != results.FundCurrencyCode)
                {
                    exchangeRate1 = 0;
                    exchangeRate2 = 0;
                    exchangeCurrency = results.FundCurrencyCode;
                    //if (newItem.CurrencyCode != "MXN")
                    //{
                    //    exchangeCurrency = newItem.CurrencyCode;
                    //}
                    //else if( results.FundCurrencyCode != "MXN")
                    //{
                    //    exchangeCurrency = results.FundCurrencyCode;
                    //}
                    //else
                    //{
                    //    exchangeCurrency = "MXN";
                    //}
                    //DateTime exchangeDate = DateTime.Parse(newItem.Date);
                    DateTime exchangeDate = egress.dateSaved;
                    if (ExchangeRates.FirstOrDefault(x => x.Date <= exchangeDate && x.CurrencyCode == newItem.CurrencyCode) != null)
                    {
                        exchangeRate1 = ExchangeRates.FirstOrDefault(x => x.Date <= exchangeDate && x.CurrencyCode == newItem.CurrencyCode).ExchangeRate;
                    }
                    else
                    {
                        //exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newItem.CurrencyCode, egress.terminalID);
                        exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newItem.CurrencyCode, egress.terminalID, egress.pointOfSaleID);
                        //mike
                        //ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                        //{
                        //    Date = exchangeDate,
                        //    CurrencyCode = newItem.CurrencyCode,
                        //    ExchangeRate = exchangeRate1
                        //});
                    }
                    if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency) != null)
                    {
                        exchangeRate2 = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency).ExchangeRate;
                    }
                    else
                    {
                        //exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, exchangeCurrency, egress.terminalID);
                        exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, exchangeCurrency, egress.terminalID, egress.pointOfSaleID);
                        //mike
                        //ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                        //{
                        //    Date = exchangeDate,
                        //    CurrencyCode = exchangeCurrency,
                        //    ExchangeRate = exchangeRate2
                        //});
                    }

                    //if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency) != null)
                    //{
                    //    exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency).ExchangeRate;
                    //}
                    //else
                    //{
                    //    exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, exchangeCurrency, egress.terminalID);
                    //    ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                    //    {
                    //        Date = exchangeDate,
                    //        CurrencyCode = exchangeCurrency,
                    //        ExchangeRate = exchangeRate
                    //    });
                    //}

                    //if (results.FundCurrencyCode == "MXN")
                    //{
                    //    newItem.AmountEgress = decimal.Round(newItem.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                    //}
                    //else
                    //{
                    //    newItem.AmountEgress = decimal.Round(newItem.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                    //}
                    newItem.AmountEgress = Math.Round(((newItem.Amount * exchangeRate1) / exchangeRate2), 2, MidpointRounding.AwayFromZero);
                    //newItem.AmountEgress = Math.Round((((newItem.Amount * MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newItem.CurrencyCode, egress.terminalID))) / MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, results.FundCurrencyCode, egress.terminalID)), 2, MidpointRounding.AwayFromZero);
                }
                else
                {
                    newItem.AmountEgress = newItem.Amount;
                }

                items.Add(newItem);
            }

            //incomes
            foreach (var income in IncomesQ)
            {
                CashStatementModel.StatementItem newItem = new CashStatementModel.StatementItem();
                newItem.OriginalDate = income.dateSaved;
                newItem.Date = income.dateSaved.ToString("yyyy-MM-dd hh:mm:ss tt");
                newItem.DateModified = (income.dateLastModification != null ? income.dateLastModification.Value.ToString("yyyy-MM-dd hh:mm:ss tt") : "");
                newItem.Concept = Utils.GeneralFunctions.IncomeTypes[income.incomeConceptID.ToString()];

                newItem.Invitation = "";
                tblUserProfiles agent = income.aspnet_Users.tblUserProfiles.FirstOrDefault();
                newItem.Agent = agent.firstName + " " + agent.lastName;
                newItem.Amount = income.amount;
                newItem.CurrencyCode = income.tblCurrencies.currencyCode;
                newItem.AmountEgress = 0;
                if (newItem.CurrencyCode != results.FundCurrencyCode)
                {

                    exchangeRate1 = 0;
                    exchangeRate2 = 0;
                    exchangeCurrency = results.FundCurrencyCode;

                    //if (newItem.CurrencyCode != "MXN")
                    //{
                    //    exchangeCurrency = newItem.CurrencyCode;
                    //}
                    //else if (results.FundCurrencyCode != "MXN")
                    //{
                    //    exchangeCurrency = results.FundCurrencyCode;
                    //}
                    //else
                    //{
                    //    exchangeCurrency = "MXN";
                    //}

                    DateTime exchangeDate = income.dateSaved;
                    if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == newItem.CurrencyCode) != null)
                    {
                        exchangeRate1 = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == newItem.CurrencyCode).ExchangeRate;
                    }
                    else
                    {
                        exchangeRate1 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, newItem.CurrencyCode, income.tblFunds.tblCompanies.tblTerminals.FirstOrDefault().terminalID);
                        //mike
                        //ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                        //{
                        //    Date = exchangeDate,
                        //    CurrencyCode = newItem.CurrencyCode,
                        //    ExchangeRate = exchangeRate1
                        //});
                    }
                    if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency) != null)
                    {
                        exchangeRate2 = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency).ExchangeRate;
                    }
                    else
                    {
                        exchangeRate2 = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, exchangeCurrency, income.tblFunds.tblCompanies.tblTerminals.FirstOrDefault().terminalID);
                        //mike
                        //ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                        //{
                        //    Date = exchangeDate,
                        //    CurrencyCode = exchangeCurrency,
                        //    ExchangeRate = exchangeRate2
                        //});
                    }
                    //if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency) != null)
                    //{
                    //    exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == exchangeCurrency).ExchangeRate;
                    //}
                    //else
                    //{
                    //    exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, exchangeCurrency, income.tblFunds.tblCompanies.tblTerminals.FirstOrDefault().terminalID);
                    //    ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                    //    {
                    //        Date = exchangeDate,
                    //        CurrencyCode = exchangeCurrency,
                    //        ExchangeRate = exchangeRate
                    //    });
                    //}

                    //if (results.FundCurrencyCode == "MXN")
                    //{
                    //    newItem.AmountIncome = decimal.Round(newItem.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                    //}
                    //else
                    //{
                    //    newItem.AmountIncome = decimal.Round(newItem.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                    //}
                    newItem.AmountIncome = Math.Round(((newItem.Amount * exchangeRate1) / exchangeRate2), 2, MidpointRounding.AwayFromZero);
                    newItem.Invitation += "(" + exchangeRate1 + "-" + exchangeRate2 + ")";
                }
                else
                {
                    newItem.AmountIncome = newItem.Amount;
                }

                items.Add(newItem);
            }

            //balance
            items = items.OrderBy(o => o.OriginalDate).ToList();
            decimal balance = results.InitialAmount;
            decimal totalEgress = 0;
            decimal totalIncome = 0;
            foreach (var item in items)
            {
                balance += item.AmountIncome;
                balance += item.AmountEgress * -1;
                item.AmountBalance = balance;
                totalEgress += item.AmountEgress;
                totalIncome += item.AmountIncome;
            }

            results.Items = items;
            results.TotalEgress = totalEgress;
            results.TotalIncome = totalIncome;
            if (items.Count() > 0)
            {
                results.FinalAmount = items.Last().AmountBalance;
            }
        }

        public ChargeBacksModel.ChargeBacksResults SearchChargeBacks(ChargeBacksModel.SearchChargeBacks model)
        {
            ChargeBacksModel.ChargeBacksResults results = new ChargeBacksModel.ChargeBacksResults();
            List<ExchangeRatesModel.ExchangeRateForDate> ExchangeRates = new List<ExchangeRatesModel.ExchangeRateForDate>();
            decimal exchangeRate = 0;

            DateTime fromDate = DateTime.Parse(model.Search_I_FromDate);
            DateTime toDate = (model.Search_F_ToDate != null ? DateTime.Parse(model.Search_F_ToDate).AddDays(1) : fromDate.AddDays(1));

            results.Dates = model.Search_I_FromDate + (model.Search_F_ToDate != null && model.Search_I_FromDate != model.Search_F_ToDate ? " to " + model.Search_F_ToDate : "");
            results.Layout = model.Search_Layouts.FirstOrDefault(x => x.Value == model.Search_LayoutID.ToString()).Text;
            results.Terminal = model.Search_Terminals.FirstOrDefault(x => x.Value == model.Search_TerminalID.ToString()).Text;

            //headers
            int fundsLength = 0;
            int[] fundsArr = new int[] { };
            string fundCurrencyCode = "MXN";
            if (model.Search_FundIDs != null)
            {
                fundsArr = model.Search_FundIDs;
                fundsLength = model.Search_FundIDs.Length;
                var funds = from f in db.tblFunds
                            where model.Search_FundIDs.Contains(f.fundID)
                            select new
                            {
                                f.fundName,
                                f.tblCurrencies.currencyCode
                            };

                foreach (var fund in funds)
                {
                    results.Funds += "<span class=\"block\">" + fund.fundName + "</span>";
                }
                if (fundsLength == 1)
                {
                    fundCurrencyCode = funds.FirstOrDefault().currencyCode;
                }
            }
            else
            {
                results.Funds = "All";
            }

            int pointsOfSaleLength = 0;
            long?[] pointsOfSaleArr = new long?[] { };
            if (model.Search_PointsOfSaleIDs != null)
            {
                pointsOfSaleArr = model.Search_PointsOfSaleIDs;
                pointsOfSaleLength = model.Search_PointsOfSaleIDs.Length;
                var points = from p in db.tblPointsOfSale
                             where model.Search_PointsOfSaleIDs.Contains(p.pointOfSaleID)
                             select new
                             {
                                 p.pointOfSale,
                                 p.shortName
                             };
                foreach (var point in points)
                {
                    results.PointOfSale += "<span class=\"block\">" + point.shortName + " - " + point.pointOfSale + "</span>";
                }
            }
            else
            {
                results.PointOfSale = "All";
            }


            int companiesLength = 0;
            int?[] companiesArr = new int?[] { };
            if (model.Search_CompanyIDs != null)
            {
                companiesArr = model.Search_CompanyIDs;
                companiesLength = model.Search_CompanyIDs.Length;
                var companies = from c in db.tblCompanies
                                where model.Search_CompanyIDs.Contains(c.companyID)
                                select c.company;

                foreach (string company in companies)
                {
                    results.ChargedTo += "<span class=\"block\">" + company + "</span>";
                }

                if (model.Search_CompanyIDs.Contains(-1))
                {
                    results.ChargedTo = "<span class=\"block\">Público en General</span>" + results.ChargedTo;
                    var companiesList = companiesArr.ToList();
                    companiesList.Add(null);
                    companiesArr = companiesList.ToArray();
                }
            }
            else
            {
                results.ChargedTo = "All";
            }

            int promotionTeamsLength = 0;
            int?[] promotionTeamsArr = new int?[] { };
            if (model.Search_PromotionTeamIDs != null)
            {
                promotionTeamsArr = model.Search_PromotionTeamIDs;
                promotionTeamsLength = model.Search_PromotionTeamIDs.Length;
                var teams = from t in db.tblPromotionTeams
                            where model.Search_PromotionTeamIDs.Contains(t.promotionTeamID)
                            select t.promotionTeam;

                foreach (string team in teams)
                {
                    results.Teams += "<span class=\"block\">" + team + "</span>";
                }
            }
            else
            {
                results.Teams = "All";
            }

            if (model.Search_OPCID != null)
            {
                tblOPCS opc = db.tblOPCS.Single(x => x.opcID == model.Search_OPCID);
                results.OPC = opc.firstName + " " + opc.lastName;
            }
            else
            {
                results.OPC = "All";
            }

            int locationsLength = 0;
            int?[] locationsArr = new int?[] { };
            if (model.Search_LocationIDs != null)
            {
                locationsArr = model.Search_LocationIDs;
                locationsLength = model.Search_LocationIDs.Length;
                var locations = from l in db.tblLocations
                                where model.Search_LocationIDs.Contains(l.locationID)
                                select l.location;

                foreach (string location in locations)
                {
                    results.Locations += "<span class=\"block\">" + location + "</span>";
                }
            }
            else
            {
                results.Locations = "All";
            }

            int agentsLength = 0;
            Guid?[] agentsArr = new Guid?[] { };
            if (model.Search_AgentIDs != null)
            {
                agentsArr = model.Search_AgentIDs;
                agentsLength = model.Search_AgentIDs.Length;
                var agents = from a in db.tblUserProfiles
                             where model.Search_AgentIDs.Contains(a.userID)
                             select new
                             {
                                 a.firstName,
                                 a.lastName
                             };

                foreach (var agent in agents)
                {
                    results.Agents += "<span class=\"block\">" + agent.firstName + " " + agent.lastName + "</span>";
                }
            }
            else
            {
                results.Agents = "All";
            }

            int conceptsLength = 0;
            long?[] conceptsArr = new long?[] { };
            if (model.Search_ChargeBackConceptIDs != null)
            {
                conceptsArr = model.Search_ChargeBackConceptIDs;
                conceptsLength = model.Search_ChargeBackConceptIDs.Length;
            }

            //llenado del modelo
            List<tblEgresses> Deposits = new List<tblEgresses>();
            List<tblEgresses> ChargeBacks = new List<tblEgresses>();
            List<tblPaymentDetails> CouponPayments = new List<tblPaymentDetails>();

            #region "Deposits"
            List<ChargeBacksModel.ChargeItem> depositsList = new List<ChargeBacksModel.ChargeItem>();
            results.DepositsTotals = new ChargeBacksModel.ChargeTotals();
            results.DepositsTotals.Amount = GetDefaultListOfMoney(true);
            results.DepositsTotals.AmountMXN = new Money()
            {
                Amount = 0,
                Currency = fundCurrencyCode
            };

            //get concepts
            List<ChargeBacksModel.ChargeByConcept> depositConceptsTotals = new List<ChargeBacksModel.ChargeByConcept>();
            var ConceptsD = MasterChartDataModel.LeadsCatalogs.FillDrpEgressConcepts(model.Search_TerminalID, 1);
            foreach (var concept in ConceptsD)
            {
                ChargeBacksModel.ChargeByConcept cbc = new ChargeBacksModel.ChargeByConcept();
                cbc.ConceptID = long.Parse(concept.Value);
                cbc.Concept = concept.Text;
                cbc.Amount = GetDefaultListOfMoney(true);
                cbc.AmountMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                cbc.Charges = GetDefaultListOfMoney(true);
                cbc.ChargesMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                depositConceptsTotals.Add(cbc);
            }
            //

            if (model.Search_ChargeBackTypeIDs == null || model.Search_ChargeBackTypeIDs.Contains(1))
            {
                Deposits = (from d in db.tblEgresses
                            where d.dateSaved >= fromDate && d.dateSaved < toDate
                            && d.egressTypeID == 1
                            && d.terminalID == model.Search_TerminalID
                            && (fundsArr.Contains(d.fundID) || fundsLength == 0)
                            && (companiesArr.Contains(d.chargedToCompanyID) || companiesLength == 0)
                            && (promotionTeamsArr.Contains(d.promotionTeamID) || promotionTeamsLength == 0)
                            && (model.Search_OPCID == d.opcID || model.Search_OPCID == null)
                            && (locationsArr.Contains(d.locationID) || locationsLength == 0)
                            && (agentsArr.Contains(d.savedByUserID) || agentsLength == 0)
                            && (pointsOfSaleArr.Contains(d.pointOfSaleID) || pointsOfSaleLength == 0)
                            && (conceptsArr.Contains(d.egressConceptID) || conceptsLength == 0)
                            && d.amount > 0
                            select d).ToList();

                foreach (tblEgresses deposit in Deposits)
                {
                    ChargeBacksModel.ChargeItem nd = new ChargeBacksModel.ChargeItem();
                    nd.ChargeID = deposit.egressID;
                    nd.Date = deposit.dateSaved;
                    nd.Fund = deposit.tblFunds.fundName;
                    nd.Invitation = deposit.invitationNumber;
                    nd.Customer = deposit.customer;
                    tblUserProfiles profile = deposit.aspnet_Users.tblUserProfiles.First();
                    nd.Agent = profile.firstName + " " + profile.lastName;
                    nd.PointOfSale = deposit.tblPointsOfSale.shortName + " - " + deposit.tblPointsOfSale.pointOfSale;
                    nd.OPC = (deposit.opcID != null ? deposit.tblOPCS.firstName + " " + deposit.tblOPCS.middleName + " " + deposit.tblOPCS.lastName + " " + deposit.tblOPCS.secondSurname : deposit.opcOther);

                    if (deposit.opcID != null)
                    {
                        nd.OPCID = (long)deposit.opcID;
                        nd.OPCAvanceID = (deposit.tblOPCS.avanceID != null ? deposit.tblOPCS.avanceID : "");
                        nd.OPCLegacyKey = (deposit.tblOPCS.legacyKey != null ? deposit.tblOPCS.legacyKey : "");
                    }
                    nd.Program = (deposit.promotionTeamID != null ? deposit.tblPromotionTeams.tblProspectationPrograms != null ? deposit.tblPromotionTeams.tblProspectationPrograms.program : "Unknown" : "Unknown");
                    nd.PromoTeam = (deposit.promotionTeamID != null ? deposit.tblPromotionTeams.promotionTeam : "Unknown");
                    nd.Location = (deposit.locationID != null ? deposit.tblLocations.location : "Unknown");
                    nd.ChargedTo = (deposit.chargedToCompanyID != null ? deposit.tblCompanies.company : "Público en General");
                    if (deposit.opcID != null)
                    {
                        nd.PayingCompany = deposit.tblOPCS.tblCompanies1.company;
                    }
                    nd.Budget = (deposit.budgetID != null ? deposit.tblBudgets.leadQualification + " - " + deposit.tblBudgets.leadQualification : "");
                    nd.Concept = (deposit.egressConceptID != null ? deposit.tblEgressConcepts.egressConcept : "Customer's Deposit");
                    nd.ConceptID = (long)deposit.egressConceptID;
                    nd.Amount = deposit.amount;
                    nd.Charge = 0;
                    nd.CurrencyCode = deposit.tblCurrencies.currencyCode;
                    nd.Comments = deposit.agentComments;
                    depositsList.Add(nd);

                    results.DepositsTotals.Amount.FirstOrDefault(x => x.Currency == nd.CurrencyCode).Amount += nd.Amount;
                    depositConceptsTotals.FirstOrDefault(x => x.ConceptID == deposit.egressConceptID).Amount.FirstOrDefault(x => x.Currency == nd.CurrencyCode).Amount += nd.Amount;

                    if (nd.CurrencyCode != fundCurrencyCode)
                    {
                        exchangeRate = 0;
                        DateTime exchangeDate = nd.Date;
                        if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == nd.CurrencyCode) != null)
                        {
                            exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == nd.CurrencyCode).ExchangeRate;
                        }
                        else
                        {
                            //exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, nd.CurrencyCode, model.Search_TerminalID);
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, nd.CurrencyCode, model.Search_TerminalID, deposit.pointOfSaleID);
                            ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                            {
                                Date = exchangeDate,
                                CurrencyCode = nd.CurrencyCode,
                                ExchangeRate = exchangeRate
                            });
                        }
                        if (fundCurrencyCode == "MXN")
                        {
                            results.DepositsTotals.AmountMXN.Amount += decimal.Round(nd.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            depositConceptsTotals.FirstOrDefault(x => x.ConceptID == deposit.egressConceptID).AmountMXN.Amount += decimal.Round(nd.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            results.DepositsTotals.AmountMXN.Amount += decimal.Round(nd.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            depositConceptsTotals.FirstOrDefault(x => x.ConceptID == deposit.egressConceptID).AmountMXN.Amount += decimal.Round(nd.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    else
                    {
                        results.DepositsTotals.AmountMXN.Amount += nd.Amount;
                        depositConceptsTotals.FirstOrDefault(x => x.ConceptID == deposit.egressConceptID).AmountMXN.Amount += nd.Amount;
                    }
                }
            }
            results.Deposits = depositsList;
            results.DepositConceptsTotals = depositConceptsTotals;
            #endregion
            #region "Chargebacks"
            List<ChargeBacksModel.ChargeItem> chargesList = new List<ChargeBacksModel.ChargeItem>();
            results.ChargeBacksTotals = new ChargeBacksModel.ChargeTotals();
            results.ChargeBacksTotals.Amount = GetDefaultListOfMoney(true);
            results.ChargeBacksTotals.AmountMXN = new Money()
            {
                Amount = 0,
                Currency = fundCurrencyCode
            };
            results.ChargeBacksTotals.Charges = GetDefaultListOfMoney(true);
            results.ChargeBacksTotals.ChargesMXN = new Money()
            {
                Amount = 0,
                Currency = fundCurrencyCode
            };

            //get concepts
            List<ChargeBacksModel.ChargeByConcept> chargesConceptsTotals = new List<ChargeBacksModel.ChargeByConcept>();
            var ConceptsQ = MasterChartDataModel.LeadsCatalogs.FillDrpEgressConcepts(model.Search_TerminalID, 2);
            foreach (var concept in ConceptsQ)
            {
                ChargeBacksModel.ChargeByConcept cbc = new ChargeBacksModel.ChargeByConcept();
                cbc.ConceptID = long.Parse(concept.Value);
                cbc.Concept = concept.Text;
                cbc.Amount = GetDefaultListOfMoney(true);
                cbc.AmountMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                cbc.Charges = GetDefaultListOfMoney(true);
                cbc.ChargesMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                chargesConceptsTotals.Add(cbc);
            }
            //

            if (model.Search_ChargeBackTypeIDs == null || model.Search_ChargeBackTypeIDs.Contains(2))
            {
                ChargeBacks = (from c in db.tblEgresses
                               where c.dateSaved >= fromDate && c.dateSaved < toDate
                               && c.egressTypeID == 2
                               && c.terminalID == model.Search_TerminalID
                               && (fundsArr.Contains(c.fundID) || fundsLength == 0)
                               && (conceptsArr.Contains(c.egressConceptID) || conceptsLength == 0)
                               && (companiesArr.Contains(c.chargedToCompanyID) || companiesLength == 0)
                               && (promotionTeamsArr.Contains(c.promotionTeamID) || promotionTeamsLength == 0)
                               && (model.Search_OPCID == c.opcID || model.Search_OPCID == null)
                               && (locationsArr.Contains(c.locationID) || locationsLength == 0)
                               && (agentsArr.Contains(c.savedByUserID) || agentsLength == 0)
                               && (pointsOfSaleArr.Contains(c.pointOfSaleID) || pointsOfSaleLength == 0)
                               && c.amount > 0
                               select c).ToList();

                foreach (var charge in ChargeBacks)
                {
                    ChargeBacksModel.ChargeItem nc = new ChargeBacksModel.ChargeItem();
                    nc.ChargeID = charge.egressID;
                    nc.Date = charge.dateSaved;
                    nc.Fund = charge.tblFunds.fundName;
                    nc.Invitation = charge.invitationNumber;
                    nc.Customer = charge.customer;
                    tblUserProfiles profile = charge.aspnet_Users.tblUserProfiles.First();
                    nc.Agent = profile.firstName + " " + profile.lastName;
                    nc.PointOfSale = charge.tblPointsOfSale.shortName + " - " + charge.tblPointsOfSale.pointOfSale;
                    nc.OPC = (charge.opcID != null ? charge.tblOPCS.firstName + " " + charge.tblOPCS.middleName + " " + charge.tblOPCS.lastName + " " + charge.tblOPCS.secondSurname : charge.opcOther);
                    if (charge.opcID != null)
                    {
                        nc.OPCID = (long)charge.opcID;
                        nc.OPCAvanceID = (charge.tblOPCS.avanceID != null ? charge.tblOPCS.avanceID : "");
                        nc.OPCLegacyKey = (charge.tblOPCS.legacyKey != null ? charge.tblOPCS.legacyKey : "");
                    }
                    nc.Program = (charge.promotionTeamID != null ? charge.tblPromotionTeams.tblProspectationPrograms != null ? charge.tblPromotionTeams.tblProspectationPrograms.program : "Unknown" : "Unknown");
                    nc.PromoTeam = (charge.promotionTeamID != null ? charge.tblPromotionTeams.promotionTeam : "Unknown");
                    nc.Location = (charge.locationID != null ? charge.tblLocations.location : "Unknown");
                    nc.ChargedTo = (charge.chargedToCompanyID != null ? charge.tblCompanies.company : "Público en General");
                    if (charge.opcID != null)
                    {
                        //nc.PayingCompany = charge.tblOPCS.tblPayingCompanies.payingCompany;
                        nc.PayingCompany = charge.tblOPCS.tblCompanies1.company;
                    }
                    nc.Budget = (charge.budgetID != null ? charge.tblBudgets.leadCode + " - " + charge.tblBudgets.leadQualification : "");
                    nc.Concept = charge.tblEgressConcepts.egressConcept;
                    nc.ConceptID = (long)charge.egressConceptID;
                    nc.Amount = charge.amount;
                    if (charge.adminFee != null)
                    {
                        nc.Charge = decimal.Round((decimal)charge.amount * (decimal)charge.adminFee / 100, 2, MidpointRounding.AwayFromZero);
                    }
                    else
                    {
                        nc.Charge = 0;
                    }
                    nc.CurrencyCode = charge.tblCurrencies.currencyCode;
                    nc.Comments = charge.agentComments;
                    chargesList.Add(nc);

                    results.ChargeBacksTotals.Amount.FirstOrDefault(x => x.Currency == nc.CurrencyCode).Amount += nc.Amount;
                    results.ChargeBacksTotals.Charges.FirstOrDefault(x => x.Currency == nc.CurrencyCode).Amount += nc.Charge;
                    chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).Amount.FirstOrDefault(x => x.Currency == nc.CurrencyCode).Amount += nc.Amount;
                    chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).Charges.FirstOrDefault(x => x.Currency == nc.CurrencyCode).Amount += nc.Charge;

                    if (nc.CurrencyCode != fundCurrencyCode)
                    {
                        exchangeRate = 0;
                        DateTime exchangeDate = nc.Date;
                        if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == nc.CurrencyCode) != null)
                        {
                            exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == nc.CurrencyCode).ExchangeRate;
                        }
                        else
                        {
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, nc.CurrencyCode, charge.terminalID, charge.pointOfSaleID);
                            ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                            {
                                Date = exchangeDate,
                                CurrencyCode = nc.CurrencyCode,
                                ExchangeRate = exchangeRate
                            });
                        }
                        if (fundCurrencyCode == "MXN")
                        {
                            results.ChargeBacksTotals.AmountMXN.Amount += decimal.Round(nc.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.ChargeBacksTotals.ChargesMXN.Amount += decimal.Round(nc.Charge * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).AmountMXN.Amount += decimal.Round(nc.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).ChargesMXN.Amount += decimal.Round(nc.Charge * exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            results.ChargeBacksTotals.AmountMXN.Amount += decimal.Round(nc.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.ChargeBacksTotals.ChargesMXN.Amount += decimal.Round(nc.Charge / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).AmountMXN.Amount += decimal.Round(nc.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).ChargesMXN.Amount += decimal.Round(nc.Charge / exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    else
                    {
                        results.ChargeBacksTotals.AmountMXN.Amount += nc.Amount;
                        results.ChargeBacksTotals.ChargesMXN.Amount += nc.Charge;
                        chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).AmountMXN.Amount += nc.Amount;
                        chargesConceptsTotals.FirstOrDefault(x => x.ConceptID == charge.egressConceptID).ChargesMXN.Amount += nc.Charge;

                    }
                }

            }
            results.ChargeBacks = chargesList;
            results.ChargeBackConceptsTotals = chargesConceptsTotals;
            #endregion
            #region "Coupon Chargebacks"
            List<ChargeBacksModel.ChargeItem> couponsCxC = new List<ChargeBacksModel.ChargeItem>();
            results.TotalCompanies = new List<ChargeBacksModel.TotalByCompany>();
            results.CouponsTotals = new ChargeBacksModel.ChargeTotals();
            results.CouponsTotals.Amount = GetDefaultListOfMoney(true);
            results.CouponsTotals.AmountMXN = new Money()
            {
                Amount = 0,
                Currency = "MXN"
            };
            results.CouponsTotals.Balance = GetDefaultListOfMoney(true);
            results.CouponsTotals.BalanceMXN = new Money()
            {
                Amount = 0,
                Currency = "MXN"
            };

            //get concepts
            List<ChargeBacksModel.ChargeByConcept> couponCxCConceptsTotals = new List<ChargeBacksModel.ChargeByConcept>();
            var ConceptsC = MasterChartDataModel.LeadsCatalogs.FillDrpEgressConcepts(model.Search_TerminalID, 3);
            foreach (var concept in ConceptsC)
            {

                ChargeBacksModel.ChargeByConcept cbc = new ChargeBacksModel.ChargeByConcept();
                cbc.ConceptID = long.Parse(concept.Value);
                cbc.Concept = concept.Text;
                cbc.Amount = GetDefaultListOfMoney(true);
                cbc.AmountMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                cbc.Charges = GetDefaultListOfMoney(true);
                cbc.ChargesMXN = new Money()
                {
                    Amount = 0,
                    Currency = fundCurrencyCode
                };
                couponCxCConceptsTotals.Add(cbc);
            }
            //

            if (model.Search_ChargeBackTypeIDs == null || model.Search_ChargeBackTypeIDs.Contains(3))
            {
                DateTime today = DateTime.Today.Date;
                DateTime tomorrow = today.AddDays(1).Date;
                CouponPayments = (from p in db.tblPaymentDetails
                                  where p.dateSaved >= fromDate && p.dateSaved < toDate
                                  && ((fromDate == today && toDate == tomorrow) || p.tblCloseOuts_PaymentDetails.Count() > 0)
                                  && (p.deleted == null || p.deleted == false)
                                  && p.paymentType == 3
                                  && p.tblPurchases.terminalID == model.Search_TerminalID
                                  && (companiesArr.Contains(p.chargedToCompanyID) || companiesLength == 0)
                                  && (promotionTeamsArr.Contains(p.promotionTeamID) || promotionTeamsLength == 0)
                                  && (model.Search_OPCID == p.opcID || model.Search_OPCID == null)
                                  && (locationsArr.Contains(p.locationID) || locationsLength == 0)
                                  && (agentsArr.Contains(p.savedByUserID) || agentsLength == 0)
                                  && (pointsOfSaleArr.Contains(p.tblPurchases.pointOfSaleID) || pointsOfSaleLength == 0)
                                  && (conceptsArr.Contains(p.chargeBackConceptID) || conceptsLength == 0)
                                  select p).ToList();

                //&& p.tblMoneyTransactions.transactionTypeID == 1

                foreach (var payment in CouponPayments)
                {
                    ChargeBacksModel.ChargeItem cp = new ChargeBacksModel.ChargeItem();
                    cp.ChargeID = payment.paymentDetailsID;
                    cp.Date = payment.dateSaved;
                    cp.Fund = "";
                    cp.Invitation = payment.invitation;
                    cp.Customer = payment.tblPurchases.tblLeads.firstName + " " + payment.tblPurchases.tblLeads.lastName;
                    tblUserProfiles profile = payment.aspnet_Users.tblUserProfiles.FirstOrDefault();
                    cp.Agent = profile.firstName + " " + profile.lastName;
                    cp.PointOfSale = payment.tblPurchases.tblPointsOfSale.shortName + " - " + payment.tblPurchases.tblPointsOfSale.pointOfSale;
                    cp.OPC = (payment.opcID != null ? payment.tblOPCS.firstName + " " + payment.tblOPCS.middleName + " " + payment.tblOPCS.lastName + " " + payment.tblOPCS.secondSurname : payment.other);
                    if (payment.opcID != null)
                    {
                        cp.OPCID = (long)payment.opcID;
                        cp.OPCAvanceID = (payment.tblOPCS.avanceID != null ? payment.tblOPCS.avanceID : "");
                        cp.OPCLegacyKey = (payment.tblOPCS.legacyKey != null ? payment.tblOPCS.legacyKey : "");
                    }
                    cp.Program = (payment.promotionTeamID != null ? payment.tblPromotionTeams.tblProspectationPrograms != null ? payment.tblPromotionTeams.tblProspectationPrograms.program : "Unknown" : "Unknown");
                    cp.PromoTeam = (payment.promotionTeamID != null ? payment.tblPromotionTeams.promotionTeam : "Unknown");
                    cp.Location = (payment.locationID != null ? payment.tblLocations.location : "Unknown");
                    cp.ChargedTo = (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General");
                    cp.Budget = (payment.budgetID != null ? payment.tblBudgets.leadCode + " - " + payment.tblBudgets.leadQualification : "");
                    if (results.TotalCompanies.Count(x => x.CxCCompany == (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General")) == 0)
                    {
                        ChargeBacksModel.TotalByCompany newCompany = new ChargeBacksModel.TotalByCompany();
                        newCompany.CxCCompanyID = payment.chargedToCompanyID;
                        newCompany.CxCCompany = (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General");
                        newCompany.Totals = GetDefaultListOfMoney(true);
                        newCompany.TotalMXN = new Money()
                        {
                            Amount = 0,
                            Currency = "MXN"
                        };
                        results.TotalCompanies.Add(newCompany);
                    }

                    if (payment.opcID != null)
                    {
                        //cp.PayingCompany = payment.tblOPCS.tblPayingCompanies.payingCompany;
                        cp.PayingCompany = payment.tblOPCS.tblCompanies1.company;
                    }
                    cp.ConceptID = (long)payment.chargeBackConceptID;
                    cp.Concept = (payment.chargeBackConceptID != null ? payment.tblEgressConcepts.egressConcept : "Charge Back");
                    cp.Folio = payment.chargeBackFolio;
                    foreach (var trans in payment.tblMoneyTransactions.tblPurchases_Services_MoneyTransactions)
                    {
                        if (trans.tblPurchases_Services.tblPurchaseServiceDetails.Count() > 0
                            && trans.tblPurchases_Services.tblPurchaseServiceDetails.FirstOrDefault().coupon != null)
                        {
                            if (cp.Concept != null)
                            {
                                cp.Concept += ", ";
                            }
                            if (trans.tblPurchases_Services.tblPurchaseServiceDetails.FirstOrDefault().coupon.Length == 10)
                            {
                                cp.Concept += trans.tblPurchases_Services.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, 8) + (trans.tblPurchases_Services.couponReference != null ? " [" + trans.tblPurchases_Services.couponReference + "]" : "");
                            }
                            else if (trans.tblPurchases_Services.tblPurchaseServiceDetails.FirstOrDefault().coupon.Length == 8)
                            {
                                cp.Concept += trans.tblPurchases_Services.tblPurchaseServiceDetails.FirstOrDefault().coupon.Substring(0, 6) + (trans.tblPurchases_Services.couponReference != null ? " [" + trans.tblPurchases_Services.couponReference + "]" : "");
                            }

                        }
                    }
                    cp.Amount = payment.amount;
                    cp.Charge = 0;
                    if (payment.tblMoneyTransactions.transactionTypeID == 2)
                    {
                        cp.Amount = cp.Amount * -1;
                        cp.Charge = cp.Charge * -1;
                    }
                    cp.CurrencyID = payment.currencyID;
                    cp.CurrencyCode = payment.tblCurrencies.currencyCode;
                    cp.Comments = payment.paymentComments;
                    cp.Charged = payment.chargeBackCharged;
                    if (cp.Charged)
                    {
                        tblUserProfiles u = payment.aspnet_Users2.tblUserProfiles.FirstOrDefault();
                        cp.ChargedBy = u.firstName + " " + u.lastName;
                        cp.ChargedDate = payment.chargeBackChargedDateTime.Value.ToString("yyyy-MM-dd hh:mm:dd tt");
                    }

                    //parciales
                    cp.PartialPayments = new List<ChargeBacksModel.Partial>();
                    decimal paymentExchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(cp.Date, "USD", payment.tblPurchases.terminalID, payment.tblPurchases.pointOfSaleID);
                    cp.ER = paymentExchangeRate;
                    decimal balance = payment.amount;
                    foreach (var partial in payment.tblPaymentDetailsPartials)
                    {
                        ChargeBacksModel.Partial np = new ChargeBacksModel.Partial();
                        np.PartialID = partial.paymentDetailsPartialID;
                        np.Description = partial.description;
                        np.PartialDate = partial.dateSaved.ToString("yyyy-MM-dd hh:mm:ss");
                        var up = db.tblUserProfiles.FirstOrDefault(x => x.userID == partial.savedByUserID);
                        np.User = up.firstName + " " + up.lastName;
                        np.Amount = partial.amount;
                        np.CurrencyID = partial.currencyID;
                        np.CurrencyCode = (partial.currencyID == 1 ? "USD" : "MXN");
                        if (np.CurrencyID == payment.currencyID)
                        {
                            //misma moneda
                            np.AmountInPaymentCurrency = np.Amount;
                        }
                        else
                        {
                            //diferente moneda
                            if (np.CurrencyID == 2 && cp.CurrencyID == 1)
                            {
                                np.AmountInPaymentCurrency = decimal.Round(np.Amount / paymentExchangeRate, 2);
                            }
                            else if (np.CurrencyID == 1 && cp.CurrencyID == 2)
                            {
                                np.AmountInPaymentCurrency = decimal.Round(np.Amount * paymentExchangeRate, 2);
                            }
                        }

                        np.Deleted = partial.deleted;
                        if (np.Deleted)
                        {
                            var upd = db.tblUserProfiles.FirstOrDefault(x => x.userID == partial.deletedByUserID);
                            np.DeletedDetails = "<span>Deleted on " + partial.dateDeleted.Value.ToString("yyyy-MM-dd") + "<br />" + "by " + upd.firstName + " " + upd.lastName + "</span>";
                        }
                        else
                        {
                            balance -= np.AmountInPaymentCurrency;
                            np.Balance = balance;
                            cp.Partials += np.AmountInPaymentCurrency;
                        }

                        cp.PartialPayments.Add(np);
                    }
                    if (payment.tblMoneyTransactions.transactionTypeID == 2)
                    {
                        cp.Balance = balance * -1;
                    }
                    else
                    {
                        cp.Balance = balance;
                    }

                    //se agrega a la lista
                    couponsCxC.Add(cp);

                    results.CouponsTotals.Amount.FirstOrDefault(x => x.Currency == cp.CurrencyCode).Amount += cp.Amount;
                    results.CouponsTotals.Balance.FirstOrDefault(x => x.Currency == cp.CurrencyCode).Amount += cp.Balance;
                    couponCxCConceptsTotals.FirstOrDefault(x => x.ConceptID == payment.chargeBackConceptID).Amount.FirstOrDefault(x => x.Currency == cp.CurrencyCode).Amount += cp.Amount;
                    results.TotalCompanies.FirstOrDefault(x => x.CxCCompany == (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General")).Totals.FirstOrDefault(x => x.Currency == cp.CurrencyCode).Amount += cp.Amount;

                    if (cp.CurrencyCode != fundCurrencyCode)
                    {
                        exchangeRate = 0;
                        DateTime exchangeDate = cp.Date;
                        if (ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == cp.CurrencyCode) != null)
                        {
                            exchangeRate = ExchangeRates.FirstOrDefault(x => x.Date == exchangeDate && x.CurrencyCode == cp.CurrencyCode).ExchangeRate;
                        }
                        else
                        {
                            exchangeRate = MasterChartDataModel.Purchases.GetSpecificRate(exchangeDate, cp.CurrencyCode, payment.tblPurchases.terminalID, payment.tblPurchases.pointOfSaleID);
                            ExchangeRates.Add(new ExchangeRatesModel.ExchangeRateForDate()
                            {
                                Date = exchangeDate,
                                CurrencyCode = cp.CurrencyCode,
                                ExchangeRate = exchangeRate
                            });
                        }
                        if (fundCurrencyCode == "MXN")
                        {
                            results.CouponsTotals.AmountMXN.Amount += decimal.Round(cp.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.CouponsTotals.BalanceMXN.Amount += decimal.Round(cp.Balance * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            couponCxCConceptsTotals.FirstOrDefault(x => x.ConceptID == payment.chargeBackConceptID).AmountMXN.Amount += decimal.Round(cp.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.TotalCompanies.FirstOrDefault(x => x.CxCCompany == (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General")).TotalMXN.Amount += decimal.Round(cp.Amount * exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            results.CouponsTotals.AmountMXN.Amount += decimal.Round(cp.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.CouponsTotals.BalanceMXN.Amount += decimal.Round(cp.Balance / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            couponCxCConceptsTotals.FirstOrDefault(x => x.ConceptID == payment.chargeBackConceptID).AmountMXN.Amount += decimal.Round(cp.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                            results.TotalCompanies.FirstOrDefault(x => x.CxCCompany == (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General")).TotalMXN.Amount += decimal.Round(cp.Amount / exchangeRate, 2, MidpointRounding.AwayFromZero);
                        }
                    }
                    else
                    {
                        results.CouponsTotals.AmountMXN.Amount += cp.Amount;
                        results.CouponsTotals.BalanceMXN.Amount += cp.Balance;
                        couponCxCConceptsTotals.FirstOrDefault(x => x.ConceptID == payment.chargeBackConceptID).AmountMXN.Amount += cp.Amount;
                        results.TotalCompanies.FirstOrDefault(x => x.CxCCompany == (payment.chargedToCompanyID != null ? payment.tblCompanies.company : "Público en General")).TotalMXN.Amount += cp.Amount;
                    }
                }
            }
            results.CouponsCxC = couponsCxC;
            results.CouponConceptsTotals = couponCxCConceptsTotals;
            #endregion
            return results;
        }

        public UserLogsActivityYYYYMM SearchUserLogsActivityItems(UserLogsActivityYYYYMM.SearchUserLogsActivity model)
        {
            ePlatEntities db = new ePlatEntities();
            var userList = new List<string>();
            var UserLogsActivity = new UserLogsActivityYYYYMM();
            string users = "";
            var CurrentUserID = session.UserID;
            var IsAdministrator = GeneralFunctions.IsUserInRole("Administrator", CurrentUserID);
            var tableDate = model.SearchFromDate != null ? DateTime.Parse(model.SearchFromDate).Date.ToString("yyyyMM") : DateTime.Now.Date.ToString("yyyyMM");
            var SearchFromDate = model.SearchFromDate != null ? DateTime.Parse(model.SearchFromDate) : DateTime.Now;
            var SearchToDate = model.SearchToDate != null ? DateTime.Parse(model.SearchToDate) : DateTime.Now;
            bool SearchContactInfo = model.SearchConctactInfo;
            int actionID = model.moduleID;
            int moduleID = model.pageID;
            //tableName - SearchDate - Contact Info            
            UserLogsActivity.FromDate = SearchFromDate.ToString();
            UserLogsActivity.ToDate = SearchToDate.ToString();
            UserLogsActivity.Summary = new List<UserLogsActivityYYYYMM.ActivityLogsResult>();
            var YearFromDate = SearchFromDate.Year;
            var YearToDate = SearchToDate.Year;
            var monthFromDate = SearchFromDate.Month;
            var monthToDate = SearchToDate.Month;
            // bool contactInfo = model.SearchConctactInfo == false ? false : true;

            if (model.SearchUserID != null)
            {
                foreach (var ID in model.SearchUserID)
                {
                    userList.Add("'" + ID.ToString() + "'");
                }
                users = string.Join(",", userList);
            }
            else
            {
                users = (string)null;
            }

            if (IsAdministrator)
            {
                if (YearFromDate == YearToDate && monthFromDate == monthToDate)//consulta dentro del mismo mes
                {
                    UserLogsActivity.Summary = ListActivitylogs(tableDate, SearchFromDate, SearchToDate, actionID, moduleID, model.searchTerminalID, users)
                        .Where(x => x.ContactInfo == model.SearchConctactInfo)
                        .OrderByDescending(x => x.DateSavedInfo)
                    .ToList();
                }
                else//consulta fuera del mismo mes
                {
                    var list = new UserLogsActivityYYYYMM.ActivityLogsResult();
                    while (YearFromDate <= YearToDate)//years
                    {
                        DateTime TableDate = SearchFromDate.Date;
                        while (monthFromDate <= monthToDate)
                        {
                            DateTime ADate = new DateTime(YearFromDate, monthFromDate, 01);
                            tableDate = YearFromDate.ToString() + TableDate.ToString("MM");
                            UserLogsActivity.Summary.AddRange(ListActivitylogs(tableDate, ADate, ADate.AddDays(30), actionID, moduleID, model.searchTerminalID, users));

                            monthFromDate++;
                            TableDate = TableDate.AddMonths(1);
                        }
                        YearFromDate++;
                    }
                    UserLogsActivity.Summary
                       .Where(x => (x.DateSavedInfo >= SearchFromDate && x.DateSavedInfo <= SearchToDate) && x.ContactInfo == model.SearchConctactInfo)
                       .OrderByDescending(x => x.DateSavedInfo);//.ToList();
                }
            }
            else//sino es administrador
            {
                if (users == null)
                {
                    /*   foreach (var user in db.sp_getUserSubordinates(CurrentUserID))
                       {
                           userList.Add("'" + user.userID.ToString() + "'");
                       }
                       users = string.Join(",", userList);*/

                    foreach (var user in UserDataModel.GetUsersBySupervisor(CurrentUserID))
                    {
                        userList.Add("'" + user.Value + "'");
                    }
                    users = string.Join(",", userList);
                }
                if (YearFromDate == YearToDate && monthFromDate == monthToDate)//consulta dentro del mismo mes
                {
                    UserLogsActivity.Summary = ListActivitylogs(tableDate, SearchFromDate, SearchToDate, actionID, moduleID, model.searchTerminalID, users)
                        .Where(x => x.ContactInfo == model.SearchConctactInfo)
                        .OrderByDescending(x => x.DateSavedInfo)
                        .ToList();
                }
                else//consulta fuera del mismo mes
                {
                    var list = new UserLogsActivityYYYYMM.ActivityLogsResult();
                    while (YearFromDate <= YearToDate)//years
                    {
                        DateTime TableDate = SearchFromDate.Date;
                        while (monthFromDate <= monthToDate)
                        {
                            DateTime ADate = new DateTime(YearFromDate, monthFromDate, 01);
                            tableDate = YearFromDate.ToString() + TableDate.ToString("MM");
                            UserLogsActivity.Summary.AddRange(ListActivitylogs(tableDate, ADate, ADate.AddDays(30), actionID, moduleID, model.searchTerminalID, users));

                            monthFromDate++;
                            TableDate = TableDate.AddMonths(1);
                        }
                        YearFromDate++;
                    }
                    UserLogsActivity.Summary
                       .Where(x => (x.DateSavedInfo >= SearchFromDate && x.DateSavedInfo <= SearchToDate) && x.ContactInfo == model.SearchConctactInfo)
                       .OrderByDescending(x => x.DateSavedInfo);//.ToList();
                }
            }
            return UserLogsActivity;
        }

        public static List<UserLogsActivityYYYYMM.ActivitylogsTable> GetActivityLogs()
        {
            List<UserLogsActivityYYYYMM.ActivitylogsTable> list = new List<UserLogsActivityYYYYMM.ActivitylogsTable>();
            ePlatEntities db = new ePlatEntities();
            DateTime ToDayTime = DateTime.Now;
            var CurrentUserID = session.UserID;
            var TableName = ToDayTime.ToString("yyyyMM");
            var FromDate = ToDayTime.AddSeconds(-30).ToString("yyyyMMdd HH:mm");
            var ToDate = ToDayTime.ToString("yyyyMMdd HH:mm");
            var UserList = new List<string>();
            var Users = (string)null;

            if (!GeneralFunctions.IsUserInRole("Administrator"))
            {/*
                foreach (var user in db.sp_getUserSubordinates(CurrentUserID))
                {
                    UserList.Add("'" + user.userID.ToString() + "'");
                }
                Users = string.Join(",", UserList);
               */
                foreach (var user in UserDataModel.GetUsersBySupervisor(CurrentUserID))
                {
                    UserList.Add("'" + user.Value + ",");
                }
                Users = string.Join(",", UserList);
            }
            foreach (var item in db.sp_getActivityLogs(TableName, FromDate, ToDate, Users, null))
            {
                var userName = db.tblUserProfiles.Single(x => x.userID == item.UserID);
                list.Add(new UserLogsActivityYYYYMM.ActivitylogsTable()
                {
                    UserLogActivity = item.UserLogActivityID,
                    DateSaved = ((DateTime)item.DateSaved).ToString("yyyy-MM-dd hh:mm:ss tt"),
                    UserName = userName.firstName + " " + userName.lastName,
                    Controller = item.Controller,
                    Method = item.Method,
                    Description = item.Description,
                    UrlMethod = item.UrlMethod,
                    Url = item.Url,
                    ContactInfo = item.ContactInfo
                });
            }
            return list;
        }

        public List<UserLogsActivityYYYYMM.ActivityLogsResult> ListActivitylogs(string tableName, DateTime fromDate, DateTime toDate, int actionID, int moduleID, int? terminalID, string Users = null)
        {
            ePlatEntities db = new ePlatEntities();
            session.Terminals.Count();
            var _fromDate = fromDate.ToString("yyyyMMdd HH:mm");
            var _toDate = toDate.ToString("yyyyMMdd HH:mm");
            string action = actionID != -1 ? db.tblActivityLogsModules.Single(x => x.activityLogsModulesID == actionID).action : "";
            var module = moduleID != 0 ? db.tblSysComponents.Single(x => x.sysComponentID == moduleID).url.Split('/').Last() : "";
            var moduleName = String.Join("", module);
            List<UserLogsActivityYYYYMM.ActivityLogsResult> list = new List<UserLogsActivityYYYYMM.ActivityLogsResult>();

            foreach (var row in db.sp_getActivityLogs(tableName, _fromDate, _toDate, Users, terminalID).Where(
                   row => (action != "" && row.Url.Split('/').Last() == moduleName && row.Description.Contains(action))
                       || (action == "" && moduleID == 0 && row.Description.Contains('>'))
                       || (action == "" && moduleID != 0 && row.Url.Split('/').Last() == moduleName)))
            {
                var userName = db.tblUserProfiles.FirstOrDefault(x => x.userID == row.UserID).firstName + " " + db.tblUserProfiles.FirstOrDefault(x => x.userID == row.UserID).lastName;
                var terminalName = "";
                if (row.terminalID != 0 && row.terminalID != null)
                    terminalName = db.tblTerminals.FirstOrDefault(x => x.terminalID == row.terminalID).terminal;
                else
                    terminalName = "";

                list.Add(new UserLogsActivityYYYYMM.ActivityLogsResult()
                {
                    UserLogActivityIDInfo = row.UserLogActivityID,
                    UserName = userName,
                    UserIDInfo = row.UserID,
                    DateSavedInfo = row.DateSaved,
                    ControllerInfo = row.Controller,
                    MethodInfo = row.Method,
                    JsonModelInfo = row.JsonModel,
                    DescriptionInfo = row.Description,
                    UrlMethodInfo = row.UrlMethod,
                    UrlInfo = row.Url,
                    ContactInfo = row.ContactInfo,
                    terminalInfo = terminalName
                });
            }
            return list;
        }

        public SalesByTeam.SalesByTeamResult salesByTeamDataModel(SalesByTeam.SearchSalesByTeam model)
        {
            ePlatEntities db = new ePlatEntities();

            var priceTypeGroups = db.tblPriceTypesGroups.Where(x => x.priceTypeGroupID != null);
            var priceTypes = db.tblPriceTypes.Where(x => x.priceTypeID != null);

            var query = from p in db.tblPurchases
                        join c in db.tblCouponInfo on p.purchaseID equals c.purchaseID
                        join u in db.tblCouponInfoUnits on c.couponInfoID equals u.couponInfoID
                        join t in db.tblTerminals on p.terminalID equals t.terminalID
                        join cu in db.tblCurrencies on p.currencyID equals cu.currencyID
                        // join pt in db.tblPriceTypes on u.priceTypeID equals pt.priceTypeID
                        where (p.purchaseDateTime >= model.Search_I_FromDate
                            && p.purchaseDateTime <= model.Search_F_ToDate
                            && p.terminalID == model.SearchTerminalID
                            && p.currencyID == model.SearchCurrency
                            && p.spiMarketingProgram != null)
                        select new
                        {
                            purchaseID = p.purchaseID,
                            date = p.purchaseDateTime,
                            program = p.spiMarketingProgram,
                            team = p.spiSubdivision,
                            couponReference = c.couponReference,
                            folio = c.folio,
                            currencyID = c.currencyID,
                            couponStatusID = c.serviceStatusID,
                            couponStatus = c.status,
                            currency = cu.currencyCode,
                            coponInfoID = u.couponInfoID,
                            unit = u.unit,
                            // priceTypeID = pt.priceTypeID,
                            // priceType = pt.priceType,
                            priceTypeID = u.priceTypeID,
                            priceType = u.priceType,
                            unitTotalMX = u.totalMXN,
                            unitTotalUS = u.totalUSD
                        };
            SalesByTeam.SalesByTeamResult purchases = new SalesByTeam.SalesByTeamResult();
            purchases.Summary = new List<SalesByTeam.SalesByTeamInfo>();
            purchases.totalByProgram = new List<SalesByTeam.totalProgram>();
            purchases.tableWithPercentage = new SalesByTeam.percentageTable();

            purchases.total = GetDefaultListOfMoney(false);
            #region details
            foreach (var purchase in query.OrderByDescending(x => x.date))
            {
                var priceTG = priceTypeGroups.Count(x => x.priceTypeID == purchase.priceTypeID);
                var total = purchase.currencyID == 1 ? purchase.unitTotalUS : purchase.unitTotalMX;
                SalesByTeam.SalesByTeamInfo Sale = new SalesByTeam.SalesByTeamInfo();
                Sale.datePurchase = purchase.date;
                Sale.purchaseID = purchase.purchaseID;
                Sale.marketingProgram = purchase.program;
                Sale.subDivisionTeam = purchase.team;
                Sale.folio = purchase.folio;
                Sale.couponReference = purchase.couponReference;
                Sale.couponInfoID = purchase.coponInfoID;
                Sale.unit = purchase.unit;
                Sale.priceType = purchase.priceType;
                Sale.priceTypeID = purchase.priceTypeID;
                Sale.priceTypeGroupID = priceTG == 0 ? purchase.priceTypeID : priceTypeGroups.FirstOrDefault(x => purchase.priceTypeID == x.priceTypeID).mainPriceTypeID;
                Sale.priceTypeGroup = priceTG == 0 ? purchase.priceType : priceTypes.FirstOrDefault(x => Sale.priceTypeGroupID == x.priceTypeID).priceType;
                //Sale.priceTypeID = purchase.priceTypeID;
                //Sale.priceType = purchase.priceType;
                Sale.unitTotal = new Money(); //GetDefaultListOfMoney(false);
                Sale.currency = purchase.currency;
                Sale.status = purchase.couponStatus;
                Sale.unitTotal.Currency = purchase.currency;
                Sale.unitTotal.Amount = total;
                purchases.Summary.Add(Sale);
                purchases.total.FirstOrDefault(x => x.Currency == x.Currency).Amount += total;
            }
            #endregion

            var allPrices = purchases.Summary.Select(x => x.priceTypeGroup).Distinct().ToList();
            //  var totalByProgram = purchases.Summary.Where(x => x.)
            purchases.tableWithPercentage.prices = new List<SalesByTeam.totalPriceType>();//tipos de precio Generales
            purchases.tableWithPercentage.programs = new List<SalesByTeam.programList>();//lista de programas,equipos y tipos de precio
            purchases.tableWithPercentage.tfoot = new SalesByTeam.Totals();
            purchases.tableWithPercentage.tfoot.totalByPrices = new List<SalesByTeam.totalPriceType>();//totales
            purchases.tableWithPercentage.tfoot.totalGrand = new Money();
            purchases.tableWithPercentage.tfoot.totalByProgramsAndTeam = new Money();

            foreach (var detail in purchases.Summary)
            {
                #region Summary
                var detailTotal = detail.unitTotal.Amount;
                var detailCurrency = detail.unitTotal.Currency;
                var currentProgram = purchases.totalByProgram.FirstOrDefault(x => x.program == detail.marketingProgram);
                SalesByTeam.totalByTeam newTeam = new SalesByTeam.totalByTeam();//nuevo team
                SalesByTeam.totalPriceType newPriceType = new SalesByTeam.totalPriceType();//nuevo tipo de precio
                #region newProgram
                if (currentProgram == null)// si el programa no esta agregado
                {   //agrega el programa con su respectivo equipo
                    SalesByTeam.totalProgram newProgram = new SalesByTeam.totalProgram();
                    newProgram.program = detail.marketingProgram;
                    newProgram.totalByProgram = new Money(); //GetDefaultListOfMoney(false);
                    newProgram.listTeam = new List<SalesByTeam.totalByTeam>();
                    purchases.totalByProgram.Add(newProgram);

                    newTeam.Team = detail.subDivisionTeam;
                    newTeam.totalTeam = new Money(); //GetDefaultListOfMoney(false);
                    newTeam.totalpriceTypesByTeam = new List<SalesByTeam.totalPriceType>();
                    newProgram.listTeam.Add(newTeam);

                    //   newPriceType.priceTypeID = detail.priceTypeID;
                    //   newPriceType.priceType = detail.priceType;
                    newPriceType.priceTypeGroupID = detail.priceTypeGroupID;
                    newPriceType.priceTypeGroup = detail.priceTypeGroup;
                    newPriceType.totalPriceTypes = new Money(); //GetDefaultListOfMoney(false);
                    newTeam.totalpriceTypesByTeam.Add(newPriceType);

                    var totalPT = purchases.totalByProgram.FirstOrDefault(x => x.program == detail.marketingProgram)
                                            .listTeam.FirstOrDefault(x => x.Team == detail.subDivisionTeam)
                                            //  .totalpriceTypesByTeam.FirstOrDefault(x => x.priceType == detail.priceType)
                                            .totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup)
                                            .totalPriceTypes;
                    totalPT.Amount += detailTotal;
                    totalPT.Currency = detailCurrency;
                }
                else
                {    //   
                    if (currentProgram.listTeam.Count(x => x.Team == detail.subDivisionTeam) > 0)
                    { //si existe el equipo del actual programa                                                                                                      
                        var currentTeam = currentProgram.listTeam.FirstOrDefault(x => x.Team == detail.subDivisionTeam);
                        //asigna valor al tipo de precio equipo existente y agregalo
                        if (currentTeam.totalpriceTypesByTeam.Count(x => x.priceTypeGroup == detail.priceTypeGroup) > 0)
                        {
                            //si el tipo de precio ya existe entonces sumar el tipo de precio
                            var totalPT = currentTeam.totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup);
                            totalPT.totalPriceTypes.Amount += detailTotal;
                            totalPT.totalPriceTypes.Currency = detailCurrency;
                        }
                        else
                        {
                            //newPriceType.priceType = detail.priceType;
                            newPriceType.priceTypeGroupID = detail.priceTypeGroupID;
                            newPriceType.priceTypeGroup = detail.priceTypeGroup;
                            newPriceType.totalPriceTypes = new Money(); //GetDefaultListOfMoney(false);
                            currentTeam.totalpriceTypesByTeam.Add(newPriceType);

                            var totalPT = currentTeam.totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup);
                            totalPT.totalPriceTypes.Amount += detailTotal;
                            totalPT.totalPriceTypes.Currency = detailCurrency;
                        }
                    }
                    else
                    {
                        //var currentProgram = purchases.totalByProgram.FirstOrDefault(x => x.program == detail.marketingProgram);                     
                        newTeam.Team = detail.subDivisionTeam;
                        newTeam.totalTeam = new Money(); //GetDefaultListOfMoney(false);
                        newTeam.totalpriceTypesByTeam = new List<SalesByTeam.totalPriceType>();
                        currentProgram.listTeam.Add(newTeam);

                        var currentTeam = currentProgram.listTeam.FirstOrDefault(x => x.Team == detail.subDivisionTeam);
                        if (currentTeam.totalpriceTypesByTeam.Count(x => x.priceTypeGroup == detail.priceTypeGroup) > 0)//si existe 
                        {
                            var totalPT = currentTeam.totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup);//buscar
                            totalPT.totalPriceTypes.Amount += detailTotal;//sumar
                            totalPT.totalPriceTypes.Currency = detailCurrency;
                        }
                        else
                        {
                            // newPriceType.priceType = detail.priceType;
                            newPriceType.priceTypeGroupID = detail.priceTypeGroupID;
                            newPriceType.priceTypeGroup = detail.priceTypeGroup;
                            newPriceType.totalPriceTypes = new Money(); //GetDefaultListOfMoney(false);
                            currentTeam.totalpriceTypesByTeam.Add(newPriceType);//agregar

                            var totalPT = currentTeam.totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup);//buscar 
                            totalPT.totalPriceTypes.Amount += detailTotal; //sumar
                            totalPT.totalPriceTypes.Currency = detailCurrency;
                        }
                    }
                }
                #endregion
                var Program = purchases.totalByProgram.FirstOrDefault(x => x.program == detail.marketingProgram);
                var Team = Program.listTeam.FirstOrDefault(x => x.Team == detail.subDivisionTeam);

                Program.totalByProgram.Amount += detailTotal;
                Program.totalByProgram.Currency = detailCurrency;
                Team.totalTeam.Amount += detailTotal;
                Team.totalTeam.Currency = detailCurrency;
                #endregion
            }

            foreach (var detail in purchases.Summary)
            {
                foreach (var price in allPrices)
                {
                    if (purchases.tableWithPercentage.prices.Count(x => x.priceTypeGroup == price) == 0)//tipos de precio en programas
                    {
                        SalesByTeam.totalPriceType pricesInCero = new SalesByTeam.totalPriceType();
                        pricesInCero.priceTypeGroup = price;
                        pricesInCero.priceTypeGroupID = 0;
                        pricesInCero.totalPriceTypes = new Money();
                        pricesInCero.percentage = 0;
                        purchases.tableWithPercentage.prices.Add(pricesInCero);
                    }
                }

                purchases.tableWithPercentage.tfoot.totalByPrices = purchases.tableWithPercentage.prices;
                //agregar programas -teams -prices
                //tbody
                if (purchases.tableWithPercentage.programs.Count(x => x.program == detail.marketingProgram) == 0)// sino existe el programa add
                {
                    SalesByTeam.programList programs = new SalesByTeam.programList();
                    programs.program = detail.marketingProgram;
                    programs.programPercentage = 0;
                    programs.programTotal = new Money();
                    // programs.programTotal = detail.unitTotal;
                    programs.totalPercentage = 0;
                    programs.teamList = new List<SalesByTeam.totalByTeam>();
                    programs.priceTypes = new List<SalesByTeam.totalPriceType>();

                    SalesByTeam.totalByTeam team = new SalesByTeam.totalByTeam();
                    team.Team = detail.subDivisionTeam;
                    team.percentage = 0;
                    team.totalTeam = new Money();
                    // team.totalTeam = detail.unitTotal;
                    team.totalpriceTypesByTeam = new List<SalesByTeam.totalPriceType>();

                    SalesByTeam.totalPriceType pricesInTeam = new SalesByTeam.totalPriceType();
                    pricesInTeam.priceTypeGroup = detail.priceTypeGroup;
                    pricesInTeam.priceTypeGroupID = detail.priceTypeGroupID;
                    pricesInTeam.totalPriceTypes = new Money();
                    //   pricesInTeam.totalPriceTypes = detail.unitTotal;
                    pricesInTeam.percentage = 0;
                    team.totalpriceTypesByTeam.Add(pricesInTeam);//agregar típo de precio a equipo;
                    foreach (var priceInCero in allPrices)
                    {
                        if (team.totalpriceTypesByTeam.Count(x => x.priceTypeGroup == priceInCero) == 0)
                        {
                            SalesByTeam.totalPriceType pricesInTeamCero = new SalesByTeam.totalPriceType();
                            pricesInTeamCero.priceTypeGroup = priceInCero;
                            pricesInTeamCero.priceTypeGroupID = 0;
                            pricesInTeamCero.totalPriceTypes = new Money();
                            pricesInTeamCero.percentage = 0;
                            team.totalpriceTypesByTeam.Add(pricesInTeamCero);//agregar tipos de precio en cero al equipo
                        }
                    }
                    programs.teamList.Add(team);

                    //agregar tipo de precio a program
                    SalesByTeam.totalPriceType pricesInProgram = new SalesByTeam.totalPriceType();
                    pricesInProgram.priceTypeGroup = detail.priceTypeGroup;
                    pricesInProgram.priceTypeGroupID = detail.priceTypeGroupID;
                    pricesInProgram.totalPriceTypes = new Money();
                    pricesInProgram.percentage = 0;
                    programs.priceTypes.Add(pricesInProgram);

                    foreach (var pInP in allPrices)
                    {
                        // if(purchases.tableWithPercentage.programs.FirstOrDefault(x => x.program == detail.marketingProgram).priceTypes.Count(x => x.priceTypeGroup == pInP) == 0)
                        if (programs.priceTypes.Count(x => x.priceTypeGroup == pInP) == 0)
                        {
                            SalesByTeam.totalPriceType pricesInProgramCero = new SalesByTeam.totalPriceType();
                            pricesInProgramCero.priceTypeGroup = pInP;
                            pricesInProgramCero.priceTypeGroupID = 0;
                            pricesInProgramCero.totalPriceTypes = new Money();
                            pricesInProgramCero.percentage = 0;
                            programs.priceTypes.Add(pricesInProgramCero);
                            //purchases.tableWithPercentage.programs.FirstOrDefault(x => x.program == detail.marketingProgram).priceTypes.Add(pricesInProgramCero);
                        }
                    }
                    purchases.tableWithPercentage.programs.Add(programs);//agregar programa a la lista de programas                                             
                }
                else
                {
                    //programa actual
                    var currentPerProgram = purchases.tableWithPercentage.programs.FirstOrDefault(x => x.program == detail.marketingProgram);
                    if (currentPerProgram.teamList.Count(x => x.Team == detail.subDivisionTeam) == 0)//si el equipo no existe en la lista
                    {
                        SalesByTeam.totalByTeam team = new SalesByTeam.totalByTeam();
                        team.Team = detail.subDivisionTeam;
                        team.percentage = 0;
                        team.totalTeam = new Money();
                        // team.totalTeam = detail.unitTotal;
                        team.totalpriceTypesByTeam = new List<SalesByTeam.totalPriceType>();

                        //agregar tipos de precio al nuevo equipo
                        SalesByTeam.totalPriceType pricesInTeam = new SalesByTeam.totalPriceType();
                        pricesInTeam.priceTypeGroup = detail.priceTypeGroup;
                        pricesInTeam.priceTypeGroupID = detail.priceTypeGroupID;
                        pricesInTeam.totalPriceTypes = new Money();
                        //pricesInTeam.totalPriceTypes = detail.unitTotal;
                        pricesInTeam.percentage = 0;
                        team.totalpriceTypesByTeam.Add(pricesInTeam);//agregar típo de precio a equipo;
                        foreach (var priceInCero in allPrices)
                        {
                            if (team.totalpriceTypesByTeam.Count(x => x.priceTypeGroup == priceInCero) == 0)
                            {
                                SalesByTeam.totalPriceType pricesInTeamCero = new SalesByTeam.totalPriceType();
                                pricesInTeamCero.priceTypeGroup = priceInCero;
                                pricesInTeamCero.priceTypeGroupID = 0;
                                pricesInTeamCero.totalPriceTypes = new Money();
                                pricesInTeamCero.percentage = 0;
                                team.totalpriceTypesByTeam.Add(pricesInTeamCero);//agregar tipos de precio en cero al equipo
                            }
                        }
                        currentPerProgram.teamList.Add(team);
                    }
                    else//si ya existen en la lista
                    {
                    }//if team

                }//if Programs 

                var cuPro = purchases.tableWithPercentage.programs.FirstOrDefault(x => x.program == detail.marketingProgram);
                var cuTeam = cuPro.teamList.FirstOrDefault(x => x.Team == detail.subDivisionTeam);
                cuTeam.totalpriceTypesByTeam.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup).totalPriceTypes.Amount += detail.unitTotal.Amount;
                cuPro.priceTypes.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup).totalPriceTypes.Amount += detail.unitTotal.Amount;
                cuTeam.totalTeam.Amount += detail.unitTotal.Amount;
                cuPro.programTotal.Amount += detail.unitTotal.Amount;
                //tfoot
                var tfootPrices = purchases.tableWithPercentage.tfoot.totalByPrices.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup);
                tfootPrices.totalPriceTypes.Amount += detail.unitTotal.Amount;

                //purchases.tableWithPercentage.tfoot.totalByPrices.FirstOrDefault(x => x.priceTypeGroup == detail.priceTypeGroup).totalPriceTypes.Amount += detail.unitTotal.Amount;//grantotalPriceType
                purchases.tableWithPercentage.tfoot.totalGrand.Amount += detail.unitTotal.Amount;//GrandTotal 
            }//foreach 

            return purchases;
        }

        public InvitationBalance SearchInvitationsBalance(InvitationBalance.SearchInvitationBalance model)
        {
            ePlatEntities db = new ePlatEntities();
            InvitationBalance list = new InvitationBalance();
            UserSession session = new UserSession();
            list.balance = new List<InvitationBalance.InvitationBalanceModel>();

            DateTime? searchFromDate = new DateTime();
            DateTime? searchToDate = new DateTime();
            if (model.searchFromDate != null && model.searchToDate != null)
            {
                searchFromDate = model.searchFromDate.Value.AddDays(-1);
                searchToDate = model.searchToDate.Value.AddDays(1);
            }
            else
            {
                searchFromDate = model.searchFromDate;
                searchToDate = model.searchToDate;
            }

            var query = from invitations in db.tblInvitations
                        join opc in db.tblOPCS on invitations.opcID equals opc.opcID
                        join paymentDetails in db.tblPaymentDetails on invitations.invitationNumber equals paymentDetails.invitation
                        join egresses in db.tblEgresses on invitations.invitationNumber equals egresses.invitationNumber
                        join egreConcept in db.tblEgressConcepts on egresses.egressConceptID equals egreConcept.egressConceptID
                        join paymentAssignation in db.tblPaymentsAssignation on paymentDetails.paymentDetailsID equals paymentAssignation.paymentDetailsID
                        join purchasesServices in db.tblPurchaseServiceDetails on paymentAssignation.purchaseServiceDetailID equals purchasesServices.purchaseServiceDetailID
                        join coupons in db.tblCouponInfo on purchasesServices.purchase_ServiceID equals coupons.purchase_ServiceID
                        join terminals in db.tblTerminals on invitations.terminalID equals terminals.terminalID
                        where
                             (terminals.services == true && terminals.invitation == true && terminals.companiesGroupID == 2 && paymentDetails.paymentType == 3)
                              //&& ((invitations.dateSaved >= searchFromDate && invitations.dateSaved <= model.searchToDate) || (model.searchFromDate == null && model.searchToDate == null))
                              && ((searchFromDate <= invitations.dateSaved && searchToDate >= invitations.dateSaved) || (model.searchFromDate == null && model.searchToDate == null))
                              && ((paymentDetails.invitation == model.searchInvitationNumber
                                   && egresses.invitationNumber == model.searchInvitationNumber
                                   && invitations.invitationNumber == model.searchInvitationNumber
                                   ) || (model.searchInvitationNumber == null))
                        select new
                        {
                            invitationID = invitations.invitationID,
                            invitationDate = invitations.dateSaved,
                            invitationGuest = invitations.guest,
                            invitationNumber = invitations.invitationNumber,
                            invitationOpcID = invitations.opcID,
                            invitationOpcName = opc.opc,
                            invitationCurrencyCode = invitations.depositCurrencyCode,
                            invitationDepositAmount = invitations.depositAmount,
                            invitationTerminalID = invitations.terminalID,
                            //aplied to
                            couponID = coupons.couponInfoID,
                            coupon = purchasesServices.coupon,
                            couponDate = coupons.dateConfirmed,
                            couponCurrencyID = coupons.currencyID,
                            couponAmountMXN = coupons.totalMXN,
                            couponAmountUSA = coupons.totalUSD,
                            couponUser = coupons.confirmedBy,
                            couponPointOfSaleID = coupons.pointOfSaleID,
                            couponTerminalID = coupons.terminalID,
                            couponInvitationNumber = paymentDetails.invitation,
                            //egresses
                            egressID = egresses.egressID,
                            egressDate = egresses.dateSaved,
                            egressOpcID = egresses.opcID,
                            egressCurrencyID = egresses.currencyID,
                            egressConcept = egreConcept.egressConcept,
                            egressAmount = egresses.amount,
                            egressPointOfSaleID = egresses.pointOfSaleID,
                            egressTerminalID = egresses.terminalID,
                            egressInvitationNumber = egresses.invitationNumber
                        };

            var exchangeRate = from exP in db.tblExchangeRates
                               join ex in db.tblExchangeRates_PointsOfSales on exP.exchangeRateID equals ex.exchangeRateID
                               where exP.exchangeRateTypeID == 1
                                  && query.Count(x => x.couponDate >= exP.fromDate && exP.toDate <= x.couponDate) > 0
                                  && query.Count(x => x.egressDate >= exP.fromDate && exP.toDate <= x.egressDate) > 0
                               select new
                               {
                                   exchangeRateID = exP.exchangeRateID,
                                   terminalID = exP.terminalID,
                                   exchangeRate = exP.exchangeRate,
                                   pointOfSaleID = ex.pointOfSaleID
                               };

            var opcs = from opc in db.tblOPCS
                       join company in db.tblTerminals_Companies on opc.companyID equals company.companyID
                       where query.Count(x => x.egressTerminalID == company.terminalID) > 0
                            && query.Count(x => x.egressOpcID == opc.opcID) > 0
                       select opc;

            var maxDateInQuery = query.Count() > 0 ? query.Max(x => x.invitationDate) : new DateTime();
            var minDateInQuery = query.Count() > 0 ? query.Min(x => x.invitationDate) : new DateTime();

            var egressAgregados = new List<InvitationBalance.Egresses>();
            var couponsAgregados = new List<InvitationBalance.CouponsReference>();

            foreach (var invitation in query.OrderBy(x => x.invitationDate))
            {
                //fecha de cupon se encuentra en la consulta
                var invitationInQuery = query.FirstOrDefault(x => x.invitationDate <= invitation.couponDate && x.invitationNumber == invitation.invitationNumber && x.invitationNumber == invitation.couponInvitationNumber);
                if (invitationInQuery != null)
                {
                    //agregar invitacion
                    if (list.balance.Count(x => x.invitationID == invitationInQuery.invitationID) == 0)
                    {
                        //Invitations
                        InvitationBalance.InvitationBalanceModel newInvitation = new InvitationBalance.InvitationBalanceModel();
                        newInvitation.invitationID = invitationInQuery.invitationID;
                        newInvitation.date = invitationInQuery.invitationDate;
                        newInvitation.invitationNumber = invitationInQuery.invitationNumber;
                        newInvitation.opcName = invitationInQuery.invitationOpcName;
                        newInvitation.opcID = invitationInQuery.invitationOpcID;
                        newInvitation.guest = invitationInQuery.invitationGuest;
                        newInvitation.depositAmount = new Money();
                        newInvitation.depositCurrency = invitationInQuery.invitationCurrencyCode;
                        newInvitation.depositAmount.Currency = invitationInQuery.invitationCurrencyCode;
                        newInvitation.depositAmount.Amount = Math.Round(decimal.Parse(invitationInQuery.invitationDepositAmount.ToString()), 2);
                        newInvitation.balance = new Money();
                        newInvitation.balance.Currency = invitationInQuery.invitationCurrencyCode;
                        newInvitation.balance.Amount = invitationInQuery.invitationDepositAmount;
                        newInvitation.coupons = new List<InvitationBalance.CouponsReference>();
                        newInvitation.egresses = new List<InvitationBalance.Egresses>();
                        list.balance.Add(newInvitation);
                    }
                    // verificar si el cupon ya fue agregado previamente
                    if (couponsAgregados.Count(x => x.couponID == invitation.couponID) == 0)
                    {
                        //obtener invitacion del cupon
                        var couponInvitation = list.balance.FirstOrDefault(x => x.date <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber && x.opcName == invitation.couponUser);

                        if (couponInvitation == null)//nombre equivocado
                        {
                            var invitationDifName = list.balance.FirstOrDefault(x => x.date <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber);
                            if (invitationDifName != null)//si hay una invitacion que coincida entonces agregar cupon a invitacion
                            {
                                InvitationBalance.CouponsReference coupon = new InvitationBalance.CouponsReference();
                                coupon.couponID = invitation.couponID;
                                coupon.invitationNumber = invitation.couponInvitationNumber;
                                coupon.couponDate = invitation.couponDate;
                                coupon.coupon = invitation.coupon;
                                coupon.user = invitation.couponUser;
                                coupon.total = new Money();
                                coupon.total.Currency = invitation.couponCurrencyID == 1 ? "USD" : "MXN";
                                if (invitation.invitationCurrencyCode != coupon.total.Currency)
                                {
                                    var change = exchangeRate.Count(x => x.pointOfSaleID == invitation.couponPointOfSaleID) > 0 ?
                                        exchangeRate.FirstOrDefault(x => x.pointOfSaleID == invitation.couponPointOfSaleID) :
                                        exchangeRate.FirstOrDefault(x => x.terminalID == invitation.couponTerminalID);
                                    var beforeER = coupon.total.Amount.ToString() + " " + coupon.total.Currency.ToString();
                                    coupon.total.Amount = invitation.invitationCurrencyCode == "USD" ? Math.Round((invitation.couponAmountMXN / change.exchangeRate), 2) : Math.Round((invitation.couponAmountUSA * change.exchangeRate), 2);
                                    coupon.total.Currency = invitation.invitationCurrencyCode;
                                    coupon.exchangeRateCoupon = beforeER + " x (" + change.exchangeRate.ToString() + ')';
                                    coupon.exchangeRateIDCoupon = change.exchangeRateID.ToString();
                                }
                                else
                                {
                                    coupon.total.Amount = coupon.total.Currency == "USD" ? invitation.couponAmountUSA : invitation.couponAmountMXN;
                                }
                                invitationDifName.coupons.Add(coupon);
                                couponsAgregados.Add(coupon);
                                //resta
                                invitationDifName.balance.Amount = invitationDifName.balance.Amount - invitationDifName.coupons.FirstOrDefault(x => x.couponID == invitation.couponID).total.Amount;
                            }
                            else //no hay invitacion en el balance para el cupon agregar invitacion y cupon al  balance
                            {
                                InvitationBalance.InvitationBalanceModel newInvitation = new InvitationBalance.InvitationBalanceModel();
                                newInvitation.invitationID = invitation.invitationID;
                                newInvitation.date = invitation.invitationDate;
                                newInvitation.invitationNumber = invitation.invitationNumber;
                                newInvitation.opcName = invitation.invitationOpcName;
                                newInvitation.opcID = invitation.invitationOpcID;
                                newInvitation.guest = invitation.invitationGuest;
                                newInvitation.depositAmount = new Money();
                                newInvitation.depositCurrency = invitation.invitationCurrencyCode;
                                newInvitation.depositAmount.Currency = invitation.invitationCurrencyCode;
                                newInvitation.depositAmount.Amount = Math.Round(decimal.Parse(invitation.invitationDepositAmount.ToString()), 2);
                                newInvitation.balance = new Money();
                                newInvitation.balance.Currency = invitation.invitationCurrencyCode;
                                newInvitation.balance.Amount = invitation.invitationDepositAmount;
                                newInvitation.coupons = new List<InvitationBalance.CouponsReference>();
                                newInvitation.egresses = new List<InvitationBalance.Egresses>();
                                list.balance.Add(newInvitation);

                                var addInvitation = list.balance.FirstOrDefault(x => x.date <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber);

                                InvitationBalance.CouponsReference coupon = new InvitationBalance.CouponsReference();
                                coupon.couponID = invitation.couponID;
                                coupon.invitationNumber = invitation.couponInvitationNumber;
                                coupon.couponDate = invitation.couponDate;
                                coupon.coupon = invitation.coupon;
                                coupon.user = invitation.couponUser;
                                coupon.total = new Money();
                                coupon.total.Currency = invitation.couponCurrencyID == 1 ? "USD" : "MXN";
                                if (invitation.invitationCurrencyCode != coupon.total.Currency)
                                {
                                    var change = exchangeRate.Count(x => x.pointOfSaleID == invitation.couponPointOfSaleID) > 0 ?
                                        exchangeRate.FirstOrDefault(x => x.pointOfSaleID == invitation.couponPointOfSaleID) :
                                        exchangeRate.FirstOrDefault(x => x.terminalID == invitation.couponTerminalID);
                                    var beforeER = coupon.total.Amount.ToString() + " " + coupon.total.Currency.ToString();
                                    coupon.total.Amount = invitation.invitationCurrencyCode == "USD" ? Math.Round((invitation.couponAmountMXN / change.exchangeRate), 2) : Math.Round((invitation.couponAmountUSA * change.exchangeRate), 2);
                                    coupon.total.Currency = invitation.invitationCurrencyCode;
                                    coupon.exchangeRateCoupon = beforeER + " x (" + change.exchangeRate.ToString() + ')';
                                    coupon.exchangeRateIDCoupon = change.exchangeRateID.ToString();
                                }
                                else
                                {
                                    coupon.total.Amount = coupon.total.Currency == "USD" ? invitation.couponAmountUSA : invitation.couponAmountMXN;
                                }
                                addInvitation.coupons.Add(coupon);
                                couponsAgregados.Add(coupon);
                                //resta
                                addInvitation.balance.Amount = addInvitation.balance.Amount - addInvitation.coupons.FirstOrDefault(x => x.couponID == invitation.couponID).total.Amount;
                            }
                        }
                        else// 100% de coincidencia 
                        {
                            //agregar cupon a invitacion y a lista de cupones agregados
                            InvitationBalance.CouponsReference coupon = new InvitationBalance.CouponsReference();
                            coupon.couponID = invitation.couponID;
                            coupon.invitationNumber = invitation.couponInvitationNumber;
                            coupon.couponDate = invitation.couponDate;
                            coupon.coupon = invitation.coupon;
                            coupon.user = invitation.couponUser;
                            coupon.total = new Money();
                            coupon.total.Currency = invitation.couponCurrencyID == 1 ? "USD" : "MXN";
                            if (invitation.invitationCurrencyCode != coupon.total.Currency)
                            {
                                var change = exchangeRate.Count(x => x.pointOfSaleID == invitation.couponPointOfSaleID) > 0 ?
                                    exchangeRate.FirstOrDefault(x => x.pointOfSaleID == invitation.couponPointOfSaleID) :
                                    exchangeRate.FirstOrDefault(x => x.terminalID == invitation.couponTerminalID);
                                var beforeER = coupon.total.Amount.ToString() + " " + coupon.total.Currency.ToString();
                                coupon.total.Amount = invitation.invitationCurrencyCode == "USD" ? Math.Round((invitation.couponAmountMXN / change.exchangeRate), 2) : Math.Round((invitation.couponAmountUSA * change.exchangeRate), 2);
                                coupon.total.Currency = invitation.invitationCurrencyCode;
                                coupon.exchangeRateCoupon = beforeER + " x (" + change.exchangeRate.ToString() + ')';
                                coupon.exchangeRateIDCoupon = change.exchangeRateID.ToString();
                            }
                            else
                            {
                                coupon.total.Amount = coupon.total.Currency == "USD" ? invitation.couponAmountUSA : invitation.couponAmountMXN;
                            }
                            couponInvitation.coupons.Add(coupon);
                            couponsAgregados.Add(coupon);
                            //resta
                            couponInvitation.balance.Amount = couponInvitation.balance.Amount - couponInvitation.coupons.FirstOrDefault(x => x.couponID == invitation.couponID).total.Amount;
                        }
                    }
                }
                /*else //cupon fuera del rango de la query
                  {
                      //buscar en rangos de fechas mayores y menores a la query
                      //buscar en invitaciones fuera de los rangos de fechas de la consulta
                      var getInvitationsAfter = from n in db.tblInvitations
                                                join o in db.tblOPCS on n.opcID equals o.opcID
                                                where invitation.couponDate < n.dateSaved && invitation.invitationNumber == n.invitationNumber
                                                     && query.Count(x => x.invitationID == n.invitationID) == 0
                                                select new
                                                {
                                                    invitationID = n.invitationID,
                                                    invitationDate = n.dateSaved,
                                                    invitationGuest = n.guest,
                                                    invitationNumber = n.invitationNumber,
                                                    invitationOpcID = n.opcID,
                                                    invitationOpcName = o.opc,
                                                    invitationCurrencyCode = n.depositCurrencyCode,
                                                    invitationDepositAmount = n.depositAmount,
                                                    invitationTerminalID = n.terminalID,
                                                };
                      var getInvitationsBefore = from n in db.tblInvitations
                                                 join o in db.tblOPCS on n.opcID equals o.opcID
                                                 where invitation.couponDate > n.dateSaved && invitation.invitationNumber == n.invitationNumber
                                                      && query.Count(x => x.invitationID == n.invitationID) == 0
                                                 select new
                                                 {
                                                     invitationID = n.invitationID,
                                                     invitationDate = n.dateSaved,
                                                     invitationGuest = n.guest,
                                                     invitationNumber = n.invitationNumber,
                                                     invitationOpcID = n.opcID,
                                                     invitationOpcName = o.opc,
                                                     invitationCurrencyCode = n.depositCurrencyCode,
                                                     invitationDepositAmount = n.depositAmount,
                                                     invitationTerminalID = n.terminalID,
                                                 };
                      //verificar si hay 
                      if(getInvitationsAfter.Count() > 0 || getInvitationsBefore.Count() > 0)
                      {
                          //verificar si coupon ya fue agregado 
                          if (couponsAgregados.Count(x => x.couponID == invitation.couponID) == 0)
                          {
                              //checar si esta en balance
                              var couponInBalance = list.balance.FirstOrDefault(x => x.date <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber && x.opcName == invitation.couponUser);
                              if(couponInBalance == null )//si no hay invitacion en el balance entonces buscarla fuera del rengo
                              {
                                  var invitationOutQuery = getInvitationsAfter.Count() == 0 ? getInvitationsBefore.Count() == 0 ? null :
                                      getInvitationsBefore.FirstOrDefault(x => x.invitationDate <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber && x.invitationOpcName == invitation.couponUser) :
                                      getInvitationsAfter.FirstOrDefault(x => x.invitationDate <= invitation.couponDate && x.invitationNumber == invitation.couponInvitationNumber && x.invitationOpcName == invitation.couponUser); 

                                  if(invitationOutQuery == null) //no hay coincidencias nombre equivocado
                                  {

                                  }
                                  else// si hay concidiencia agregar invitacion a cupon
                                  {

                                  }
                              }
                              else //si esta en el balance agregar coupon a la invitacion
                              {

                              }
                          }  
                      }
                  }*/

                //egresos
                if (egressAgregados.Count(x => x.egressID == invitation.egressID) == 0)
                {
                    var egressInBalance = list.balance.FirstOrDefault(x => x.date < invitation.egressDate);
                    if (egressInBalance == null) //invitacion correspondiente al egreso no esta en el balance.- agregar invitacion y despues el balance
                    {
                        InvitationBalance.InvitationBalanceModel newInvitation = new InvitationBalance.InvitationBalanceModel();
                        newInvitation.invitationID = invitation.invitationID;
                        newInvitation.date = invitation.invitationDate;
                        newInvitation.invitationNumber = invitation.invitationNumber;
                        newInvitation.opcName = invitation.invitationOpcName;
                        newInvitation.opcID = invitation.invitationOpcID;
                        newInvitation.guest = invitation.invitationGuest;
                        newInvitation.depositAmount = new Money();
                        newInvitation.depositCurrency = invitation.invitationCurrencyCode;
                        newInvitation.depositAmount.Currency = invitation.invitationCurrencyCode;
                        newInvitation.depositAmount.Amount = Math.Round(decimal.Parse(invitation.invitationDepositAmount.ToString()), 2);
                        newInvitation.balance = new Money();
                        newInvitation.balance.Currency = invitation.invitationCurrencyCode;
                        newInvitation.balance.Amount = invitation.invitationDepositAmount;
                        newInvitation.coupons = new List<InvitationBalance.CouponsReference>();
                        newInvitation.egresses = new List<InvitationBalance.Egresses>();
                        list.balance.Add(newInvitation);

                        var invitationEgress = list.balance.FirstOrDefault(x => x.invitationID == invitation.invitationID && x.date >= invitation.egressDate);

                        InvitationBalance.Egresses egresses = new InvitationBalance.Egresses();
                        egresses.egressID = invitation.egressID;
                        egresses.opcName = opcs.Count(x => x.opcID == invitation.egressOpcID) == 0 ? "" : opcs.FirstOrDefault(x => x.opcID == invitation.egressOpcID).opc;
                        egresses.currencyID = invitation.egressCurrencyID;
                        egresses.egressDate = invitation.egressDate;
                        egresses.egressConcept = invitation.egressConcept;
                        egresses.amount = new Money();
                        egresses.amount.Currency = invitation.egressCurrencyID == 1 ? "USD" : "MXN";
                        if (invitation.invitationCurrencyCode != egresses.amount.Currency)
                        {
                            var change = exchangeRate.Count(x => x.pointOfSaleID == invitation.couponPointOfSaleID) > 0 ?
                                exchangeRate.FirstOrDefault(x => x.pointOfSaleID == invitation.couponPointOfSaleID) :
                                exchangeRate.FirstOrDefault(x => x.terminalID == invitation.couponTerminalID);
                            var beforeER = egresses.amount.Amount.ToString() + " " + egresses.amount.Currency;
                            egresses.amount.Currency = invitation.invitationCurrencyCode;
                            egresses.amount.Amount = invitation.invitationCurrencyCode == "USD" ? Math.Round((invitation.egressAmount / change.exchangeRate), 2) : Math.Round((invitation.egressAmount * change.exchangeRate), 2);
                            egresses.exchangeRateEgress = beforeER + " x (" + change.exchangeRate.ToString() + ")";
                            egresses.exchangeRateIDEgress = change.exchangeRateID.ToString();
                        }
                        else
                        {
                            egresses.amount.Amount = invitation.egressAmount;
                        }
                        invitationEgress.egresses.Add(egresses);
                        egressAgregados.Add(egresses);
                        //resta
                        invitationEgress.balance.Amount = invitationEgress.balance.Amount - invitationEgress.egresses.FirstOrDefault(x => x.egressID == invitation.egressID).amount.Amount;
                    }
                    else// agregar egreso a invitacion
                    {
                        InvitationBalance.Egresses egresses = new InvitationBalance.Egresses();
                        egresses.egressID = invitation.egressID;
                        egresses.opcName = opcs.Count(x => x.opcID == invitation.egressOpcID) == 0 ? "" : opcs.FirstOrDefault(x => x.opcID == invitation.egressOpcID).opc;
                        egresses.currencyID = invitation.egressCurrencyID;
                        egresses.egressDate = invitation.egressDate;
                        egresses.egressConcept = invitation.egressConcept;
                        egresses.amount = new Money();
                        egresses.amount.Currency = invitation.egressCurrencyID == 1 ? "USD" : "MXN";
                        if (invitation.invitationCurrencyCode != egresses.amount.Currency)
                        {
                            var change = exchangeRate.Count(x => x.pointOfSaleID == invitation.couponPointOfSaleID) > 0 ?
                                exchangeRate.FirstOrDefault(x => x.pointOfSaleID == invitation.couponPointOfSaleID) :
                                exchangeRate.FirstOrDefault(x => x.terminalID == invitation.couponTerminalID);
                            var beforeER = egresses.amount.Amount.ToString() + " " + egresses.amount.Currency;
                            egresses.amount.Currency = invitation.invitationCurrencyCode;
                            egresses.amount.Amount = invitation.invitationCurrencyCode == "USD" ? Math.Round((invitation.egressAmount / change.exchangeRate), 2) : Math.Round((invitation.egressAmount * change.exchangeRate), 2);
                            egresses.exchangeRateEgress = beforeER + " x (" + change.exchangeRate.ToString() + ")";
                            egresses.exchangeRateIDEgress = change.exchangeRateID.ToString();
                        }
                        else
                        {
                            egresses.amount.Amount = invitation.egressAmount;
                        }
                        egressInBalance.egresses.Add(egresses);
                        egressAgregados.Add(egresses);
                        //resta de balance 
                        //resta balance
                        egressInBalance.balance.Amount = egressInBalance.balance.Amount - egressInBalance.egresses.FirstOrDefault(x => x.egressID == invitation.egressID).amount.Amount;
                    }
                }
            }
            return list;
        }
        public object GetDDLData(string path)
        {
            return GetDDLData(path, null);
        }

        //public object GetDDLData(string path, long? id)
        public object GetDDLData(string itemType, string itemID)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            switch (itemType)
            {
                case "leadSourceID":
                    {
                        list = ReportsCatalogs.FillDrpLeadSourcesByWorkGroup();
                        break;
                    }
                case "tableFields":
                    {
                        list = ReportsCatalogs.GetDataBaseTablesProperties();
                        //list = PreArrivalDataModel.PreArrivalCatalogs.GetFieldFiltersInfo();
                        break;
                    }
                case "searchFilters":
                    {
                        return ReportsCatalogs.GetDataBaseInfoForModel();
                    }
                case "bookingStatusID":
                    {
                        list = ReportsCatalogs.FillDrpBookingStatusByWorkGroup();
                        break;
                    }
                case "finalBookingStatusID":
                    {
                        list = ReportsCatalogs.FillDrpBookingStatusByWorkGroup();
                        break;
                    }
                case "destinationID":
                    {
                        list = ReportsCatalogs.FillDrpDestinations();
                        break;
                    }
                case "reservationStatusID":
                    {
                        list = ReportsCatalogs.FillDrpReservationStatus();
                        break;
                    }
                case "terminalID":
                    {
                        list = TerminalDataModel.GetCurrentUserTerminals();
                        break;
                    }
                case "assignedToUserID":
                    {
                        list = ReportsCatalogs.FillDrpUsers();
                        break;
                    }
                case "inputByUserID":
                    {
                        list = ReportsCatalogs.FillDrpUsers();
                        break;
                    }
                case "planTypeID":
                    {
                        list = ReportsCatalogs.FillDrpPlanTypes();
                        break;
                    }
                case "qualificationStatusID":
                    {
                        list = ReportsCatalogs.FillDrpQualificationStatus();
                        break;
                    }
                case "salesAgentUserID":
                    {
                        list = ReportsCatalogs.FillDrpUsers();
                        break;
                    }
                //properties not currently set in model
                case "tourStatusID":
                    {
                        list = ReportsCatalogs.FillDrpTourStatus();
                        break;
                    }
                case "finalTourStatusID":
                    {
                        list = ReportsCatalogs.FillDrpTourStatus();
                        break;
                    }
                case "placeID":
                    {
                        list = ReportsCatalogs.FillDrpResorts();
                        break;
                    }
                case "roomTypeID":
                    {
                        list = PlaceDataModel.GetAllRoomTypes();
                        break;
                    }
                case "activityesByTerminal":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServices(null, id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServices(null);
                        }
                        list.Insert(0, ListItems.Default("All"));
                        break;
                    }
                case "activitiesByProvider":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            int id = int.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServices(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServices(null);
                        }
                        list.Insert(0, ListItems.Default("All"));
                        break;
                    }
                case "allActivitiesByProvider":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            int id = int.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServicesIncludingDeleted(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServicesIncludingDeleted(null);
                        }
                        list.Insert(0, ListItems.Default("All"));
                        break;
                    }
                case "agentsWithCommission":
                    {
                        long id = long.Parse(itemID);
                        list = ReportDataModel.ReportsCatalogs.FillDrpUsersWithCommission(id);
                        break;
                    }
                case "allSalesAgentsByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpSalesAgents(id);
                        break;
                    }
                case "salesAgentsByTerminal":
                    {
                        if (Utils.GeneralFunctions.IsUserInRole("Reservations Agent", session.UserID, true))
                        {
                            list.Add(new SelectListItem()
                            {
                                Text = session.User,
                                Value = session.UserID.ToString()
                            });
                        }
                        else if (Utils.GeneralFunctions.IsUserInRole("Leader", session.UserID, true))
                        {
                            var subordinatedUsers = db.sp_getSubordinatedUsers(session.UserID);
                            foreach (var u in subordinatedUsers)
                            {
                                if (u.userID != null)
                                {
                                    var profile = db.tblUserProfiles.FirstOrDefault(x => x.userID == u.userID);
                                    list.Add(new SelectListItem()
                                    {
                                        Text = profile.firstName + " " + profile.lastName,
                                        Value = u.userID.ToString()
                                    });
                                }
                            }
                            list.Add(new SelectListItem()
                            {
                                Text = session.User,
                                Value = session.UserID.ToString()
                            });
                        }
                        else
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpSalesAgents(id);
                            list.Insert(0, ListItems.Default("All Agents", ""));
                        }
                        break;
                    }
                case "getSalesAgent": //a partir del punto de venta
                    {
                        list.Add(new SelectListItem()
                        {
                            Text = session.User,
                            Value = session.UserID.ToString()
                        });

                        if (Utils.GeneralFunctions.IsUserInRole("Online Reservations Agent", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("External Reservations Supervisor", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Operation Manager", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Onsite Reservations Agent VEA", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Team Leader Cabo", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Administrator", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Accounting", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Administrative Assistant", session.UserID, true)
                            || Utils.GeneralFunctions.IsUserInRole("Comptroller", session.UserID, true))
                        {
                            if (itemID != "null" && itemID != "")
                            {
                                ePlatEntities db = new ePlatEntities();
                                DateTime range = DateTime.Today.AddDays(-30);
                                int id = int.Parse(itemID);
                                var agentsInPoint = (from a in db.tblPurchases_Services
                                                     where a.tblPurchases.pointOfSaleID == id
                                                     && ((a.confirmationDateTime >= range
                                                     && a.confirmedByUserID != session.UserID)
                                                     || (a.cancelationDateTime >= range
                                                     && a.canceledByUserID != session.UserID))
                                                     select a.confirmedByUserID).Distinct();
                                //var agentsInPoint = (from a in db.tblPurchases_Services
                                //                     where a.tblPurchases.pointOfSaleID == id
                                //                     && a.confirmationDateTime >= range
                                //                     && a.confirmedByUserID != us.UserID
                                //                     select a.confirmedByUserID).Distinct();

                                var agentsWithCancelations = (from a in db.tblPurchases_Services
                                                              where a.tblPurchases.pointOfSaleID == id
                                                              && a.cancelationDateTime >= range
                                                              && a.canceledByUserID != session.UserID
                                                              select a.canceledByUserID).Distinct();

                                var agentsInPayments = (from p in db.tblPaymentDetails
                                                        where p.tblPurchases.pointOfSaleID == id
                                                        && (p.deleted == null || p.deleted == false)
                                                        && p.dateSaved >= range
                                                        && p.savedByUserID != session.UserID
                                                        select p.savedByUserID).Distinct();

                                agentsInPoint = agentsInPoint.Concat(agentsInPayments).Concat(agentsWithCancelations).Distinct();

                                foreach (var user in agentsInPoint)
                                {
                                    if (user != null)
                                    {
                                        var agent = db.tblUserProfiles.Single(u => u.userID == user);
                                        list.Add(new SelectListItem()
                                        {
                                            Text = agent.firstName + " " + agent.lastName,
                                            Value = user.ToString()
                                        });
                                    }
                                }
                            }
                            list = list.OrderBy(x => x.Text).ToList();
                            if (list.Count() > 1)
                            {
                                list.Insert(0, ListItems.Default("All Agents", ""));
                            }
                        }

                        break;
                    }
                case "provider":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpProvidersPerDestinationInTerminals(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpProvidersPerDestinationInTerminals();
                        }
                        list.Insert(0, ListItems.Default("All", ""));
                        break;
                    }
                case "pointOfSale":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpPointsOfSale(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpPointsOfSale();
                        }

                        break;
                    }
                case "pointOfSaleNoTest":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpPointsOfSale(id, null, null, true);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpPointsOfSale(null, null, null, true);
                        }

                        break;
                    }
                case "pointOfSaleOne":
                    {
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpPointsOfSale();
                        list.Insert(0, ListItems.Default("Select One", ""));
                        break;
                    }
                case "marketingCompany":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = CatalogsDataModel.Companies.CompaniesCatalogs.FillDrpMarketingCompanies(id);
                        }
                        else
                        {
                            list = CatalogsDataModel.Companies.CompaniesCatalogs.FillDrpMarketingCompanies();
                        }
                        list.Insert(0, ListItems.Default("Público en General", ""));
                        break;
                    }
                case "companiesByTerminalID":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = OpcDataModel.GetCompanies(id);
                            list.Insert(0, new SelectListItem()
                            {
                                Text = "Público en General",
                                Value = "-1"
                            });
                        }
                        else
                        {
                            list = OpcDataModel.GetCompanies();
                        }

                        break;
                    }
                case "chargableCompaniesByTerminalID":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = OpcDataModel.GetChargableCompanies(id);
                        }
                        break;
                    }
                case "promotionTeam":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = OpcDataModel.GetPromotionTeams(id);
                        }
                        else
                        {
                            list = OpcDataModel.GetPromotionTeams();
                        }
                        break;
                    }
                case "opcsByTerminal":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpOPC(id, null);
                            //list = MasterChartDataModel.LeadsCatalogs.FillDrpOPC(id, null, null);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpOPC();
                        }
                        list.Insert(0, ListItems.Default("All", ""));
                        break;
                    }
                case "allOpcsByTerminal":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpAllOPCs(id, null);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpAllOPCs(null, null);
                        }
                        list.Insert(0, ListItems.Default("All", ""));
                        break;
                    }
                case "location":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            int id = int.Parse(itemID);
                            list = OpcDataModel.GetLocations(id);
                        }
                        else
                        {
                            list = OpcDataModel.GetLocations();
                        }
                        break;
                    }
                case "selectedTerminals":
                    {
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpSelectedTerminals();
                        break;
                    }
                case "categories":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpCategories(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpCategories();
                        }
                        break;
                    }
                case "categoriesByTerminal":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpCategories(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpCategories();
                        }
                        list.Insert(0, ListItems.Default("All", ""));
                        break;
                    }
                case "accountingAccounts":
                    {
                        if (itemID != null && itemID != "0" && itemID != "")
                        {
                            long id = long.Parse(itemID);
                            list = ActivityDataModel.ActivitiesCatalogs.FillDrpAccountingAccounts(id);
                        }
                        else
                        {
                            list = ActivityDataModel.ActivitiesCatalogs.FillDrpAccountingAccounts();
                        }
                        break;
                    }
                case "servicesByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpServicesWithProvider(id);
                        break;
                    }
                case "priceTypesByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpPriceTypesForTerminal(id);
                        break;
                    }
                case "rolesByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = AdminDataModel.AdminCatalogs.FillDrpActiveRoles(id);
                        break;
                    }
                case "fundsByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpFundsPerSelectedTerminals(id, true);
                        break;
                    }
                case "chargeBackConceptsByTerminal":
                    {
                        long id = long.Parse(itemID);
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpEgressConceptsWithType(id);
                        break;
                    }
                case "getMinCouponNumber":
                    {
                        int id = int.Parse(itemID);
                        list.Insert(0, ListItems.Default(getMinCouponNumber(id), ""));
                        break;
                    }
                case "getMaxCouponNumber":
                    {
                        int id = int.Parse(itemID);
                        list.Insert(0, ListItems.Default(getMaxCouponNumber(id), ""));
                        break;
                    }
                case "servicesByCategory":
                    {
                        if (itemID != "" && itemID != null)
                        {
                            long id = long.Parse(itemID);
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServicesByCategory(id);
                        }
                        else
                        {
                            list = MasterChartDataModel.LeadsCatalogs.FillDrpServicesByCategory(null);
                        }

                        break;
                    }
                case "company":
                    {
                        list = CatalogsDataModel.Companies.CompaniesCatalogs.FillDrpCompanies();
                        break;
                    }
                case "AAprovider": //AcountingAccountsProviders
                    {
                        list = ReportDataModel.getProvidersListByTerminals(itemID);
                        break;
                    }
                case "accountsCategory":
                    {
                        list = ReportDataModel.GetActivitiesCategories(itemID);
                        break;
                    }
                case "selectedTerminalsWithDefaultItem":
                    {
                        list = MasterChartDataModel.LeadsCatalogs.FillDrpSelectedTerminals();
                        list.Insert(0, Utils.ListItems.Default());
                        break;
                    }
                case "fieldGroups":
                    {
                        list = NotificationsDataModel.NotificationsCatalogs.FillDrpFieldGroups();
                        break;
                    }
                case "phonesByTerminal":
                    {
                        if (itemID != "" && itemID != null)
                        {
                            long id = long.Parse(itemID);
                            list = NetCenterDataModel.NetCenterCatalogs.FillDrpPhones(id);
                        }
                        break;
                    }
                case "Module":
                    {
                        list = ReportDataModel.getModules();
                        list.Add(new SelectListItem()
                        {
                            Text = "--Select One--",
                            Value = "0"
                        });
                        list.OrderBy(x => x.Text);
                        break;
                    }

                case "Pages":
                    {
                        list = ReportDataModel.getActionsByModuleID(itemID);
                        list.OrderBy(x => x.Text);
                        break;
                    }
                case "adsAccounts":
                    {
                        list = GoogleAdsDataModel.Reports.GetAdsAccounts();
                        list.OrderBy(x => x.Text);
                        break;
                    }
            }
            return list;
        }


        public static List<SelectListItem> getModules()
        {
            ePlatEntities db = new ePlatEntities();
            List<SelectListItem> list = new List<SelectListItem>();

            var query = from module in db.tblSysComponents
                        join page in db.tblSysComponents on module.sysComponentID equals page.sysParentComponentID
                        where module.sysComponentTypeID == 2
                             && (module.sysParentComponentID == 2 || module.sysParentComponentID == 3 || module.sysParentComponentID == 4)
                             && (page.sysParentComponentID == module.sysComponentID && page.url != null)
                        // && (module.sysParentComponentID == 3 && module.sysComponentID == 10301)
                        //page.view = true;
                        select new
                        {
                            moduleID = module.sysComponentID,
                            moduleParentID = module.sysParentComponentID,
                            module = module.sysComponent,
                            pageID = page.sysComponentID,
                            pageParentID = page.sysParentComponentID,
                            page = page.sysComponent,
                            pageUrl = page.url,
                            type = page.sysComponentTypeID
                        };

            foreach (var item in query)
            {
                if (item.type == 2)
                {
                    list.Add(new SelectListItem()
                    {
                        Text = item.module + " - " + item.page,
                        Value = item.pageID.ToString()
                    });
                }
                else
                {
                    list.Add(new SelectListItem()
                    {
                        Text = item.module,
                        Value = item.pageID.ToString()
                    });
                }
            }
            list.Add(new SelectListItem()
            {
                Text = "Master Chart",
                Value = "10301"
            });
            list.Add(new SelectListItem()
            {
                Text = "--All--",
                Value = "0"
            });

            return list;
        }
        public static List<SelectListItem> getActionsByModuleID(string ID)
        {
            ePlatEntities db = new ePlatEntities();
            var sysComponentID = int.Parse(ID);

            var query = from m in db.tblActivityLogsModules
                        join x in db.tblSysComponents on sysComponentID equals x.sysComponentID
                        where m.moduleName == x.sysComponent
                        select m;

            List<SelectListItem> list = new List<SelectListItem>();

            foreach (var m in query)
            {
                list.Add(new SelectListItem()
                {
                    Value = m.activityLogsModulesID.ToString(),
                    Text = m.action
                });
            }
            list.Add(new SelectListItem()
            {
                Text = "--All--",
                Value = "-1"
            });
            return list;
        }

        string getMinCouponNumber(int PoSid)
        {
            string coupon = "";
            var couponFolios = (from c in db.tblCouponFolios
                                where c.pointOfSaleID == PoSid
                                orderby c.couponFolioID
                                select c.fromFolio).FirstOrDefault();
            if (couponFolios != null)
            {
                coupon = couponFolios.ToString();
            }

            return coupon;
        }

        string getMaxCouponNumber(int PoSid)
        {
            string toCoupon = "";
            int toNumber = 0;
            toCoupon = new MasterChartDataModel.Purchases().GetNextCouponFolio(PoSid).Replace(",", "");
            toNumber = int.Parse(toCoupon.Substring(1));
            toNumber = toNumber - 1;
            toCoupon = toNumber.ToString();
            return toCoupon;
        }

        DateTime GetBudgetEndDate(string ResetDay, DateTime DateSaved, DateTime TDate)
        {
            DateTime CloseOutDate = TDate;
            DateTime ResetDate = new DateTime();
            for (int x = 7; x >= 0; x--)
            {
                var y = DateSaved.AddDays(x);
                if (ResetDay == y.DayOfWeek.ToString().ToLower() && ResetDay != null)
                {
                    ResetDate = y;
                    break;
                }
                else
                {
                    ResetDate = TDate;
                }
            }
            return ResetDate;
        }

        //methods
        public static List<SelectListItem> GetActivitiesCategories(string ID)
        {
            var list = new List<SelectListItem>();
            ePlatEntities db = new ePlatEntities();

            var TerminalID = int.Parse(ID);
            var currentTerminals = db.tblTerminals_Companies.Where(x => x.terminalID == TerminalID).Select(x => x.companyID);
            var query = from ServiceAccount in db.tblServices_AccountingAccounts
                        join Account in db.tblAccountingAccounts on ServiceAccount.accountingAccountID equals Account.accountingAccountID
                        join Service in db.tblServices on ServiceAccount.serviceID equals Service.serviceID
                        where Service.originalTerminalID == TerminalID && currentTerminals.Contains(Account.companyID) || TerminalID == 0
                        group Account by Account.accountName into Categories
                        select Categories;

            foreach (var x in query)
            {
                list.Add(new SelectListItem()
                {
                    Value = x.FirstOrDefault().accountingAccountID.ToString(),
                    Text = x.FirstOrDefault().accountName
                });
            }
            list.Add(new SelectListItem()
            {
                Value = "No Assigned",
                Text = "No Assigned",
            });

            return list;
        }

        public static List<SelectListItem> getProvidersListByTerminals(string ID)
        {
            var list = new List<SelectListItem>();
            ePlatEntities db = new ePlatEntities();

            var TerminalID = int.Parse(ID);
            foreach (var provider in db.tblProviders.Where(x => x.tblTerminals.terminalID == TerminalID).OrderBy(y => y.comercialName))
            {
                list.Add(new SelectListItem()
                {
                    Value = provider.providerID.ToString(),
                    Text = provider.comercialName
                });
            }
            return list;
        }

        //public List<NotificationsModel.NotificationsReportModel> GetNotificationsReport(NotificationsModel.SearchNotificationsModel model, bool showVLOClassification, HttpRequestBase request)
        public List<NotificationsModel.NotificationsReportModel> GetNotificationsReport(NotificationsModel.SearchNotificationsModel model, bool showVLOClassification, HttpRequestBase request, ref string masterEmailBody, ref ePlatEntities db)
        {
            //ePlatEntities db = new ePlatEntities();
            List<NotificationsModel.NotificationsReportModel> list = new List<NotificationsModel.NotificationsReportModel>();
            try
            {
                IQueryable<tblFieldsValues> values;
                List<SPIModels.TheVillaGroup.spManifest_Info_Result> ManifestQuery;

                var VLOS = SPIDataModel.GetVLOS(model.SearchNotifications_Terminals);
                var fromDate = model.SearchNotifications_I_Date != null && model.SearchNotifications_I_Date != "" ? DateTime.Parse(model.SearchNotifications_I_Date) : DateTime.Today;
                var toDate = model.SearchNotifications_F_Date != null && model.SearchNotifications_F_Date != "" ? DateTime.Parse(model.SearchNotifications_F_Date).AddDays(1).AddSeconds(-1) : DateTime.Today.AddDays(1).AddSeconds(-1);
                var forms = model.SearchNotifications_Forms != null ? model.SearchNotifications_Forms : NotificationsDataModel.NotificationsCatalogs.FillDrpFieldGroups(model.SearchNotifications_Terminals).Select(m => int.Parse(m.Value)).ToArray();
                var fields = db.tblFields.Where(m => forms.Contains(m.fieldGroupID));
                var fieldsIds = fields.Select(m => m.fieldID).ToArray();
                var sentByUserID = fields.Where(m => m.field == "$SentByUserID").Select(m => m.fieldID).ToArray();
                var isAdmin = !HttpContext.Current.User.Identity.IsAuthenticated || GeneralFunctions.IsUserInRole("Administrator");
                var authUsers = isAdmin ? new List<string>() { } : UserDataModel.GetUsersBySupervisor().Select(m => m.Value).ToList();
                var date = fromDate;

                var TotalOpen = 0;
                var TotalSent = 0;
                var TotalReceived = 0;
                var TotalClicked = 0;

                if (showVLOClassification)//its a request from ePlat
                {
                    int count;
                    //var proceed = CorrectCustomerIdFromSPI(model, request, out count);
                    var proceed = CorrectCustomerIdFromSPI(model, request, out count, ref masterEmailBody, ref db);
                    if (!proceed || count == 0)
                    {
                        return list;
                    }
                }

                var transactionIds = db.tblFieldsValues.Where(m => (m.dateSaved >= fromDate && m.dateSaved <= toDate) && sentByUserID.Contains(m.fieldID) && (isAdmin || authUsers.Contains(m.value))).Select(m => m.transactionID);
                CorrectCustomerIdFromSPI(model, transactionIds, out ManifestQuery, out values, ref db, ref VLOS, request, ref masterEmailBody);
                //ManifestQuery = ManifestQuery.Where(m => m.TourDate >= fromDate && m.TourDate <= toDate).ToList();

                var fieldValues = values.Select(m => new { m.tblFields.fieldGroupID, m.fieldID, m.tblFields.field, m.value, m.transactionID });
                var groupedByVLO = fieldValues.Where(m => sentByUserID.Contains(m.fieldID)).GroupBy(m => m.value);
                var groupedByForms = fieldValues.GroupBy(m => m.fieldGroupID);
                var canceledContracts = ManifestQuery.Where(m => m.ContractStatus == "Cancel").ToList();

                foreach (var form in groupedByForms)
                {
                    #region
                    var formName = db.tblFieldGroups.Single(m => m.fieldGroupID == form.Key).fieldGroup;
                    #region "new
                    var sent = 0;
                    var received = 0;
                    var opened = 0;
                    var clicked = 0;
                    var transactionGroups = form.Where(m => m.field == "$CustomerID").GroupBy(m => m.value);

                    foreach (var i in transactionGroups)
                    {
                        var transactions = i.Select(m => m.transactionID).ToList();
                        var fv = fieldValues.Where(m => transactions.Contains(m.transactionID));
                        if (fv.Count(m => m.field == "$Sent" && m.value != null) > 0)
                            sent++;
                        if (fv.Count(m => m.field == "$Received") > 0 && fv.Count(m => m.field == "$Received" && m.value != null) > 0)
                            received++;
                        if (fv.Count(m => m.field == "$Open") > 0 && fv.Count(m => m.field == "$Open" && m.value != null) > 0)
                            opened++;
                        if (fv.Count(m => m.field == "$Click" && m.value != null) > 0)
                            clicked++;
                    }
                    #endregion

                    var clicks = new List<NotificationsModel.NotificationsClickModel>();

                    TotalSent += sent;
                    TotalReceived += received;
                    TotalOpen += opened;
                    TotalClicked += clicked;

                    foreach (var i in transactionGroups)
                    {
                        var transactions = i.Select(m => m.transactionID).ToList();
                        var transaction = fieldValues.Where(m => transactions.Contains(m.transactionID));
                        var listUrls = new List<KeyValuePair<string, string>>();
                        masterEmailBody += "<br />Transaction: " + transaction.FirstOrDefault().transactionID.ToString();
                        var guest = (transaction.Count(m => m.field == "$Title" && m.value != null) > 0 ? transaction.FirstOrDefault(m => m.field == "$Title" && m.value != null).value + " " : "")
                            + (transaction.Count(m => m.field == "$ClientName" && m.value != null) > 0 ? transaction.FirstOrDefault(m => m.field == "$ClientName" && m.value != null).value : transaction.Count(m => m.field == "$FirstName" && m.value != null) > 0 ? transaction.FirstOrDefault(m => m.field == "$FirstName" && m.value != null).value : transaction.Count(m => m.field == "$LastName" && m.value != null) > 0 ? transaction.FirstOrDefault(m => m.field == "$LastName" && m.value != null).value : "");
                        var vpa = transaction.Count(m => m.field == "$VPANumber" && m.value != null) > 0 ? transaction.FirstOrDefault(m => m.field == "$VPANumber" && m.value != null).value : "";
                        var vlo = transaction.Count(x => x.field == "$SentByUserID") > 0 ? VLOS.Count(m => m.Value == transaction.FirstOrDefault(x => x.field == "$SentByUserID").value) > 0 ? VLOS.FirstOrDefault(m => m.Value == transaction.FirstOrDefault(x => x.field == "$SentByUserID").value).Text : "" : "";
                        var urls = transaction.Count(m => m.field == "$Click" && m.value != null) > 0 ? transaction.Where(m => m.field == "$Click" && m.value != null).GroupBy(m => m.value).Select(m => new { url = m.Key, count = m.Count() }) : null;

                        var status = canceledContracts.Count(m => m.CustomerID == int.Parse(i.Key)) > 0 ? "Cancel" : "";

                        if (urls != null && urls.Count() > 0)
                        {
                            foreach (var url in urls)
                            {
                                listUrls.Add(new KeyValuePair<string, string>((url.url != null ? url.url.Contains("uggc") ? Rot13.Transform(url.url) : url.url : ""), url.count.ToString()));
                            }

                            clicks.Add(new NotificationsModel.NotificationsClickModel()
                            {
                                NotificationsReport_Transaction = transaction.FirstOrDefault().transactionID.ToString(),
                                NotificationsReport_FormName = formName,
                                NotificationsReport_GuestName = guest,
                                NotificationsReport_VPANumber = vpa,
                                NotificationsReport_VLO = vlo,
                                NotificationsReport_Urls = listUrls,
                                NotificationsReport_Status = status
                            });
                        }
                    }

                    list.Add(new NotificationsModel.NotificationsReportModel()
                    {
                        NotificationsReport_VLO = null,
                        NotificationsReport_FormID = form.Key,
                        NotificationsReport_Form = formName,
                        NotificationsReport_Sent = sent.ToString(),
                        NotificationsReport_Received = received.ToString(),
                        NotificationsReport_Opened = opened.ToString(),
                        NotificationsReport_Clicked = clicked.ToString(),
                        NotificationsReport_OpenRate = received != 0 ? Math.Round((decimal)(((decimal)opened / received) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
                        NotificationsReport_ClickRate = received != 0 ? Math.Round((decimal)(((decimal)clicked / received) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
                        NotificationsReport_ClicksList = clicks
                    });
                    #endregion
                }

                var _TotalOpen = 0;
                var _TotalSent = 0;
                var _TotalReceived = 0;
                var _TotalClicked = 0;

                if (showVLOClassification)
                {
                    foreach (var item in groupedByVLO)
                    {
                        var name = VLOS.FirstOrDefault(m => m.Value == item.Key).Text;

                        #region "new
                        var sent = 0;
                        var received = 0;
                        var opened = 0;
                        var clicked = 0;
                        var transactionsPerVLO = item.Select(m => m.transactionID);
                        var items = fieldValues.Where(m => transactionsPerVLO.Contains(m.transactionID)).ToList();
                        var transactionGroups = items.Where(m => m.field == "$CustomerID").GroupBy(m => m.value);

                        foreach (var i in transactionGroups)
                        {
                            var transactions = i.Select(m => m.transactionID).ToList();
                            var fv = fieldValues.Where(m => transactions.Contains(m.transactionID));
                            if (fv.Count(m => m.field == "$Sent" && m.value != null) > 0)
                                sent++;
                            if (fv.Count(m => m.field == "Received") > 0 && fv.Count(m => m.field == "$Received" && m.value != null) > 0)
                                received++;
                            if (fv.Count(m => m.field == "$Open") > 0 && fv.Count(m => m.field == "$Open" && m.value != null) > 0)
                                opened++;
                            if (fv.Count(m => m.field == "$Click" && m.value != null) > 0)
                                clicked++;

                        }
                        #endregion

                        _TotalSent += sent;
                        _TotalReceived += received;
                        _TotalOpen += opened;
                        _TotalClicked += clicked;

                        list.Add(new NotificationsModel.NotificationsReportModel()
                        {
                            NotificationsReport_Form = null,
                            NotificationsReport_VLO = name,
                            NotificationsReport_Sent = sent.ToString(),
                            NotificationsReport_Received = received.ToString(),
                            NotificationsReport_Opened = opened.ToString(),
                            NotificationsReport_OpenRate = received != 0 ? Math.Round((decimal)(((decimal)opened / received) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
                            NotificationsReport_Clicks = clicked.ToString(),
                            NotificationsReport_ClickRate = received != 0 ? Math.Round((decimal)(((decimal)clicked / received) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00"
                        });
                    }
                }
                //totals by form
                list.Add(new NotificationsModel.NotificationsReportModel()
                {
                    NotificationsReport_TotalSent = TotalSent.ToString(),
                    NotificationsReport_TotalReceived = TotalReceived.ToString(),
                    NotificationsReport_TotalOpened = TotalOpen.ToString(),
                    NotificationsReport_TotalClicks = TotalClicked.ToString(),
                    NotificationsReport_TotalOpenRate = TotalReceived != 0 ? Math.Round((decimal)(((decimal)TotalOpen / TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
                    NotificationsReport_TotalClickRate = TotalReceived != 0 ? Math.Round((decimal)(((decimal)TotalClicked / TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00"
                });

                //totals by vlo
                list.Add(new NotificationsModel.NotificationsReportModel()
                {
                    NotificationsReport_TotalSent = _TotalSent.ToString(),
                    NotificationsReport_TotalReceived = _TotalReceived.ToString(),
                    NotificationsReport_TotalOpened = _TotalOpen.ToString(),
                    NotificationsReport_TotalClicks = _TotalClicked.ToString(),
                    NotificationsReport_TotalOpenRate = _TotalReceived != 0 ? Math.Round((decimal)(((decimal)_TotalOpen / _TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
                    NotificationsReport_TotalClickRate = _TotalReceived != 0 ? Math.Round((decimal)(((decimal)_TotalClicked / _TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00"
                });

                return list;
            }
            catch (Exception ex)
            {
                masterEmailBody += "<br />Method: ReportDataModel.GetNotificationsReport<br />Exception Message: " + Debugging.GetMessage(ex)
                    + "<br />Inner Exception: " + Debugging.GetInnerException(ex) + "<br />Source: " + (ex.Source ?? "") + "<br />StackTrace: " + (ex.StackTrace ?? "");
                return list;
            }
        }

        /// <summary>
        /// Called no matter where the request comes from
        /// </summary>
        /// <param name="model"></param>
        /// <param name="transactions"></param>
        /// <param name="ManifestQuery"></param>
        /// <param name="values"></param>
        /// <param name="db"></param>
        /// <param name="VLOS"></param>
        /// <param name="request"></param>
        /// <param name="masterEmailBody"></param>
        private void CorrectCustomerIdFromSPI(NotificationsModel.SearchNotificationsModel model, IQueryable<Guid> transactions, out List<SPIModels.TheVillaGroup.spManifest_Info_Result> ManifestQuery, out IQueryable<tblFieldsValues> values, ref ePlatEntities db, ref List<SelectListItem> VLOS, HttpRequestBase request, ref string masterEmailBody)
        {
            SPIModels.TheVillaGroup.SpiTvgEntities spidb = new SPIModels.TheVillaGroup.SpiTvgEntities();

            var contentChanged = false;
            var terminal = long.Parse(model.SearchNotifications_Terminals);
            var fromDate = model.SearchNotifications_I_Date != null && model.SearchNotifications_I_Date != "" ? DateTime.Parse(model.SearchNotifications_I_Date).AddDays(-3) : DateTime.Today.AddDays(-3);
            var toDate = model.SearchNotifications_F_Date != null && model.SearchNotifications_F_Date != "" ? DateTime.Parse(model.SearchNotifications_F_Date).AddDays(3) : DateTime.Today.AddDays(4).AddSeconds(-1);
            var date = fromDate;
            var terminalRegion = (from t in db.tblTerminals
                                  where t.terminalID == terminal
                                  select t.spiRegionID).FirstOrDefault();

            int regionID = terminalRegion != null ? (int)terminalRegion : 0;
            ManifestQuery = spidb.spManifest_Info(null, date, regionID).ToList();

            while (date < toDate)
            {
                date = date.AddDays(1);
                var _manifest = spidb.spManifest_Info(null, date, regionID).ToList();
                ManifestQuery = ManifestQuery.Concat(_manifest).ToList();
            }
            values = db.tblFieldsValues.Where(m => transactions.Contains(m.transactionID));
            try
            {
                //var fieldValues = values.Select(m => new { m.tblFields.fieldGroupID, m.fieldID, m.tblFields.field, m.value, m.transactionID, m.dateSaved });
                var fieldValues = values.Select(m => new { m.tblFields.fieldGroupID, m.fieldID, m.tblFields.field, m.value, m.transactionID, m.dateSaved }).ToList();
                var valuesGrouped = fieldValues.GroupBy(m => m.transactionID);

                var email = new System.Net.Mail.MailMessage();
                email.From = new System.Net.Mail.MailAddress("eplat@villagroup.com", "ePlat");
                email.To.Add("efalcon@villagroup.com");
                email.Subject = "VLO Manifest Contracts with issues on Customer ID";
                email.IsBodyHtml = true;
                var vloIds = VLOS.Select(m => Guid.Parse(m.Value)).ToArray();

                var withCustomerID = "";
                var withNoCustomerID = "";

                foreach (var i in valuesGrouped)
                {
                    var customerID = i.Count(m => m.field == "$CustomerID" && m.value != null);
                    int customerIDNumeric;

                    var isNumeric = int.TryParse((customerID != 0 ? i.FirstOrDefault(m => m.field == "$CustomerID" && m.value != null).value : null), out customerIDNumeric);

                    var vpa = i.FirstOrDefault(x => x.field == "$VPANumber").value;
                    if (customerID == 0 || !isNumeric)
                    {
                        var vpaLetter = new String(vpa.Where(m => Char.IsLetter(m)).ToArray());
                        var index = vpa.IndexOf(vpaLetter);
                        var splitted = vpa.Substring(index);
                        //var vpaNum = long.Parse(new String(vpa.Where(m => Char.IsDigit(m)).ToArray()));
                        var vpaNum = long.Parse(new String(splitted.Where(m => Char.IsDigit(m)).ToArray()));
                        var vpaNumber = vpaLetter + (splitted.Count() > 4 ? String.Format("{0:D11}", vpaNum) : String.Format("{0:D8}", vpaNum));
                        var coincidence = ManifestQuery.Count(m => m.LegacyKey != null) > 0 ? ManifestQuery.Where(m => m.LegacyKey != null && m.LegacyKey.Contains(vpaNumber)).ToList() : null;

                        if (coincidence != null && coincidence.Count() > 0)
                        {
                            contentChanged = true;
                            withCustomerID += "<p>Transaction ID: " + i.Key.ToString() + " ==> VPA Number: " + coincidence.FirstOrDefault().LegacyKey.Trim() + " ==> CustomerID: " + coincidence.FirstOrDefault().CustomerID.ToString() + "</p>";
                            tblFieldsValues instance = new tblFieldsValues();
                            var fgID = i.FirstOrDefault().fieldGroupID;
                            instance.fieldID = db.tblFields.FirstOrDefault(m => m.fieldGroupID == fgID && m.field == "$CustomerID").fieldID;
                            instance.value = coincidence.FirstOrDefault().CustomerID.ToString();
                            instance.dateSaved = i.FirstOrDefault().dateSaved;
                            instance.transactionID = i.Key;
                            instance.publish = false;
                            instance.publishedByUserID = (Guid?)null;
                            instance.datePublished = (DateTime?)null;
                            db.tblFieldsValues.AddObject(instance);
                        }
                        else
                        {
                            withNoCustomerID += "<p>Transaction ID: " + i.Key.ToString() + " ==> VPA Number: " + vpa + " ==> CustomerID: Not Found</p>";
                        }
                    }
                }
                //if (request.Url.ToString().IndexOf("localhost") == -1)
                {
                    db.SaveChanges();
                }
                if (withCustomerID != "" || withNoCustomerID != "")
                {
                    if (request.Url.ToString().IndexOf("localhost") == -1)
                    {
                        var terminalSupervisor = db.tblUsers_SysWorkGroups.Where(m => vloIds.Contains(m.userID) && m.aspnet_Roles.RoleName == "VLO Supervisor").FirstOrDefault().aspnet_Users1.UserName;
                        email.CC.Add(terminalSupervisor);
                    }
                    email.Body = "<p>Some letters were saved without customer id related. The system tried to relate them by their legacy key(VPA Number) but some of them probably had not been found."
                        + "Below you will find the results of the system attempt.</p>";
                    email.Body += (withCustomerID != "" ? "<p><br /><strong>Transactions with Customer ID assigned</strong></p>" + withCustomerID : "") + (withNoCustomerID != "" ? "<p><br />Transactions without Customer ID assigned</p>" + withNoCustomerID : "");

                    //EmailNotifications.SendSync(email);
                    EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
                }
                else
                {
                    email.Dispose();
                }
                if (contentChanged == true)
                {
                    values = db.tblFieldsValues.Where(m => transactions.Contains(m.transactionID));
                }
            }
            catch (Exception ex)
            {
                masterEmailBody += "<br />Method: ReportDataModel.GetNotificationsReport<br />Exception Message: " + Debugging.GetMessage(ex)
                    + "<br />Inner Exception: " + Debugging.GetInnerException(ex) + "<br />Source: " + (ex.Source ?? "") + "<br />StackTrace: " + (ex.StackTrace ?? "");
            }
        }

        //public bool CorrectCustomerIdFromSPI(NotificationsModel.SearchNotificationsModel model, HttpRequestBase request, out int count)
        /// <summary>
        /// Called when the request comes from ePlat
        /// </summary>
        /// <param name="model"></param>
        /// <param name="request"></param>
        /// <param name="count"></param>
        /// <param name="masterEmailBody">email filled with Exception details if occurs an error on execution</param>
        /// <returns></returns>
        public bool CorrectCustomerIdFromSPI(NotificationsModel.SearchNotificationsModel model, HttpRequestBase request, out int count, ref string masterEmailBody, ref ePlatEntities db)
        {
            //ePlatEntities db = new ePlatEntities();
            SPIModels.TheVillaGroup.SpiTvgEntities spidb = new SPIModels.TheVillaGroup.SpiTvgEntities();
            var proceed = true;
            var terminal = long.Parse(model.SearchNotifications_Terminals);
            var fromDate = model.SearchNotifications_I_Date != null && model.SearchNotifications_I_Date != "" ? DateTime.Parse(model.SearchNotifications_I_Date).AddDays(-3) : DateTime.Today.AddDays(-3);
            var toDate = model.SearchNotifications_F_Date != null && model.SearchNotifications_F_Date != "" ? DateTime.Parse(model.SearchNotifications_F_Date).AddDays(3) : DateTime.Today.AddDays(4).AddSeconds(-1);
            var date = fromDate;
            var forms = model.SearchNotifications_Forms != null ? model.SearchNotifications_Forms : NotificationsDataModel.NotificationsCatalogs.FillDrpFieldGroups(model.SearchNotifications_Terminals).Select(m => int.Parse(m.Value)).ToArray();
            var fields = db.tblFields.Where(m => forms.Contains(m.fieldGroupID));
            var fieldsIds = fields.Select(m => m.fieldID).ToArray();
            var sentByUserID = fields.Where(m => m.field == "$SentByUserID").Select(m => m.fieldID).ToArray();

            var terminalRegion = (from t in db.tblTerminals
                                  where t.terminalID == terminal
                                  select t.spiRegionID).FirstOrDefault();

            int regionID = terminalRegion != null ? (int)terminalRegion : 0;
            List<SPIModels.TheVillaGroup.spManifest_Info_Result> ManifestQuery = spidb.spManifest_Info(null, date, regionID).ToList();

            while (date < toDate)
            {
                date = date.AddDays(1);
                var _manifest = spidb.spManifest_Info(null, date, regionID).ToList();
                ManifestQuery = ManifestQuery.Concat(_manifest).ToList();
            }
            var transactions = db.tblFieldsValues.Where(m => (m.dateSaved >= fromDate && m.dateSaved <= toDate) && sentByUserID.Contains(m.fieldID)).Select(m => m.transactionID);
            var values = db.tblFieldsValues.Where(m => transactions.Contains(m.transactionID));
            var fieldValues = values.Select(m => new { m.tblFields.fieldGroupID, m.fieldID, m.tblFields.field, m.value, m.transactionID, m.dateSaved });
            var valuesGrouped = fieldValues.GroupBy(m => m.transactionID);

            var email = new System.Net.Mail.MailMessage();
            email.From = new System.Net.Mail.MailAddress("eplat@villagroup.com", "ePlat");
            email.To.Add("efalcon@villagroup.com");
            email.Subject = "VLO Manifest Contracts with issues on Customer ID";
            email.IsBodyHtml = true;

            count = valuesGrouped.Count();
            var withCustomerID = "";
            var withNoCustomerID = "";
            try
            {
                foreach (var i in valuesGrouped)
                {
                    var customerID = i.Count(m => m.field == "$CustomerID" && m.value != null);
                    var vpa = i.FirstOrDefault(x => x.field == "$VPANumber").value;
                    if (customerID == 0)
                    {
                        var vpaLetter = new String(vpa.Where(m => Char.IsLetter(m)).ToArray());
                        var index = vpa.IndexOf(vpaLetter);
                        var splitted = vpa.Substring(index);
                        var vpaNum = long.Parse(new String(splitted.Where(m => Char.IsDigit(m)).ToArray()));
                        var vpaNumber = vpaLetter + (splitted.Count() > 4 ? String.Format("{0:D11}", vpaNum) : String.Format("{0:D8}", vpaNum));
                        var coincidence = ManifestQuery.Count(m => m.LegacyKey != null) > 0 ? ManifestQuery.Where(m => m.LegacyKey != null && m.LegacyKey.Contains(vpaNumber)).ToList() : null;

                        if (coincidence != null && coincidence.Count() > 0)
                        {
                            withCustomerID += "<p>Transaction ID: " + i.Key.ToString() + " ==> VPA Number: " + coincidence.FirstOrDefault().LegacyKey.Trim() + " ==> CustomerID: " + coincidence.FirstOrDefault().CustomerID.ToString() + "</p>";
                            tblFieldsValues instance = new tblFieldsValues();
                            var fgID = i.FirstOrDefault().fieldGroupID;
                            instance.fieldID = db.tblFields.FirstOrDefault(m => m.fieldGroupID == fgID && m.field == "$CustomerID").fieldID;
                            instance.value = coincidence.FirstOrDefault().CustomerID.ToString();
                            instance.dateSaved = i.FirstOrDefault().dateSaved;
                            instance.transactionID = i.Key;
                            instance.publish = false;
                            instance.publishedByUserID = (Guid?)null;
                            instance.datePublished = (DateTime?)null;
                            db.tblFieldsValues.AddObject(instance);
                        }
                        else
                        {
                            proceed = false;
                            withNoCustomerID += "<p>Transaction ID: " + i.Key.ToString() + " ==> VPA Number: " + vpa + " ==> CustomerID: Not Found</p>";
                        }
                    }
                }
                //if (request.Url.ToString().IndexOf("localhost") == -1)
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                masterEmailBody += "<br />Method: CorrectCustomerIdFromSPI<br />Terminal: " + terminal
                    + "<br />Range: " + fromDate.ToString("yyyy-MM-dd") + " <==> " + toDate.ToString("yyyy-MM-dd")
                    + "<br />Exception Message: " + Debugging.GetMessage(ex) + "<br />Inner Exception: " + Debugging.GetInnerException(ex)
                    + "<br />Source: " + (ex.Source ?? "") + "<br />StackTrace: " + (ex.StackTrace ?? "");
            }
            if (withCustomerID != "" || withNoCustomerID != "")
            {
                if (request.Url.ToString().IndexOf("localhost") == -1)
                {
                    var VLOS = SPIDataModel.GetVLOS(model.SearchNotifications_Terminals);
                    var vloIds = VLOS.Select(m => Guid.Parse(m.Value)).ToArray();
                    var terminalSupervisor = db.tblUsers_SysWorkGroups.Where(m => vloIds.Contains(m.userID) && m.aspnet_Roles.RoleName == "VLO Supervisor").FirstOrDefault().aspnet_Users1.UserName;
                    email.CC.Add(terminalSupervisor);
                }
                email.Body = "<p>Some letters were saved without customer id related. The system tried to relate them by their legacy key(VPA Number) but some of them probably had not been found."
                    + "Below you will find the results of the system attempt. Please send to the System Administrator the  missing information.</p>";
                email.Body += (withCustomerID != "" ? "<p><br /><strong>Transactions with Customer ID assigned</strong></p>" + withCustomerID : "") + (withNoCustomerID != "" ? "<p><br />Transactions without Customer ID assigned</p>" + withNoCustomerID : "");

                //EmailNotifications.SendSync(email);
                EmailNotifications.Send(new List<MailMessageResponse>() { new MailMessageResponse() { MailMessage = email } });
            }
            else
            {
                email.Dispose();
            }
            return proceed;
        }

        //public List<NotificationsModel.NotificationsReportModel> GetNotificationsReport(NotificationsModel.SearchNotificationsModel model)
        //{
        //    ePlatEntities db = new ePlatEntities();
        //    List<NotificationsModel.NotificationsReportModel> list = new List<NotificationsModel.NotificationsReportModel>();
        //    try
        //    {
        //        var fromDate = model.SearchNotifications_I_Date != null && model.SearchNotifications_I_Date != "" ? DateTime.Parse(model.SearchNotifications_I_Date) : DateTime.Today;
        //        var toDate = model.SearchNotifications_F_Date != null && model.SearchNotifications_F_Date != "" ? DateTime.Parse(model.SearchNotifications_F_Date).AddDays(1).AddSeconds(-1) : DateTime.Today.AddDays(1).AddSeconds(-1);
        //        var groups = model.SearchNotifications_Forms != null ? model.SearchNotifications_Forms : NotificationsDataModel.NotificationsCatalogs.FillDrpFieldGroups().Select(m => int.Parse(m.Value)).ToArray();
        //        var _fields = db.tblFields.Where(m => groups.Contains(m.fieldGroupID));
        //        var fields = _fields.Select(m => m.fieldID).ToArray();
        //        //var sentByUserID = _fields.Where(m => m.field == "$SentByUserID").FirstOrDefault().fieldID;
        //        var sentByUserID = _fields.Where(m => m.field == "$SentByUserID").Select(m => m.fieldID).ToArray();
        //        //var valuesPerGroup = db.tblFieldsValues.Where(m => fields.Contains(m.fieldID) && (m.dateSaved >= fromDate && m.dateSaved <= toDate)).GroupBy(m => m.tblFields.fieldGroupID);
        //        var isAdmin = GeneralFunctions.IsUserInRole("Administrator");

        //        var transactionsPerUsers = db.tblFieldsValues.Where(m => sentByUserID.Contains(m.fieldID) && (m.dateSaved >= fromDate && m.dateSaved <= toDate) && (isAdmin || authUsers.Contains(m.value))).Select(m => m.transactionID).ToList();
        //        var valuesPerGroup = db.tblFieldsValues.Where(m => transactionsPerUsers.Contains(m.transactionID) && fields.Contains(m.fieldID)).GroupBy(m => m.tblFields.fieldGroupID);
        //        var valuesPerTransaction = db.tblFieldsValues.Where(m => transactionsPerUsers.Contains(m.transactionID) && fields.Contains(m.fieldID)).GroupBy(m => m.transactionID);
        //        var totalSent = 0;
        //        var TotalOpen = valuesPerTransaction.Where(m => m.FirstOrDefault(x => x.tblFields.field == "$Open").fieldValueID != null).Count();
        //        var TotalSent = valuesPerTransaction.Where(m => m.FirstOrDefault(x => x.tblFields.field == "$Sent").fieldValueID != null).Count();
        //        var TotalReceived = valuesPerTransaction.Where(m => m.FirstOrDefault(x => x.tblFields.field == "$Received").fieldValueID != null).Count();
        //        var totalReceived = 0;
        //        var totalOpen = 0;
        //        var totalClicks = 0;

        //        if (valuesPerGroup.Count() > 0)
        //        {
        //            foreach (var fieldGroup in valuesPerGroup)
        //            {
        //                var _systemFields = fieldGroup.Where(m => m.tblFields.fieldTypeID == 3).GroupBy(m => m.transactionID);
        //                var sentCounter = fieldGroup.Where(m => m.tblFields.field == "$Sent").GroupBy(m => m.transactionID).Count();
        //                //var openCounter = _systemFields.Where(m => m.FirstOrDefault(x => x.tblFields.field == "$Open").fieldValueID != null).Count();
        //                var openCounter = fieldGroup.Where(m => m.tblFields.field == "$Open").GroupBy(m => m.transactionID).Count();
        //                var receivedCounter = fieldGroup.Where(m => m.tblFields.field == "$Received").GroupBy(m => m.transactionID).Count();
        //                var clickCounter = 0;
        //                var clicks = new List<KeyValuePair<string, string>>();
        //                var systemFields = fieldGroup.Where(m => m.tblFields.fieldTypeID == 3);
        //                //new
        //                var clicksPerTransaction = fieldGroup.Where(m => m.tblFields.field == "$Click").GroupBy(m => m.transactionID);
        //                if (clicksPerTransaction.Count() > 0)
        //                {
        //                    foreach (var field in clicksPerTransaction)
        //                    {
        //                        var clickedBy = fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$ClientName")) != null ?
        //                            fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$ClientName")).value : ((fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$FirstName")) != null ?
        //                            fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$FirstName")).value :
        //                        fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$Title")) != null ? fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$Title")).value : "")
        //                            + " " + (fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$LastName")) != null ? fieldGroup.FirstOrDefault(x => x.tblFields.field.Contains("$LastName")).value : ""));
        //                        clicks.Add(new KeyValuePair<string, string>(field.FirstOrDefault().value, clickedBy));
        //                    }
        //                }
        //                clickCounter = clicks.Select(m => m.Value).Distinct().Count();
        //                totalClicks += clickCounter;

        //                list.Add(new NotificationsModel.NotificationsReportModel()
        //                {
        //                    NotificationsReport_FormID = fieldGroup.Key,
        //                    NotificationsReport_Form = fieldGroup.FirstOrDefault().tblFields.tblFieldGroups.fieldGroup + " - " + fieldGroup.FirstOrDefault().tblTerminals.prefix,
        //                    NotificationsReport_Sent = sentCounter.ToString(),
        //                    NotificationsReport_Received = receivedCounter.ToString(),
        //                    NotificationsReport_Opened = openCounter.ToString(),
        //                    NotificationsReport_OpenRate = receivedCounter != 0 ? Math.Round((decimal)(((decimal)openCounter / receivedCounter) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
        //                    NotificationsReport_ClickRate = receivedCounter != 0 ? Math.Round((decimal)(((decimal)clickCounter / receivedCounter) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
        //                    NotificationsReport_ClicksList = clicks
        //                });
        //            }
        //        }

        //        list.Add(new NotificationsModel.NotificationsReportModel()
        //        {
        //            NotificationsReport_TotalSent = TotalSent.ToString(),
        //            NotificationsReport_TotalReceived = TotalReceived.ToString(),
        //            NotificationsReport_TotalOpened = TotalOpen.ToString(),
        //            NotificationsReport_TotalClicks = totalClicks.ToString(),
        //            NotificationsReport_TotalOpenRate = TotalReceived != 0 ? Math.Round((decimal)(((decimal)TotalOpen / TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00",
        //            NotificationsReport_TotalClickRate = TotalReceived != 0 ? Math.Round((decimal)(((decimal)totalClicks / TotalReceived) * 100), 2, MidpointRounding.AwayFromZero).ToString() : "0.00"
        //        });

        //        return list;
        //    }
        //    catch (Exception ex)
        //    {
        //        return list;
        //    }
        //}

        public static List<SelectListItem> GetSubordinateUsers()
        {
            ePlatEntities db = new ePlatEntities();
            var currentUser = session.UserID;
            var Users = UserDataModel.GetUsersBySupervisor(currentUser);

            /*
             if (!GeneralFunctions.IsUserInRole("Administrator", CurrentUserID))
             {
                 foreach (var user in db.sp_getUserSubordinates(CurrentUserID).OrderBy(x => x.firstName).Distinct())
                 {
                     Users.Add(new SelectListItem()
                     {
                         Value = user.userID.ToString(),
                         Text = user.firstName + " " + user.lastName + " " + (user.isLockedOut == false ? "-Locked" : "")
                     });
                 }
             }
             else
             {
                 foreach (var user in db.tblUserProfiles.OrderBy(x => x.firstName).Distinct())
                 {
                     var isLocket = db.aspnet_Membership.FirstOrDefault(x => x.UserId == user.userID).IsLockedOut;
                     Users.Add(new SelectListItem()
                     {
                         Value = user.userID.ToString(),
                         Text = user.firstName + " " + user.lastName + " " + (isLocket ? "-Locked" : "")
                     });
                 }
             }*/
            Users.Sort((x, y) => x.Text.CompareTo(y.Text));
            return Users;
        }

        // SENSES OF MEXICO
        public object GetDataByAmbassador(DateTime fromDate, DateTime toDate)
        {



            var lead_ambassadors = (from user in db.tblUserProfiles
                                    join job in db.tblUsers_JobPositions on user.userID equals job.userID
                                    join pos in db.tblJobPositions on job.jobPositionID equals pos.jobPositionID
                                    join mem in db.aspnet_Membership on user.userID equals mem.UserId
                                    join m in db.aspnet_Membership on user.userID equals m.UserId

                                    where pos.jobPositionID == 1084 && mem.IsApproved == true && m.IsLockedOut == false

                                    select new
                                    {
                                        name = user.firstName + " " + user.lastName,
                                        id = user.userID
                                    }
                         ).ToList();
            var ambassadors = (from user in db.tblUserProfiles
                               join job in db.tblUsers_JobPositions on user.userID equals job.userID
                               join pos in db.tblJobPositions on job.jobPositionID equals pos.jobPositionID
                               join mem in db.aspnet_Membership on user.userID equals mem.UserId
                               join sup in db.tblSupervisors_Agents on user.userID equals sup.agentUserID
                               join m in db.aspnet_Membership on user.userID equals m.UserId
                               where pos.jobPositionID == 1086 && mem.IsApproved == true && m.IsLockedOut == false

                               select new
                               {
                                   id = user.userID,
                                   name = user.firstName + " " + user.lastName,
                                   supervisorid = sup.supervisorUserID,
                               }


                        ).ToList();

            dataAmbassadors ambassador = new dataAmbassadors();
            dataLeadsAmbassadors leadambassador = new dataLeadsAmbassadors();


            foreach (var item in ambassadors)
            {
                dataAmbassadors temp = new dataAmbassadors();
                temp.ambassadorId = item.id;
                if (item.id == new Guid("ef894ce1-b18e-4f32-a721-f789f4367396"))
                {
                    var a = 1;
                }
                temp.name = item.name;
                temp.supervisorId = item.supervisorid;
                temp.surverysCount = (from s in db.tblFieldGroupsAnswers
                                      where s.terminalID == 62 && s.savedByUserID == item.id && s.dateSaved <= toDate
                                      && s.dateSaved >= fromDate && s.contactInfo == true
                                      select s
                            ).Count();
                temp.surverysCount_nci = (from s in db.tblFieldGroupsAnswers
                                          where s.terminalID == 62 && s.savedByUserID == item.id && s.dateSaved <= toDate
                                          && s.dateSaved >= fromDate && s.contactInfo == false
                                          select s
                            ).Count();

                temp.membershipsCount = (from m in db.tblMembershipSales
                                         join c in db.tblMembershipCards on m.membershipCardID equals c.MembershipCardID
                                         where c.userID == item.id && m.dateSaved <= toDate
                                         && m.dateSaved >= fromDate
                                         where m.inProgress == null || m.inProgress == false

                                         select m
                            ).Count();
                ambassador.Add(temp);


            }

            foreach (var item in lead_ambassadors)
            {
                dataLeadsAmbassadors temp2 = new dataLeadsAmbassadors();
                temp2.leadambassadorId = item.id;
                temp2.name = item.name;
                if (item.id == new Guid("ef894ce1-b18e-4f32-a721-f789f4367396"))
                {
                    var a = 1;
                }
                temp2.surverysCount = (from s in db.tblFieldGroupsAnswers
                                       where s.terminalID == 62 && s.savedByUserID == item.id && s.dateSaved <= toDate
                                       && s.dateSaved >= fromDate && s.contactInfo == true
                                       select s
                            ).Count();
                temp2.surverysCount_nci = (from s in db.tblFieldGroupsAnswers
                                           where s.terminalID == 62 && s.savedByUserID == item.id && s.dateSaved <= toDate
                                           && s.dateSaved >= fromDate && s.contactInfo == false
                                           select s
                            ).Count();
                temp2.membershipsCount = (from m in db.tblMembershipSales
                                          join c in db.tblMembershipCards on m.membershipCardID equals c.MembershipCardID
                                          where c.userID == item.id && m.dateSaved <= toDate && m.dateSaved >= fromDate
                                          where m.inProgress == null || m.inProgress == false

                                          select m
                            ).Count();
                var x = (from m in db.tblMembershipSales
                         join c in db.tblMembershipCards on m.membershipCardID equals c.MembershipCardID
                         where c.userID == item.id && m.dateSaved <= toDate && m.dateSaved >= fromDate
                         where m.inProgress == null || m.inProgress == false

                         select m
                             ).ToList();
                leadambassador.Add(temp2);
            }


            var ambassadores = from h in ambassador
                               select new
                               {
                                   name = h.name,
                                   ambassadorid = h.ambassadorId,
                                   supervisorid = h.supervisorId,
                                   surveyscount = h.surverysCount,
                                   surveyscount_nci = h.surverysCount_nci,
                                   memberbshipscount = h.membershipsCount
                               };

            var leadsambassadores = from h in leadambassador
                                    select new
                                    {
                                        name = h.name,
                                        ambassadorid = h.leadambassadorId,
                                        surveyscount = h.surverysCount,
                                        surveyscount_nci = h.surverysCount_nci,
                                        memberbshipscount = h.membershipsCount
                                    };

            //string output = JsonConvert.SerializeObject(ambassador);
            CountCardsPolls totalcount = new CountCardsPolls();
            foreach (var item in lead_ambassadors)
            {
                Int32 totalcards = 0;
                Int32 totalpolls = 0;
                Int32 totalpolls_nci = 0;
                var suma = (from h in ambassadores
                            where item.id == h.supervisorid
                            select new
                            {
                                name = h.name,
                                ambassadorid = h.ambassadorid,
                                supervisorid = h.supervisorid,
                                surveyscount = h.surveyscount,
                                surveyscount_nci = h.surveyscount_nci,
                                memberbshipscount = h.memberbshipscount
                            }).ToList();

                foreach (var sum in suma)
                {
                    totalcards = Convert.ToInt32(sum.memberbshipscount) + totalcards;
                    totalpolls = Convert.ToInt32(sum.surveyscount) + totalpolls;
                    totalpolls_nci = Convert.ToInt32(sum.surveyscount_nci) + totalpolls_nci;


                }
                var suma2 = (from h in leadsambassadores
                             where item.id == h.ambassadorid
                             select new
                             {
                                 name = h.name,
                                 ambassadorid = h.ambassadorid,
                                 surveyscount = h.surveyscount,
                                 surveyscount_nci = h.surveyscount_nci,
                                 memberbshipscount = h.memberbshipscount
                             }).ToList();
                foreach (var sum in suma2)
                {
                    totalcards = Convert.ToInt32(sum.memberbshipscount) + totalcards;
                    totalpolls = Convert.ToInt32(sum.surveyscount) + totalpolls;
                    totalpolls_nci = Convert.ToInt32(sum.surveyscount_nci) + totalpolls_nci;
                }
                CountCardsPolls tempcount = new CountCardsPolls();
                tempcount.leadambassadorId = item.id;
                tempcount.cardscount = totalcards;
                tempcount.pollscount = totalpolls;
                tempcount.pollscount_nci = totalpolls_nci;
                totalcount.Add(tempcount);
            }

            var totalcounts = (from t in totalcount
                               select new
                               {
                                   leadid = t.leadambassadorId,
                                   cards = t.cardscount,
                                   polls = t.pollscount,
                                   polls_nci = t.pollscount_nci
                               }
                               ).ToList();

            var totalPollsByDate = (from s in db.tblFieldGroupsAnswers
                                    where s.terminalID == 62 && s.dateSaved <= toDate
                                    && s.dateSaved >= fromDate && s.contactInfo == false
                                    select new
                                    {
                                        id = s.FieldGroupsAnswersID
                                    }
                            ).Count();

            var pollsNMCount = (from s in db.tblFieldGroupsAnswers
                                where s.terminalID == 62 && s.dateSaved <= toDate
                                && s.dateSaved >= fromDate && s.contactInfo == true && s.membershipCardID == null
                                select s
                ).Count();
            var freeTrial = (from s in db.tblMembershipSales
                             where s.dateSaved <= toDate
                             && s.dateSaved >= fromDate && s.activatedByPoll != null
                             select s
                ).Count();
            var pollSubscription = (from s in db.tblMembershipSales
                                    where s.dateSaved <= toDate
                                    && s.dateSaved >= fromDate && s.activatedByPoll == true && s.inProgress == false
                                    select s
               ).Count();
            var directSubscriptions = (from s in db.tblMembershipSales
                                       where s.dateSaved <= toDate
                                       && s.dateSaved >= fromDate && s.activatedByPoll == null && s.membershipCardID != 2680
                                       select s
               ).Count();


            object[] data = new[]
              {

                new object[] {lead_ambassadors},
                new object[] {ambassadores},
                new object[] {leadsambassadores},
                new object[] {totalcounts},
                new object[] {totalPollsByDate},
                new object[] {pollsNMCount},
                new object[] {freeTrial},
                new object[] {pollSubscription},
                new object[] {directSubscriptions},



                 };
            return data;

        }

        public class dataAmbassadors : List<dataAmbassadors>
        {
            public Guid ambassadorId { get; set; }
            public string name { get; set; }
            public Guid? supervisorId { get; set; }
            public int surverysCount { get; set; }
            public int surverysCount_nci { get; set; }
            public int membershipsCount { get; set; }

        }
        public class dataLeadsAmbassadors : List<dataLeadsAmbassadors>
        {
            public Guid leadambassadorId { get; set; }
            public string name { get; set; }
            public int surverysCount { get; set; }
            public int surverysCount_nci { get; set; }
            public int membershipsCount { get; set; }

        }
        public class CountCardsPolls : List<CountCardsPolls>
        {
            public Guid leadambassadorId { get; set; }
            public int cardscount { get; set; }
            public int pollscount_nci { get; set; }
            public int pollscount { get; set; }


        }

        public class answersPoll : List<answersPoll>
        {
            public string answer { get; set; }
            public string question { get; set; }
            public int count { get; set; }
        }
        /******************************************************************************************************/

        public object GetDataPayments(DateTime fromDate, DateTime toDate)
        {
            var payments = (from p in db.tblPurchases
                            join pd in db.tblPaymentDetails on p.purchaseID equals pd.purchaseID
                            join m in db.tblMoneyTransactions on pd.moneyTransactionID equals m.moneyTransactionID
                            join b in db.tblBillingInfo on m.billingInfoID equals b.billingInfoID
                            join u in db.tblUserProfiles on p.userID equals u.userID into username
                            from v in username.DefaultIfEmpty()
                            where m.terminalID == 62 && m.errorCode == "0" && m.transactionDate <= toDate
                                      && m.transactionDate >= fromDate

                            select new
                            {
                                member = b.cardHolderName,
                                date = m.transactionDate,
                                savedByUser = v.firstName + " " + v.lastName,
                                amount = pd.amount,
                                authcode = m.authCode,

                            }).ToList();

            return payments;

        }
        /******************************************************************************************************/

        public object GetPollsStatistics(DateTime fromDate, DateTime toDate, string locationID, string pollType)
        {
            Guid ambassador = Guid.Parse("469F240F-3410-4E62-B621-F3FB087633F9");
            Guid lead_ambassador = Guid.Parse("325E12C8-AA81-4DE6-95FB-5A9BB9607D9C");
            Int64 location = 0;
            if (locationID != null)
            {
                location = Convert.ToInt64(locationID);
            }
            var surveys = (from fg in db.tblFieldGroupsAnswers
                           join users in db.tblUserProfiles on fg.savedByUserID equals users.userID
                           join fields in db.tblFieldGroups on fg.fieldGroupsID equals fields.fieldGroupID
                           where fg.terminalID == 62 && fg.dateSaved <= toDate
                                       && fg.dateSaved >= fromDate
                           where location != 0 ? fg.locationID == location : (fg.locationID == null || fg.locationID > 0)
                           orderby fg.dateSaved
                           select fg
                    ).ToList();
            var count1 = 0;
            var count2 = 0;
            var count3 = 0;
            var count4 = 0;
            var count5 = 0;
            var count6 = 0;
            var count7 = 0;
            var count8 = 0;
            var count9 = 0;
            var count10 = 0;
            var count11 = 0;
            answersPoll listaAns = new answersPoll();
            answersPoll listaAns2 = new answersPoll();
            answersPoll listaAns3 = new answersPoll();
            answersPoll listaAns4 = new answersPoll();
            answersPoll listaAns5 = new answersPoll();
            answersPoll listaAns6 = new answersPoll();
            answersPoll listaAns7 = new answersPoll();
            answersPoll listaAns8 = new answersPoll();
            answersPoll listaAns9 = new answersPoll();
            answersPoll listaAns10 = new answersPoll();
            answersPoll listaAns11 = new answersPoll();
            var question1 = 1159;
            var question2 = 1160;
            var question3 = 1161;
            var question4 = 1162;
            var question5 = 1298;
            var question6 = 1409;
            var question7 = 1410;
            var question8 = 1411;
            var question9 = 1163;
            var question10 = 1164;
            var question11 = 1203;

            var equestion1 = 1173;
            var equestion2 = 1174;
            var equestion3 = 1175;
            var equestion4 = 1176;
            var equestion5 = 1177;
            var equestion6 = 1178;
            var equestion7 = 1204;
            var equestion8 = 1298;
            List<tblFieldGroupsAnswers> surveyCount = new List<tblFieldGroupsAnswers>();
            if (pollType == "spanish")
            {
                question1 = equestion1;
                question2 = equestion2;
                question3 = equestion3;
                question4 = equestion4;
                question5 = equestion5;
                question6 = equestion6;
                question7 = equestion7;
                surveyCount = (from fg in surveys
                               where fg.fieldGroupsID == 78
                               select fg
                   ).ToList();
            }
            else if (pollType == "english")
            {
                equestion1 = question1;
                equestion2 = question2;
                equestion3 = question3;
                equestion4 = question4;
                equestion5 = question5;
                equestion6 = question6;
                equestion7 = question7;
                surveyCount = (from fg in surveys
                               where fg.fieldGroupsID == 77
                               select fg
                    ).ToList();
            }
            else
            {
                surveyCount = (from fg in surveys
                               select fg
                    ).ToList();
            }



            foreach (var item in surveys)
            {
                var poll = System.Web.Helpers.Json.Decode(item.answers);
                int[,] array = new int[4, 2];
                foreach (var items in poll)
                {

                    //question How often do you travel to Puerto Vallarta
                    if (items.fieldid == question1 || items.fieldid == equestion1)
                    {
                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count1 = count1 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Primera visita")
                            {
                                answer = "First time here";
                            }
                            if (answer == "Una vez al año")
                            {
                                answer = "Once a year";
                            }
                            if (answer == "Dos veces al año")
                            {
                                answer = "Twice a year";
                            }
                            if (answer == "Más de dos veces al año")
                            {
                                answer = "More than twice a year";
                            }
                        }

                        var check = (from c in listaAns
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns.Add(ans);
                            }
                        }
                    }
                    //question When is your favorite season to travel to Puerto Vallarta?
                    if (items.fieldid == question2 || items.fieldid == equestion2)
                    {

                        var tag = "";



                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count2 = count2 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Invierno (Nov. - Abr.)")
                            {
                                answer = "Winter (Nov. - Apr.)";
                            }

                            if (answer == "Primavera (Semana Santa y/o Pascua)")
                            {
                                answer = "Spring (Spring Break)";
                            }
                            if (answer == "Verano (Jun. - Sep.)")
                            {
                                answer = "Summer (Jun. - Sep.)";
                            }
                            if (answer == "Otoño (Sep. - Oct.)")
                            {
                                answer = "Fall (Sep. - Oct.)";
                            }




                            /* switch (answer)
                             {
                                case "Invierno(Nov. - Abr.)":
                                     tag = "#Invierno";
                                     break;
                                 case "Winter (Nov. - Apr.)":
                                     tag = "#Winter";
                                     break;
                                     case "Primavera (Semana Santa y/o Pascua)":
                                     tag = "#Primavera";
                                     break;
                                 case "Spring (Spring Break)":
                                     tag = "#Spring";
                                     break;
                                 case "Verano (Jun. - Sep.)":
                                     tag = "#Verano";
                                     break;
                                 case "Summer (Jun. - Sep.)":
                                     tag = "#Verano";
                                     break;
                                 case "Otoño (Sep. - Oct.)":
                                     tag = "#Otoño";
                                     break;
                                 case "Fall (Sep. - Oct.)":
                                     tag = "#Fall";
                                     break;
                             }*/
                        }


                        /* if (item.leadID == new Guid("ec087854-94df-4625-8013-a1227178021a"))
                         {
                             var a = 0;
                         }

                         var lead = (from l in db.tblLeads
                                    where l.leadID == item.leadID && l.tags == null 
                                    select l).FirstOrDefault();

                         if (lead != null)
                         {
                             if (tag != "")
                             {
                                 lead.tags = tag;
                             }
                         }*/

                        var check = (from c in listaAns2
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns2.Add(ans);
                            }
                        }
                    }
                    //question Where do you like to stay in Puerto Vallarta?
                    if (items.fieldid == question3 || items.fieldid == equestion3)
                    {
                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count3 = count3 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Hoteles todo-incluido")
                            {
                                answer = "All-inclusive resorts";
                            }
                            if (answer == "Alojamiento y desayuno (Bed & Breakfast)")
                            {
                                answer = "Bed-and-breakfast";
                            }
                            if (answer == "Condominio rentado")
                            {
                                answer = "Rented  condo";
                            }
                            if (answer == "Propia casa")
                            {
                                answer = "Own place";
                            }
                            if (answer == "Crucero")
                            {
                                answer = "Cruise";
                            }
                        }
                        var check = (from c in listaAns3
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns3.Add(ans);
                            }
                        }
                    }

                    //What is your age range?
                    if (items.fieldid == question4 || items.fieldid == equestion4)
                    {
                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count4 = count4 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Menos de 30")
                            {
                                answer = "Under 30";
                            }

                            if (answer == "Más de 60")
                            {
                                answer = "Over 60";
                            }
                        }
                        var check = (from c in listaAns4
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns4.Add(ans);
                            }
                        }
                    }
                    //What did you enjoy the most in Puerto Vallarta?

                    if (items.fieldid == question5 || items.fieldid == equestion5)
                    {

                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count5 = count5 + 1;
                        }
                        answer = answer.Trim();
                        /*if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Si")
                            {
                                answer = "Yes";
                            }
                        }*/
                        var check = (from c in listaAns5
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns5.Add(ans);
                            }
                        }
                    }

                    //What is your opinion of Puerto Vallarta's safety?

                    if (items.fieldid == question6 || items.fieldid == equestion6)
                    {

                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count6 = count6 + 1;
                        }
                        answer = answer.Trim();
                        /*if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Si")
                            {
                                answer = "Yes";
                            }
                        }*/
                        var check = (from c in listaAns6
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns6.Add(ans);
                            }
                        }
                    }


                    //7. What is your opinion of the beache's cleanliness? 1410

                    if (items.fieldid == question7)
                    {

                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count7 = count7 + 1;
                        }
                        answer = answer.Trim();
                        /*if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Si")
                            {
                                answer = "Yes";
                            }
                        }*/
                        var check = (from c in listaAns7
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns7.Add(ans);
                            }
                        }
                    }

                    //8. What is your opinion of the city's cleanliness? 1411

                    if (items.fieldid == question8)
                    {

                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count8 = count8 + 1;
                        }
                        answer = answer.Trim();
                        /*if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Si")
                            {
                                answer = "Yes";
                            }
                        }*/
                        var check = (from c in listaAns8
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns8.Add(ans);
                            }
                        }
                    }

                    //question What is your overall opinion of Puerto Vallarta?
                    if (items.fieldid == question9)
                    {
                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count9 = count9 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Mala")
                            {
                                answer = "Bad";
                            }
                            if (answer == "Promedio")
                            {
                                answer = "Average";
                            }
                            if (answer == "Buena")
                            {
                                answer = "Good";
                            }
                            if (answer == "Excelente")
                            {
                                answer = "Excellent";
                            }
                        }
                        var check = (from c in listaAns9
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns9.Add(ans);
                            }
                        }
                    }
                    //questionWhich of the following categories do you identify your vacation interest?
                    if (items.fieldid == question10)
                    {
                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count10 = count10 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Aventura")
                            {
                                answer = "Adventure";
                            }
                            if (answer == "Cultura")
                            {
                                answer = "Culture";
                            }
                            if (answer == "Bienestar")
                            {
                                answer = "Wellness";
                            }
                            if (answer == "Todas las Anteriores")
                            {
                                answer = "All the answers above";
                            }
                            if (answer == "Otra")
                            {
                                answer = "Other";
                            }
                        }
                        var check = (from c in listaAns10
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns10.Add(ans);
                            }
                        }
                    }
                    //questionWhich Did the guest sign the poll?

                    if (items.fieldid == question11)
                    {

                        answersPoll ans = new answersPoll();
                        string answer = Convert.ToString(items.answer);
                        if (answer != "")
                        {
                            count11 = count11 + 1;
                        }
                        answer = answer.Trim();
                        if (pollType != "english" && pollType != "spanish")
                        {
                            if (answer == "Si")
                            {
                                answer = "Yes";
                            }
                        }
                        var check = (from c in listaAns11
                                     where c.answer == answer
                                     select c
                                     ).FirstOrDefault();
                        if (check != null)
                        {
                            check.count = check.count + 1;
                        }
                        else
                        {
                            if (items.answer != "")
                            {
                                Int32 fieldID = Convert.ToInt32(items.fieldid);
                                ans.answer = answer;
                                ans.count = 1;
                                ans.question = (from a in db.tblFields
                                                where a.fieldID == fieldID
                                                select a.description
                                                ).FirstOrDefault();
                                listaAns11.Add(ans);
                            }
                        }
                    }



                }

            }
            var list1 = (from j in listaAns
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list2 = (from j in listaAns2
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list3 = (from j in listaAns3
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list4 = (from j in listaAns4
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list5 = (from j in listaAns5
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list6 = (from j in listaAns6
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list7 = (from j in listaAns7
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();
            var list8 = (from j in listaAns8
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                    ).ToList();

            var list9 = (from j in listaAns9
                         select new
                         {
                             answer = j.answer,
                             count = j.count,
                             question = j.question
                         }
                   ).ToList();
            var list10 = (from j in listaAns10
                          select new
                          {
                              answer = j.answer,
                              count = j.count,
                              question = j.question
                          }
                   ).ToList();
            var list11 = (from j in listaAns11
                          select new
                          {
                              answer = j.answer,
                              count = j.count,
                              question = j.question
                          }
                  ).ToList();
            //db.SaveChanges();
            object[] data = new[]
             {

                new object[] { list1,list2, list3, list4, list5, list6, list7, list8, list9, list10, list11, surveyCount.Count(),count1, count2, count3
                , count4, count5, count6, count7, count8, count9, count10, count11},

             };

            return data;
        }
        /******************************************************************************************************/

        public object getMembershipsInfo(DateTime fromDate, DateTime toDate, string code, string type)
        {
            Int64 codeInt = Convert.ToInt64(code);
            Guid notID = Guid.Parse("54A10841-5B68-404A-9103-F73D740FCF92");
            var a = session.RoleID;
            if (type == "memberships")
            {
                var memberhips = (from m in db.tblMembershipSales
                                  join c in db.tblMembershipCards on m.membershipCardID equals c.MembershipCardID
                                  join u in db.tblUserProfiles on c.userID equals u.userID
                                  join l in db.tblLocations on m.locationID equals l.locationID
                                  //esto
                                  //join lead in db.tblLeads on m.leadID equals lead.leadID
                                  //join b in db.tblBookingStatus on lead.bookingStatusID equals b.bookingStatusID
                                  where m.dateSaved <= toDate && m.dateSaved >= fromDate
                                  where (code != null ? c.Code == codeInt : c.Code > 0) && c.userID != notID
                                  // where lead.bookingStatusID != null 

                                  orderby c.Code ascending
                                  select new
                                  {
                                      membershipSalesID = m.membershipSalesID,
                                      code = c.Code,
                                      //lead = lead.firstName +  " " + lead.lastName,
                                      ambassador = u.firstName + " " + u.lastName,
                                      dateSaved = m.dateSaved,
                                      dateActivated = m.activationDate,
                                      dueDate = m.dueDate,
                                      isProcess = m.inProgress,
                                      payment = m.payment,
                                      location = l.location,
                                      activatedByPoll = m.activatedByPoll,
                                      paymentTypeID = m.paymentTypeID,
                                      comment = m.membershipComment,
                                      //bookingStatus = b.bookingStatus
                                      free = m.free,

                                  }
                                  ).ToList();
                return memberhips;
            }
            return "ok";


        }
        /******************************************************************************************************/

        public object getContactInfo(Int64 membershipSalesID)
        {
            var member = (from mem in db.tblMembershipSales
                          join l in db.tblLeads on mem.leadID equals l.leadID
                          join b in db.tblBookingStatus on l.bookingStatusID equals b.bookingStatusID into book
                          from bo in book.DefaultIfEmpty()

                          join c in db.tblMembershipCards on mem.membershipCardID equals c.MembershipCardID
                          where mem.membershipSalesID == membershipSalesID
                          select new
                          {
                              name = l.firstName + " " + l.lastName,
                              code = c.Code,
                              comment = mem.membershipComment,
                              bookingStatusID = l.bookingStatusID,
                              bookingStatus = bo.bookingStatus,
                              dueDate = mem.dueDate,
                          }


                          ).FirstOrDefault();

            var phone = (from mem in db.tblMembershipSales
                         join l in db.tblPhones on mem.leadID equals l.leadID
                         where mem.membershipSalesID == membershipSalesID && l.leadID == mem.leadID
                         select new
                         {
                             phone = l.phone,
                         }


                          ).FirstOrDefault();
            var email = (from mem in db.tblMembershipSales
                         join l in db.tblLeadEmails on mem.leadID equals l.leadID
                         where mem.membershipSalesID == membershipSalesID && l.leadID == mem.leadID
                         select new
                         {
                             email = l.email,
                         }


                          ).FirstOrDefault();
            var poll = (from mem in db.tblMembershipSales
                        join l in db.tblFieldGroupsAnswers on mem.membershipSalesID
                        equals l.membershipCardID
                        where mem.membershipSalesID == membershipSalesID
                        select new
                        {
                            folio = l.folio
                        }


                          ).FirstOrDefault();


            object[] data = new[]
              {
                new object[] {member},
                new object[] {phone},
                new object[] {email},
                new object[] {poll},
                 };
            return data;


        }

        // SENSES OF MEXICO



    }
}

////public List<List<KeyValuePair<string, string>>> SearchDynamic(DynamicModel.SearchDynamicModel model)
//        public DynamicModel.DynamicResults SearchDynamic(DynamicModel.SearchDynamicModel model)
//        {
//            DynamicModel.DynamicResults results = new DynamicModel.DynamicResults();
//            var filePath = HttpContext.Current.Server.MapPath(@"~/Content/files/data/");
//            var fileRoute = Path.Combine(filePath, "Dynamic_Search_Results.csv");
//            File.Delete(fileRoute);
//            var fileWriter = new StreamWriter(fileRoute);
//            #region "instances and first block of variables declaration"
//            //var listTables = new List<string>();
//            //ePlatEntities db = new ePlatEntities();
//            //var properties = model.GetType().GetProperties();
//            //var listFields = new List<KeyValuePair<string, PropertyInfo>>();    //<fieldName, property>
//            //List<KeyValuePair<string, string>> columnsToDisplay = new List<KeyValuePair<string, string>>();
//            //List<List<KeyValuePair<string, string>>> tableRows = new List<List<KeyValuePair<string, string>>>();
//            #endregion

//            //add main table to query
//            //IQueryable query = from lead in db.tblLeads select lead;

//            #region "iteration through all model properties to get their tableInfo, fieldInfo and value"
//            //foreach (var i in properties)
//            //{
//            //    if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i))
//            //    {
//            //        if (i.GetValue(model, null) != null)
//            //        {
//            //            var table = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name;
//            //            var field = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
//            //            listTables.Add(table);
//            //            listFields.Add(new KeyValuePair<string, PropertyInfo>(field, i));
//            //        }
//            //    }
//            //}
//            #endregion

//            #region "second block of variables declaration with values and indexes of properties lists"
//            //var tables = listTables.Distinct();
//            //var listTablesIndexes = listTables.Select((i, v) => new { value = i, index = v });
//            //var listFieldsIndexes = listFields.Select((i, v) => new { value = i, index = v });
//            #endregion

//            //modify if addition of tables is neccesary
//            #region "iteration to add corresponding joins to query, based on properties read"
//            //foreach (var i in tables)
//            //{
//            //    if (i != "tblLeads")
//            //    {
//            //        switch (i)
//            //        {
//            //            case "tblReservations":
//            //                {
//            //                    query = query.Join("m", db.tblReservations, "x", "m.leadID", "x.leadID", "New(m as lead, x as rsv)");
//            //                    break;
//            //                }
//            //            case "tblPresentations":
//            //                {
//            //                    query = query.Join("m", db.tblPresentations, "x", "m.rsv.reservationID", "x.reservationID", "New(m.lead as lead, m.rsv as rsv, x as pst)");
//            //                    break;
//            //                }
//            //            case "tblContractsHistory":
//            //                {
//            //                    query = query.Join("m", db.tblContractsHistory, "x", "m.pst.presentationID", "x.presentationID", "New(m.lead as lead, m.rsv as rsv, m.pst as pst, x as cth)");
//            //                    break;
//            //                }
//            //        }
//            //    }
//            //}
//            #endregion

//            #region "iteration to read and assign all listed properties values in query"
//            ////iteration to read and assign all listed properties values in query
//            //foreach (var i in listFieldsIndexes)    //<fieldName, property>
//            //{
//            //    var propertyName = i.value.Value.Name;
//            //    var tableName = listTablesIndexes.Single(m => m.index == i.index).value;
//            //    var tableFieldName = i.value.Key;
//            //    var tableFieldType = ReportsCatalogs.GetDataBaseTypeOfProperty(tableName, tableFieldName, true);//i.value.Value.PropertyType.FullName;
//            //    dynamic propertyValue = i.value.Value.GetValue(model, null);
//            //    var prefixTable = "";
//            //    #region
//            //    switch (tableName)
//            //    {
//            //        case "tblLeads":
//            //            {
//            //                prefixTable = "lead";
//            //                break;
//            //            }
//            //        case "tblReservations":
//            //            {
//            //                prefixTable = "rsv";
//            //                break;
//            //            }
//            //        case "tblPresentations":
//            //            {
//            //                prefixTable = "pst";
//            //                break;
//            //            }
//            //        case "tblContractsHistory":
//            //            {
//            //                prefixTable = "cth";
//            //                break;
//            //            }
//            //    }
//            //    #endregion
//            //    if (propertyName.IndexOf("_I_") > 0)
//            //    {
//            //        var dateType = propertyName.Substring(propertyName.LastIndexOf("_"), propertyName.Length - propertyName.LastIndexOf("_"));
//            //        var initialDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_I" + dateType).GetValue(model, null).ToString());
//            //        var finalDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_F" + dateType).GetValue(model, null).ToString());
//            //        finalDate = finalDate.AddDays(1).AddSeconds(-1);

//            //        query = query.Where(prefixTable + "." + tableFieldName + " >= @0 AND " + prefixTable + "." + tableFieldName + " <= @1", initialDate, finalDate);
//            //    }
//            //    else
//            //    {
//            //        if (propertyName.IndexOf("_F_") < 0)
//            //        {
//            //            var listValues = new List<object>();
//            //            if (i.value.Value.PropertyType.BaseType.Name == "Array")
//            //            {
//            //                foreach (var z in propertyValue)
//            //                {
//            //                    listValues.Add(z);
//            //                }
//            //            }
//            //            else
//            //            {
//            //                listValues.Add(propertyValue);
//            //            }

//            //            //equivalent code to dynamic contains
//            //            foreach (var a in listValues)
//            //            {
//            //                query = query.Where(prefixTable + "." + tableFieldName + ".Value.Equals(@0)", a);
//            //            }
//            //        }
//            //    }
//            //}
//            #endregion

//            #region "sql string code"
//            #region "variables and instances"
//            var select_query = @"SELECT ";    //fields to show
//            var from_query = "FROM tblLeads";    //tables included in filters
//            var where_query = " WHERE ";  //fields with data in filters
//            var fields = model.SearchDynamic_Columns.Split(',');
//            var listTables = new List<string>();
//            var properties = model.GetType().GetProperties();
//            var listTableJoin = new List<KeyValuePair<string, string>>();
//            List<List<KeyValuePair<string, string>>> listRows = new List<List<KeyValuePair<string, string>>>();
//            DataTable dt = new DataTable();
//            #endregion

//            #region "columns to display and select_query"
//            foreach (var i in model.SearchDynamic_Columns.Split(','))
//            {
//                var fieldtoSelect = i.IndexOf('/') > 0 ? i.Substring(i.IndexOf('/') + 1, i.IndexOf('+') - (i.IndexOf('/') + 1)) : i.Substring(0, i.IndexOf('+'));
//                select_query += fieldtoSelect + ",";
//                if (fieldtoSelect.IndexOf('.') > 0)//this is a foreign key and will need a join
//                {
//                    var table = fieldtoSelect.Substring(0, fieldtoSelect.IndexOf('.'));
//                    //i.Substring(0, i.IndexOf('-'))
//                    //var join = " inner join " + table + " ON " + i.Substring(0, i.IndexOf('-')) + "." + i.Substring(i.IndexOf('-') + 1, i.IndexOf('/') - (i.IndexOf('-') + 1)) + " = " + fieldtoSelect;
//                    var join = " left outer join " + table + " ON " + i.Substring(i.IndexOf('*') + 1, i.IndexOf('-') - (i.IndexOf('*') + 1)) + "." + i.Substring(i.IndexOf('-') + 1, i.IndexOf('/') - (i.IndexOf('-') + 1)) + " = " + fieldtoSelect.Substring(0, fieldtoSelect.IndexOf('.')) + "." + i.Substring(0, i.IndexOf('*'));
//                    listTables.Add(table);
//                    if (listTableJoin.Where(m => m.Key == table).Count() == 0)
//                    {
//                        listTableJoin.Add(new KeyValuePair<string, string>(table, join));
//                    }
//                }
//                else
//                {
//                    listTables.Add(i.Substring(0, i.IndexOf('-')));
//                }
//            }
//            select_query = select_query.Substring(0, select_query.Length - 1) + " ";
//            select_query = select_query.Replace('-', '.');
//            #endregion

//            #region "iteration for from_query and where_query"
//            foreach (var i in properties)
//            {
//                if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i))
//                {
//                    dynamic value = i.GetValue(model, null);
//                    if (i.GetValue(model, null) != null)
//                    {
//                        var dataBaseInfoAttribute = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i);
//                        var tableName = dataBaseInfoAttribute.Name;
//                        var propertyName = i.Name;
//                        var fieldName = Reflection.GetCustomAttribute<FieldInfoAttribute>(i).Name;
//                        //if (Reflection.HasCustomAttribute<FieldToRequestAttribute>(i))
//                        //{
//                        //    var joinString = " inner join " + tableName + " ON " + tableName + "." + fieldName + " = " + dataBaseInfoAttribute.PrimaryKeyDatabaseName + "." + dataBaseInfoAttribute.PrimaryKeyModelName;
//                        //    listTableJoin.Add(new KeyValuePair<string, string>(tableName, joinString));
//                        //}
//                        //else
//                        //{
//                        //    var joinString = " inner join " + tableName + " ON " + tableName + "." + fieldName + " = " + dataBaseInfoAttribute.PrimaryKeyDatabaseName + "." + dataBaseInfoAttribute.PrimaryKeyModelName;
//                        //    listTableJoin.Add(new KeyValuePair<string, string>(tableName, joinString));
//                        //}
//                        listTables.Add(tableName);
//                        if (propertyName.IndexOf("_I_") > 0)
//                        {
//                            var dateType = propertyName.Substring(propertyName.LastIndexOf("_"), propertyName.Length - propertyName.LastIndexOf("_"));
//                            var initialDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_I" + dateType).GetValue(model, null).ToString());
//                            var finalDate = DateTime.Parse(model.GetType().GetProperty("SearchDynamic_F" + dateType).GetValue(model, null).ToString());
//                            finalDate = finalDate.AddDays(1).AddSeconds(-1);
//                            if (where_query != " WHERE ")
//                                where_query += " AND ";
//                            where_query += tableName + "." + fieldName + " BETWEEN '" + initialDate + "' AND '" + finalDate + "' ";
//                        }
//                        else
//                        {
//                            if (propertyName.IndexOf("_F_") < 0)
//                            {
//                                var listValues = new List<object>();
//                                var builder = "";
//                                if (i.PropertyType.BaseType.Name == "Array")
//                                {
//                                    foreach (var a in value)
//                                    {
//                                        listValues.Add(a);
//                                        //builder += "'" + a + "',";
//                                    }
//                                    //builder = builder != "" ? builder.Substring(0, builder.Length - 1) : "''";
//                                }
//                                else
//                                {
//                                    listValues.Add(value);
//                                    //builder = "'" + value + "'";
//                                }
//                                foreach (var a in listValues)
//                                {
//                                    builder += "'" + ReportsCatalogs.SafeDataBaseValue(a) + "',";
//                                }
//                                builder = builder != "" ? builder.Substring(0, builder.Length - 1) : "";
//                                if (builder != "")
//                                {
//                                    if (where_query != " WHERE ")
//                                    {
//                                        where_query += " AND ";
//                                    }
//                                    where_query += tableName + "." + fieldName + " IN(" + builder + ")";
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//            var tablesToJoin = listTables.Distinct();
//            //foreach (var i in tablesToJoin)
//            {
//                if (tablesToJoin.Where(m => m.ToString() == "tblReservations").Count() > 0)
//                    from_query += " left outer join tblReservations on tblLeads.leadID = tblReservations.leadID";
//                if (tablesToJoin.Where(m => m.ToString() == "tblPresentations").Count() > 0)
//                    from_query += " left outer join tblPresentations on tblReservations.reservationID = tblPresentations.reservationID";
//                if (tablesToJoin.Where(m => m.ToString() == "tblLeadEmails").Count() > 0)
//                    from_query += " left outer join tblLeadEmails on tblLeads.leadID = tblLeadEmails.leadID";
//                if (tablesToJoin.Where(m => m.ToString() == "tblContractsHistory").Count() > 0)
//                    from_query += " left outer join tblContractsHistory on tblPresentations.presentationID = tblContractsHistory.presentationID";
//                if (tablesToJoin.Where(m => m.ToString() == "tblPhones").Count() > 0)
//                    from_query += " left outer join tblPhones on tblLeads.leadID = tblPhones.leadID";
//                foreach (var i in listTableJoin)
//                {
//                    from_query += i.Value;
//                }

//            }
//            #endregion

//            #region "execute query and manage results"
//            var sqlQuery = select_query + from_query + where_query;
//            if (where_query != " WHERE ")
//            {
//                var connectionString = "server=189.254.220.172;database=ePlat;User ID=sa;Password=dc07cdff-d2c0-4446-9cc3-c6e0ffa403ca;";
//                var headerBuilder = "";
//                foreach (var header in model.SearchDynamic_Columns.Split(','))
//                {
//                    headerBuilder += header.Substring(header.IndexOf('+') + 1, header.Length - (header.IndexOf('+') + 1)) + ",";
//                }
//                headerBuilder = headerBuilder.Substring(0, headerBuilder.Length - 1);
//                //fileWriter.WriteLine(headerBuilder);
//                using (SqlConnection conn = new SqlConnection(connectionString))
//                {
//                    try
//                    {
//                        conn.Open();
//                        var sqlCommand = new SqlCommand(sqlQuery, conn);
//                        SqlDataAdapter dataAdapter = new SqlDataAdapter(sqlCommand);
//                        dataAdapter.Fill(dt);
//                        var topCounter = 0;
//                        var headers = headerBuilder.Split(',');
//                        //list = dt.AsEnumerable().ToList();
//                        foreach (DataRow row in dt.Rows)
//                        {
//                            var rowBuilder = "";
//                            var headerCounter = 0;
//                            var listColumnsToDisplay = new List<KeyValuePair<string, string>>();
//                            foreach (DataColumn column in dt.Columns)
//                            {
//                                //var type = row[column].GetType().Name;
//                                var item = row[column].GetType().Name == "DateTime" ? DateTime.Parse(row[column].ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : row[column].ToString();
//                                rowBuilder += item + ",";
//                                listColumnsToDisplay.Add(new KeyValuePair<string, string>(headers[headerCounter], item));
//                                headerCounter++;
//                            }
//                            rowBuilder = rowBuilder.Substring(0, rowBuilder.Length - 1);
//                            //fileWriter.WriteLine(rowBuilder);
//                            if (topCounter < 100)
//                            {
//                                listRows.Add(new List<KeyValuePair<string, string>>(listColumnsToDisplay));
//                            }
//                            topCounter++;
//                        }
//                    }
//                    catch
//                    {

//                    }
//                    finally
//                    {
//                        conn.Close();
//                        dt.Dispose();
//                        fileWriter.Close();
//                    }
//                }
//            }
//            results.ListDynamicResults = listRows;
//            results.SearchTotalRows = dt.Rows.Count.ToString();
//            return results;
//            ////var query = from lead in db.tblLeads
//            ////            join rsv in db.tblReservations on lead.leadID equals rsv.leadID
//            ////            join pst in db.tblPresentations on rsv.reservationID equals pst.reservationID
//            ////            select new
//            ////            {
//            ////                lead = lead,
//            ////                rsv = rsv,
//            ////                pst = pst
//            ////            };
//            ////var properties = model.GetType().GetProperties();
//            ////var counter = 0;
//            ////foreach (var i in properties)
//            ////{
//            ////    if (Reflection.HasCustomAttribute<DataBaseInfoAttribute>(i))
//            ////    {
//            ////        tableName[counter] = Reflection.GetCustomAttribute<DataBaseInfoAttribute>(i).Name;
//            ////        counter++;
//            ////    }
//            ////}
//            #endregion

//            #endregion

//            #region "query iteration to get values of each property"
//            //foreach (var i in query)
//            //{
//            //    var queryProperties = i.GetType().GetProperties();
//            //    foreach (var property in queryProperties)
//            //    {
//            //        var instance = property.GetValue(i, null);
//            //        string instanceName = property.Name;
//            //        var columns = Enumerable.Empty<string>();

//            //        //modify if addition of tables is neccesary
//            //        #region "Get column headers by table"
//            //        switch (instanceName)
//            //        {
//            //            case "lead":
//            //                {
//            //                    columns = model.SearchDynamic_Columns.Split(',').Where(m => m.IndexOf("blLeads-") > 0);
//            //                    break;
//            //                }
//            //            case "rsv":
//            //                {
//            //                    columns = model.SearchDynamic_Columns.Split(',').Where(m => m.IndexOf("blReservations-") > 0);
//            //                    break;
//            //                }
//            //            case "pst":
//            //                {
//            //                    columns = model.SearchDynamic_Columns.Split(',').Where(m => m.IndexOf("blPresentations-") > 0);
//            //                    break;
//            //                }
//            //            case "cth":
//            //                {
//            //                    columns = model.SearchDynamic_Columns.Split(',').Where(m => m.IndexOf("blContractsHistory-") > 0);
//            //                    break;
//            //                }
//            //        }
//            //        #endregion

//            //        #region "get value of property and format to display"
//            //        var columnHeader = "";
//            //        var valueToDisplay = "";
//            //        foreach (var column in columns)
//            //        {
//            //            var columnToDisplay = column.Substring(column.IndexOf('-') + 1, column.IndexOf('_') - (column.IndexOf('-') + 1));
//            //            columnHeader = column.Substring(column.IndexOf('_') + 1, column.Length - (column.IndexOf('_') + 1));
//            //            var propertyValue = instance.GetType().GetProperty(columnToDisplay).GetValue(instance, null);
//            //            valueToDisplay = propertyValue != null ? propertyValue.ToString() : "";
//            //            if (columnToDisplay.IndexOf("ID") > 0)
//            //            {
//            //                valueToDisplay = propertyValue != null ? ReportsCatalogs.GetTextValueOfIndex(columnToDisplay, propertyValue.ToString()) : "";
//            //            }
//            //            if (columnToDisplay.IndexOf("Date") > 0)
//            //            {
//            //                valueToDisplay = propertyValue != null ? DateTime.Parse(propertyValue.ToString()).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : "";
//            //            }
//            //            columnsToDisplay.Add(new KeyValuePair<string, string>(columnHeader, valueToDisplay));
//            //        }
//            //        #endregion
//            //    }
//            //    tableRows.Add(new List<KeyValuePair<string, string>>(columnsToDisplay));
//            //}
//            #endregion
//            //return tableRows;
//        }

