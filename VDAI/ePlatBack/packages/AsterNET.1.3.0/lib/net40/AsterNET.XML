<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsterNET</name>
    </assembly>
    <members>
        <member name="F:AsterNET.Common.DEFAULT_HOSTNAME">
            <summary> The hostname to use if none is provided.</summary>
        </member>
        <member name="F:AsterNET.Common.DEFAULT_PORT">
            <summary> The port to use if none is provided.</summary>
        </member>
        <member name="F:AsterNET.Common.LINE_SEPARATOR">
            <summary>Line separator</summary>
        </member>
        <member name="F:AsterNET.Common.AGI_BIND_PORT">
            <summary> The default AGI bind port. </summary>
        </member>
        <member name="F:AsterNET.Common.AGI_POOL_SIZE">
            <summary> The default AGI thread pool size. </summary>
        </member>
        <member name="F:AsterNET.Common.AGI_BIND_ADDRESS">
            <summary> The default AGI bind address. </summary>
        </member>
        <member name="T:AsterNET.FastAGI.AGIChannel">
            <summary>
                Default implementation of the AGIChannel interface.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIChannel.LastReply">
            <summary>
                Get last AGI Reply.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.AGIConnectionHandler">
            <summary>
                An AGIConnectionHandler is created and run by the AGIServer whenever a new
                socket connection from an Asterisk Server is received.<br />
                It reads the request using an AGIReader and runs the AGIScript configured to
                handle this type of request. Finally it closes the socket connection.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIConnectionHandler.Channel">
            <summary>
                Returns the AGIChannel associated with the current thread.
            </summary>
            <returns>the AGIChannel associated with the current thread or  null if none is associated.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIConnectionHandler.#ctor(AsterNET.IO.SocketConnection,AsterNET.FastAGI.IMappingStrategy,System.Boolean,System.Boolean)">
            <summary>
                Creates a new AGIConnectionHandler to handle the given socket connection.
            </summary>
            <param name="socket">the socket connection to handle.</param>
            <param name="mappingStrategy">the strategy to use to determine which script to run.</param>
        </member>
        <member name="T:AsterNET.FastAGI.AGIException">
            <summary>
            Abstract base class for all AGI specific exceptions.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIException.#ctor(System.String)">
            <summary>
            Creates a new AGIExeption with the given message.
            </summary>
            <param name="message">a message decribing the AGIException.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new AGIExeption with the given message and cause.
            </summary>
            <param name="message">a message decribing the AGIException.</param>
            <param name="cause">the throwable that caused this exception to be thrown.</param>
        </member>
        <member name="T:AsterNET.FastAGI.AGIHangupException">
            <summary>
            The AGIHangupException is thrown if the channel has been hang up while processing the AGIRequest.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.AGINetworkException">
            <summary>
            The AGINetworkException usally wraps an IOException denoting a network problem when talking to the Asterisk server.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReplyStatuses.SC_SUCCESS">
            <summary>
                Status code (200) indicating Asterisk successfully processed the AGICommand.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReplyStatuses.SC_INVALID_OR_UNKNOWN_COMMAND">
            <summary>
                Status code (510) indicating Asterisk was unable to process the
                AGICommand because there is no command with the given name available.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReplyStatuses.SC_DEAD_CHANNEL">
            <summary>
                Status code (511) indicating Asterisk was unable to process the
                AGICommand because the channel is dead.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReplyStatuses.SC_INVALID_COMMAND_SYNTAX">
            <summary>
                Status code (520) indicating Asterisk was unable to process the
                AGICommand because the syntax used was not correct. This is most likely
                due to missing required parameters or additional parameters sent that are
                not understood.<br />
                Ensure proper quoting of the parameters when you receive this status
                code.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.AGIReply">
            <summary>
                Default implementation of the AGIReply interface.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.attributes">
            <summary>Additional attributes contained in this reply, for example endpos.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.extra">
            <summary> The contents of the parenthesis.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.result">
            <summary> The result, that is the part directly following the "result=" string.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.status">
            <summary> The status code.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.synopsis">
            <summary> In case of status == 520 (invalid command syntax) this attribute contains the synopsis of the command.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIReply.usage">
            <summary> In case of status == 520 (invalid command syntax) this attribute contains the usage of the command.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIReply.ResultCode">
            <summary>
                Returns the return code (the result as int).
            </summary>
            <returns>the return code or -1 if the result is not an int.</returns>
        </member>
        <member name="P:AsterNET.FastAGI.AGIReply.ResultCodeAsChar">
            <summary>
                Returns the return code as character.
            </summary>
            <returns>the return code as character.</returns>
        </member>
        <member name="P:AsterNET.FastAGI.AGIReply.Extra">
            <summary>
                Returns the text in parenthesis contained in this reply.<br />
                The meaning of this property depends on the command sent. Sometimes it
                contains a flag like "timeout" or "hangup" or - in case of the
                GetVariableCommand - the value of the variable.
            </summary>
            <returns>the text in the parenthesis or  null if not set.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIReply.GetResult">
            <summary>
                Returns the result, that is the part directly following the "result=" string.
            </summary>
            <returns>the result.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIReply.GetStatus">
            <summary>
                Returns the status code.<br />
                Supported status codes are:<br />
                200 Success<br />
                510 Invalid or unknown command<br />
                520 Invalid command syntax<br />
            </summary>
            <returns>the status code.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIReply.GetAttribute(System.String)">
            <summary>
                Returns an additional attribute contained in the reply.<br />
                For example the reply to the StreamFileCommand contains an additional
                endpos attribute indicating the frame where the playback was stopped.
                This can be retrieved by calling getAttribute("endpos") on the corresponding reply.
            </summary>
            <param name="name">the name of the attribute to retrieve. The name is case insensitive.</param>
            <returns>the value of the attribute or null if it is not set.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIReply.GetSynopsis">
            <summary>
                Returns the synopsis of the command sent if Asterisk expected a different
                syntax (getStatus() == SC_INVALID_COMMAND_SYNTAX).
            </summary>
            <returns>the synopsis of the command sent, null if there were no syntax errors.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIReply.GetUsage">
            <summary>
                Returns the usage of the command sent if Asterisk expected a different
                syntax (getStatus() == SC_INVALID_COMMAND_SYNTAX).
            </summary>
            <returns>
                the usage of the command sent,
                null if there were no syntax errors.
            </returns>
        </member>
        <member name="T:AsterNET.FastAGI.AGIRequest">
            <summary>
                Default implementation of the AGIRequest interface.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AGIRequest.parameterMap">
            <summary> A map assigning the values of a parameter (an array of Strings) to the name of the parameter.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIRequest.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
                Creates a new AGIRequest.
            </summary>
            <param name="environment">the first lines as received from Asterisk containing the environment.</param>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.RequestURL">
            <summary>
                Returns the full URL of the request in the form agi://host[:port][/script].
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Channel">
            <summary>
                Returns the name of the channel.
            </summary>
            <returns>the name of the channel.</returns>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.UniqueId">
            <summary>
                Returns the unqiue id of the channel.
            </summary>
            <returns>the unqiue id of the channel.</returns>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Type">
            <summary>
                Returns the type of the channel, for example "SIP".
            </summary>
            <returns>the type of the channel, for example "SIP".</returns>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Language">
            <summary>
                Returns the language, for example "en".
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Context">
            <summary>
                Returns the context in the dial plan from which the AGI script was called.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Extension">
            <summary>
                Returns the extension in the dial plan from which the AGI script was called.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Priority">
            <summary>
                Returns the priority in the dial plan from which the AGI script was called.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Enhanced">
            <summary>
                Returns wheather this agi is passed audio (EAGI - Enhanced AGI).<br />
                Enhanced AGI is currently not supported on FastAGI.<br />
                true if this agi is passed audio, false otherwise.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.AccountCode">
            <summary>
                Returns the account code set for the call.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AGIRequest.Script">
            <summary>
                Returns the name of the script to execute.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIRequest.buildMap(System.Collections.Generic.List{System.String})">
            <summary>
                Builds a map containing variable names as key (with the "agi_" prefix stripped) and the corresponding values.<br />
                Syntactically invalid and empty variables are skipped.
            </summary>
            <param name="lines">the environment to transform.</param>
            <returns> a map with the variables set corresponding to the given environment.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIRequest.parseParameters(System.String)">
            <summary>
                Parses the given parameter string and caches the result.
            </summary>
            <param name="s">the parameter string to parse</param>
            <returns> a Map made up of parameter names their values</returns>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.SC511_CAUSES_EXCEPTION">
            <summary>
                If set to true, causes the AGIChannel to throw an exception when a status code of 511 (Channel Dead) is returned.
                This is set to false by default to maintain backwards compatibility
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.SCHANGUP_CAUSES_EXCEPTION">
            <summary>
                If set to true, causes the AGIChannel to throw an exception when return status is 0 and reply is HANGUP.
                This is set to false by default to maintain backwards compatibility
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.port">
            <summary> The port to listen on.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.address">
            <summary> The address to listen on.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.pool">
            <summary>The thread pool that contains the worker threads to process incoming requests.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.poolSize">
            <summary>
                The number of worker threads in the thread pool. This equals the maximum number of concurrent requests this
                AGIServer can serve.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.stopped">
            <summary> True while this server is shut down. </summary>
        </member>
        <member name="F:AsterNET.FastAGI.AsteriskFastAGI.mappingStrategy">
            <summary>
                The strategy to use for bind AGIRequests to AGIScripts that serve them.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AsteriskFastAGI.PoolSize">
            <summary>
                Sets the number of worker threads in the thread pool.<br />
                This equals the maximum number of concurrent requests this AGIServer can serve.<br />
                The default pool size is 10.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AsteriskFastAGI.BindPort">
            <summary>
                Sets the TCP port to listen on for new connections.<br />
                The default bind port is 4573.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.AsteriskFastAGI.MappingStrategy">
            <summary>
                Sets the strategy to use for mapping AGIRequests to AGIScripts that serve them.<br />
                The default mapping is a MappingStrategy.
            </summary>
            <seealso cref="P:AsterNET.FastAGI.AsteriskFastAGI.MappingStrategy" />
        </member>
        <member name="M:AsterNET.FastAGI.AsteriskFastAGI.#ctor">
            <summary>
                Creates a new AsteriskFastAGI.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AsteriskFastAGI.#ctor(System.String)">
            <summary>
                Creates a new AsteriskFastAGI.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AsteriskFastAGI.#ctor(AsterNET.FastAGI.IMappingStrategy)">
            <summary>
                Creates a new AsteriskFastAGI.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AsteriskFastAGI.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new AsteriskFastAGI.
            </summary>
            <param name="port">The port to listen on.</param>
            <param name="poolSize">
                The number of worker threads in the thread pool.
                This equals the maximum number of concurrent requests this AGIServer can serve.
            </param>
        </member>
        <member name="M:AsterNET.FastAGI.AsteriskFastAGI.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Creates a new AsteriskFastAGI.
            </summary>
            <param name="ipaddress">The address to listen on.</param>
            <param name="port">The port to listen on.</param>
            <param name="poolSize">
                The number of worker threads in the thread pool.
                This equals the maximum number of concurrent requests this AGIServer can serve.
            </param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.GetFullVariableCommand">
            <summary>
            Returns the value of the given channel varible and understands complex
            variable names and builtin variables, unlike the GetVariableCommand.<br/>
            You can also use this command to use custom Asterisk functions. Syntax is "func(args)".<br/>
            Returns 0 if the variable is not set or channel does not exist. Returns 1 if
            the variable is set and returns the variable in parenthesis.<br/>
            Example return code: 200 result=1 (testvariable)
            Available since Asterisk 1.2
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetFullVariableCommand.#ctor(System.String)">
            <summary>
            Creates a new GetFullVariableCommand.
            </summary>
            <param name="variable">the name of the variable to retrieve.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetFullVariableCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new GetFullVariableCommand.
            </summary>
            <param name="variable">the name of the variable to retrieve.</param>
            <param name="channel">the name of the channel.</param>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetFullVariableCommand.Variable">
            <summary>
            Get/Set the name of the variable to retrieve.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetFullVariableCommand.Channel">
            <summary>
            Get/Set the name of the channel.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.ReceiveTextCommand">
            <summary>
            Receives a string of text on a channel.<br/>
            Specify timeout to be the maximum time to wait for input in milliseconds, or
            0 for infinite.<br/>
            Most channels do not support the reception of text.<br/>
            Returns -1 for failure or 1 for success, and the string in parentheses.<br/>
            Available since Asterisk 1.2.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ReceiveTextCommand.timeout">
            <summary>
            The milliseconds to wait for the channel to receive a character.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ReceiveTextCommand.#ctor">
            <summary>
            Creates a new ReceiveTextCommand with a default timeout of 0 meaning to wait for ever.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ReceiveTextCommand.#ctor(System.Int32)">
            <summary>
            Creates a new ReceiveTextCommand.
            <param name="timeout">the milliseconds to wait for the channel to receive the text.</param>
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ReceiveTextCommand.Timeout">
            <summary>
            Get/Set the milliseconds to wait for the channel to receive the text.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayDateTimeCommand">
            <summary>
            Say a given time, returning early if any of the given DTMF digits are pressed.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed or -1 on error/hangup.<br/>
            Available since Asterisk 1.2.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDateTimeCommand.#ctor(System.Int64)">
            <summary>
            Creates a new SayDateTimeCommand that says the given time.
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDateTimeCommand.#ctor(System.Int64,System.String)">
            <summary>
            Creates a new SayDateTimeCommand that says the given time and allows interruption by one of the given escape digits.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDateTimeCommand.#ctor(System.Int64,System.String,System.String)">
            <summary>
            Creates a new SayDateTimeCommand that says the given time in the given
            format and allows interruption by one of the given escape digits.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
            <param name="format">the format the time should be said in</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDateTimeCommand.#ctor(System.Int64,System.String,System.String,System.String)">
            <summary>
            Creates a new SayDateTimeCommand that says the given time in the given
            format and timezone and allows interruption by one of the given escape
            digits.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
            <param name="format">the format the time should be said in</param>
            <param name="timezone">the timezone to use when saying the time, for example "UTC" or "Europe/Berlin".</param>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDateTimeCommand.Time">
            <summary>
            Get/Set the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDateTimeCommand.getEscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDateTimeCommand.Format">
            <summary>
            Get/Set the format the time should be said in.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDateTimeCommand.Timezone">
            <summary>
            Get/Set the timezone to use when saying the time.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.ChannelStatusCommand">
            <summary>
            Returns the status of the specified channel.
            If no channel name is given the returns the status of the current channel.<br/>
            Return values:
            <ul>
            <li>0 Channel is down and available</li>
            <li>1 Channel is down, but reserved</li>
            <li>2 Channel is off hook</li>
            <li>3 Digits (or equivalent) have been dialed</li>
            <li>4 Line is ringing</li>
            <li>5 Remote end is ringing</li>
            <li>6 Line is up</li>
            <li>7 Line is busy</li>
            </ul>
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ChannelStatusCommand.#ctor(System.String)">
            <summary>
            Creates a new ChannelStatusCommand that queries the given channel.
            </summary>
            <param name="channel">the name of the channel to query.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.ControlStreamFileCommand">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given
            digits, if any, and allows the listner to control the stream.<br/>
            If offset is provided then the audio will seek to sample offset before play
            starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.<br/>
            Available since Asterisk 1.2
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ControlStreamFileCommand.file">
            <summary> The name of the file to stream.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ControlStreamFileCommand.escapeDigits">
            <summary> When one of these digits is pressed while streaming the command returns.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ControlStreamFileCommand.offset">
            <summary> The offset samples to skip before streaming.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.File">
            <summary>
            Get/Set the name of the file to stream.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command or null for none.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.Offset">
            <summary>
            Get/Set the offset samples to skip before streaming.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.ForwardDigit">
            <summary>
            Get the digit for fast forward.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.RewindDigit">
            <summary>
            Get the digit for rewind.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ControlStreamFileCommand.PauseDigit">
            <summary>
            Get the digit for pause and unpause.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.#ctor(System.String)">
            <summary>
            Creates a new ControlStreamFileCommand, streaming from the beginning. It
            uses the default digit "#" for forward and "*" for rewind and does not
            support pausing.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new ControlStreamFileCommand, streaming from the beginning. It
            uses the default digit "#" for forward and "*" for rewind and does not
            support pausing.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new ControlStreamFileCommand, streaming from the given offset.
            It uses the default digit "#" for forward and "*" for rewind and does not
            support pausing.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">
            contains the digits that allow the user to interrupt this command.
            Maybe null if you don't want the user to interrupt.
            </param>
            <param name="offset">the offset samples to skip before streaming.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new ControlStreamFileCommand, streaming from the given offset.
            It uses the default digit "#" for forward and "*" for rewind and does not
            support pausing.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command. Maybe null if you don't want the user to interrupt.</param>
            <param name="offset">the offset samples to skip before streaming.</param>
            <param name="forwardDigit">the digit for fast forward.</param>
            <param name="rewindDigit">the digit for rewind.</param>
            <param name="pauseDigit">the digit for pause and unpause.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.ControlDigits(System.String,System.String)">
            <summary>
            Sets the control digits for fast forward and rewind.
            </summary>
            <param name="forwardDigit">the digit for fast forward.</param>
            <param name="rewindDigit">the digit for rewind.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ControlStreamFileCommand.ControlDigits(System.String,System.String,System.String)">
            <summary>
            Sets the control digits for fast forward, rewind and pause.
            </summary>
            <param name="forwardDigit">the digit for fast forward.</param>
            <param name="rewindDigit">the digit for rewind.</param>
            <param name="pauseDigit">the digit for pause and unpause.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.DatabaseDelCommand">
            <summary>
            Deletes a family or specific keytree within a family in the Asterisk database.<br/>
            Returns 1 if successful, 0 otherwise.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseDelCommand.family">
            <summary> The family (or family of the keytree) to delete.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseDelCommand.keyTree">
            <summary> The keyTree to delete.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseDelCommand.Family">
            <summary>
            Get/Set the family (or family of the keytree) to delete.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseDelCommand.KeyTree">
            <summary>
            Get/Set the the keytree to delete.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabaseDelCommand.#ctor(System.String)">
            <summary>
            Creates a new DatabaseDelCommand to delete a family.
            </summary>
            <param name="family">the family to delete.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabaseDelCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new DatabaseDelCommand to delete a keytree.
            </summary>
            <param name="family">the family of the keytree to delete.</param>
            <param name="keyTree">the keytree to delete.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.DatabaseDelTreeCommand">
            <summary>
            Deletes an entry in the Asterisk database for a given family and key.<br/>
            Returns 1 if successful, 0 otherwise.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.family">
            <summary> The family of the key to delete.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.keyTree">
            <summary> The key to delete.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.Family">
            <summary>
            Get/Set the family of the key to delete.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.KeyTree">
            <summary>
            Get/Set the the key to delete.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.#ctor(System.String)">
            <summary>
            Creates a new DatabaseDelCommand.
            </summary>
            <param name="family">the family of the key to delete.</param>
            <param name="key">the key to delete.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabaseDelTreeCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new DatabaseDelCommand.
            </summary>
            <param name="family">the family of the key to delete.</param>
            <param name="keytree">the key to delete.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.DatabaseGetCommand">
            <summary>
            Retrieves an entry in the Asterisk database for a given family and key.<br/>
            Returns 0 if is not set. Returns 1 if the variable is set and returns the
            value in parenthesis.<br/>
            Example return code: 200 result=1 (testvariable)
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseGetCommand.family">
            <summary> The family of the key to retrieve.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabaseGetCommand.varKey">
            <summary> The key to retrieve.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseGetCommand.Family">
            <summary>
            Get/Set 
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabaseGetCommand.Key">
            <summary>
            Get/Set the the key to retrieve.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabaseGetCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new DatabaseGetCommand.
            </summary>
            <param name="family">the family of the key to retrieve.</param>
            <param name="key">the key to retrieve.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.DatabasePutCommand">
            <summary>
            Adds or updates an entry in the Asterisk database for a given family, key, and value.<br/>
            Returns 1 if successful, 0 otherwise.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabasePutCommand.family">
            <summary> The family of the key to set.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabasePutCommand.varKey">
            <summary> The key to set.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.DatabasePutCommand.varValue">
            <summary> The value to set.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabasePutCommand.Family">
            <summary>
            Get/Set the family of the key to set.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabasePutCommand.Key">
            <summary>
            Get/Set the the key to set.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.DatabasePutCommand.Value">
            <summary>
            Get/Set the value to set.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.DatabasePutCommand.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new DatabasePutCommand.
            </summary>
            <param name="family">the family of the key to set.</param>
            <param name="key">the key to set.</param>
            <param name="value">the value to set.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.ExecCommand">
            <summary>
            Executes an application with the given options.<br/>
            Returns whatever the application returns, or -2 if the application was not found.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ExecCommand.application">
            <summary> The name of the application to execute.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ExecCommand.options">
            <summary> The options to pass to the application.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ExecCommand.Application">
            <summary>
            Get/Set the name of the application to execute.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ExecCommand.Options">
            <summary>
            Get/Set the options to pass to the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ExecCommand.#ctor(System.String)">
            <summary>
            Creates a new ExecCommand.
            </summary>
            <param name="application">the name of the application to execute.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ExecCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new ExecCommand.
            </summary>
            <param name="application">the name of the application to execute.</param>
            <param name="options">the options to pass to the application.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.GetDataCommand">
            <summary>
            Stream the given file, and recieve DTMF data. The user may interrupt the streaming by starting to enter digits.<br/>
            Returns the digits recieved from the channel at the other end.<br/>
            Input ends when the timeout is reached, the maximum number of digits is read or the user presses #.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetDataCommand.file">
            <summary> The name of the file to stream.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetDataCommand.timeout">
            <summary> The timeout in milliseconds to wait for data.<br/>
            0 means standard timeout value, -1 means "ludicrous time" (essentially never times out).
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetDataCommand.maxDigits">
            <summary> The maximum number of digits to read.<br/>
            Must be in [1..1024].
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetDataCommand.File">
            <summary>
            Get/Set the name of the file to stream. Must not include extension.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetDataCommand.Timeout">
            <summary>
            Get/Set the timeout in milliseconds to wait for data. 0 means standard timeout value, -1 means "ludicrous time" (essentially never times out).
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetDataCommand.MaxDigits">
            <summary>
            Get/Set the maximum number of digits to read. The maximum number of digits to read. Must be in [1..1024].
            </summary>
            <throws>  IllegalArgumentException if maxDigits is not in [1..1024] </throws>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetDataCommand.#ctor(System.String)">
            <summary>
            Creates a new GetDataCommand with default timeout and maxDigits set to 1024.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetDataCommand.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new GetDataCommand with the given timeout and maxDigits set to 1024.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="timeout">the timeout in milliseconds to wait for data.<br/>
            0 means standard timeout value, -1 means "ludicrous time" (essentially never times out).
            </param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetDataCommand.#ctor(System.String,System.Int64,System.Int32)">
            <summary>
            Creates a new GetDataCommand with the given timeout and maxDigits.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="timeout">the timeout in milliseconds to wait for data.<br/>
            0 means standard timeout value, -1 means "ludicrous time" (essentially never times out).
            </param>
            <param name="maxDigits">the maximum number of digits to read.<br/>
            Must be in [1..1024].
            </param>
            <throws>  IllegalArgumentException if maxDigits is not in [1..1024] </throws>
        </member>
        <member name="T:AsterNET.FastAGI.Command.GetOptionCommand">
            <summary>
            Plays the given file, and waits for the user to press one of the given
            digits. If none of the esacpe digits is pressed while streaming the file this
            command waits for the specified timeout still waiting for the user to press a
            digit. Streaming always begins at the beginning.<br/>
            Returns 0 if no digit being pressed, or the ASCII numerical value of the
            digit if one was pressed, or -1 on error or if the channel was disconnected.
            <br/>
            Remember, the file extension must not be included in the filename.
            </summary>
            <seealso cref="T:AsterNET.FastAGI.Command.StreamFileCommand" />
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetOptionCommand.file">
            <summary> The name of the file to stream.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetOptionCommand.escapeDigits">
            <summary> When one of these digits is pressed while streaming the command returns.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetOptionCommand.timeout">
            <summary> The timeout in seconds.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetOptionCommand.File">
            <summary>
            Get/Set the name of the file to stream.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetOptionCommand.EscapeDigits">
            <summary>
            Get/Set the digits that the user is expected to press.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetOptionCommand.Timeout">
            <summary>
            Get/Set the timeout to wait if none of the defined esacpe digits was presses while streaming.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetOptionCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new GetOptionCommand with a default timeout of 5 seconds.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that the user is expected to press.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetOptionCommand.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new GetOptionCommand with the given timeout.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that the user is expected to press.</param>
            <param name="timeout">the timeout in seconds to wait if none of the defined esacpe digits was presses while streaming.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.GetVariableCommand">
            <summary>
            Returns the value of the given channel varible.<br/>
            Since Asterisk 1.2 you can also use this command to use custom Asterisk  functions. Syntax is "func(args)".<br/>
            Returns 0 if the variable is not set. Returns 1 if the variable is set and returns the variable in parenthesis.<br/>
            Example return code: 200 result=1 (testvariable)
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.GetVariableCommand.varName">
            <summary> The name of the variable to retrieve.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.GetVariableCommand.Variable">
            <summary>
            Get/Set the name of the variable to retrieve.<br />
            Since Asterisk 1.2 you can also use custom dialplan functions (like "func(args)") as variable.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.GetVariableCommand.#ctor(System.String)">
            <summary>
            Creates a new GetVariableCommand.
            </summary>
            <param name="variable">the name of the variable to retrieve.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.HangupCommand">
            <summary>
            Hangs up the specified channel. If no channel name is given, hangs up the current channel.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.HangupCommand.channel">
            <summary>
            The name of the channel to hangup or null for the current channel.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.HangupCommand.Channel">
            <summary>
            Returns the name of the channel to hangup.
            </summary>
            <returns>the name of the channel to hangup or null for the current channel.</returns>
            <summary> Sets the name of the channel to hangup.</summary>
            <param name="channel">the name of the channel to hangup or null for the current channel.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.HangupCommand.#ctor">
            <summary> Creates a new HangupCommand that hangs up the current channel.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.HangupCommand.#ctor(System.String)">
            <summary>
            Creates a new HangupCommand that hangs up the given channel.
            </summary>
            <param name="channel">the name of the channel to hangup.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.NoopCommand">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.NoopCommand.#ctor">
            <summary>
            Creates a new NoopCommand.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.ReceiveCharCommand">
            <summary>
            Receives a character of text on a channel.<br/>
            Specify timeout to be the maximum time to wait for input in milliseconds, or 0 for infinite.<br/>
            Most channels do not support the reception of text.<br/>
            Returns the decimal value of the character if one is received, or 0 if the
            channel does not support text reception. Returns -1 only on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.ReceiveCharCommand.timeout">
            <summary> The milliseconds to wait for the channel to receive a character.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.ReceiveCharCommand.Timeout">
            <summary>
            Get/Set the milliseconds to wait for the channel to receive a character.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ReceiveCharCommand.#ctor">
            <summary>
            Creates a new ReceiveCharCommand with a default timeout of 0 meaning to wait for ever.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.ReceiveCharCommand.#ctor(System.Int32)">
            <summary>
            Creates a new ReceiveCharCommand.
            </summary>
            <param name="timeout">the milliseconds to wait for the channel to receive a character.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.RecordFileCommand">
            <summary>
            Record to a file until a given dtmf digit in the sequence is received.<br/>
            Returns -1 on hangup or error.<br/>
            The format will specify what kind of file will be recorded. The timeout is
            the maximum record time in milliseconds, or -1 for no timeout. Offset samples
            is optional, and if provided will seek to the offset without exceeding the
            end of the file. "maxSilence" is the number of seconds of maxSilence allowed
            before the function returns despite the lack of dtmf digits or reaching
            timeout.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.file">
            <summary> The name of the file to record.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.format">
            <summary> The format of the file to be recorded, for example "wav".</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.escapeDigits">
            <summary> The these digits a user can press to end the recording.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.timeout">
            <summary> The maximum record time in milliseconds, or -1 for no timeout.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.offset">
            <summary> The offset samples to skip.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.beep">
            <summary> Wheather a beep should be played before recording.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.RecordFileCommand.maxSilence">
            <summary> The amount of silence (in seconds) to allow before returning despite the lack of dtmf digits or reaching timeout.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.File">
            <summary>
            Get/Set the name of the file to stream.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.Format">
            <summary>
            Get/Set the format of the file to be recorded, for example "wav".
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to end recording.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.Timeout">
            <summary>
            Get/Set the maximum record time in milliseconds, or -1 for no timeout.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.Offset">
            <summary>
            Get/Set the offset samples to skip.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.RecordFileCommand.Beep">
            <summary>
            Get/Set true if a beep should be played before recording. false if not.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.RecordFileCommand.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new RecordFileCommand.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="format">the format of the file to be recorded, for example "wav".</param>
            <param name="escapeDigits">contains the digits that allow the user to end recording.</param>
            <param name="timeout">the maximum record time in milliseconds, or -1 for no timeout.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.RecordFileCommand.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new RecordFileCommand.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="format">the format of the file to be recorded, for example "wav".</param>
            <param name="escapeDigits">contains the digits that allow the user to end recording.</param>
            <param name="timeout">the maximum record time in milliseconds, or -1 for no timeout.</param>
            <param name="offset">the offset samples to skip.</param>
            <param name="beep">true if a beep should be played before recording.</param>
            <param name="maxSilence">The amount of silence (in seconds) to allow before returning despite the lack of dtmf digits or reaching timeout.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayAlphaCommand">
            <summary> Say a given character string, returning early if any of the given DTMF digits are received on the channel.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed or -1 on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayAlphaCommand.text">
            <summary> The text to say.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayAlphaCommand.escapeDigits">
            <summary> When one of these digits is pressed the command returns.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayAlphaCommand.Text">
            <summary>
            Get/Set Returns the text to say.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayAlphaCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayAlphaCommand.#ctor(System.String)">
            <summary>
            Creates a new SayAlphaCommand.
            </summary>
            <param name="text">the text to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayAlphaCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new SayAlphaCommand.
            </summary>
            <param name="text">the text to say.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayDigitsCommand">
            <summary>
            Say a given digit string, returning early if any of the given DTMF digits are received on the channel.<br/>
            Returns 0 if playback completes without a digit being pressed,
            or the ASCII numerical value of the digit if one was pressed or -1 on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayDigitsCommand.digits">
            <summary> The digits string to say.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayDigitsCommand.escapeDigits">
            <summary> When one of these digits is pressed while saying the digits the command returns.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDigitsCommand.Digits">
            <summary>
            Get/Set the digits string to say.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayDigitsCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDigitsCommand.#ctor(System.String)">
            <summary>
            Creates a new SayDigitsCommand.
            </summary>
            <param name="digits">the digits to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayDigitsCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new SayDigitsCommand.
            </summary>
            <param name="digits">the digits to say.</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayNumberCommand">
            <summary>
            Say a given number, returning early if any of the given DTMF number are received on the channel.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed or -1 on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayNumberCommand.number">
            <summary> The number to say.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayNumberCommand.escapeDigits">
            <summary> When one of these number is pressed while streaming the command returns.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayNumberCommand.Number">
            <summary>
            Get/Set the number to say.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayNumberCommand.EscapeDigits">
            <summary>
            Get/Set the number that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayNumberCommand.#ctor(System.String)">
            <summary>
            Creates a new SayNumberCommand.
            </summary>
            <param name="number">the number to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayNumberCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new SayNumberCommand.
            </summary>
            <param name="number">the number to say.</param>
            <param name="escapeDigits">contains the number that allow the user to interrupt this command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayPhoneticCommand">
            <summary>
            Say a given character string with phonetics, returning early if any of the given DTMF digits are received on the channel.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed or -1 on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayPhoneticCommand.text">
            <summary> The text to say.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayPhoneticCommand.escapeDigits">
            <summary> When one of these digits is pressed the command returns.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayPhoneticCommand.Text">
            <summary>
            Get/Set the text to say.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayPhoneticCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayPhoneticCommand.#ctor(System.String)">
            <summary>
            Creates a new SayPhonticCommand.
            </summary>
            <param name="text">the text to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayPhoneticCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new SayPhoneticCommand.
            </summary>
            <param name="text">the text to say.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SayTimeCommand">
            <summary>
            Say a given time, returning early if any of the given DTMF digits are received on the channel.<br/>
            Time is the number of seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC).<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed or -1 on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayTimeCommand.time">
            <summary> The time to say in seconds since 00:00:00 on January 1, 1970.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SayTimeCommand.escapeDigits">
            <summary> When one of these digits is pressed the command returns.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayTimeCommand.Time">
            <summary>
            Get/Set the time to say in seconds since 00:00:00 on January 1, 1970.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SayTimeCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayTimeCommand.#ctor(System.Int64)">
            <summary>
            Creates a new SayTimeCommand.
            </summary>
            <param name="time">the time to say in seconds since 00:00:00 on January 1, 1970.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SayTimeCommand.#ctor(System.Int64,System.String)">
            <summary>
            Creates a new SayTimeCommand.
            </summary>
            <param name="time">the time to say in seconds since 00:00:00 on January 1, 1970.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SendImageCommand">
            <summary>
            Sends the given image on a channel.<br/>
            Most channels do not support the transmission of images.<br/>
            Returns 0 if image is sent, or if the channel does not support image
            transmission. Returns -1 only on error/hangup.<br/>
            Image names should not include extensions.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SendImageCommand.Image">
            <summary>
            Get/Set the image to send.
            </summary>
            <param name="image">the image to send, should not include extension.</param>
            <returns> the image to send.</returns>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SendImageCommand.image">
            <summary> The name of the image to send.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SendImageCommand.#ctor(System.String)">
            <summary>
            Creates a new SendImageCommand.
            </summary>
            <param name="image">the image to send, should not include extension.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SendTextCommand">
            <summary>
            Sends the given text on a channel.<br/>
            Most channels do not support the transmission of text.<br/>
            Returns 0 if text is sent, or if the channel does not support text
            transmission. Returns -1 only on error/hangup.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SendTextCommand.text">
            <summary> The text to send.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SendTextCommand.Text">
            <summary>
            Get/Set the text to send.
            </summary>
            <param name="text">the text to send.</param>
            <returns>the text to send.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SendTextCommand.#ctor(System.String)">
            <summary>
            Creates a new SendTextCommand.
            </summary>
            <param name="text">the text to send.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetAutoHangupCommand">
            <summary>
            Cause the channel to automatically hangup at the given number of seconds in the future.<br/>
            Of course it can be hungup before then as well. Setting to 0 will cause the
            autohangup feature to be disabled on this channel.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetAutoHangupCommand.time">
            <summary> The number of seconds before this channel is automatically hung up.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetAutoHangupCommand.Time">
            <summary>
            Get/Set the number of seconds before this channel is automatically hung up.
            </summary>
            <returns>the number of seconds before this channel is automatically hung up.</returns>
            <param name="time">
            the number of seconds before this channel is automatically hung up.<br/>
            0 disables the autohangup feature.
            </param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetAutoHangupCommand.#ctor(System.Int32)">
            <summary>
            Creates a new SetAutoHangupCommand.
            </summary>
            <param name="time">
            the number of seconds before this channel is automatically hung up.<br/>
            0 disables the autohangup feature.
            </param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetCallerIdCommand">
            <summary>
            Changes the CallerID of the current channel.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetCallerIdCommand.callerId">
            <summary> The new callerId.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetCallerIdCommand.CallerId">
            <summary>
            Get/Set the new callerId.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetCallerIdCommand.#ctor(System.String)">
            <summary>
            Creates a new SetCallerIdCommand.
            </summary>
            <param name="callerId">the new callerId.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetContextCommand">
            <summary>
            Sets the context for continuation upon exiting the application.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetContextCommand.context">
            <summary> The context for continuation upon exiting the application.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetContextCommand.Context">
            <summary>
            Get/Set the context for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetContextCommand.#ctor(System.String)">
            <summary>
            Creates a new SetPriorityCommand.
            </summary>
            <param name="context">the context for continuation upon exiting the application.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetExtensionCommand">
            <summary>
            Sets the extension for continuation upon exiting the application.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetExtensionCommand.Extension">
            <summary>
            Get/Set the extension for continuation upon exiting the application.
            </summary>
            <returns>the extension for continuation upon exiting the application.</returns>
            <param name="extension">the extension for continuation upon exiting the application.</param>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetExtensionCommand.extension">
            <summary> The extension for continuation upon exiting the application.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetExtensionCommand.#ctor(System.String)">
            <summary>
            Creates a new SetPriorityCommand.
            </summary>
            <param name="extension">the extension for continuation upon exiting the application.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetMusicOffCommand">
            <summary>
            Turns off music on hold on the current channel.<br/>
            Always returns 0.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetMusicOffCommand.#ctor">
            <summary> Creates a new SetMusicOffCommand.</summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetMusicOnCommand">
            <summary>
            Turns on music on hold on the current channel.<br/>
            Always returns 0.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetMusicOnCommand.MusicOnHoldClass">
            <summary>
            Get/Set the music on hold class to play music from.
            </summary>
            <returns>the music on hold class to play music from or null for the default class.</returns>
            <param name="musicOnHoldClass">the music on hold class to play music from or null for the default class.</param>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetMusicOnCommand.musicOnHoldClass">
            <summary> The music on hold class to play music from.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetMusicOnCommand.#ctor">
            <summary> Creates a new SetMusicOnCommand playing music from the default music on hold class.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetMusicOnCommand.#ctor(System.String)">
            <summary>
            Creates a new SetMusicOnCommand playing music from the default music on hold class.
            </summary>
            <param name="musicOnHoldClass">the music on hold class to play music from.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetPriorityCommand">
            <summary>
            Sets the priority for continuation upon exiting the application.<br/>
            Since Asterisk 1.2 SetPriorityCommand also supports labels.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetPriorityCommand.priorityOrLabel">
            <summary> The priority or label for continuation upon exiting the application.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetPriorityCommand.Priority">
            <summary>
            Get/Set the priority or label for continuation upon exiting the application.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetPriorityCommand.Label">
            <summary>
            Get/Set the label for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetPriorityCommand.#ctor(System.Int32)">
            <summary>
            Creates a new SetPriorityCommand.
            </summary>
            <param name="priority">the priority for continuation upon exiting the application.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetPriorityCommand.#ctor(System.String)">
            <summary>
            Creates a new SetPriorityCommand.
            </summary>
            <param name="label">the label for continuation upon exiting the application.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.SetVariableCommand">
            <summary>
            Sets the given channel variable to the given value.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetVariableCommand.varName">
            <summary> The name of the variable to set.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.SetVariableCommand.varValue">
            <summary> The value to set.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetVariableCommand.Variable">
            <summary>
            Get/Set the name of the variable to set.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.SetVariableCommand.Value">
            <summary>
            Get/Set the value to set.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.SetVariableCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new GetVariableCommand.
            </summary>
            <param name="variable">the name of the variable to set.</param>
            <param name="value">the value to set.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.StreamFileCommand">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given digits, if any.<br/>
            If offset is provided then the audio will seek to sample offset before play starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.StreamFileCommand.File">
            <summary>
            Get/Set the name of the file to stream.
            The name of the file to stream, must not include extension.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.StreamFileCommand.EscapeDigits">
            <summary>
            Get/Set the digits that allow the user to interrupt this command.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.StreamFileCommand.Offset">
            <summary>
            Get/Set the offset samples to skip before streaming.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.StreamFileCommand.file">
            <summary> The name of the file to stream.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.StreamFileCommand.escapeDigits">
            <summary> When one of these digits is pressed while streaming the command returns.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.StreamFileCommand.offset">
            <summary> The offset samples to skip before streaming.</summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.StreamFileCommand.#ctor(System.String)">
            <summary> Creates a new StreamFileCommand, streaming from the beginning.
            
            </summary>
            <param name="file">the name of the file to stream, must not include extension.
            </param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.StreamFileCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new StreamFileCommand, streaming from the beginning.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
        </member>
        <member name="M:AsterNET.FastAGI.Command.StreamFileCommand.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new StreamFileCommand, streaming from the given offset.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.
            Maybe null if you don't want the user to interrupt.
            </param>
            <param name="offset">the offset samples to skip before streaming.</param>
        </member>
        <member name="T:AsterNET.FastAGI.Command.TDDModeCommand">
            <summary>
            Enable/Disable TDD transmission/reception on a channel.<br/>
            Returns 1 if successful, or 0 if channel is not TDD-capable.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.TDDModeCommand.Mode">
            <summary>
            Get the mode to set.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.TDDModeCommand.Timeout">
            <summary>
            Sets the mode to set. The mode to set, this can be one of "on", "off", "mate" or "tdd".
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.TDDModeCommand.#ctor(System.String)">
            <summary>
            Creates a new TDDModeCommand. The mode to set, this can be one of "on", "off", "mate" or "tdd".
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.Command.VerboseCommand">
            <summary>
            Sends a message to the console via the verbose message system.<br/>
            Always returns 1.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.VerboseCommand.message">
            <summary> The message to send.</summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.VerboseCommand.level">
            <summary> The verbosity level to use.<br/>
            Must be in [1..4]
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.VerboseCommand.Message">
            <summary>
            Get/Set the message to send.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.VerboseCommand.Level">
            <summary>
            Get/Set the level to use.
            </summary>
            <throws>  IllegalArgumentException if level is not in [1..4] </throws>
        </member>
        <member name="M:AsterNET.FastAGI.Command.VerboseCommand.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new VerboseCommand.
            </summary>
            <param name="message">the message to send.</param>
            <param name="level">the verbosity level to use. Must be in [1..4]</param>
            <throws>  IllegalArgumentException if level is not in [1..4] </throws>
        </member>
        <member name="T:AsterNET.FastAGI.Command.WaitForDigitCommand">
            <summary>
            Waits up to 'timeout' milliseconds for channel to receive a DTMF digit.<br/>
            Returns -1 on channel failure, 0 if no digit is received in the timeout, or
            the numerical value of the ascii of the digit if one is received. Use -1 for
            the timeout value if you desire the call to block indefinitely.
            </summary>
        </member>
        <member name="F:AsterNET.FastAGI.Command.WaitForDigitCommand.timeout">
            <summary> The milliseconds to wait for the channel to receive a DTMF digit.</summary>
        </member>
        <member name="P:AsterNET.FastAGI.Command.WaitForDigitCommand.Timeout">
            <summary>
            Get/Set the milliseconds to wait for the channel to receive a DTMF digit.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.WaitForDigitCommand.#ctor">
            <summary>
            Creates a new WaitForDigitCommand with a default timeout of -1 which blocks the channel indefinitely.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.Command.WaitForDigitCommand.#ctor(System.Int32)">
            <summary>
            Creates a new WaitForDigitCommand.
            </summary>
            <param name="timeout">the milliseconds to wait for the channel to receive a DTMF digit.</param>
        </member>
        <member name="T:AsterNET.FastAGI.AGIWriter">
            <summary>
                Default implementation of the AGIWriter interface.
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.AGIScript">
            <summary>
            The BaseAGIScript provides some convinience methods to make it easier to
            write custom AGIScripts.<br/>
            Just extend it by your own AGIScripts.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.Answer">
            <summary>
            Answers the channel.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.Hangup">
            <summary>
            Hangs the channel up.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetAutoHangup(System.Int32)">
            <summary>
            Cause the channel to automatically hangup at the given number of seconds in the future.<br/>
            0 disables the autohangup feature.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetCallerId(System.String)">
            <summary>
            Sets the caller id on the current channel.<br/>
            The raw caller id to set, for example "John Doe&lt;1234&gt;".
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.PlayMusicOnHold">
            <summary>
            Plays music on hold from the default music on hold class.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.PlayMusicOnHold(System.String)">
            <summary>
            Plays music on hold from the given music on hold class.
            </summary>
            <param name="musicOnHoldClass">the music on hold class to play music from as configures in Asterisk's &lt;musiconhold.conf/code$gt;.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.StopMusicOnHold">
            <summary>
            Stops playing music on hold.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetChannelStatus">
            <summary>
            Returns the status of the channel.<br/>
            Return values:
            <ul>
            <li>0 Channel is down and available</li>
            <li>1 Channel is down, but reserved</li>
            <li>2 Channel is off hook</li>
            <li>3 Digits (or equivalent) have been dialed</li>
            <li>4 Line is ringing</li>
            <li>5 Remote end is ringing</li>
            <li>6 Line is up</li>
            <li>7 Line is busy</li>
            </ul>
            </summary>
            <returns> the status of the channel.
            </returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetData(System.String)">
            <summary>
            Plays the given file and waits for the user to enter DTMF digits until he
            presses '#'. The user may interrupt the streaming by starting to enter
            digits.
            </summary>
            <param name="file">the name of the file to play</param>
            <returns> a String containing the DTMF the user entered</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetData(System.String,System.Int64)">
            <summary>
            Plays the given file and waits for the user to enter DTMF digits until he
            presses '#' or the timeout occurs. The user may interrupt the streaming
            by starting to enter digits.
            </summary>
            <param name="file">the name of the file to play</param>
            <param name="timeout">the timeout in milliseconds to wait for user input.<br/>
            0 means standard timeout value, -1 means "ludicrous time"
            (essentially never times out).</param>
            <returns> a String containing the DTMF the user entered</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetData(System.String,System.Int64,System.Int32)">
            <summary>
            Plays the given file and waits for the user to enter DTMF digits until he
            presses '#' or the timeout occurs or the maximum number of digits has
            been entered. The user may interrupt the streaming by starting to enter
            digits.
            </summary>
            <param name="file">the name of the file to play</param>
            <param name="timeout">the timeout in milliseconds to wait for user input.<br/>
            0 means standard timeout value, -1 means "ludicrous time"
            (essentially never times out).</param>
            <param name="maxDigits">the maximum number of digits the user is allowed to enter</param>
            <returns> a String containing the DTMF the user entered</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetOption(System.String,System.String)">
            <summary>
            Plays the given file, and waits for the user to press one of the given
            digits. If none of the esacpe digits is pressed while streaming the file
            it waits for the default timeout of 5 seconds still waiting for the user
            to press a digit.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that the user is expected to press.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetOption(System.String,System.String,System.Int32)">
            <summary>
            Plays the given file, and waits for the user to press one of the given
            digits. If none of the esacpe digits is pressed while streaming the file
            it waits for the specified timeout still waiting for the user to press a
            digit.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that the user is expected to press.</param>
            <param name="timeout">the timeout in seconds to wait if none of the defined esacpe digits was presses while streaming.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.Exec(System.String)">
            <summary>
            Executes the given command.
            </summary>
            <param name="application">the name of the application to execute, for example "Dial".</param>
            <returns> the return code of the application of -2 if the application was not found.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.Exec(System.String,System.String)">
            <summary>
            Executes the given command.
            </summary>
            <param name="application">the name of the application to execute, for example "Dial".</param>
            <param name="options">the parameters to pass to the application, for example "SIP/123".</param>
            <returns> the return code of the application of -2 if the application was not found.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetContext(System.String)">
            <summary>
            Sets the context for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetExtension(System.String)">
            <summary>
            Sets the extension for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetPriority(System.Int32)">
            <summary>
            Sets the priority for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetPriority(System.String)">
            <summary>
            Sets the label for continuation upon exiting the application.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.StreamFile(System.String)">
            <summary>
            Plays the given file.
            </summary>
            <param name="file">name of the file to play.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.StreamFile(System.String,System.String)">
            <summary>
            Plays the given file and allows the user to escape by pressing one of the given digit.
            </summary>
            <param name="file">name of the file to play.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDigits(System.String)">
            <summary>
            Says the given digit string.
            </summary>
            <param name="digits">the digit string to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDigits(System.String,System.String)">
            <summary>
            Says the given number, returning early if any of the given DTMF number
            are received on the channel.
            </summary>
            <param name="digits">the digit string to say.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayNumber(System.String)">
            <summary>
            Says the given number.
            </summary>
            <param name="number">the number to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayNumber(System.String,System.String)">
            <summary>
            Says the given number, returning early if any of the given DTMF number
            are received on the channel.
            </summary>
            <param name="number">the number to say.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayPhonetic(System.String)">
            <summary>
            Says the given character string with phonetics.
            </summary>
            <param name="text">the text to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayPhonetic(System.String,System.String)">
            <summary>
            Says the given character string with phonetics, returning early if any of
            the given DTMF number are received on the channel.
            </summary>
            <param name="text">the text to say.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayAlpha(System.String)">
            <summary>
            Says the given character string.
            </summary>
            <param name="text">the text to say.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayAlpha(System.String,System.String)">
            <summary>
            Says the given character string, returning early if any of the given DTMF
            number are received on the channel.
            </summary>
            <param name="text">the text to say.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayTime(System.Int64)">
            <summary>
            Says the given time.
            </summary>
            <param name="time">the time to say in seconds since 00:00:00 on January 1, 1970.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayTime(System.Int64,System.String)">
            <summary>
            Says the given time, returning early if any of the given DTMF number are
            received on the channel.
            </summary>
            <param name="time">the time to say in seconds since 00:00:00 on January 1, 1970.</param>
            <param name="escapeDigits">a String containing the DTMF digits that allow the user to escape.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetVariable(System.String)">
            <summary>
            Returns the value of the given channel variable.
            </summary>
            <param name="name">the name of the variable to retrieve.</param>
            <returns> the value of the given variable or null if not set.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SetVariable(System.String,System.String)">
            <summary>
            Sets the value of the given channel variable to a new value.
            </summary>
            <param name="name">the name of the variable to retrieve.</param>
            <param name="val">the new value to set.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.WaitForDigit(System.Int32)">
            <summary>
            Waits up to 'timeout' milliseconds to receive a DTMF digit.
            </summary>
            <param name="timeout">timeout the milliseconds to wait for the channel to receive a DTMF digit, -1 will wait forever.</param>
            <returns> the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetFullVariable(System.String)">
            <summary>
            Returns the value of the current channel variable, unlike getVariable()
            this method understands complex variable names and builtin variables.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="name">the name of the variable to retrieve.</param>
            <returns>the value of the given variable or null if not et.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.GetFullVariable(System.String,System.String)">
            <summary>
            Returns the value of the given channel variable.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="name">the name of the variable to retrieve.</param>
            <param name="channel">the name of the channel.</param>
            <returns>the value of the given variable or null if not set.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDateTime(System.Int64)">
            <summary>
            Says the given time.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDateTime(System.Int64,System.String)">
            <summary>
            Says the given time and allows interruption by one of the given escape digits.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
            <returns>the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDateTime(System.Int64,System.String,System.String)">
            <summary>
            Says the given time in the given format and allows interruption by one of the given escape digits.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
            <param name="format">the format the time should be said in</param>
            <returns>the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SayDateTime(System.Int64,System.String,System.String,System.String)">
            <summary>
            Says the given time in the given format and timezone and allows interruption by one of the given escape digits.<br/>
            Available since Asterisk 1.2.
            </summary>
            <param name="time">the time to say in seconds elapsed since 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC)</param>
            <param name="escapeDigits">the digits that allow the user to interrupt this command or null for none.</param>
            <param name="format">the format the time should be said in</param>
            <param name="timezone">the timezone to use when saying the time, for example "UTC" or "Europe/Berlin".</param>
            <returns>the DTMF digit pressed or 0x0 if none was pressed.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.DatabaseGet(System.String,System.String)">
            <summary>
            Retrieves an entry in the Asterisk database for a given family and key.
            </summary>
            <param name="family">the family of the entry to retrieve.</param>
            <param name="key">key the key of the entry to retrieve.</param>
            <return>the value of the given family and key or null if there is no such value.</return>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.DatabasePut(System.String,System.String,System.String)">
            <summary>
            Adds or updates an entry in the Asterisk database for a given family, key and value.
            </summary>
            <param name="family">the family of the entry to add or update.</param>
            <param name="key">the key of the entry to add or update.</param>
            <param name="value">the new value of the entry.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.DatabaseDel(System.String,System.String)">
            <summary>
            Deletes an entry in the Asterisk database for a given family and key.
            </summary>
            <param name="family">the family of the entry to delete.</param>
            <param name="key">the key of the entry to delete.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.DatabaseDelTree(System.String)">
            <summary>
            Deletes a whole family of entries in the Asterisk database.
            </summary>
            <param name="family">the family to delete.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.DatabaseDelTree(System.String,System.String)">
            <summary>
            Deletes all entries of a given family in the Asterisk database that have a key that starts with a given prefix.
            </summary>
            <param name="family">the family of the entries to delete.</param>
            <param name="keytree">the prefix of the keys of the entries to delete.</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.Verbose(System.String,System.Int32)">
            <summary>
            Sends a message to the Asterisk console via the verbose message system.
            </summary>
            <param name="message">the message to send</param>
            <param name="level">the verbosity level to use. Must be in [1..4]</param>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.RecordFile(System.String,System.String,System.String,System.Int32)">
            <summary>
            Record to a file until a given dtmf digit in the sequence is received.<br/>
            Returns -1 on hangup or error.<br/>
            The format will specify what kind of file will be recorded. The timeout is
            the maximum record time in milliseconds, or -1 for no timeout. Offset samples
            is optional, and if provided will seek to the offset without exceeding the
            end of the file. "maxSilence" is the number of seconds of maxSilence allowed
            before the function returns despite the lack of dtmf digits or reaching
            timeout.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="format">the format of the file to be recorded, for example "wav".</param>
            <param name="escapeDigits">contains the digits that allow the user to end recording.</param>
            <param name="timeout">the maximum record time in milliseconds, or -1 for no timeout.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.RecordFile(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Record to a file until a given dtmf digit in the sequence is received.<br/>
            Returns -1 on hangup or error.<br/>
            The format will specify what kind of file will be recorded. The timeout is
            the maximum record time in milliseconds, or -1 for no timeout. Offset samples
            is optional, and if provided will seek to the offset without exceeding the
            end of the file. "maxSilence" is the number of seconds of maxSilence allowed
            before the function returns despite the lack of dtmf digits or reaching
            timeout.
            </summary>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="format">the format of the file to be recorded, for example "wav".</param>
            <param name="escapeDigits">contains the digits that allow the user to end recording.</param>
            <param name="timeout">the maximum record time in milliseconds, or -1 for no timeout.</param>
            <param name="offset">the offset samples to skip.</param>
            <param name="beep">true if a beep should be played before recording.</param>
            <param name="maxSilence">The amount of silence (in seconds) to allow before returning despite the lack of dtmf digits or reaching timeout.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.ControlStreamFile(System.String)">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given
            digits, if any, and allows the listner to control the stream.<br/>
            If offset is provided then the audio will seek to sample offset before play
            starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.FastAGI.Command.ControlStreamFileCommand"/>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.ControlStreamFile(System.String,System.String)">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given
            digits, if any, and allows the listner to control the stream.<br/>
            If offset is provided then the audio will seek to sample offset before play
            starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.FastAGI.Command.ControlStreamFileCommand"/>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.ControlStreamFile(System.String,System.String,System.Int32)">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given
            digits, if any, and allows the listner to control the stream.<br/>
            If offset is provided then the audio will seek to sample offset before play
            starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.FastAGI.Command.ControlStreamFileCommand"/>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
            <param name="offset">the offset samples to skip before streaming.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.ControlStreamFile(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Plays the given file, allowing playback to be interrupted by the given
            digits, if any, and allows the listner to control the stream.<br/>
            If offset is provided then the audio will seek to sample offset before play
            starts.<br/>
            Returns 0 if playback completes without a digit being pressed, or the ASCII
            numerical value of the digit if one was pressed, or -1 on error or if the
            channel was disconnected. <br/>
            Remember, the file extension must not be included in the filename.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.FastAGI.Command.ControlStreamFileCommand"/>
            <param name="file">the name of the file to stream, must not include extension.</param>
            <param name="escapeDigits">contains the digits that allow the user to interrupt this command.</param>
            <param name="offset">the offset samples to skip before streaming.</param>
            <param name="forwardDigit">the digit for fast forward.</param>
            <param name="rewindDigit">the digit for rewind.</param>
            <param name="pauseDigit">the digit for pause and unpause.</param>
            <returns>result code</returns>
        </member>
        <member name="M:AsterNET.FastAGI.AGIScript.SendCommand(AsterNET.FastAGI.Command.AGICommand)">
            <summary>
            Sends the given command to the channel attached to the current thread.
            </summary>
            <param name="command">the command to send to Asterisk</param>
            <returns> the reply received from Asterisk</returns>
            <throws>  AGIException if the command could not be processed properly </throws>
        </member>
        <member name="T:AsterNET.FastAGI.InvalidCommandSyntaxException">
            <summary>
            An InvalidCommandSyntaxException is thrown when the reader receives a reply with status code 520.
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.InvalidCommandSyntaxException.Synopsis">
            <summary>
            Returns the synopsis of the command that was called with invalid syntax.
            </summary>
            <returns>the synopsis of the command that was called with invalid syntax.</returns>
        </member>
        <member name="P:AsterNET.FastAGI.InvalidCommandSyntaxException.Usage">
            <summary>
            Returns a description of the command that was called with invalid syntax.
            </summary>
            <returns>a description of the command that was called with invalid syntax.</returns>
        </member>
        <member name="M:AsterNET.FastAGI.InvalidCommandSyntaxException.#ctor(System.String,System.String)">
            <summary>
            Creates a new InvalidCommandSyntaxException with the given synopsis and usage.
            </summary>
            <param name="synopsis">the synopsis of the command.</param>
            <param name="usage">the usage of the command.</param>
        </member>
        <member name="T:AsterNET.FastAGI.InvalidOrUnknownCommandException">
            <summary>
            An InvalidOrUnknownCommandException is thrown when the reader receives a reply with status code 510.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.InvalidOrUnknownCommandException.#ctor(System.String)">
            <summary>
            Creates a new InvalidOrUnknownCommandException.
            </summary>
            <param name="command">the invalid or unknown command.</param>
        </member>
        <member name="P:AsterNET.FastAGI.MappingStrategies.ScriptMapping.ScriptName">
            <summary>
            The name of the script as called by FastAGI
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.MappingStrategies.ScriptMapping.ScriptClass">
            <summary>
            The class containing the AGIScript to be run
            </summary>
        </member>
        <member name="P:AsterNET.FastAGI.MappingStrategies.ScriptMapping.ScriptAssmebly">
            <summary>
            The name of the assembly to load, that contains the ScriptClass. Optional, if not specified, the class will be loaded from the current assembly
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.MappingStrategies.GeneralMappingStrategy">
            <summary>
            A MappingStrategy that is configured via a an XML file
            or used by passing in a single or list of SciptMapping
            This is useful as a general mapping strategy, rather than 
            using the default Resource Reference method.
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.MappingStrategies.GeneralMappingStrategy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AsterNET.FastAGI.MappingStrategies.GeneralMappingStrategy.#ctor(System.Collections.Generic.List{AsterNET.FastAGI.MappingStrategies.ScriptMapping})">
            <summary>
            
            </summary>
            <param name="resources"></param>
        </member>
        <member name="M:AsterNET.FastAGI.MappingStrategies.GeneralMappingStrategy.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="xmlFilePath"></param>
        </member>
        <member name="T:AsterNET.FastAGI.MappingStrategies.ResourceMappingStrategy">
            <summary>
            A MappingStrategy that is configured via a resource bundle.<br/>
            The resource bundle contains the script part of the url as key and the fully
            qualified class name of the corresponding AGIScript as value.<br/>
            Example:
            <pre>
            noopcommand = AsterNET.FastAGI.Command.NoopCommand
            </pre>
            NoopCommand must implement the AGIScript interface and have a default constructor with no parameters.<br/>
            </summary>
        </member>
        <member name="T:AsterNET.FastAGI.MappingStrategy">
            <summary>
                A MappingStrategy that is configured via a resource bundle.<br />
                The resource bundle contains the script part of the url as key and the fully
                qualified class name of the corresponding AGIScript as value.<br />
                Example:
                <pre>
                    noopcommand = AsterNET.FastAGI.Command.NoopCommand
                </pre>
                NoopCommand must implement the AGIScript interface and have a default constructor with no parameters.<br />
            </summary>
        </member>
        <member name="T:AsterNET.IO.ServerSocket">
            <summary>
            ServerSocket using standard socket classes.
            </summary>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.#ctor(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Consructor
            </summary>
            <param name="host">client host</param>
            <param name="port">client port</param>
            <param name="encoding">encoding</param>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="socket">TCP client from Listener</param>
            <param name="encoding">encoding</param>
        </member>
        <member name="P:AsterNET.IO.SocketConnection.IsConnected">
            <summary>
            Returns the connection state of the socket.
            </summary>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.ReadLine">
            <summary>
            Reads a line of text from the socket connection. The current thread is
            blocked until either the next line is received or an IOException
            encounters.
            </summary>
            <returns>the line of text received excluding any newline character</returns>
            <throws>  IOException if the connection has been closed. </throws>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.Write(System.String)">
            <summary>
            Sends a given String to the socket connection.
            </summary>
            <param name="s">the String to send.</param>
            <throws> IOException if the String cannot be sent, maybe because the </throws>
            <summary>connection has already been closed.</summary>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.WriteEx(System.String)">
            <summary>
            Sends a given String to the socket connection.
            </summary>
            <param name="msg">the String to send.</param>
            <throws> IOException if the String cannot be sent, maybe because the </throws>
            <summary>connection has already been closed.</summary>
        </member>
        <member name="M:AsterNET.IO.SocketConnection.Close">
            <summary>
            Closes the socket connection including its input and output stream and
            frees all associated ressources.<br/>
            When calling close() any Thread currently blocked by a call to readLine()
            will be unblocked and receive an IOException.
            </summary>
            <throws>  IOException if the socket connection cannot be closed. </throws>
        </member>
        <member name="T:AsterNET.Manager.Action.AbsoluteTimeoutAction">
            <summary>
                The AbsoluteTimeoutAction sets the absolute maximum amount of time permitted for a call on a given channel.<br />
                Note that the timeout is set from the current time forward, not counting the number of seconds the call has already
                been up.<br />
                When setting a new timeout all previous absolute timeouts are cancelled.<br />
                When the timeout is reached the call is returned to the T extension so that
                you can playback an explanatory note to the calling party (the called party will not hear that).<br />
                This action corresponds the the AbsoluteTimeout command used in the dialplan.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AbsoluteTimeoutAction.#ctor">
            <summary>
                Creates a new empty AbsoluteTimeoutAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AbsoluteTimeoutAction.#ctor(System.String,System.Int32)">
            <summary>
                Creates a new AbsoluteTimeoutAction with the given channel and timeout.
            </summary>
            <param name="channel">the name of the channel</param>
            <param name="timeout">the timeout in seconds or 0 to cancel the AbsoluteTimeout</param>
        </member>
        <member name="P:AsterNET.Manager.Action.AbsoluteTimeoutAction.Action">
            <summary>
                Get the name of this action, i.e. "AbsoluteTimeout".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AbsoluteTimeoutAction.Channel">
            <summary>
                Get/Set the name of the channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AbsoluteTimeoutAction.Timeout">
            <summary>
                Get/Set the timeout (in seconds) to set.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.AgentCallbackLoginAction">
            <summary>
                The AgentCallbackLoginAction sets an agent as logged in with callback.<br />
                You can pass an extentsion (and optionally a context) to specify the
                destination of the callback.<br />
                In contrast to the AgentCallbackLogin application that you can use within
                Asterisk's dialplan, you don't need to know the agent's password when logging
                in an agent.<br />
                Available since Asterisk 1.2
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentCallbackLoginAction.#ctor">
            <summary>
                Creates a new empty AgentCallbackLoginAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentCallbackLoginAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new AgentCallbackLoginAction, that logs in the given agent at
                the given callback extension.
            </summary>
            <param name="agent">the name of the agent to log in</param>
            <param name="exten">the extension that is called to connect a queue member with this agent</param>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentCallbackLoginAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new AgentCallbackLoginAction, that logs in the given agent at
                the given callback extension in the given context.
            </summary>
            <param name="agent">the name of the agent to log in</param>
            <param name="exten">the extension that is called to connect a queue member with this agent</param>
            <param name="context">the context of the extension to use for callback</param>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.Action">
            <summary>
                Get the name of this action, i.e. "AgentCallbackLogin".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.Agent">
            <summary>
                Get/Set the name of the agent to log in, for example "1002".<br />
                This is property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.Exten">
            <summary>
                Get/Set the extension to use for callback.<br />
                This is property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.Context">
            <summary>
                Get/Set the context of the extension to use for callback.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.AckCall">
            <summary>
                Get/Set if an acknowledgement is needed when agent is called back.<br />
                true if acknowledgement by '#' is required when agent is called back, false otherwise.
                This property is optional, it allows you to override the defaults defined in Asterisk's configuration.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentCallbackLoginAction.WrapupTime">
            <summary>
                Returns the minimum amount of time (in milliseconds) after disconnecting before the caller can receive a new call.
                <br />
                This property is optional, it allows you to override the defaults defined in Asterisk's configuration.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.AgentLogoffAction">
            <summary>
                The AgentLogoffAction sets an agent as no longer logged in.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentLogoffAction.Action">
            <summary>
                Returns the name of this action, i.e. "AgentLogoff".
            </summary>
            <returns>the name of this action</returns>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentLogoffAction.Agent">
            <summary>
                Returns the name of the agent to log off, for example "1002".
            </summary>
            <returns>the name of the agent to log off</returns>
            <summary>
                Sets the name of the agent to log off, for example "1002".<br />
                This is property is mandatory.
            </summary>
            <param name="agent">the name of the agent to log off</param>
        </member>
        <member name="P:AsterNET.Manager.Action.AgentLogoffAction.Soft">
            <summary>
                Get/Set whether to hangup existing calls or not.<br />
                Default is to hangup existing calls on logoff.
            </summary>
            <returns>
                true if existing calls should not be hung up, false otherwise.<br />
                null if default should be used.
            </returns>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentLogoffAction.#ctor">
            <summary> Creates a new empty AgentLogoffAction.</summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentLogoffAction.#ctor(System.String)">
            <summary>
                Creates a new AgentLogoffAction that logs off the given agent
            </summary>
            <param name="agent">the name of the agent to log off.</param>
        </member>
        <member name="M:AsterNET.Manager.Action.AgentLogoffAction.#ctor(System.String,System.Boolean)">
            <summary>
                Creates a new AgentLogoffAction that logs off the given agent
            </summary>
            <param name="agent">the name of the agent to log off.</param>
            <param name="soft">true if exisiting calls should not be hung up on logout.</param>
        </member>
        <member name="T:AsterNET.Manager.Action.AgentsAction">
            <summary>
                The AgentsAction requests the state of all agents.<br />
                For each agent an AgentsEvent is generated.
                After the state of all agents has been reported an AgentsCompleteEvent is generated.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.AgentsEvent" />
            <seealso cref="T:AsterNET.Manager.Event.AgentsCompleteEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.AgentsAction.Action">
            <summary>
                Get the name of this action, i.e. "Agents".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.AgiAction">
            <summary>
                This action lets you execute any AGI command through the Manager interface
                For example, check the AsterNET.Test project
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AgiAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new empty AgiAction.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AgiAction.Action">
            <summary>
                Get the name of this action, i.e. "AGI".
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AOCMessageAction.#ctor">
            <summary>
                Generate an Advice of Charge message on a channel.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AOCMessageAction.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Generate an Advice of Charge message on a channel.
            </summary>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
            <param name="msgType"></param>
            <param name="chargeType"></param>
            <param name="unitAmount"></param>
            <param name="unitType"></param>
            <param name="currencyName"></param>
            <param name="currencyAmount"></param>
            <param name="currencyMultiplier"></param>
            <param name="totalType"></param>
            <param name="aocBillingId"></param>
            <param name="chargingAssociationId"></param>
            <param name="chargingAssociationNumber"></param>
            <param name="chargingrAssociationPlan"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.AtxferAction.#ctor">
            <summary>
                Attended transfer.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.AtxferAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Attended transfer.
            </summary>
            <param name="channel">Transferer's channel.</param>
            <param name="exten">Extension to transfer to.</param>
            <param name="context">Context to transfer to.</param>
            <param name="priority">Priority to transfer to.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.AtxferAction.Channel">
            <summary>
                Transferer's channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AtxferAction.Exten">
            <summary>
                Extension to transfer to.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AtxferAction.Context">
            <summary>
                Context to transfer to.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.AtxferAction.Priority">
            <summary>
                Priority to transfer to.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.BridgeAction.#ctor">
            <summary>
                Bridge two channels already in the PBX.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.BridgeAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Bridge two channels already in the PBX.
            </summary>
            <param name="channel1">Channel to Bridge to Channel2</param>
            <param name="channel2">Channel to Bridge to Channel1</param>
            <param name="tone">Play courtesy tone to Channel 2 [yes|no]</param>
        </member>
        <member name="T:AsterNET.Manager.Action.ChallengeAction">
            <summary>
                The ChallengeAction requests a challenge from the server to use when logging
                in using challenge/response. Sending this action to the asterisk server
                results in a ChallengeResponse being received from the server.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.LoginAction" />
            <seealso cref="T:AsterNET.Manager.Response.ChallengeResponse" />
        </member>
        <member name="M:AsterNET.Manager.Action.ChallengeAction.#ctor">
            <summary>
                Creates a new empty ChallengeAction with MD5 algorithm
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ChallengeAction.#ctor(System.String)">
            <summary>
                Creates a new ChallengeAction that requests a new login challenge for use
                with the given digest algorithm.
            </summary>
            <param name="authType">the digest alogrithm to use.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.ChallengeAction.Action">
            <summary>
                Get the name of this action, i.e. "Challenge".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ChallengeAction.AuthType">
            <summary>
                Get/Set the digest alogrithm to use. Currently asterisk only supports "MD5".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ChangeMonitorAction">
            <summary>
                The ChangeMonitorAction changes the monitoring filename of a channel.
                It has no effect if the channel is not monitored.<br />
                It is implemented in res/res_monitor.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ChangeMonitorAction.Action">
            <summary>
                Get the name of this action, i.e. "ChangeMonitor".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ChangeMonitorAction.Channel">
            <summary>
                Get/Set the name of the monitored channel.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ChangeMonitorAction.File">
            <summary>
                Get/Set the name of the file to which the voice data is written.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ChangeMonitorAction.#ctor">
            <summary>
                Creates a new empty ChangeMonitorAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ChangeMonitorAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new ChangeMonitorAction that causes monitoring data for the
                given channel to be written to the given file(s).
            </summary>
            <param name="channel">the name of the channel that is monitored</param>
            <param name="file">the (base) name of the file(s) to which the voice data is written</param>
        </member>
        <member name="T:AsterNET.Manager.Action.CommandAction">
            <summary>
                The CommandAction sends a command line interface (CLI) command to the asterisk server.<br />
                For a list of supported commands type help on asterisk's command line.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.CommandAction.#ctor">
            <summary>
                Creates a new CommandAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.CommandAction.#ctor(System.String)">
            <summary>
                Creates a new CommandAction with the given command.
            </summary>
            <param name="command">the CLI command to execute.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.CommandAction.Action">
            <summary>
                Get the name of this action, i.e. "Command".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.CommandAction.Command">
            <summary>
                Get/Set the CLI command to send to the asterisk server.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeKickAction.#ctor">
            <summary>
                Removes a specified user from a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeKickAction.#ctor(System.String,System.String)">
            <summary>
                Removes a specified user from a specified conference.
            </summary>
            <param name="conference"></param>
            <param name="channel"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.ConfbridgeListAction">
            <summary>
                Lists all users in a particular ConfBridge conference. ConfbridgeList will follow as separate events,
                followed by a final event called ConfbridgeListComplete
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeListAction.#ctor(System.String)">
            <summary>
                Lists all users in a particular ConfBridge conference. ConfbridgeList will follow as separate events,
                followed by a final event called ConfbridgeListComplete
            </summary>
            <param name="conference"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.ConfbridgeListRoomsAction">
            <summary>
                Lists data about all active conferences. ConfbridgeListRooms will follow as separate events,
                followed by a final event called ConfbridgeListRoomsComplete.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeLockAction.#ctor">
            <summary>
                Locks a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeLockAction.#ctor(System.String)">
            <summary>
                Locks a specified conference.
            </summary>
            <param name="conference"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeMuteAction.#ctor">
            <summary>
                Mutes a specified user in a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeMuteAction.#ctor(System.String,System.String)">
            <summary>
                Mutes a specified user in a specified conference.
            </summary>
            <param name="conference"></param>
            <param name="channel"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeSetSingleVideoSrcAction.#ctor">
            <summary>
                Stops recording a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeSetSingleVideoSrcAction.#ctor(System.String,System.String)">
            <summary>
                Stops recording a specified conference.
            </summary>
            <param name="conference"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeStartRecordAction.#ctor">
            <summary>
                Starts recording a specified conference, with an optional filename.
                If recording is already in progress, an error will be returned.
                If RecordFile is not provided, the default record_file as specified in the conferences Bridge Profile will be used.
                If record_file is not specified, a file will automatically be generated in Asterisk's monitor directory.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeStartRecordAction.#ctor(System.String)">
            <summary>
                Starts recording a specified conference, with an optional filename.
                If recording is already in progress, an error will be returned.
                If RecordFile is not provided, the default record_file as specified in the conferences Bridge Profile will be used.
                If record_file is not specified, a file will automatically be generated in Asterisk's monitor directory.
            </summary>
            <param name="conference"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeStopRecordAction.#ctor">
            <summary>
                Stops recording a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeStopRecordAction.#ctor(System.String)">
            <summary>
                Stops recording a specified conference.
            </summary>
            <param name="conference"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeUnlockAction.#ctor">
            <summary>
                Unlocks a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeUnlockAction.#ctor(System.String)">
            <summary>
                Unlocks a specified conference.
            </summary>
            <param name="conference"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeUnmuteAction.#ctor">
            <summary>
                Unmutes a specified user in a specified conference.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ConfbridgeUnmuteAction.#ctor(System.String,System.String)">
            <summary>
                Unmutes a specified user in a specified conference.
            </summary>
            <param name="conference"></param>
            <param name="channel"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.CreateConfigAction.#ctor">
            <summary>
                Creates an empty file in the configuration directory.
                This action will create an empty file in the configuration directory. This action is intended to be used before an
                UpdateConfig action.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.CreateConfigAction.#ctor(System.String)">
            <summary>
                Creates an empty file in the configuration directory.
                This action will create an empty file in the configuration directory. This action is intended to be used before an
                UpdateConfig action.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.DBDelAction">
            <summary>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBDelAction.#ctor">
            <summary>
                Creates a new empty DBDelAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBDelAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new DBDelAction that deletes the value of the database entry
                with the given key in the given family.
            </summary>
            <param name="family">the family of the key</param>
            <param name="key">the key of the entry to retrieve</param>
        </member>
        <member name="P:AsterNET.Manager.Action.DBDelAction.Family">
            <summary>
                Get/Set the the Family of the entry to delete.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.DBDelAction.Key">
            <summary>
                Get/Set the the key of the entry to delete.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.DBDelTreeAction">
            <summary>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBDelTreeAction.#ctor">
            <summary>
                Creates a new empty DBDelTreeAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBDelTreeAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new DBDelTreeAction that deletes the database true
                with the given key in the given family.
            </summary>
            <param name="family">the family of the key</param>
            <param name="key">the key of the entry to retrieve</param>
        </member>
        <member name="P:AsterNET.Manager.Action.DBDelTreeAction.Family">
            <summary>
                Get/Set the the Family of the entry to delete.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.DBDelTreeAction.Key">
            <summary>
                Get/Set the the key of the entry to delete.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.DBGetAction">
            <summary>
                Retrieves an entry in the Asterisk database for a given family and key.<br />
                If an entry is found a DBGetResponseEvent is sent by Asterisk containing the
                value, otherwise a ManagerError indicates that no entry matches.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.DBGetResponseEvent" />
        </member>
        <member name="M:AsterNET.Manager.Action.DBGetAction.#ctor">
            <summary>
                Creates a new empty DBGetAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBGetAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new DBGetAction that retrieves the value of the database entry
                with the given key in the given family.
            </summary>
            <param name="family">the family of the key</param>
            <param name="key">the key of the entry to retrieve</param>
        </member>
        <member name="P:AsterNET.Manager.Action.DBGetAction.Family">
            <summary>
                Returns the family of the key.
            </summary>
            <returns>
                the family of the key.
            </returns>
            <param name="family">
                the family of the key.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.DBGetAction.Key">
            <summary>
                Get/Set the the key of the entry to retrieve.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.DBPutAction">
            <summary>
                Adds or updates an entry in the Asterisk database for a given family, key, and value.<br />
                Available since Asterisk 1.2
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBPutAction.#ctor">
            <summary>
                Creates a new empty DBPutAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.DBPutAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new DBPutAction that sets the value of the database entry with the given key in the given family.
            </summary>
            <param name="family">the family of the key</param>
            <param name="key">the key of the entry to set</param>
            <param name="val">the value to set</param>
        </member>
        <member name="P:AsterNET.Manager.Action.DBPutAction.Family">
            <summary>
                Get/Set the family of the key to set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.DBPutAction.Key">
            <summary>
                Get/Set the the key to set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.DBPutAction.Val">
            <summary>
                Get/Set the value to set.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.EventsAction">
            <summary>
                With the EventsAction you can specify what kind of events should be sent to this manager connection.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.EventsAction.#ctor">
            <summary>
                Creates a new empty EventsAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.EventsAction.#ctor(System.String)">
            <summary>
                Creates a new EventsAction that applies the given event mask to the current manager connection.
            </summary>
            <param name="eventMask">
                the event mask.<br />
                Set to "on" if all events should be send, "off" if not events should be sent
                or a combination of "system", "call" and "log" (separated by ',') to specify what kind of events should be sent.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.EventsAction.Action">
            <summary>
                Get the name of this action, i.e. "Events".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.EventsAction.EventMask">
            <summary>
                Get/Set the event mask.<br />
                Set to "on" if all events should be send, "off" if not events should be
                sent or a combination of "system", "call" and "log" (separated by ',') to
                specify what kind of events should be sent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ExtensionStateAction">
            <summary>
                The ExtensionStateAction queries the state of an extension in a given context.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ExtensionStateAction.Action">
            <summary>
                Get the name of this action, i.e. "ExtensionState".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ExtensionStateAction.Exten">
            <summary>
                Get/Set the extension to query.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ExtensionStateAction.Context">
            <summary>
                Get/Set the name of the context that contains the extension to query.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.GetConfigAction">
            <summary>
                The GetConfigAction sends a GetConfig command to the asterisk server.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.GetConfigAction.#ctor">
            <summary>
                Creates a new GetConfigAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.GetConfigAction.#ctor(System.String)">
            <summary>
                Get the name of this action.
            </summary>
            <param name="filename">the configuration filename.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.GetConfigAction.Action">
            <summary>
                Get the name of this action.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.GetConfigAction.Filename">
            <summary>
                Get/Set the configuration filename.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.GetVarAction">
            <summary>
                The GetVarAction queries for a channel variable.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.GetVarAction.#ctor">
            <summary>
                Creates a new empty GetVarAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.GetVarAction.#ctor(System.String)">
            <summary>
                Creates a new GetVarAction that queries for the given global variable.
            </summary>
            <param name="variable">the name of the global variable to query.</param>
        </member>
        <member name="M:AsterNET.Manager.Action.GetVarAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new GetVarAction that queries for the given local channel variable.
            </summary>
            <param name="channel">the name of the channel, for example "SIP/1234-9cd".</param>
            <param name="variable">the name of the variable to query.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.GetVarAction.Action">
            <summary>
                Get the name of this action, i.e. "GetVar".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.GetVarAction.Channel">
            <summary>
                Get/Set the name of the channel, if you query for a local channel variable.
                Leave empty to query for a global variable.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.GetVarAction.Variable">
            <summary>
                Get/Set the name of the variable to query.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.HangupAction">
            <summary>
                The HangupAction causes the pbx to hang up a given channel.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.HangupAction.#ctor">
            <summary>
                Creates a new empty HangupAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.HangupAction.#ctor(System.String)">
            <summary>
                Creates a new HangupAction that hangs up the given channel.
            </summary>
            <param name="channel">the name of the channel to hangup.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.HangupAction.Action">
            <summary>
                Get the name of this action, i.e. "Hangup".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.HangupAction.Channel">
            <summary>
                Get/Set the name of the channel to hangup.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ManagerActionEvent">
            <summary>
                The ManagerActionEvent is implemented by ManagerActions that
                return their result not in a ManagerResponse but by sending a series of events.<br />
                The event type that indicates that Asterisk is finished is returned by the
                ActionCompleteEventClass property.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.ResponseEvent" />
        </member>
        <member name="M:AsterNET.Manager.Action.ManagerActionEvent.ActionCompleteEventClass">
            <summary>
                Returns the event type that indicates that Asterisk is finished sending response events for this action.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.ResponseEvent" />
        </member>
        <member name="T:AsterNET.Manager.Action.LoginAction">
            <summary>
                The LoginAction authenticates the connection.<br />
                A successful login is the precondition for sending any other action except
                for the ChallengeAction.<br />
                An unsuccessful login results in an ManagerError being received from the
                server with a message set to "Authentication failed" and the socket being
                closed by Asterisk.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ChallengeAction" />
            <seealso cref="T:AsterNET.Manager.Response.ManagerError" />
        </member>
        <member name="M:AsterNET.Manager.Action.LoginAction.#ctor">
            <summary>
                Creates a new empty LoginAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.LoginAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new LoginAction that performs a cleartext login.<br />
                You should not use cleartext login if you are concerned about security and login with a password hash instead.
            </summary>
            <param name="username">the username as configured in Asterisk's manager.conf</param>
            <param name="secret">the user's password as configured in Asterisk's manager.conf</param>
            <seealso cref="T:AsterNET.Manager.Action.ChallengeAction" />
        </member>
        <member name="M:AsterNET.Manager.Action.LoginAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new LoginAction that performs a login via challenge/response.
            </summary>
            <param name="username">the username as configured in Asterisk's manager.conf</param>
            <param name="authType">
                the digest alogrithm, must match the digest algorithm that was used with the corresponding
                ChallengeAction.
            </param>
            <param name="key">the hash of the user's password and the challenge</param>
        </member>
        <member name="M:AsterNET.Manager.Action.LoginAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Creates a new LoginAction that performs a login via challenge/response.
            </summary>
            <param name="username">the username as configured in Asterisk's manager.conf</param>
            <param name="authType">
                the digest alogrithm, must match the digest algorithm that was used with the corresponding
                ChallengeAction.
            </param>
            <param name="key">the hash of the user's password and the challenge</param>
            <param name="events">
                the event mask.<br />
                Set to "on" if all events should be send, "off" if not events should be sent
                or a combination of "system", "call" and "log" (separated by ',') to specify what kind of events should be sent.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.Action">
            <summary>
                Get the name of this action, i.e. "Login".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.Username">
            <summary>
                Get/Set the username as configured in asterik's manager.conf.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.Secret">
            <summary>
                Get/Set the secret to use when using cleartext login.<br />
                The secret contains the user's password as configured in Asterisk's manager.conf.<br />
                The secret and key properties are mutually exclusive.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.AuthType">
            <summary>
                Get/Set the digest alogrithm when using challenge/response.<br />
                The digest algorithm is used to create the key based on the challenge and
                the user's password.<br />
                Currently Asterisk supports only "MD5".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.Key">
            <summary>
                Get/Set the key.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LoginAction.Events">
            <summary>
                Get/Set the event mask.<br />
                Set to "on" if all events should be send, "off" if not events should be sent or a combination of
                "system", "call" and "log" (separated by ',') to specify what kind of events should be sent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.LogoffAction">
            <summary>
                The LogoffAction causes the server to close the connection.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.LogoffAction.Action">
            <summary>
                Get the name of this action, i.e. "Logoff".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.MailboxCountAction">
            <summary>
                The MailboxCountAction queries the number of unread and read messages in a mailbox.<br />
                The MailboxCountAction returns a MailboxStatusResponse.
            </summary>
            <seealso cref="T:AsterNET.Manager.Response.MailboxCountResponse" />
        </member>
        <member name="M:AsterNET.Manager.Action.MailboxCountAction.#ctor">
            <summary>
                Creates a new empty MailboxCountAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.MailboxCountAction.#ctor(System.String)">
            <summary>
                Creates a new MailboxCountAction that queries the number of unread and
                read messages in the given mailbox.
            </summary>
            <param name="mailbox">
                the name of the mailbox to query.<br />
                This can either be only the number of the mailbox or a string
                of the form mailboxnumber@context.If no context is specified
                "default" is assumed.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.MailboxCountAction.Action">
            <summary>
                Get the name of this action, i.e. "MailboxCount".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MailboxCountAction.Mailbox">
            <summary>
                Get/Set the name of the mailbox to query.<br />
                This can either be only the number of the mailbox or a string of the form
                mailboxnumber@context.If no context is specified "default" is assumed.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.MailboxStatusAction">
            <summary>
                The MailboxStatusAction checks if a mailbox contains waiting messages.<br />
                The MailboxStatusAction returns a MailboxStatusResponse.
            </summary>
            <seealso cref="T:AsterNET.Manager.Response.MailboxStatusResponse" />
        </member>
        <member name="M:AsterNET.Manager.Action.MailboxStatusAction.#ctor">
            <summary>
                Creates a new empty MailboxStatusAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.MailboxStatusAction.#ctor(System.String)">
            <summary>
                Creates a new MailboxStatusAction that checks for waiting messages in the given mailbox.
            </summary>
            <param name="mailbox">
                the name of the mailbox to check.<br />
                This can either be only the number of the mailbox or a string
                of the form mailboxnumber@context.If no context is specified
                "default" is assumed.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.MailboxStatusAction.Action">
            <summary>
                Get the name of this action, i.e. "MailboxStatus".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MailboxStatusAction.Mailbox">
            <summary>
                Get/Set the name of the mailbox to query.<br />
                This can either be only the name of the mailbox or a string of the form
                mailboxnumber@context. If no context is specified "default" is assumed.<br />
                Multiple mailboxes may be given, separated by ','. In this case the
                action checks whether at least one of the given mailboxes has waiting
                messages.<br />
                This property is mandatory.<br />
                Example: "1234,1235@mycontext"
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ManagerAction">
            <summary>
                This class implements the ManagerAction interface
                and can serve as base class for your concrete Action implementations.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ManagerAction.Action">
            <summary>
                Manager API Action key. Also use as ProxyAction key to <see cref="T:AsterNET.Manager.Action.ProxyAction">ProxyAction</see> actions.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ManagerAction.Server">
            <summary>
                Specify a server to which to send your commands (x.x.x.x or hostname).<br />
                This should match the server name specified in your config file's "host" entry.
                If you do not specify a server, the proxy will pick the first one it finds -- fine in single-server configurations.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ManagerAction.ProxyKey">
            <summary>
                You can use this as a simple authentication mechanism.<br />
                Rather than have to login with a username &amp; password,
                you can specify a <b>ProxyKey</b> that must be passed from
                a client before requests are processed.<br />
                This is helpful in situations where you would like to authenticate and
                execute an action in a single step.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ManagerActionResponse">
            <summary>
                The ManagerActionResponse is implemented by ManagerActions that
                return their result in a custom ManagerResponse<br />
                The response type that indicates that Asterisk is finished is returned by the
                ActionCompleteResponseClass property.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.ResponseEvent" />
        </member>
        <member name="M:AsterNET.Manager.Action.ManagerActionResponse.ActionCompleteResponseClass">
            <summary>
                Returns the response type that indicates that Asterisk is finished sending response for this action.
            </summary>
            <seealso cref="N:AsterNET.Manager.Response" />
        </member>
        <member name="T:AsterNET.Manager.Action.MonitorAction">
            <summary>
                The MonitorAction starts monitoring (recording) a channel.<br />
                It is implemented in res/res_monitor.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MonitorAction.Action">
            <summary>
                Get the name of this action, i.e. "Monitor".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MonitorAction.Channel">
            <summary>
                Get/Set the name of the channel to monitor.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MonitorAction.File">
            <summary>
                Get/Set the name of the file to which the voice data is written.<br />
                If this property is not set it defaults to to the channel name as per CLI with the '/' replaced by '-'.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MonitorAction.Format">
            <summary>
                Get/Set the format to use for encoding the voice files.<br />
                If this property is not set it defaults to "wav".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.MonitorAction.Mix">
            <summary>
                Returns true if the two voice files should be joined at the end of the call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.MonitorAction.#ctor">
            <summary>
                Creates a new empty MonitorAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.MonitorAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new MonitorAction that starts monitoring the given channel and
                writes voice data to the given file(s).
            </summary>
            <param name="channel">the name of the channel to monitor</param>
            <param name="file">the (base) name of the file(s) to which the voice data is written</param>
        </member>
        <member name="M:AsterNET.Manager.Action.MonitorAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new MonitorAction that starts monitoring the given channel and
                writes voice data to the given file(s).
            </summary>
            <param name="channel">the name of the channel to monitor</param>
            <param name="file">the (base) name of the file(s) to which the voice data is written</param>
            <param name="format">the format to use for encoding the voice files</param>
        </member>
        <member name="M:AsterNET.Manager.Action.MonitorAction.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a new MonitorAction that starts monitoring the given channel and
                writes voice data to the given file(s).
            </summary>
            <param name="channel">the name of the channel to monitor</param>
            <param name="file">the (base) name of the file(s) to which the voice data is written</param>
            <param name="format">the format to use for encoding the voice files</param>
            <param name="mix">true if the two voice files should be joined at the end of the call</param>
        </member>
        <member name="T:AsterNET.Manager.Action.OriginateAction">
            <summary>
                The OriginateAction generates an outgoing call to the extension in the given
                context with the given priority or to a given application with optional
                parameters.<br />
                If you want to connect to an extension use the properties context, exten and
                priority. If you want to connect to an application use the properties
                application and data if needed. Note that no call detail record will be
                written when directly connecting to an application, so it may be better to
                connect to an extension that starts the application you wish to connect to.<br />
                The response to this action is sent when the channel has been answered and
                asterisk starts connecting it to the given extension. So be careful not to
                choose a too short timeout when waiting for the response.<br />
                If you set async to true Asterisk reports an OriginateSuccess-
                and OriginateFailureEvents. The action id of these events equals the action
                id of this OriginateAction.
            </summary>
            <seealso cref="!:AsterNET.Manager.Event.OriginateSuccessEvent" />
            <seealso cref="!:AsterNET.Manager.Event.OriginateFailureEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Action">
            <summary>
                Get the name of this action, i.e. "Originate".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Account">
            <summary>
                Get/Set the account code to use for the originated call.
                The account code is included in the call detail record generated for this call and will be used for billing.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.CallerId">
            <summary>
                Get/Set the caller id to set on the outgoing channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Channel">
            <summary>
                Get/Set Channel on which to originate the call (The same as you specify in the Dial application command)<br />
                This property is required.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Context">
            <summary>
                Get/Set the name of the context of the extension to connect to.
                If you set the context you also have to set the exten and priority properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Exten">
            <summary>
                Get/Ser the extension to connect to.
                If you set the extension you also have to set the context and priority properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Priority">
            <summary>
                Get /Set the priority of the extension to connect to.
                If you set the priority you also have to set the context and exten properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Application">
            <summary>
                Get/Set Application to use on connect (use Data for parameters)
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Data">
            <summary>
                Get/Set the parameters to pass to the application.
                Data if Application parameter is user
            </summary>
            <summary> Sets the parameters to pass to the application.</summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Async">
            <summary>
                Get/Set true if this is a fast origination.<br />
                For the origination to be asynchronous (allows multiple calls to be generated without waiting for a response).
                <br />
                Will send OriginateSuccess- and OriginateFailureEvents.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Timeout">
            <summary>
                Get/Set the timeout for the origination in milliseconds.<br />
                The channel must be answered within this time, otherwise the origination
                is considered to have failed and an OriginateFailureEvent is generated.<br />
                If not set, Asterisk assumes a default value of 30000 meaning 30 seconds.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.OriginateAction.Variable">
            <summary>
                Get/Set the variables to set on the originated call.<br />
                Variable assignments are of the form "VARNAME=VALUE". You can specify
                multiple variable assignments separated by the '|' character.<br />
                Example: "VAR1=abc|VAR2=def" sets the channel variables VAR1 to "abc" and VAR2 to "def".
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.OriginateAction.GetVariables">
            <summary>
                Get the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.OriginateAction.SetVariables(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Set the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.OriginateAction.GetVariable(System.String)">
            <summary>
                Gets a variable on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.OriginateAction.SetVariable(System.String,System.String)">
            <summary>
                Sets a variable dictionary on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ParkAction">
            <summary>
                The ParkAction allows to send a Channel to a Parking lot.<br />
                A successful login is the precondition for sending for that
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ParkAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new ParkAction.
            </summary>
            <param name="channel"></param>
            <param name="channel2"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:AsterNET.Manager.Action.ParkAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Creates a new ParkAction.<br />
            </summary>
            <param name="channel">Set the Channel which should be parked</param>
            <param name="channel2">Set the Channel where the Call will end up after the timeout is reached.</param>
            <param name="timeout">Timeout in msec, after timeout is reached call will come back to channel2</param>
            <param name="parkinglot">Set the Parking lot.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.ParkAction.Action">
            <summary>
                Get the name of this action, i.e. "Park".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ParkAction.Channel">
            <summary>
                Set the Channel which should be parked
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ParkAction.Channel2">
            <summary>
                Set the Channel where the Call will end up after the timeout is reached.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ParkAction.Timeout">
            <summary>
                Timeout in msec, after timeout is reached call will come back to channel2
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ParkAction.Parkinglot">
            <summary>
                Set the Parking lot.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ParkedCallsAction">
            <summary>
                The ParkedCallsAction requests a list of all currently parked calls.<br />
                For each active channel a ParkedCallEvent is generated. After all parked
                calls have been reported a ParkedCallsCompleteEvent is generated.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.ParkedCallEvent" />
            <seealso cref="T:AsterNET.Manager.Event.ParkedCallsCompleteEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.ParkedCallsAction.Action">
            <summary> Get the name of this action, i.e. "ParkedCalls".</summary>
        </member>
        <member name="T:AsterNET.Manager.Action.PingAction">
            <summary>
                The PingAction will ellicit a 'Pong' response, it is used to keep the manager
                connection open and performs no operation.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.PingAction.Action">
            <summary>
                Get the name of this action, i.e. "Ping".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.QueueAddAction">
            <summary>
                The QueueAddAction adds a new member to a queue.<br />
                It is implemented in apps/app_queue.c
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueAddAction.#ctor">
            <summary>
                Creates a new empty QueueAddAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueAddAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new QueueAddAction that adds a new member on the given interface to the given queue.
            </summary>
            <param name="queue">the name of the queue the new member will be added to</param>
            <param name="iface">Sets the interface to add. To add a specific channel just use the channel name, e.g. "SIP/1234".</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueAddAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new QueueAddAction that adds a new member on the given interface to the given queue.
            </summary>
            <param name="queue">the name of the queue the new member will be added to</param>
            <param name="iface">Sets the interface to add. To add a specific channel just use the channel name, e.g. "SIP/1234".</param>
            <param name="memberName">the name of the the new member will be added to</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueAddAction.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
                Creates a new QueueAddAction that adds a new member on the given
                interface to the given queue with the given penalty.
            </summary>
            <param name="queue">the name of the queue the new member will be added to</param>
            <param name="iface">Sets the interface to add. To add a specific channel just use the channel name, e.g. "SIP/1234".</param>
            <param name="memberName">the name of the the new member will be added to</param>
            <param name="penalty">
                the penalty for this member.<br />
                The penalty must be a positive integer or 0 for no penalty. When calls are
                distributed members with higher penalties are considered last.
            </param>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.Action">
            <summary>
                Get the name of this action, i.e. "QueueAdd".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.Queue">
            <summary>
                Get/Set the name of the queue the new member will be added to.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.Interface">
            <summary>
                Get/Set the interface to add. To add a specific channel just use the channel name, e.g. "SIP/1234".<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.MemberName">
            <summary>
                Get/Set the member to add.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.Penalty">
            <summary>
                Get/Set the penalty for this member.<br />
                The penalty must be a positive integer or 0 for no penalty. If it is not set 0 is assumed.<br />
                When calls are distributed members with higher penalties are considered last.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueAddAction.Paused">
            <summary>
                Get/Set if the queue member should be paused when added.<br />
                true if the queue member should be paused when added.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueLogAction.#ctor">
            <summary>
                Adds custom entry in queue_log.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueLogAction.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Adds custom entry in queue_log.
            </summary>
            <param name="queue"></param>
            <param name="event"></param>
            <param name="uniqueid"></param>
            <param name="interface"></param>
            <param name="message"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.QueuePauseAction">
            <summary>
                The QueuePauseAction makes a queue member temporarily unavailabe (or available again).<br />
                It is implemented in apps/app_queue.c<br />
                Available since Asterisk 1.2.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePauseAction.#ctor">
            <summary>
                Creates a new empty QueuePauseAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePauseAction.#ctor(System.String)">
            <summary>
                Creates a new QueuePauseAction that makes the member on the given
                interface unavailable on all queues.
            </summary>
            <param name="iface">the interface of the member to make unavailable</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePauseAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new QueuePauseAction that makes the member on the given
                interface unavailable on the given queue.
            </summary>
            <param name="iface">the interface of the member to make unavailable</param>
            <param name="queue">the queue the member is made unvailable on</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePauseAction.#ctor(System.String,System.Boolean)">
            <summary>
                Creates a new QueuePauseAction that makes the member on the given
                interface available or unavailable on all queues.
            </summary>
            <param name="iface">the interface of the member to make unavailable</param>
            <param name="paused">true to make the member unavailbale, false to make the member available</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePauseAction.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new QueuePauseAction that makes the member on the given
                interface unavailable on the given queue.
            </summary>
            <param name="iface">the interface of the member to make unavailable</param>
            <param name="queue">the queue the member is made unvailable on</param>
            <param name="paused">true to make the member unavailbale, false to make the member available</param>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePauseAction.Action">
            <summary>
                Get the name of this action, i.e. "QueuePause".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePauseAction.Interface">
            <summary>
                Get/Set the interface of the member to make available or unavailable.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePauseAction.Queue">
            <summary>
                Get/Set Returns the name of the queue the member is made available or unavailable on.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePauseAction.Paused">
            <summary>
                Get/Set if the member is made available or unavailable.<br />
                true to make the member unavailbale,<br />
                false make the member available
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePenaltyAction.#ctor">
            <summary>
                Set the penalty for a queue member.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePenaltyAction.#ctor(System.String,System.String)">
            <summary>
                Set the penalty for a queue member.
            </summary>
            <param name="interface">The interface (tech/name) of the member whose penalty to change.</param>
            <param name="penalty">The new penalty (number) for the member. Must be nonnegative.</param>
        </member>
        <member name="M:AsterNET.Manager.Action.QueuePenaltyAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Set the penalty for a queue member.
            </summary>
            <param name="interface">The interface (tech/name) of the member whose penalty to change.</param>
            <param name="penalty">The new penalty (number) for the member. Must be nonnegative.</param>
            <param name="queue">If specified, only set the penalty for the member of this queue. Otherwise, set the penalty for the member in all queues to which the member belongs.</param>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePenaltyAction.Interface">
            <summary>
            The interface (tech/name) of the member whose penalty to change.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePenaltyAction.Penalty">
            <summary>
            The new penalty (number) for the member. Must be nonnegative.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueuePenaltyAction.Queue">
            <summary>
            If specified, only set the penalty for the member of this queue. Otherwise, set the penalty for the member in all queues to which the member belongs.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueReloadAction.#ctor">
            <summary>
                Reload a queue, queues, or any sub-section of a queue or queues.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueReloadAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Reload a queue, queues, or any sub-section of a queue or queues.
            </summary>
            <param name="queue"></param>
            <param name="members"></param>
            <param name="rules"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.QueueRemoveAction">
            <summary>
                The QueueRemoveAction removes a member from a queue.<br />
                It is implemented in apps/app_queue.c
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueRemoveAction.#ctor">
            <summary>
                Creates a new empty QueueRemoveAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueRemoveAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new QueueRemoveAction that removes the member on the given interface from the given queue.
            </summary>
            <param name="queue">the name of the queue the member will be removed from</param>
            <param name="iface">the interface of the member to remove</param>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueRemoveAction.Action">
            <summary>
                Get the name of this action, i.e. "QueueRemove".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueRemoveAction.Queue">
            <summary>
                Get/Set the name of the queue the member will be removed from.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueRemoveAction.Interface">
            <summary>
                Get/Set the interface to remove.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueResetAction.#ctor">
            <summary>
                Reset queue statistics.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.QueueResetAction.#ctor(System.String)">
            <summary>
                Reset queue statistics.
            </summary>
            <param name="queue"></param>
        </member>
        <member name="T:AsterNET.Manager.Action.QueueStatusAction">
            <summary>
                The QueueStatusAction requests the state of all defined queues their members (agents) and entries (callers).<br />
                For each queue a QueueParamsEvent is generated, followed by a
                QueueMemberEvent for each member of that queue and a QueueEntryEvent for each
                entry in the queue.<br />
                Since Asterisk 1.2 a QueueStatusCompleteEvent is sent to denote the end of the generated dump.<br />
                This action is implemented in apps/app_queue.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.QueueParamsEvent" />
            <seealso cref="T:AsterNET.Manager.Event.QueueMemberEvent" />
            <seealso cref="T:AsterNET.Manager.Event.QueueEntryEvent" />
            <seealso cref="T:AsterNET.Manager.Event.QueueStatusCompleteEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.QueueStatusAction.Action">
            <summary>
                Get the name of this action, i.e. "QueueStatus".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueStatusAction.Queue">
            <summary>
                Get/Set the queue filter.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.QueueStatusAction.Member">
            <summary>
                Get/Set the member filter.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.RedirectAction">
            <summary>
                Redirects a given channel (and an optional additional channel) to a new extension.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.RedirectAction.#ctor">
            <summary>
                Creates a new empty RedirectAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.RedirectAction.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
                Creates a new RedirectAction that redirects the given channel to the given context, extension, priority triple.
            </summary>
            <param name="channel">the name of the channel to redirect</param>
            <param name="context">the destination context</param>
            <param name="exten">the destination extension</param>
            <param name="priority">the destination priority</param>
        </member>
        <member name="M:AsterNET.Manager.Action.RedirectAction.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Creates a new RedirectAction that redirects the given channels to the given context, extension, priority triple.
            </summary>
            <param name="channel">the name of the first channel to redirect</param>
            <param name="extraChannel">the name of the second channel to redirect</param>
            <param name="context">the destination context</param>
            <param name="exten">the destination extension</param>
            <param name="priority">the destination priority</param>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.Action">
            <summary>
                Get the name of this action, i.e. "Redirect".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.Channel">
            <summary>
                Get/Set name of the channel to redirect.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.ExtraChannel">
            <summary>
                Get/Set the name of the additional channel to redirect.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.Context">
            <summary>
                Get/Set the destination context.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.Exten">
            <summary>
                Get/Set the destination extension.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.RedirectAction.Priority">
            <summary>
                Get/Set the destination priority.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.SetCDRUserFieldAction">
            <summary>
                The SetCDRUserFieldAction causes the user field of the call detail record for the given channel to be changed.
                <br />
                Depending on the value of the append property the value is appended or overwritten.<br />
                The SetCDRUserFieldAction is implemented in apps/app_setcdruserfield.c
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.SetCDRUserFieldAction.#ctor">
            <summary>
                Creates a new empty SetCDRUserFieldAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.SetCDRUserFieldAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new SetCDRUserFieldAction that sets the user field of the call detail record for the given channel to the
                given value.
            </summary>
            <param name="channel">the name of the channel</param>
            <param name="userField">the new value of the userfield</param>
        </member>
        <member name="M:AsterNET.Manager.Action.SetCDRUserFieldAction.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new SetCDRUserFieldAction that sets the user field of the call detail record for the given channel to the
                given value.
            </summary>
            <param name="channel">the name of the channel</param>
            <param name="userField">the new value of the userfield</param>
            <param name="append">true to append the value to the cdr user field or false to overwrite</param>
        </member>
        <member name="P:AsterNET.Manager.Action.SetCDRUserFieldAction.Action">
            <summary>
                Get the name of the action, i.e. "SetCDRUserField".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetCDRUserFieldAction.Channel">
            <summary>
                Get/Set the name of the channel to set the cdr user field on.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetCDRUserFieldAction.UserField">
            <summary>
                Get/Set the value of the cdr user field to set or append.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetCDRUserFieldAction.Append">
            <summary>
                Get/Set if the value of the cdr user field is appended or overwritten.<br />
                true to append the value to the cdr user field or false to overwrite.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.SetVarAction">
            <summary>
                The SetVar action sets the value of a channel variable for a given channel.
            </summary>
        </member>
        <member name="F:AsterNET.Manager.Action.SetVarAction.channel">
            <summary> The channel on which to set the variable.</summary>
        </member>
        <member name="F:AsterNET.Manager.Action.SetVarAction.varName">
            <summary> The name of the variable to set.</summary>
        </member>
        <member name="F:AsterNET.Manager.Action.SetVarAction.varValue">
            <summary> The value to store.</summary>
        </member>
        <member name="M:AsterNET.Manager.Action.SetVarAction.#ctor">
            <summary>
                Creates a new empty SetVarAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.SetVarAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new SetVarAction that sets the given global variable to a new value.
            </summary>
            <param name="variable">the name of the global variable to set</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:AsterNET.Manager.Action.SetVarAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new SetVarAction that sets the given channel variable of the
                given channel to a new value.
            </summary>
            <param name="channel">the name of the channel to set the variable on</param>
            <param name="variable">the name of the channel variable</param>
            <param name="value">the new value</param>
        </member>
        <member name="P:AsterNET.Manager.Action.SetVarAction.Action">
            <summary>
                Get the name of this action, i.e. "SetVar".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetVarAction.Channel">
            <summary>
                Get/Set the name of the channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetVarAction.Variable">
            <summary>
                Get/Set the name of the variable to set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SetVarAction.Value">
            <summary>
                Get/Set the value to store.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.SIPPeersAction">
            <summary>
                Retrieves a list of all defined SIP peers.<br />
                For each peer that is found a PeerEntryEvent is sent by Asterisk containing
                the details. When all peers have been reported a PeerlistCompleteEvent is sent.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.PeerEntryEvent" />
            <seealso cref="T:AsterNET.Manager.Event.PeerlistCompleteEvent" />
        </member>
        <member name="T:AsterNET.Manager.Action.SIPShowPeerAction">
            <summary>
                Retrieves a the details about a given SIP peer.<br />
                For a PeerEntryEvent is sent by Asterisk containing the details of the peer
                followed by a PeerlistCompleteEvent.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.PeerEntryEvent" />
            <seealso cref="T:AsterNET.Manager.Event.PeerlistCompleteEvent" />
        </member>
        <member name="M:AsterNET.Manager.Action.SIPShowPeerAction.#ctor">
            <summary> Creates a new empty SIPShowPeerAction.</summary>
        </member>
        <member name="M:AsterNET.Manager.Action.SIPShowPeerAction.#ctor(System.String)">
            <summary>
                Creates a new SIPShowPeerAction that requests the details about the given SIP peer.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.SIPShowPeerAction.Peer">
            <summary>
                Get/Set the name of the peer to retrieve.<br />
                This parameter is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.StatusAction">
            <summary>
                The StatusAction requests the state of all active channels.<br />
                For each active channel a StatusEvent is generated. After the state of all
                channels has been reported a StatusCompleteEvent is generated.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.StatusEvent" />
            <seealso cref="T:AsterNET.Manager.Event.StatusCompleteEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.StatusAction.Action">
            <summary>
                Get the name of this action, i.e. "Status".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.StopMonitorAction">
            <summary>
                The StopMonitorAction ends monitoring (recording) a channel.<br />
                It is implemented in res/res_monitor.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.StopMonitorAction.Action">
            <summary>
                Get the name of this action, i.e. "StopMonitor".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.StopMonitorAction.Channel">
            <summary>
                Get/Set the name of the channel to end monitoring.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.StopMonitorAction.#ctor">
            <summary>
                Creates a new empty StopMonitorAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.StopMonitorAction.#ctor(System.String)">
            <summary>
                Creates a new StopMonitorAction that ends monitoring of the given channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.UpdateConfigAction">
            <summary>
                The UpdateConfigAction sends an UpdateConfig command to the asterisk server.
                Please take note that unlike the manager documentation, this command does not
                dump back the config file upon success -- it only tells you it succeeded. You
                should use the handy addCommand method this class provides for specifying
                what actions you would like to take on the configuration file. It will
                generate appropriate sequence numbers for the command. You may use the static
                ACTION_* fields provided by this action to specify what action you would like
                to take, while avoiding handling the strings required. Plain fields:<br />
                SrcFilename: Configuration filename to read(e.g. foo.conf)<br />
                DstFilename: Configuration filename to write(e.g. foo.conf)<br />
                Reload: Whether or not a reload should take place (or name of specific module)<br />
                Repeatable fields:<br />
                Action-XXXXXX: Action to Take (NewCat,RenameCat,DelCat,Update,Delete,Append)<br />
                Cat-XXXXXX: Category to operate on<br />
                Var-XXXXXX: Variable to work on<br />
                Value-XXXXXX: Value to work on<br />
                Match-XXXXXX: Extra match required to match line
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.UpdateConfigAction.#ctor">
            <summary>
                Creates a new UpdateConfigAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.UpdateConfigAction.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new UpdateConfigAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.UpdateConfigAction.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new UpdateConfigAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.UpdateConfigAction.#ctor(System.String,System.String)">
            <summary>
                Creates a new UpdateConfigAction.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.UpdateConfigAction.DstFileName">
            <summary>
                Get/Set the destination filename.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.UpdateConfigAction.SrcFileName">
            <summary>
                Get/Set the source filename.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.UpdateConfigAction.Reload">
            <summary>
                Get/Set the reload behavior of this action (yes), or sets a specific module (name) to be reloaded.<br />
                Set to empty string to update without reload.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.UpdateConfigAction.Action">
            <summary>
                Get the name of this action.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.UpdateConfigAction.AddCommand(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Adds a command to update a config file while sparing you the details of
                the Manager's required syntax. If you want to omit one of the command's
                sections, provide a null value to this method. The command index will be
                incremented even if you supply a null for all parameters, though the action
                will be unaffected.
            </summary>
            <param name="action">Action to Take (NewCat,RenameCat,DelCat,Update,Delete,Append)</param>
            <param name="category">Category to operate on</param>
            <param name="variable">Variable to work on</param>
            <param name="value">Value to work on</param>
            <param name="match">Extra match required to match line</param>
        </member>
        <member name="P:AsterNET.Manager.Action.UpdateConfigAction.Actions">
            <summary>
                Dictionary of the action's desired operations where Map keys contain:<br />
                action,cat,var,value,match pairs followed by -XXXXXX, and the values contain the values for those keys.
                This method will typically only be used by the ActionBuilder to generate the actual strings to be sent to the
                manager interface.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapDialOffhookAction">
            <summary>
                The ZapDialOffhookAction dials a number on a zap channel while offhook.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDialOffhookAction.#ctor">
            <summary> Creates a new empty ZapDialOffhookAction.</summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDialOffhookAction.#ctor(System.Int32,System.String)">
            <summary>
                Creates a new ZapDialOffhookAction that dials the given number on the given zap channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDialOffhookAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapDialOffhook".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDialOffhookAction.ZapChannel">
            <summary>
                Get/Set the number of the zap channel.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDialOffhookAction.Number">
            <summary>
                Get/Set the number to dial.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapDNDOffAction">
            <summary>
                The ZapDNDOnAction switches a zap channel "Do Not Disturb" status off.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDNDOffAction.#ctor">
            <summary>
                Creates a new empty ZapDNDOffAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDNDOffAction.#ctor(System.Int32)">
            <summary>
                Creates a new ZapDNDOffAction that disables "Do Not Disturb" status for the given zap channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDNDOffAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapDNDOff".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDNDOffAction.ZapChannel">
            <summary>
                Get/Set the number of the zap channel to switch to dnd off.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapDNDOnAction">
            <summary>
                The ZapDNDOnAction switches a zap channel "Do Not Disturb" status on.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDNDOnAction.#ctor">
            <summary>
                Creates a new empty ZapDNDOnAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapDNDOnAction.#ctor(System.Int32)">
            <summary>
                Creates a new ZapDNDOnAction that enables "Do Not Disturb" status for the given zap channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDNDOnAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapDNDOn".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapDNDOnAction.ZapChannel">
            <summary>
                Get/Set the number of the zap channel to switch to dnd on.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapHangupAction">
            <summary>
                The ZapHangupAction hangs up a zap channel.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapHangupAction.#ctor">
            <summary>
                Creates a new empty ZapHangupAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Action.ZapHangupAction.#ctor(System.Int32)">
            <summary>
                Creates a new ZapHangupAction that hangs up the given zap channel (the number of the zap channel to hang up).
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapHangupAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapHangup".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapHangupAction.ZapChannel">
            <summary>
                Get/Set the number of the zap channel to hangup.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapShowChannelsAction">
            <summary>
                The ZapShowChannelsAction requests the state of all zap channels.<br />
                For each zap channel a ZapShowChannelsEvent is generated. After all zap
                channels have been listed a ZapShowChannelsCompleteEvent is generated.
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.ZapShowChannelsEvent" />
            <seealso cref="T:AsterNET.Manager.Event.ZapShowChannelsCompleteEvent" />
        </member>
        <member name="P:AsterNET.Manager.Action.ZapShowChannelsAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapShowChannels".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Action.ZapTransferAction">
            <summary>
                The ZapTransferAction transfers a zap channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapTransferAction.Action">
            <summary>
                Get the name of this action, i.e. "ZapTransfer".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Action.ZapTransferAction.ZapChannel">
            <summary>
                Get/Set the number of the zap channel to transfer.<br />
                This property is mandatory.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractAgentVariables.Variable">
            <summary>
            Get/Set the variables to set on the queue call in native asterisk format.<br/>
            Example: "VAR1=abc|VAR2=def".
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AbstractAgentVariables.GetVariables">
            <summary>
            Get the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AbstractAgentVariables.SetVariables(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AbstractAgentVariables.SetVariable(System.String,System.String)">
            <summary>
            Sets a variable dictionary on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AbstractAgentVariables.GetVariable(System.String)">
            <summary>
            Gets a variable on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractConfbridgeEvent.Conference">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+10+Documentation" target="_blank" alt="Asterisk 10 wiki docs">Asterisk 10</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.BridgeActivityEvent">
            <summary>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeUniqueId">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeType">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeTechnology">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeCreator">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeName">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.BridgeNumChannels">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.ChannelState">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.ChannelStatedDesc">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.CallerIdNum">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.CallerIdName">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.ConnectedLineNum">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.ConnectedLineName">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.Language">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.AccountCode">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.Context">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.Exten">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.Linkedid">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 13 wiki docs">Asterisk 13</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeActivityEvent.Priority">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.BridgeStateEvent">
            <summary>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeJoinEvent.CallerIDnum">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeJoinEvent.CallerIDname">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeLeaveEvent.CallerIDnum">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeLeaveEvent.CallerIDname">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListEvent.CallerIDNum">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListEvent.CallerIDName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListEvent.Admin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListEvent.MarkedUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListRoomsEvent.Parties">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListRoomsEvent.Marked">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeListRoomsEvent.Locked">
            <summary>
            
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConfbridgeTalkingEvent.TalkingStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ConnectionStateEvent">
            <summary>
            Abstract base class for several agent related events.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConnectionStateEvent.Reconnect">
            <summary>
            Get/Set reconnect status.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AGIExecEvent">
            <summary>
                AgiExecEvents are triggered when an AGI command is executed.<br />
                For each command two events are triggered: one before excution ("Start") and one after execution ("End").
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AGIExecEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
                Creates a new AGIExecEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AGIExecEvent.CommandId">
            <summary>
                Get/Set the command ID
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AGIExecEvent.Command">
            <summary>
                Get/Set the command
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AGIExecEvent.SubEvent">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AGIExecEvent.Result">
            <summary>
                Get/Set the result
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AGIExecEvent.ResultCode">
            <summary>
                Get/Set the result number
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AsyncAGIEvent.Result">
            <summary>
                Get/Set the Result
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AsyncAGIEvent.CommandId">
            <summary>
                Get/Set the command ID
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AsyncAGIEvent.SubEvent">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.BridgeEvent">
            <summary>
            A BridgeEvent is triggered when a link between two voice
            channels is established ("Link") or discontinued ("Unlink").
            As of Asterisk 1.6 the Bridge event is reported directly by Asterisk.
            Asterisk versions up to 1.4 report individual events: LinkEvent and UnlinkEvent.
            For maximum compatibily do not use the Link and Unlink events in your code.
            Just use the Bridge event and check for isLink() and isUnlink().
            </summary>
        </member>
        <member name="F:AsterNET.Manager.Event.BridgeEvent.BridgeTypes.BRIDGE_TYPE_CORE">
            <summary> A channel.c bridge </summary>
        </member>
        <member name="F:AsterNET.Manager.Event.BridgeEvent.BridgeTypes.BRIDGE_TYPE_RTP_DIRECT">
            <summary> An RTP peer-2-peer bridge (NAT support only). </summary>
        </member>
        <member name="F:AsterNET.Manager.Event.BridgeEvent.BridgeTypes.BRIDGE_TYPE_RTP_NATIVE">
            <summary> An RTP native bridge. </summary>
        </member>
        <member name="F:AsterNET.Manager.Event.BridgeEvent.BridgeTypes.BRIDGE_TYPE_RTP_REMOTE">
            <summary> A remote (re-invite) bridge </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.BridgeEvent.ParseSpecial(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Unknown properties parser
            </summary>
            <param name="attributes">dictionary</param>
            <returns>updated dictionary</returns>
        </member>
        <member name="P:AsterNET.Manager.Event.BridgeEvent.BridgeState">
            <summary>
            Link if the two channels have been linked,
            Unlink if they have been unlinked.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ChannelReloadEvent.ChannelType">
            <summary>
                For SIP peers this is "SIP".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ChannelReloadEvent.ReloadReason">
            <summary>
                Get/Set the name of the channel.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.ChannelUpdateEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
                Creates a new ChannelUpdateEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ChannelUpdateEvent.ChannelType">
            <summary>
                Get/Set channel type
                "SIP",
                "IAX2",
                "GTALK"
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DialEndEvent">
            <summary>
            A dial begin event is triggered whenever when a dial action has completed.<br/>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.DialEndEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new DialEndEvent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DialBeginEvent">
            <summary>
            A dial begin event is triggered whenever when a dial action has started.<br/>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.DialBeginEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new DialBeginEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FailedACLEvent.LocalAddress">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FailedACLEvent.RemoteAddress">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FailedACLEvent.ACLName">
            <summary>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueCallerJoinEvent">
            <summary>
            A QueueCallerJoinEvent is triggered when a channel joins a queue.<br/>
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueCallerLeaveEvent">
            <summary>
            A QueueCallerLeaveEvent is triggered when a channel leaves a queue.<br/>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.DTMFEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
                Creates a new DialEvent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.FaxReceivedEvent">
            <summary>
                A FaxReceivedEvent is triggered by spandsp after a new fax has been received.<br />
                It is only available if you installed the spandsp patches to Asterisk.<br />
                See http://soft-switch.org/installing-spandsp.html for details.<br />
                Implemented in apps/app_rxfax.c.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.Exten">
            <summary>
                Get/Set the extension in Asterisk's dialplan the fax was received
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.CallerId">
            <summary>
                Get/Set the Caller*ID of the calling party or an empty string if none is
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.RemoteStationId">
            <summary>
                Get/Set the identifier of the remote fax station.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.LocalStationId">
            <summary>
                Get/Set the identifier of the local fax station.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.PagesTransferred">
            <summary>
                Get/Set the number of pages transferred.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.Resolution">
            <summary>
                Get/Set the row resolution of the received fax.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.TransferRate">
            <summary>
                Get/Set the transfer rate in bits/s.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.FaxReceivedEvent.Filename">
            <summary>
                Get/Set the filename of the received fax including its full path on the Asterisk server.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.PRIEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new DNDStateEvent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberPauseEvent">
            <summary>
            Raised when a member is paused/unpaused in the queue.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberPauseEvent.Reason">
            <summary>
            The reason a member was paused.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberPauseEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberPauseEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberPenaltyEvent">
            <summary>
            A QueueMemberPenaltyEvent is triggered when a queue member is assigned a new penalty.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberPenaltyEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberPenaltyEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberRinginuseEvent">
            <summary>
            Raised when a member's ringinuse setting is changed
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberRinginuseEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberRinginuseEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererChannel">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererChannelState">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererChannelStatedesc">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererCalleridNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererCalleridName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererConnectedLineNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererConnectedLineName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererAccountCode">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererContext">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererPriority">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigTransfererUniqueId">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgeUniqueId">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgeType">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgetechnology">
            <summary>
                Get/Set the identifier of the remote fax station.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgeCreator">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgeName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.OrigBridgeNumChannels">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererChannel">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererChannelState">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererChannelStatedesc">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererCalleridNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererCalleridName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererConnectedLineNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererConnectedLineName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererAccountCode">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererContext">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererExten">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererPriority">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondTransfererUniqueId">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeUniqueId">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeType">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeTechnology">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeCreator">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.SecondBridgeNumChannels">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeChannel">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeChannelState">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeChannelStatedesc">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeCalleridNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeCalleridName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeConnectedLineNum">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeConnectedLineName">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeAccountCode">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeContext">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeExten">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereePriority">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AttendedTransferEvent.TransfereeUniqueId">
            <summary>
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.TransferEvent.TransferMethod">
            <summary>
            SIP, 
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.TransferEvent.TransferType">
            <summary>
            Blind,
            Attended
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.UnknownEvent">
            <summary>
            A UnknownEvent is triggered on unknown event from manager/proxy.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.UnknownEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new UnknownEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.VarSetEvent.Variable">
            <summary>
            Get/Set the name of variable.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.VarSetEvent.Value">
            <summary>
            Get/Set value of variable.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueCallerAbandonEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new DNDStateEvent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AbstractAgentEvent">
            <summary>
                Abstract base class for several agent related events.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractAgentEvent.Queue">
            <summary>
                Get/Set the name of the queue.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractAgentEvent.Member">
            <summary>
                Get/Set the name of the member's interface.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractAgentEvent.MemberName">
            <summary>
                Get/Set the name of the member's interface.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AbstractParkedCallEvent">
            <summary>
                Abstract base class for several call parking related events.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractParkedCallEvent.Exten">
            <summary>
                Get/Set the extension the channel is or was parked at.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractParkedCallEvent.CallerId">
            <summary>
                Get/Set the Caller*ID number of the parked channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractParkedCallEvent.CallerIdNum">
            <summary>
                Get/Set the Caller*ID number of the parked channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractParkedCallEvent.CallerIdName">
            <summary>
                Get/Set the Caller*ID name of the parked channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AbstractQueueMemberEvent">
            <summary>
                Abstract base class for several queue member related events.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.AbstractQueueMemberEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            AbstractQueueMemberEvent contructor
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Queue">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Location">
            <summary>
            Returns the name of the member's interface.<br />
            E.g. the channel name or agent group.<br />
            <b>Removed since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.<br/>
            <b>Replaced by : </b> <see cref="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Interface"/> since <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Interface">
            <summary>
            The queue member's channel technology or location.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.StateInterface">
            <summary>
            Channel technology or location from which to read device state changes.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.MemberName">
            <summary>
            The name of the queue member.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Membership">
            <summary>
            "dynamic" if the added member is a dynamic queue member,<br />
            "realtime" if the added member is a realtime queue member,<br />
            "static" if the added member is a static queue member.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Penalty">
            <summary>
            The penalty associated with the queue member. When calls are distributed members with higher penalties are considered last.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.CallsTaken">
            <summary>
            The number of calls this queue member has serviced.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.LastCall">
            <summary>
            The time this member last took a call, expressed in seconds since 00:00, Jan 1, 1970 UTC.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Paused">
            <summary>
            When queue member is paused (not accepting calls).<br/>
            Evaluates <see langword="true"/> if this member has been paused,
            <see langword="false"/> if not.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Status">
            <summary>
            The numeric device state status of the queue member.<br/>
            <para>
            Valid status codes are:<br/>
            <list type="number" start="0">
            <item>AST_DEVICE_UNKNOWN</item>
            <item>AST_DEVICE_NOT_INUSE</item>
            <item>AST_DEVICE_INUSE</item>
            <item>AST_DEVICE_BUSY</item>
            <item>AST_DEVICE_INVALID</item>
            <item>AST_DEVICE_UNAVAILABLE</item>
            <item>AST_DEVICE_RINGING</item>
            <item>AST_DEVICE_RINGINUSE</item>
            <item>AST_DEVICE_ONHOLD</item>
            </list>
            </para>
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.Ringinuse">
            <summary>
            Evaluates <see langword="true"/> if Ringinuse,
            <see langword="false"/> if not.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.InCall">
            <summary>
            Evaluates <see langword="true"/> if member is in call,
            <see langword="false"/> after LastCall time is updated.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 13 wiki docs">Asterisk 13</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractQueueMemberEvent.PausedReason">
            <summary>
            If set when paused, the reason the queue member was paused.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 13 wiki docs">Asterisk 13</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentCallbackLoginEvent">
            <summary>
                An AgentCallbackLoginEvent is triggered when an agent is successfully logged in using AgentCallbackLogin.<br />
                It is implemented in channels/chan_agent.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.AgentCallbackLogoffEvent" />
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCallbackLoginEvent.Agent">
            <summary>
                Get/Set the name of the agent that logged in.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentCallbackLogoffEvent">
            <summary>
                An AgentCallbackLogoffEvent is triggered when an agent that previously logged in using
                AgentCallbackLogin is logged of.<br />
                It is implemented in channels/chan_agent.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.AgentCallbackLoginEvent" />
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCallbackLogoffEvent.Agent">
            <summary> Returns the name of the agent that logged off.</summary>
            <summary> Sets the name of the agent that logged off.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCallbackLogoffEvent.Reason">
            <summary>
                Returns the reason for the logoff. The reason is set to Autologoff if the agent has been
                logged off due to not answering the phone in time. Autologoff is configured by setting
                autologoff to the appropriate number of seconds in agents.conf.
            </summary>
            <summary>Sets the reason for the logoff.</summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentCalledEvent">
            <summary>
                An AgentCalledEvent is triggered when an agent is rung.<br />
                To enable AgentCalledEvents you have to set eventwhencalled = yes in queues.conf.<br />
                This event is implemented in apps/app_queue.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCalledEvent.CallerIdNum">
            <summary>
                Get/Set the Caller*ID number of the calling channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCalledEvent.CallerIdName">
            <summary>
                Get/Set the Caller*ID name of the calling channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentCompleteEvent">
            <summary>
                An AgentCompleteEvent is triggered when at the end of a call if the caller was connected to an agent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCompleteEvent.HoldTime">
            <summary>
                Get/Set the amount of time the caller was on hold.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCompleteEvent.TalkTime">
            <summary>
                Get/Set the amount of time the caller talked to the agent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentCompleteEvent.Reason">
            <summary>
                Get/Set if the agent or the caller terminated the call.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentConnectEvent">
            <summary>
                An AgentConnectEvent is triggered when a caller is connected to an agent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentConnectEvent.HoldTime">
            <summary>
                Get/Set the amount of time the caller was on hold.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentConnectEvent.BridgedChannel">
            <summary>
                Get/Set bridged channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentConnectEvent.RingTime">
            <summary>
                Get/Set the amount of time the caller was on ring.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentDumpEvent">
            <summary>
            An AgentDumpEvent is triggered when an agent dumps the caller while listening
            to the queue announcement.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentLoginEvent">
            <summary>
                An AgentLoginEvent is triggered when an agent is successfully logged in using AgentLogin.<br />
                It is implemented in channels/chan_agent.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.AgentLogoffEvent" />
        </member>
        <member name="P:AsterNET.Manager.Event.AgentLoginEvent.Agent">
            <summary>
                Get/Set the name of the agent that logged in.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentLogoffEvent">
            <summary>
                An AgentCallbackLogoffEvent is triggered when an agent that previously logged in using AgentLogin is logged of.
                It is implemented in channels/chan_agent.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.AgentLoginEvent" />
        </member>
        <member name="P:AsterNET.Manager.Event.AgentLogoffEvent.Agent">
            <summary>
                Get/Set the name of the agent that logged off.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AgentsCompleteEvent">
            <summary>
            An AgentsCompleteEvent is triggered after the state of all agents has been
            reported in response to an AgentsAction.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.AgentsAction" />
        </member>
        <member name="T:AsterNET.Manager.Event.AgentsEvent">
            <summary>
                An AgentsEvent is triggered for each agent in response to an AgentsAction.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.AgentsAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.Agent">
            <summary>
                Get/Set the agentid.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.Name">
            <summary>
                Get/Set the name of this agent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.Status">
            <summary>
                Get/Set the status of this agent.<br />
                This is one of
                <dl>
                    <dt>"AGENT_LOGGEDOFF"</dt>
                    <dd>Agent isn't logged in</dd>
                    <dt>"AGENT_IDLE"</dt>
                    <dd>Agent is logged in, and waiting for call</dd>
                    <dt>"AGENT_ONCALL"</dt>
                    <dd>Agent is logged in, and on a call</dd>
                    <dt>"AGENT_UNKNOWN"</dt>
                    <dd>Don't know anything about agent. Shouldn't ever get this.</dd>
                </dl>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.LoggedInChan">
            <summary>
                Get/Set the name of channel this agent logged in from or "n/a" if the agent is not logged in.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.LoggedInTime">
            <summary>
                Get/Set the time (in seconds since 01/01/1970) when the agent logged in or 0 if the user is not logged.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AgentsEvent.TalkingTo">
            <summary>
                Get/Set the numerical Caller*ID of the channel this agent is talking toor "n/a" if this agent is talking to nobody.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AlarmClearEvent">
            <summary>
            An AlarmEvent is triggered when a Zap channel leaves alarm state.<br/>
            It is implemented in channels/chan_zap.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AlarmEvent">
            <summary>
                An AlarmEvent is triggered when a Zap channel enters or changes alarm state.<br />
                It is implemented in channels/chan_zap.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AlarmEvent.Alarm">
            <summary>
                Get/Set the kind of alarm that happened.<br />
                This may be one of
                <ul>
                    <li>Red Alarm</li>
                    <li>Yellow Alarm</li>
                    <li>Blue Alarm</li>
                    <li>Recovering</li>
                    <li>Loopback</li>
                    <li>Not Open</li>
                </ul>
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.CdrEvent">
            <summary>
                A CdrEvent is triggered when a call detail record is generated, usually at the end of a call.<br />
                To enable CdrEvents you have to add enabled = yes to the general section in
                cdr_manager.conf.<br />
                This event is implemented in cdr/cdr_manager.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.AbstractChannelEvent">
            <summary>
            Abstract base class providing common properties for HangupEvent, NewChannelEvent and NewStateEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.ChannelState">
            <summary>
            Get/Set Channel State
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.ChannelStateDesc">
            <summary>
            Get/Set Channel State Description
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.CallerId">
            <summary>
            Get/Set the Caller*ID of the channel if set or &lt;unknown&gt; if none has been set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.CallerIdNum">
            <summary>
            Get/Set the Caller*ID of the channel if set or &lt;unknown&gt; if none has been set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.CallerIdName">
            <summary>
            Get/Set the Caller*ID Name of the channel if set or &lt;unknown&gt; if none has been set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.State">
            <summary>
            Get/Set the (new) state of the channel.<br/>
            The following states are used:<br/>
            <ul>
            <li>Down</li>
            <li>OffHook</li>
            <li>Dialing</li>
            <li>Ring</li>
            <li>Ringing</li>
            <li>Up</li>
            <li>Busy</li>
            </ul>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractChannelEvent.AccountCode">
            <summary>
            Get/Set channel AccountCode
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ConnectEvent">
            <summary>
                A ConnectEvent is triggered after successful login to the asterisk server.<br />
                It is a pseudo event not directly related to an asterisk generated event.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ConnectEvent.ProtocolIdentifier">
            <summary>
                Get/Set the version of the protocol.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DBGetResponseEvent">
            <summary>
                A DBGetResponseEvent is sent in response to a DBGetAction and contains the entry that was queried.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.DBGetAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.DBGetResponseEvent.Family">
            <summary>
                Get/Set the family of the database entry that was queried.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DBGetResponseEvent.Key">
            <summary>
                Get/Set the key of the database entry that was queried.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DBGetResponseEvent.Val">
            <summary>
                Get/Set the value of the database entry that was queried.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DialEvent">
            <summary>
            A dial event is triggered whenever a phone attempts to dial someone.<br/>
            This event is implemented in apps/app_dial.c.<br/>
            Available since Asterisk 1.2.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.DialEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new DialEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.Src">
            <summary>
            Returns the name of the source channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.Destination">
            <summary>
            Get/Set the name of the destination channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.CallerId">
            <summary>
            Get/Set the Caller*ID.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.CallerIdName">
            <summary>
            Get/Set the Caller*ID Name.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.CallerIdNum">
            <summary>
            Get/Set the Caller*ID Number.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.SrcUniqueId">
            <summary>
            Get/Set the unique ID of the source channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DialEvent.DestUniqueId">
            <summary>
            Get/Set the unique ID of the distination channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DisconnectEvent">
            <summary>
            A DisconnectEvent is triggered when the connection to the asterisk server is lost.<br/>
            It is a pseudo event not directly related to an asterisk generated event.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DNDStateEvent">
            <summary>
                A DNDStateEvent is triggered by the Zap channel driver when a channel enters
                or leaves DND (do not disturb) state.<br />
                It is implemented in channels/chan_zap.c.<br />
                Available since Asterisk 1.2
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.DNDStateEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
                Creates a new DNDStateEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DNDStateEvent.State">
            <summary>
                Get/Set DND state of the channel. "enabled" if do not disturb is on, "disabled" if it is off.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.DNDStateEvent.Status">
            <summary>
                Get/Set DND state of the channel. "enabled" if do not disturb is on, "disabled" if it is off.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ExtensionStatusEvent">
            <summary>
            An ExtensionStatusEvent is triggered when the state of an extension changes.<br/>
            It is implemented in manager.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ExtensionStatusEvent.Hint">
            <summary>
            Get/Set the extension hint.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ExtensionStatusEvent.Exten">
            <summary>
            Get/Set the extension.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ExtensionStatusEvent.Context">
            <summary>
            Get/Set the context of the extension.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ExtensionStatusEvent.Status">
            <summary>
            Get/Set the state of the extension.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.HangupEvent">
            <summary>
            A HangupEvent is triggered when a channel is hung up.<br/>
            It is implemented in channel.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HangupEvent.Cause">
            <summary>
            Get/Set the cause of the hangup.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HangupEvent.CauseTxt">
            <summary>
            Get/Set the textual representation of the hangup cause.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.HoldedCallEvent">
            <summary>
                A HoldedCallEvent is triggered when a channel is put on hold.<br />
                It is implemented in res/res_features.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HoldedCallEvent.UniqueId1">
            <summary>
                Get/Set the unique id of the channel that put the other channel on hold.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HoldedCallEvent.UniqueId2">
            <summary>
                Get/Set the unique id of the channel that has been put on hold.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HoldedCallEvent.Channel1">
            <summary>
                Get/Set the name of the channel that put the other channel on hold.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.HoldedCallEvent.Channel2">
            <summary>
                Get/Set the name of the channel that has been put on hold.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.HoldEvent">
            <summary>
                A HoldEvent is triggered by the SIP channel driver when a channel is put on hold.<br />
                It is implemented in channels/chan_sip.c.<br />
                Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.UnholdEvent" />
        </member>
        <member name="T:AsterNET.Manager.Event.JoinEvent">
            <summary>
                A JoinEvent is triggered when a channel joines a queue.<br />
                It is implemented in apps/app_queue.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.JoinEvent.CallerId">
            <summary>
                Get/Set the Caller*ID number of the channel that joined the queue if set.
                If the channel has no caller id set "unknown" is returned.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.JoinEvent.CallerIdName">
            <summary>
                Get/Set the Caller*ID name of the channel that joined the queue if set.
                If the channel has no caller id set "unknown" is returned.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.JoinEvent.Position">
            <summary>
                Get/Set the position of the joined channel in the queue.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.LeaveEvent">
            <summary>
            A LeaveEvent is triggered when a channel leaves a queue.<br/>
            It is implemented in apps/app_queue.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.LinkEvent">
            <summary>
            A LinkEvent is triggered when two voice channels are linked together and voice data exchange commences.<br/>
            Several Link events may be seen for a single call.
            This can occur when Asterisk fails to setup a native bridge for the call.
            This is when Asterisk must sit between two telephones and perform CODEC conversion on their behalf.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.LogChannelEvent">
            <summary>
                A LogChannelEvent is triggered when logging is turned on or off.<br />
                It is implemented in logger.c<br />
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.LogChannelEvent.Enabled">
            <summary>
                Get/Set if logging has been enabled or disabled.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.LogChannelEvent.Reason">
            <summary>
                Get the textual representation of the reason for disabling logging.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.LogChannelEvent.ReasonCode">
            <summary>
                Get the reason code for disabling logging.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ManagerEvent">
            <summary>
            Abstract base class for all Events that can be received from the Asterisk server.<br/>
            Events contain data pertaining to an event generated from within the Asterisk
            core or an extension module.<br/>
            There is one conrete subclass of ManagerEvent per each supported Asterisk Event.
            
            Channel / Privilege / UniqueId are not common to all events and should be moved to
            derived event classes.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Attributes">
            <summary>
            Store all unknown (without setter) keys from manager event.<br/>
            Use in default Parse method <see cref="M:AsterNET.Manager.Event.ManagerEvent.Parse(System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Channel">
            <summary>
            Get/Set the name of the channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.DateReceived">
            <summary>
            Get/Set the point in time this event was received from the Asterisk server.<br/>
            Pseudo events that are not directly received from the asterisk server
            (for example ConnectEvent and DisconnectEvent) may return null.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Privilege">
            <summary>
            Get/Set the AMI authorization class of this event.<br/>
            This is one or more of system, call, log, verbose, command, agent or user.
            Multiple privileges are separated by comma.<br/>
            Note: This property is not available from Asterisk 1.0 servers.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Server">
            <summary>
            Specify a server to which to send your commands (x.x.x.x or hostname).<br/>
            This should match the server name specified in your config file's "host" entry.
            If you do not specify a server, the proxy will pick the first one it finds -- fine in single-server configurations.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Source">
            <summary>
            The ManagerConnection the Event was sourced from.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.Timestamp">
            <summary>
            Returns the timestamp for this event.<br/>
            The timestamp property is available in Asterisk since 1.4
            if enabled in manager.conf by setting timestampevents = yes.
            In contains the time the event was generated in seconds since the epoch.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ManagerEvent.UniqueId">
            <summary>
            Get/Set the unique id of the channel.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.ManagerEvent.#ctor">
            <summary>
            Creates a new ManagerEvent. Source already set.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.ManagerEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new ManagerEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="M:AsterNET.Manager.Event.ManagerEvent.Parse(System.String,System.String)">
            <summary>
            Unknown properties parser
            </summary>
            <param name="key">key name</param>
            <param name="value">key value</param>
            <returns>true - value parsed, false - can't parse value</returns>
        </member>
        <member name="M:AsterNET.Manager.Event.ManagerEvent.ParseSpecial(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Unknown properties parser.
            </summary>
            <param name="attributes">dictionary</param>
            <returns>updated dictionary</returns>
        </member>
        <member name="M:AsterNET.Manager.Event.ManagerEvent.ToString">
            <summary>
             Convert all properties to string
            </summary>
            <returns>All event details and properties as a string</returns>
        </member>
        <member name="T:AsterNET.Manager.Event.AbstractMeetmeEvent">
            <summary>
                Abstract base class providing common properties for meet me (asterisk's conference system) events.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractMeetmeEvent.Meetme">
            <summary>
                Get/Set the conference number.
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.AbstractMeetmeEvent.Usernum">
            <summary>
                Get/Set the conference user number
                <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.MeetmeJoinEvent">
            <summary>
                A MeetMeJoinEvent is triggered if a channel joins a meet me conference.<br />
                It is implemented in apps/app_meetme.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.MeetmeLeaveEvent">
            <summary>
                A MeetMeLeaveEvent is triggered if a channel leaves a meet me conference.<br />
                It is implemented in apps/app_meetme.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.MeetmeStopTalkingEvent">
            <summary>
            A MeetMeStopTalkingEvent is triggered when a user ends talking in a meet me conference.<br/>
            It is implemented in apps/app_meetme.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.MeetmeTalkingEvent">
            <summary>
                A MeetMeTalkingEvent is triggered when a user starts talking in a meet me conference.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.MessageWaitingEvent">
            <summary>
                A MessageWaitingEvent is triggered when someone leaves voicemail.<br />
                It is implemented in apps/app_voicemail.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.MessageWaitingEvent.Mailbox">
            <summary>
                Get/Set the name of the mailbox that has waiting messages.<br />
                The name of the mailbox is of the form numberOfMailbox@context, e.g. 1234@default.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.MessageWaitingEvent.Waiting">
            <summary>
                Get/Set the number of new messages in the mailbox.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.MessageWaitingEvent.New">
            <summary>
                Get/Set the number of new messages in this mailbox.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.MessageWaitingEvent.Old">
            <summary>
                Get/Set the number of old messages in this mailbox.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.NewCallerIdEvent">
            <summary>
                A NewCallerIdEvent is triggered when the caller id of a channel changes.<br />
                It is implemented in channel.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewCallerIdEvent.CallerId">
            <summary>
                Get/Set the new caller id.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewCallerIdEvent.CallerIdName">
            <summary>
                Get/Set the new Caller*ID Name if set or "&lt;Unknown&gt;" if none has been set.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewCallerIdEvent.CallerIdNum">
            <summary>
                Get/Set the new Caller*ID Numb.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewCallerIdEvent.CidCallingPresNumeric">
            <summary>
                Get the CallerId presentation/screening.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewCallerIdEvent.CidCallingPres">
            <summary>
                Get/Sets the CallerId presentation/screening in the form "%d (%s)".
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.NewChannelEvent">
            <summary>
            A NewChannelEvent is triggered when a new channel is created.<br/>
            It is implemented in channel.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.NewExtenEvent">
            <summary>
            A NewExtenEvent is triggered when a channel is connected to a new extension.<br/>
            It is implemented in pbx.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewExtenEvent.Application">
            <summary>
            Get/Set the name of the application that is executed.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewExtenEvent.AppData">
            <summary>
            Get/Set the parameters passed to the application that is executed. The parameters are separated by a '|' character.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewExtenEvent.Context">
            <summary>
            Get/Set the name of the context of the connected extension.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewExtenEvent.Extension">
            <summary>
            Get/Set the extension.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.NewExtenEvent.Priority">
            <summary>
            Get/Set the priority.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.NewStateEvent">
            <summary>
            A NewStateEvent is triggered when the state of a channel has changed.<br/>
            It is implemented in channel.c
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ParkedCallEvent">
            <summary>
            A ParkedCallEvent is triggered when a channel is parked (in this case no
            action id is set) and in response to a ParkedCallsAction.<br/>
            It is implemented in res/res_features.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ParkedCallsAction"/>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.Exten">
            <summary>Get/Set the extension the channel is parked at.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.From">
            <summary>Get/Set the name of the channel that parked the call.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.Timeout">
            <summary>
            Get/Set the number of seconds this call will be parked.<br/>
            This corresponds to the parkingtime option in
            features.conf.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.CallerId">
            <summary>
            Get/Set the Caller*ID number of the parked channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.CallerIdNum">
            <summary>
            Get/Set the Caller*ID number of the parked channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ParkedCallEvent.CallerIdName">
            <summary>
            Get/Set the Caller*ID name of the parked channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ParkedCallGiveUpEvent">
            <summary>
            A ParkedCallGiveUpEvent is triggered when a channel that has been parked is hung up.<br/>
            It is implemented in res/res_features.c<br/>
            Available since Asterisk 1.2
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ParkedCallsCompleteEvent">
            <summary>
            A ParkedCallsCompleteEvent is triggered after all parked calls have been reported in response to a ParkedCallsAction.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ParkedCallsAction"/>
            <seealso cref="T:AsterNET.Manager.Event.ParkedCallEvent"/>
        </member>
        <member name="T:AsterNET.Manager.Event.ParkedCallTimeOutEvent">
            <summary>
            A ParkedCallTimeOutEvent is triggered when call parking times out for a given channel.<br/>
            It is implemented in res/res_features.c<br/>
            Available since Asterisk 1.2
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.PeerEntryEvent">
            <summary>
            A PeerEntryEvent is triggered in response to a SIPPeersAction or SIPShowPeerAction and contains information about a peer.<br/>
            It is implemented in channels/chan_sip.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerEntryEvent.ChannelType">
            <summary>
            For SIP peers this is "SIP".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerEntryEvent.ChanObjectType">
            <summary>
            For SIP peers this is either "peer" or "user".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerEntryEvent.IpAddress">
            <summary>
            Get/Set the IP address of the peer.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerEntryEvent.Status">
            <summary>
            Get/Set the status of this peer.<br/>
            For SIP peers this is one of:
            <dl>
            <dt>"UNREACHABLE"</dt>
            <dd></dd>
            <dt>"LAGGED (%d ms)"</dt>
            <dd></dd>
            <dt>"OK (%d ms)"</dt>
            <dd></dd>
            <dt>"UNKNOWN"</dt>
            <dd></dd>
            <dt>"Unmonitored"</dt>
            <dd></dd>
            </dl>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.PeerEntryEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.PeerlistCompleteEvent">
            <summary>
            A PeerlistCompleteEvent is triggered after the details of all peers has been reported in response to an SIPPeersAction or SIPShowPeerAction.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.PeerEntryEvent"/>
            <seealso cref="T:AsterNET.Manager.Action.SIPPeersAction"/>
            <seealso cref="T:AsterNET.Manager.Action.SIPShowPeerAction"/>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerlistCompleteEvent.ListItems">
            <summary>
            Get/Set the number of PeerEvents that have been reported.</summary>
        </member>
        <member name="T:AsterNET.Manager.Event.PeerStatusEvent">
            <summary>
            A PeerStatusEvent is triggered when a SIP or IAX client attempts to registrer at this asterisk server.<br/>
            This event is implemented in channels/chan_iax2.c and channels/chan_sip.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerStatusEvent.ChannelType">
            <summary>
            Channel type
            "SIP",
            "IAX2
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerStatusEvent.Peer">
            <summary>
            Returns the name of the peer that registered. The peer's name starts with "IAX2/" if it is an
            IAX client or "SIP/" if it is a SIP client. It is followed by the username that is used for
            registration.
            </summary>
            <summary> Sets the name of the peer that registered.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerStatusEvent.PeerStatus">
            <summary> Returns the registration state.<br/>
            This may be one of
            <ul>
            <li>Registered</li>
            <li>Unregistered</li>
            <li>Reachable</li>
            <li>Lagged</li>
            <li>Unreachable</li>
            <li>Rejected (IAX only)</li>
            </ul>
            </summary>
            <summary> Sets the registration state.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerStatusEvent.Cause">
            <summary>
            Returns the cause of a rejection or unregistration.<br/>
            For IAX peers this is set only if the status equals "Rejected".<br/>
            For SIP peers this is set if the status equals "Unregistered" and the peer was unregistered
            due to an expiration. In that case the cause is set to "Expired".
            </summary>
            <summary> Sets the cause of the rejection or unregistration.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.PeerStatusEvent.Time">
            <summary>
            Returns the ping time of the client if status equals "Reachable" or "Lagged"; if the status
            equals "Unreachable" it returns how long the last response took (in ms) for IAX peers or -1
            for SIP peers.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueEntryEvent">
            <summary>
            A QueueEntryEvent is triggered in response to a QueueStatusAction and contains information about an entry in a queue.<br/>
            It is implemented in apps/app_queue.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.QueueStatusAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEntryEvent.Queue">
            <summary>
            Get/Set the name of the queue that contains this entry.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEntryEvent.Position">
            <summary>
            Get/Set the position of this entry in the queue.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEntryEvent.CallerId">
            <summary>
            Get/Set the the Caller*ID number of this entry.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEntryEvent.CallerIdName">
            <summary>
            Get/Set the Caller*ID name of this entry.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEntryEvent.Wait">
            <summary>
            Get/Set the number of seconds this entry has spent in the queue.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueEvent">
            <summary>
            Abstract base class providing common properties for JoinEvent and LeaveEvent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEvent.Count">
            <summary>
            Get/Set the number of elements in the queue, i.e. the number of calls waiting to be answered by an agent.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueEvent.Queue">
            <summary>
            Get/Set the name of the queue.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ChallengeResponseFailedEvent">
            <summary>
                Raised when a request's attempt to authenticate has been challenged, and the request failed the authentication challenge.<br />
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.InvalidAccountIDEvent">
            <summary>
                Raised when a request fails an authentication check due to an invalid account ID.<br />
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.DeviceStateChangeEvent">
            <summary>
                Raised when a device state changes.<br />
                This differs from the ExtensionStatus event because this event is raised for all device state changes, not only for changes that affect dialplan hints.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ChallengeSentEvent">
            <summary>
                Raised when an Asterisk service sends an authentication challenge to a request..<br />
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.SuccessfulAuthEvent">
            <summary>
                Raised when a request successfully authenticates with a service..<br />
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberAddedEvent">
            <summary>
            A QueueMemberAddedEvent is triggered when a queue member is added to a queue.<br/>
            It is implemented in apps/app_queue.c.<br/>
            <para>
            <b>Available since : </b> <see href="http://www.voip-info.org/wiki/view/Asterisk+v1.2" target="_blank" alt="Asterisk 1.2 wiki docs">Asterisk 1.2</see>.<br/>
            </para>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberAddedEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberAddedEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberEvent">
            <summary>
            A QueueMemberEvent is triggered in response to a QueueStatusAction and contains information about a member of a queue.<br/>
            It is implemented in apps/app_queue.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.QueueStatusAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Name">
            <summary>
            Get/Set the name of the queue member.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.MemberName">
            <summary>
            Get/Set the name of the queue member.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Queue">
            <summary>
            Get/Set the name of the queue.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Location">
            <summary>
            Get/Set the name of the member's interface.<br/>
            E.g. the channel name or agent group.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Membership">
            <summary>
            Get/Set value if this member has been dynamically added by the QueueAdd command
            (in the dialplan or via the Manager API) or if this member is has been
            statically defined in queues.conf.
            "dynamic" if the added member is a dynamic queue member, "static" if the added member is a static queue member.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Penalty">
            <summary>
            Get/Set the penalty for the added member. When calls are distributed members with higher penalties are considered last.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.CallsTaken">
            <summary>
            Get/Set the number of calls answered by the member.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.LastCall">
            <summary>
            Get/Set the time (in seconds since 01/01/1970) the last successful call answered by the added member was hungup.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Status">
            <summary>
            Get/Set the status of this queue member.<br/>
            Available since Asterisk 1.2<br/>
            Valid status codes are:
            <dl>
            <dt>AST_DEVICE_UNKNOWN (0)</dt>
            <dd>Queue member is available</dd>
            <dt>AST_DEVICE_NOT_INUSE (1)</dt>
            <dd>?</dd>
            <dt>AST_DEVICE_INUSE (2)</dt>
            <dd>?</dd>
            <dt>AST_DEVICE_BUSY (3)</dt>
            <dd>?</dd>
            <dt>AST_DEVICE_INVALID (4)</dt>
            <dd>?</dd>
            <dt>AST_DEVICE_UNAVAILABLE (5)</dt>
            <dd>?</dd>
            </dl>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberEvent.Paused">
            <summary>
            Is this queue member paused (not accepting calls)?<br/>
            Available since Asterisk 1.2.<br/>
            true if this member has been paused,
            false if not
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberPausedEvent">
            <summary>
            A QueueMemberPausedEvent is triggered when a queue member is paused or unpaused.<br/>
            It is implemented in apps/app_queue.c.<br/>
            <para>
            <b>Available since : </b> <see href="http://www.voip-info.org/wiki/view/Asterisk+v1.2" target="_blank" alt="Asterisk 1.2 wiki docs">Asterisk 1.2</see>.<br/>
            <b>Replaced by : </b> <see cref="T:AsterNET.Manager.Event.QueueMemberPauseEvent"/> since <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.<br/>
            <b>Removed since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 13 wiki docs">Asterisk 13</see>.<br/>
            </para>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueMemberPausedEvent.Reason">
            <summary>
            The reason a member was paused
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberPausedEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberPausedEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberRemovedEvent">
            <summary>
            A QueueMemberRemovedEvent is triggered when a queue member is removed from a queue.<br/>
            It is implemented in apps/app_queue.c.<br/>
            <para>
            <b>Available since : </b> <see href="http://www.voip-info.org/wiki/view/Asterisk+v1.2" target="_blank" alt="Asterisk 1.2 wiki docs">Asterisk 1.2</see>.<br/>
            </para>
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberRemovedEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberRemovedEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueMemberStatusEvent">
            <summary>
            Raised when a Queue member's status has changed
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Event.QueueMemberStatusEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new QueueMemberStatusEvent
            </summary>
            <param name="source">ManagerConnection passed through in the event.</param>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueParamsEvent">
            <summary>
            A QueueParamsEvent is triggered in response to a QueueStatusAction and contains the parameters of a queue.<br/>
            It is implemented in apps/app_queue.c
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.QueueStatusAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Strategy">
            <summary>
            Get/Set queue strategy.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Queue">
            <summary>
            Get/Set the name of the queue.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Max">
            <summary> Returns the maximum number of people waiting in the queue or 0 for unlimited.<br/>
            This corresponds to the maxlen setting in queues.conf.
            </summary>
            <summary> Sets the maximum number of people waiting in the queue.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Calls">
            <summary> Returns the number of calls currently waiting in the queue.</summary>
            <summary> Sets the number of calls currently waiting in the queue.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Holdtime">
            <summary> Returns the current average holdtime for this queue (in seconds).</summary>
            <summary> Sets the current average holdtime for this queue.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Completed">
            <summary> Returns the number of completed calls.</summary>
            <summary> Sets the number of completed calls.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Abandoned">
            <summary> Returns the number of abandoned calls.</summary>
            <summary> Sets the number of abandoned calls.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.ServiceLevel">
            <summary> Returns the service level (in seconds) as defined by the servicelevel setting
            in queues.conf.
            </summary>
            <summary> Sets the service level.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.ServiceLevelPerf">
            <summary> Returns the ratio of calls answered within the specified service level per total completed
            calls (in percent).
            </summary>
            <summary> Sets the ratio of calls answered within the specified service level per total completed
            calls.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.QueueParamsEvent.Weight">
            <summary>
            Returns the weight of this queue.<br/>
            A queues can be assigned a 'weight' to ensure calls waiting in a 
            higher priority queue will deliver its calls first. Only delays 
            the lower weight queue's call if the member is also in the 
            higher weight queue.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.QueueStatusCompleteEvent">
            <summary>
            A QueueStatusCompleteEvent is triggered after the state of all queues has been reported in response to a QueueStatusAction.<br/>
            Since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.QueueStatusAction" />
        </member>
        <member name="T:AsterNET.Manager.Event.RegistryEvent">
            <summary>
            A RegistryEvent is triggered when this asterisk server attempts to register
            as a client at another SIP or IAX server.<br/>
            This event is implemented in channels/chan_iax2.c and
            channels/chan_sip.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.ChannelType">
            <summary>
            Channel type
            "SIP",
            "IAX2"
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.Domain">
            <summary>
            Get/Set the domain or host name of the SIP or IAX2 server.<br/>
            This is the host part used in the register lines in
            iax.conf and sip.conf.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.Username">
            <summary>
            Get/Set the username used for registration.<br/>
            SIP send the username in case of a registration timeout, IAX2 in case of
            a registration failure. Otherwise the username is null.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.User">
            <summary>
            Sets the username used for registration.
            </summary>
            <deprecated> Please do not use this method it is a workaround for Asterisk 1.0.x servers. See Asterisk bug 4916.</deprecated>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.Status">
            <summary>
            Get/Set the registration state.<br/>
            For sip this may be one of (not sure if all of these are exposed via the
            manager api, at least "Registered" and "Timeout" are used though)
            <ul>
            <li>Registered</li>
            <li>Unregistered</li>
            <li>Request Sent</li>
            <li>Auth. Sent</li>
            <li>Rejected</li>
            <li>Timeout</li>
            <li>No Authentication</li>
            <li>Unreachable</li>
            </ul>
            IAX2 only uses
            <ul>
            <li>Rejected</li>
            </ul>
            Successful IAX2 registrations do not use the this property at all.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RegistryEvent.Cause">
            <summary>
            Get/Set the cause of a rejected registration.
            The cause of a rejected registration or "&lt;unknown&gt;" if the cause is unknown.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ReloadEvent">
            <summary>
            A ReloadEvent is triggerd when the reload console command is executed or the asterisk server is started.<br/>
            It is implemented in manager.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ReloadEvent.Status">
            <summary>Reload event status.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ReloadEvent.Module">
            <summary> Returns
            "Manager"
            "Enum"
            "DNSmgr"
            "CDR"
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ReloadEvent.Message">
            <summary> Returns
            "Reload Requested",
            "ENUM reload Requested",
            "DNSmgr reload Requested",
            "CDR subsystem reload requested"
            .</summary>
        </member>
        <member name="T:AsterNET.Manager.Event.RenameEvent">
            <summary>
            A RenameEvent is triggered when the name of a channel is changed.<br/>
            It is implemented in channel.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RenameEvent.NewName">
            <summary>
            Get/Set the new name of the channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.RenameEvent.OldName">
            <summary>
            Get/Set the old name of the channel.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ResponseEvent">
            <summary>
            Abstract base class for events triggered in response to a ManagerAction.<br/>
            All ResponseEvents contain an additional action id property that links the
            event to the action that caused it.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ResponseEvent.ActionId">
            <summary>
            Get/Set the action id of the ManagerAction that caused this event.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ResponseEvent.InternalActionId">
            <summary>
            Get/Set the internal action id of the ManagerAction that caused this event.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.ShutdownEvent">
            <summary>
            A ShutdownEvent is triggered when the asterisk server is shut down or restarted.<br/>
            It is implemented in asterisk.c
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ShutdownEvent.Shutdown">
            <summary>
            Get/Set the kind of shutdown or restart. Possible values are "Uncleanly" and "Cleanly". A
            shutdown is considered unclean if there are any active channels when the system is shut down.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ShutdownEvent.Restart">
            <summary>
            Get/Set true if the server has been restarted; false if it has been halted.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.StatusCompleteEvent">
            <summary>
            A StatusCompleteEvent is triggered after the state of all channels has been reported in response
            to a StatusAction.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.StatusAction"/>
            <seealso cref="T:AsterNET.Manager.Event.StatusEvent"/>
        </member>
        <member name="T:AsterNET.Manager.Event.StatusEvent">
            <summary>
            A StatusEvent is triggered for each active channel in response to a StatusAction.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.StatusAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.CallerId">
            <summary> Returns the Caller*ID of this channel.</summary>
            <summary> Sets the Caller*ID of this channel.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.CallerIdName">
            <summary> Returns the Caller*ID Name of this channel.</summary>
            <summary> Sets the Caller*ID Name of this channel.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.CallerIdNum">
            <summary> Returns the Caller*ID Number of this channel.</summary>
            <summary> Sets the Caller*ID Number of this channel.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.Account">
            <summary> Returns the account code of this channel.</summary>
            <summary> Sets the account code of this channel.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.Seconds">
            <summary> Returns the number of elapsed seconds.</summary>
            <summary> Sets the number of elapsed seconds.</summary>
        </member>
        <member name="P:AsterNET.Manager.Event.StatusEvent.Link">
            <summary> Returns the name of the linked channel if this channel is bridged.</summary>
            <summary> Sets the name of the linked channel.</summary>
        </member>
        <member name="T:AsterNET.Manager.Event.UnholdEvent">
            <summary>
            An UnholdEvent is triggered by the SIP channel driver when a channel is no longer put on hold.<br/>
            It is implemented in channels/chan_sip.c.<br/>
            Available since Asterisk 1.2
            </summary>
            <seealso cref="T:AsterNET.Manager.Event.HoldEvent"/>
        </member>
        <member name="M:AsterNET.Manager.Event.UnholdEvent.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
            Creates a new UnholdEvent.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.UnlinkEvent">
            <summary>
            An UnlinkEvent is triggered when a link between two voice channels is discontinued,
            for example, just before call completion.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.UnparkedCallEvent">
            <summary>
            A UnparkedCallEvent is triggered when a channel that has been parked is resumed.<br/>
            It is implemented in res/res_features.c<br/>
            Available since Asterisk 1.2
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.UnparkedCallEvent.From">
            <summary>
            Get/Set the name of the channel that parked the call.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Event.UserEvent">
            <summary>
            Abstract base class for user events.<br/>
            You can send arbitrary user events via the UserEvent application provided with asterisk.
            A user event by default has the attributes channel and uniqueId but you can add custom
            attributes by specifying an event body.<br/>
            To add your own user events you must subclass this class and name it corresponding to your event.<br/>
            If you plan to send an event by UserEvent(VIPCall) you will create a new class
            called VIPCallEvent that extends UserEvent. The name of this class is important: Just use the
            name of the event you will send (VIPCall in this example) and append "Event".<br/> 
            To pass additional data create appropriate attributes with getter and setter methods in your new class.<br/>
            Example:
            <pre>
            public class VIPCallEvent : UserEvent
            {
            	 private string firstName;
            	 // Constructor
            	 public VIPCallEvent()
            	 {
            	 }
            	 // Property
            	 public string FirstName
            	 {
            		 get { return this.firstName; }
            		 set { this.firstName = value; }
            	 }
             }
            </pre>
            To send this event use UserEvent(VIPCall|firstName: Jon) in your dialplan.<br/>
            The UserEvent is implemented in apps/app_userevent.c.<br/>
            Note that you must register your UserEvent with the ManagerConnection you are using in order to be recognized.
            </summary>
            <seealso cref="M:AsterNET.Manager.ManagerConnection.RegisterUserEventClass(System.Type)"/>
        </member>
        <member name="T:AsterNET.Manager.Event.ZapShowChannelsCompleteEvent">
            <summary>
            A ZapShowChannelsCompleteEvent is triggered after the state of all zap channels has been reported
            in response to a ZapShowChannelsAction.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ZapShowChannelsAction" />
            <seealso cref="T:AsterNET.Manager.Event.ZapShowChannelsEvent" />
        </member>
        <member name="T:AsterNET.Manager.Event.ZapShowChannelsEvent">
            <summary>
            A ZapShowChannelsEvent is triggered in response to a ZapShowChannelsAction and shows the state of a zap channel.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ZapShowChannelsAction" />
        </member>
        <member name="P:AsterNET.Manager.Event.ZapShowChannelsEvent.Signalling">
            <summary>
            Get/Set the signalling of this zap channel.<br/>
            Possible values are:
            <ul>
            <li>E &amp; M Immediate</li>
            <li>E &amp; M Wink</li>
            <li>E &amp; M E1</li>
            <li>Feature Group D (DTMF)</li>
            <li>Feature Group D (MF)</li>
            <li>Feature Group B (MF)</li>
            <li>E911 (MF)</li>
            <li>FXS Loopstart</li>
            <li>FXS Groundstart</li>
            <li>FXS Kewlstart</li>
            <li>FXO Loopstart</li>
            <li>FXO Groundstart</li>
            <li>FXO Kewlstart</li>
            <li>PRI Signalling</li>
            <li>R2 Signalling</li>
            <li>SF (Tone) Signalling Immediate</li>
            <li>SF (Tone) Signalling Wink</li>
            <li>SF (Tone) Signalling with Feature Group D (DTMF)</li>
            <li>SF (Tone) Signalling with Feature Group D (MF)</li>
            <li>SF (Tone) Signalling with Feature Group B (MF)</li>
            <li>GR-303 Signalling with FXOKS</li>
            <li>GR-303 Signalling with FXSKS</li>
            <li>Pseudo Signalling</li>
            </ul>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ZapShowChannelsEvent.Context">
            <summary>
            Get/Set the context of this zap channel as defined in zapata.conf.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Event.ZapShowChannelsEvent.Alarm">
            <summary>
            Get/Set the alarm state of this zap channel.<br/>
            This may be one of
            <ul>
            <li>Red Alarm</li>
            <li>Yellow Alarm</li>
            <li>Blue Alarm</li>
            <li>Recovering</li>
            <li>Loopback</li>
            <li>Not Open</li>
            <li>No Alarm</li>
            </ul>
            </summary>
        </member>
        <member name="T:AsterNET.Manager.AuthenticationFailedException">
            <summary>
            An AuthenticationFailedException is thrown when a login fails due to an incorrect username and/or password.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.AuthenticationFailedException.#ctor(System.String)">
            <summary>
            Creates a new AuthenticationFailedException with the given message.
            </summary>
            <param name="message">message describing the authentication failure</param>
        </member>
        <member name="M:AsterNET.Manager.AuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new AuthenticationFailedException with the given message and cause.
            </summary>
            <param name="message">message describing the authentication failure</param>
            <param name="cause">exception that caused the authentication failure</param>
        </member>
        <member name="T:AsterNET.Manager.Response.GetConfigResponse">
            <summary>
                Response that is received when sending a GetConfigAction.<br />
                Asterisk's response to the GetConfig command is ugly, and requires some
                parsing of attributes. This class lazily parses its own attributes to hide
                the ugly details. If the file requested exists but does not contain at least
                a line with a category, the ResponseBuilder won't create an instance of
                GetConfigResponse, as it won't know what the empty response is.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.GetConfigResponse.Categories">
            <summary>
                Get the map of category numbers to category names.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Response.GetConfigResponse.Lines(System.Int32)">
            <summary>
                Returns the map of line number to line value for a given category.
            </summary>
            <param name="categoryNumber">a valid category number from getCategories.</param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Manager.Response.OriginateResponse.CalcDuration">
            <summary>
                Return the duration of the call in milliseconds. If the call is has not
                ended, the duration so far is calculated.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Response.ChallengeResponse">
            <summary>
                Corresponds to a ChallengeAction and contains the challenge needed to log in using challenge/response.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.ChallengeAction" />
            <seealso cref="T:AsterNET.Manager.Action.LoginAction" />
        </member>
        <member name="P:AsterNET.Manager.Response.ChallengeResponse.Challenge">
            <summary>
                Get/Set the challenge to use when creating the key for log in.
            </summary>
            <seealso cref="!:Manager.Action.LoginAction.key" />
        </member>
        <member name="T:AsterNET.Manager.Response.CommandResponse">
            <summary>
                Corresponds to a CommandAction.<br />
                Asterisk's handling of the command action is generelly quite hairy.
                It sends a "Response: Follows" line followed by the raw output of the command including empty lines.
                At the end of the command output a line containing "--END COMMAND--" is sent.
                The reader parses this response into a CommandResponse object to hide these details.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.CommandAction" />
        </member>
        <member name="P:AsterNET.Manager.Response.CommandResponse.Result">
            <summary>
                Get/Set a List containing strings representing the lines returned by the CLI command.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Response.MailboxCountResponse">
            <summary>
                A MailboxCountResponse is sent in response to a MailboxCountAction and contains the number of old
                and new messages in a mailbox.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.MailboxCountAction" />
        </member>
        <member name="P:AsterNET.Manager.Response.MailboxCountResponse.Mailbox">
            <summary>
                Get/Set the name of the mailbox.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.MailboxCountResponse.NewMessages">
            <summary>
                Get/Set the number of new messages in the mailbox.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.MailboxCountResponse.OldMessages">
            <summary>
                Returns the number of old messages in the mailbox.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Response.MailboxStatusResponse">
            <summary>
                A MailboxStatusResponse is sent in response to a MailboxStatusAction and indicates if a set
                of mailboxes contains waiting messages.
            </summary>
            <seealso cref="T:AsterNET.Manager.Action.MailboxStatusAction" />
        </member>
        <member name="F:AsterNET.Manager.Response.MailboxStatusResponse.mailbox">
            <summary> The name of the mailbox.</summary>
        </member>
        <member name="F:AsterNET.Manager.Response.MailboxStatusResponse.waiting">
            <summary> Indicates if there are new messages waiting in the given set of mailboxes.</summary>
        </member>
        <member name="P:AsterNET.Manager.Response.MailboxStatusResponse.Mailbox">
            <summary>
                Get/Set the names of the mailboxes, separated by ",".
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.MailboxStatusResponse.Waiting">
            <summary>
                Get/Set true if at least one of the given mailboxes contains new messages, false otherwise.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.Response.ManagerError">
            <summary>
                Represents an "Response: Error" response received from the asterisk server.
                The cause for the error is given in the message attribute.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Response.ManagerError.#ctor">
            <summary> Creates a new ManagerError.</summary>
        </member>
        <member name="T:AsterNET.Manager.Response.ManagerResponse">
            <summary>
                Represents a response received from the Asterisk server as the result of a
                previously sent ManagerAction.<br />
                The response can be linked with the action that caused it by looking the
                action id attribute that will match the action id of the corresponding
                action.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.Attributes">
            <summary>
                Store all unknown (without setter) keys from manager event.<br />
                Use in default Parse method <see cref="M:AsterNET.Manager.Response.ManagerResponse.Parse(System.String,System.String)" />.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.Server">
            <summary>
                Specify a server to which to send your commands (x.x.x.x or hostname).<br />
                This should match the server name specified in your config file's "host" entry.
                If you do not specify a server, the proxy will pick the first one it finds -- fine in single-server configurations.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.DateReceived">
            <summary>
                Get/Set the point in time this response was received from the asterisk server.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.Privilege">
            <summary>
                Get/Set the AMI authorization class of this event.<br />
                This is one or more of system, call, log, verbose, command, agent or user.
                Multiple privileges are separated by comma.<br />
                Note: This property is not available from Asterisk 1.0 servers.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.ActionId">
            <summary>
                Get/Set the action id received with this response referencing the action that generated this response.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.Message">
            <summary>
                Get/Set the message received with this response.<br />
                The content depends on the action that generated this response.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.Response">
            <summary>
                Get/Set the value of the "Response:" line.<br />
                This typically a String like "Success" or "Error" but depends on the action that generated this response.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Response.ManagerResponse.UniqueId">
            <summary>
                Get/Set the unique id received with this response.<br />
                The unique id is used to keep track of channels created by the action sent, for example an OriginateAction.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Response.ManagerResponse.IsSuccess">
            <summary>
                Return true if Response is success
            </summary>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Manager.Response.ManagerResponse.GetAttribute(System.String)">
            <summary>
                Returns the value of the attribute with the given key.<br />
                This is particulary important when a response contains special
                attributes that are dependent on the action that has been sent.<br />
                An example of this is the response to the GetVarAction.
                It contains the value of the channel variable as an attribute
                stored under the key of the variable name.<br />
                Example:
                <pre>
                    GetVarAction action = new GetVarAction();
                    action.setChannel("SIP/1310-22c3");
                    action.setVariable("ALERT_INFO");
                    ManagerResponse response = connection.SendAction(action);
                    String alertInfo = response.getAttribute("ALERT_INFO");
                </pre>
                As all attributes are internally stored in lower case the key is
                automatically converted to lower case before lookup.
            </summary>
            <param name="key">the key to lookup.</param>
            <returns>
                the value of the attribute stored under this key or
                null if there is no such attribute.
            </returns>
        </member>
        <member name="M:AsterNET.Manager.Response.ManagerResponse.Parse(System.String,System.String)">
            <summary>
                Unknown properties parser
            </summary>
            <param name="key">key name</param>
            <param name="value">key value</param>
            <returns>true - value parsed, false - can't parse value</returns>
        </member>
        <member name="M:AsterNET.Manager.Response.ManagerResponse.ParseSpecial(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Unknown properties parser
            </summary>
            <param name="attributes">dictionary</param>
            <returns>updated dictionary</returns>
        </member>
        <member name="T:AsterNET.Manager.ManagerConnection">
            <summary>
            Default implemention of the ManagerConnection interface.
            </summary>
        </member>
        <member name="F:AsterNET.Manager.ManagerConnection.reconnectRetryFast">
            <summary> Default Fast Reconnect retry counter.</summary>
        </member>
        <member name="F:AsterNET.Manager.ManagerConnection.reconnectRetryMax">
            <summary> Default Maximum Reconnect retry counter.</summary>
        </member>
        <member name="F:AsterNET.Manager.ManagerConnection.reconnectIntervalFast">
            <summary> Default Fast Reconnect interval in milliseconds.</summary>
        </member>
        <member name="F:AsterNET.Manager.ManagerConnection.reconnectIntervalMax">
            <summary> Default Slow Reconnect interval in milliseconds.</summary>
        </member>
        <member name="F:AsterNET.Manager.ManagerConnection.UseASyncEvents">
            <summary>
            Allows you to specifiy how events are fired. If false (default) then
            events will be fired in order. Otherwise events will be fired as they arrive and 
            control logic in your application will need to handle synchronization.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.UnhandledEvent">
            <summary>
            An UnhandledEvent is triggered on unknown event.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentCallbackLogin">
            <summary>
            An AgentCallbackLogin is triggered when an agent is successfully logged in.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentCallbackLogoff">
            <summary>
            An AgentCallbackLogoff is triggered when an agent that previously logged in is logged of.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentCalled">
            <summary>
            An AgentCalled is triggered when an agent is ring.<br/>
            To enable AgentCalled you have to set eventwhencalled = yes in queues.conf.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentComplete">
            <summary>
            An AgentCompleteEvent is triggered when at the end of a call if the caller was connected to an agent.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentConnect">
            <summary>
            An AgentConnectEvent is triggered when a caller is connected to an agent.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentDump">
            <summary>
            An AgentDumpEvent is triggered when an agent dumps the caller while listening to the queue announcement.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentLogin">
            <summary>
            An AgentLoginEvent is triggered when an agent is successfully logged in using AgentLogin.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentLogoff">
            <summary>
            An AgentCallbackLogoffEvent is triggered when an agent that previously logged in using AgentLogin is logged of.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AgentsComplete">
            <summary>
            An AgentsCompleteEvent is triggered after the state of all agents has been reported in response to an AgentsAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Agents">
            <summary>
            An AgentsEvent is triggered for each agent in response to an AgentsAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AlarmClear">
            <summary>
            An AlarmEvent is triggered when a Zap channel leaves alarm state.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Bridge">
            <summary>
            
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Alarm">
            <summary>
            An AlarmEvent is triggered when a Zap channel enters or changes alarm state.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Cdr">
            <summary>
            A CdrEvent is triggered when a call detail record is generated, usually at the end of a call.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Dial">
            <summary>
            A Dial is triggered whenever a phone attempts to dial someone.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.DNDState">
            <summary>
            A DNDStateEvent is triggered by the Zap channel driver when a channel enters or leaves DND (do not disturb) state.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ExtensionStatus">
            <summary>
            An ExtensionStatus is triggered when the state of an extension changes.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Hangup">
            <summary>
            A Hangup is triggered when a channel is hung up.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.HoldedCall">
            <summary>
            A HoldedCall is triggered when a channel is put on hold.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Hold">
            <summary>
            A Hold is triggered by the SIP channel driver when a channel is put on hold.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Join">
            <summary>
            A Join is triggered when a channel joines a queue.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Leave">
            <summary>
            A Leave is triggered when a channel leaves a queue.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Link">
            <summary>
            A Link is triggered when two voice channels are linked together and voice data exchange commences.<br/>
            Several Link events may be seen for a single call. This can occur when Asterisk fails to setup a
            native bridge for the call.This is when Asterisk must sit between two telephones and perform
            CODEC conversion on their behalf.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.LogChannel">
            <summary>
            A LogChannel is triggered when logging is turned on or off.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.MeetMeJoin">
            <summary>
            A MeetMeJoin is triggered if a channel joins a meet me conference.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.MeetMeLeave">
            <summary>
            A MeetMeLeave is triggered if a channel leaves a meet me conference.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.MeetMeTalking">
            <summary>
            A MeetMeTalkingEvent is triggered when a user starts talking in a meet me conference.<br/>
            To enable talker detection you must pass the option 'T' to the MeetMe application.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.MessageWaiting">
            <summary>
            A MessageWaiting is triggered when someone leaves voicemail.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.NewCallerId">
            <summary>
            A NewCallerId is triggered when the caller id of a channel changes.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.NewChannel">
            <summary>
            A NewChannel is triggered when a new channel is created.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.NewExten">
            <summary>
            A NewExten is triggered when a channel is connected to a new extension.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.NewState">
            <summary>
            A NewState is triggered when the state of a channel has changed.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.OriginateResponse">
            <summary>
            An OriginateResponse is triggered when the execution of an Originate.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ParkedCall">
            <summary>
            A ParkedCall is triggered when a channel is parked (in this case no
            action id is set) and in response to a ParkedCallsAction.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ParkedCallGiveUp">
            <summary>
            A ParkedCallGiveUp is triggered when a channel that has been parked is hung up.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ParkedCallsComplete">
            <summary>
            A ParkedCallsComplete is triggered after all parked calls have been reported in response to a ParkedCallsAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ParkedCallTimeOut">
            <summary>
            A ParkedCallTimeOut is triggered when call parking times out for a given channel.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.PeerEntry">
            <summary>
            A PeerEntry is triggered in response to a SIPPeersAction or SIPShowPeerAction and contains information about a peer.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.PeerlistComplete">
            <summary>
            A PeerlistComplete is triggered after the details of all peers has been reported in response to an SIPPeersAction or SIPShowPeerAction.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.PeerStatus">
            <summary>
            A PeerStatus is triggered when a SIP or IAX client attempts to registrer at this asterisk server.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueCallerAbandon">
            <summary>
            A QueueEntryEvent is triggered in response to a QueueStatusAction and contains information about an entry in a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueEntry">
            <summary>
            A QueueEntryEvent is triggered in response to a QueueStatusAction and contains information about an entry in a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMemberAdded">
            <summary>
            A QueueMemberAddedEvent is triggered when a queue member is added to a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMember">
            <summary>
            A QueueMemberEvent is triggered in response to a QueueStatusAction and contains information about a member of a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMemberPaused">
            <summary>
            A QueueMemberPausedEvent is triggered when a queue member is paused or unpaused.
            <b>Replaced by : </b> <see cref="T:AsterNET.Manager.Event.QueueMemberPauseEvent"/> since <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.<br/>
            <b>Removed since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+Documentation" target="_blank" alt="Asterisk 13 wiki docs">Asterisk 13</see>.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMemberRemoved">
            <summary>
            A QueueMemberRemovedEvent is triggered when a queue member is removed from a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMemberStatus">
            <summary>
            A QueueMemberStatusEvent shows the status of a QueueMemberEvent.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueParams">
            <summary>
            A QueueParamsEvent is triggered in response to a QueueStatusAction and contains the parameters of a queue.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueStatusComplete">
            <summary>
            A QueueStatusCompleteEvent is triggered after the state of all queues has been reported in response to a QueueStatusAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Registry">
            <summary>
            A Registry is triggered when this asterisk server attempts to register
            as a client at another SIP or IAX server.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Rename">
            <summary>
            A RenameEvent is triggered when the name of a channel is changed.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.StatusComplete">
            <summary>
            A StatusCompleteEvent is triggered after the state of all channels has been reported in response to a StatusAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Status">
            <summary>
            A StatusEvent is triggered for each active channel in response to a StatusAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Transfer">
            <summary>
            
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Unhold">
            <summary>
            An UnholdEvent is triggered by the SIP channel driver when a channel is no longer put on hold.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.Unlink">
            <summary>
            An UnlinkEvent is triggered when a link between two voice channels is discontinued, for example, just before call completion.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.UnparkedCall">
            <summary>
            A UnparkedCallEvent is triggered when a channel that has been parked is resumed.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.UserEvents">
            <summary>
            A ZapShowChannelsEvent is triggered on UserEvent in dialplan.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ZapShowChannelsComplete">
            <summary>
            A ZapShowChannelsCompleteEvent is triggered after the state of all zap channels has been reported in response to a ZapShowChannelsAction.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ZapShowChannels">
            <summary>
            A ZapShowChannelsEvent is triggered in response to a ZapShowChannelsAction and shows the state of a zap channel.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConnectionState">
            <summary>
            A ConnectionState is triggered after Connect/Disconnect/Reload/Shutdown events.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.VarSet">
            <summary>
            When a variable is set
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.AGIExec">
            <summary>
            AgiExec is execute
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConfbridgeStart">
            <summary>
            This event is sent when the first user requests a conference and it is instantiated
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConfbridgeJoin">
            <summary>
            This event is sent when a user joins a conference - either one already in progress or as the first user to join a newly instantiated bridge.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConfbridgeLeave">
            <summary>
            This event is sent when a user leaves a conference.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConfbridgeEnd">
            <summary>
            This event is sent when the last user leaves a conference and it is torn down.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ConfbridgeTalking">
            <summary>
            This event is sent when the conference detects that a user has either begin or stopped talking.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.FailedACL">
            <summary>
            
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.DialBegin">
            <summary>
            Raised when a dial action has started.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.DialEnd">
            <summary>
            Raised when a dial action has completed.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueCallerJoin">
            <summary>
            Raised when a caller joins a Queue.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueCallerLeave">
            <summary>
            Raised when a caller leaves a Queue.<br/>
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.QueueMemberPause">
            <summary>
            A QueueMemberPauseEvent is triggered when a queue member is paused or unpaused.<br />
            <b>Available since : </b> <see href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Documentation" target="_blank" alt="Asterisk 12 wiki docs">Asterisk 12</see>.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ChallengeResponseFailed">
            <summary>
            A ChallengeResponseFailed is triggered when a request's attempt to authenticate has been challenged, and the request failed the authentication challenge.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.InvalidAccountID">
            <summary>
            A InvalidAccountID is triggered when a request fails an authentication check due to an invalid account ID.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.DeviceStateChanged">
            <summary>
            A DeviceStateChanged is triggered when a device state changes.
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.ChallengeSent">
            <summary>
            A ChallengeSent is triggered when an Asterisk service sends an authentication challenge to a request..
            </summary>
        </member>
        <member name="E:AsterNET.Manager.ManagerConnection.SuccessfulAuth">
            <summary>
            A SuccessfulAuth is triggered when a request successfully authenticates with a service.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.#ctor">
            <summary> Creates a new instance.</summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance with the given connection parameters.
            </summary>
            <param name="hostname">the hosname of the Asterisk server to connect to.</param>
            <param name="port">the port where Asterisk listens for incoming Manager API connections, usually 5038.</param>
            <param name="username">the username to use for login</param>
            <param name="password">the password to use for login</param>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.#ctor(System.String,System.Int32,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new instance with the given connection parameters.
            </summary>
            <param name="hostname">the hosname of the Asterisk server to connect to.</param>
            <param name="port">the port where Asterisk listens for incoming Manager API connections, usually 5038.</param>
            <param name="username">the username to use for login</param>
            <param name="password">the password to use for login</param>
            <param name="socketEncoding">text encoding to asterisk input/output stream</param>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.ReconnectRetryFast">
            <summary>
            Default Fast Reconnect retry counter.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.ReconnectRetryMax">
            <summary> Default Maximum Reconnect retry counter.</summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.ReconnectIntervalFast">
            <summary> Default Fast Reconnect interval in milliseconds.</summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.ReconnectIntervalMax">
            <summary> Default Slow Reconnect interval in milliseconds.</summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.FireAllEvents">
            <summary>
            If this property set to <b>true</b> then ManagerConnection send all unassigned events to UnhandledEvent handler,<br/>
            if set to <b>false</b> then all unassgned events lost and send only UnhandledEvent.<br/>
            Default: <b>false</b>
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.PingInterval">
            <summary>
            Timeout from Ping to Pong. If no Pong received send Disconnect event. Set to zero to disable.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.Hostname">
            <summary> Sets the hostname of the asterisk server to connect to.<br/>
            Default is localhost.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.Port">
            <summary>
            Sets the port to use to connect to the asterisk server. This is the port
            specified in asterisk's manager.conf file.<br/>
            Default is 5038.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.Username">
            <summary>
            Sets the username to use to connect to the asterisk server. This is the
            username specified in asterisk's manager.conf file.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.Password">
            <summary>
            Sets the password to use to connect to the asterisk server. This is the
            password specified in asterisk's manager.conf file.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.DefaultResponseTimeout">
            <summary> Sets the time in milliseconds the synchronous method
            will wait for a response before throwing a TimeoutException.<br/>
            Default is 2000.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.DefaultEventTimeout">
            <summary> Sets the time in milliseconds the synchronous method
            will wait for a response and the last response event before throwing a TimeoutException.<br/>
            Default is 5000.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.SleepTime">
            <summary> Sets the time in milliseconds the synchronous methods
            SendAction(Action.ManagerAction) and
            SendAction(Action.ManagerAction, long) will sleep between two checks
            for the arrival of a response. This value should be rather small.<br/>
            The sleepTime attribute is also used when checking for the protocol
            identifer.<br/>
            Default is 50.
            </summary>
            <deprecated> this has been replaced by an interrupt based response checking approach.</deprecated>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.KeepAliveAfterAuthenticationFailure">
            <summary> Set to true to try reconnecting to ther asterisk serve
            even if the reconnection attempt threw an AuthenticationFailedException.<br/>
            Default is false.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.KeepAlive">
            <summary>
            Should we attempt to reconnect when the connection is lost?<br/>
            This is set to true after successful login and to false after logoff or after an authentication failure when keepAliveAfterAuthenticationFailure is false.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.ManagerConnection.SocketEncoding">
            <summary>
            Socket Encoding - default ASCII
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.login(System.Int32)">
            <summary>
            Does the real login, following the steps outlined below.<br/>
            Connects to the asterisk server by calling connect() if not already connected<br/>
            Waits until the protocol identifier is received. This is checked every sleepTime ms but not longer than timeout ms in total.<br/>
            Sends a ChallengeAction requesting a challenge for authType MD5.<br/>
            When the ChallengeResponse is received a LoginAction is sent using the calculated key (MD5 hash of the password appended to the received challenge).<br/>
            </summary>
            <param name="timeout">the maximum time to wait for the protocol identifier (in ms)</param>
            <throws>
            AuthenticationFailedException if username or password are incorrect and the login action returns an error or if the MD5
            hash cannot be computed. The connection is closed in this case.
            </throws>
            <throws>
            TimeoutException if a timeout occurs either while waiting for the
            protocol identifier or when sending the challenge or login
            action. The connection is closed in this case.
            </throws>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.disconnect(System.Boolean)">
            <summary> Closes the socket connection.</summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.reconnect(System.Boolean)">
            <summary>
            Reconnects to the asterisk server when the connection is lost.<br/>
            While keepAlive is true we will try to reconnect.
            Reconnection attempts will be stopped when the logoff() method
            is called or when the login after a successful reconnect results in an
            AuthenticationFailedException suggesting that the manager
            credentials have changed and keepAliveAfterAuthenticationFailure is not set.<br/>
            This method is called when a DisconnectEvent is received from the reader.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.createInternalActionId">
            <summary>
            Creates a new unique internal action id based on the hash code of this connection and a sequence.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.Login">
            <summary>
            Logs in to the Asterisk manager using asterisk's MD5 based
            challenge/response protocol. The login is delayed until the protocol
            identifier has been received by the reader.
            </summary>
            <throws>  AuthenticationFailedException if the username and/or password are incorrect</throws>
            <throws>  TimeoutException if no response is received within the specified timeout period</throws>
            <seealso cref="T:AsterNET.Manager.Action.ChallengeAction"/>
            <seealso cref="T:AsterNET.Manager.Action.LoginAction"/>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.Login(System.Int32)">
            <summary>
            Log in to the Asterisk manager using asterisk's MD5 based
            challenge/response protocol. The login is delayed until the protocol
            identifier has been received by the reader.
            </summary>
            <param name="timeout">Timeout in milliseconds to login.</param>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.IsConnected">
            <summary> Returns true if there is a socket connection to the
            asterisk server, false otherwise.
            
            </summary>
            <returns> true if there is a socket connection to the
            asterisk server, false otherwise.
            </returns>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.Logoff">
            <summary>
            Sends a LogoffAction and disconnects from the server.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.SendAction(AsterNET.Manager.Action.ManagerAction)">
            <summary>
            Send Action with default timeout.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.SendAction(AsterNET.Manager.Action.ManagerAction,System.Int32)">
            <summary>
            Send action ans with timeout (milliseconds)
            </summary>
            <param name="action">action to send</param>
            <param name="timeout">timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.SendEventGeneratingAction(AsterNET.Manager.Action.ManagerActionEvent,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="timeout">wait timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.RegisterUserEventClass(System.Type)">
            <summary>
            Register User Event Class
            </summary>
            <param name="userEventClass"></param>
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.DispatchResponse(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is called by the reader whenever a ManagerResponse is
            received. The response is dispatched to the associated <see cref="!:IManagerResponseHandler"/>ManagerResponseHandler.
            </summary>
            <param name="response">the response received by the reader</param>
            <seealso cref="T:AsterNET.Manager.ManagerReader" />
        </member>
        <member name="M:AsterNET.Manager.ManagerConnection.DispatchEvent(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is called by the reader whenever a ManagerEvent is received.
            The event is dispatched to all registered ManagerEventHandlers.
            </summary>
            <param name="e">the event received by the reader</param>
            <seealso cref="T:AsterNET.Manager.ManagerReader"/>
        </member>
        <member name="T:AsterNET.Manager.EventTimeoutException">
            <summary>
            An EventTimeoutException is thrown if a ManagerResponse or some
            ResponseEvents are not completely received within the expected time period.<br/>
            This exception allows you to retrieve the partial result, that is the events
            that have been successfully received before the timeout occured.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.EventTimeoutException.PartialResult">
            <summary>
            Returns the partial result that has been received before the timeout occured.<br/>
            Note: Using the partial result in your application should be avoided
            wherever possible. This is only a hack to handle those versions of
            Asterisk that don't follow the Manager API conventions, for example by
            not sending the correct ActionCompleteEvent.
            </summary>
            <returns>
            the ResponseEvents object filled with the parts that have been
            received before the timeout occured. Note: The response attribute
            may be null when no response has been received.
            </returns>
        </member>
        <member name="M:AsterNET.Manager.EventTimeoutException.#ctor(System.String,AsterNET.Manager.ResponseEvents)">
            <summary>
            Creates a new EventTimeoutException with the given message and partial result.
            </summary>
            <param name="message">message with details about the timeout.</param>
            <param name="partialResult">the ResponseEvents object filled with the parts that
            have been received before the timeout occured.
            </param>
        </member>
        <member name="T:AsterNET.Manager.ManagerException">
            <summary>
            An ManagerException is thrown when a Manager Error Response.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerException.#ctor(System.String)">
            <summary>
            Creates a new ManagerException with the given message.
            </summary>
            <param name="message">message describing the manager exception</param>
        </member>
        <member name="M:AsterNET.Manager.ManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new ManagerException with the given message and cause.
            </summary>
            <param name="message">message describing the manager exception</param>
            <param name="cause">exception that caused the manager exception</param>
        </member>
        <member name="T:AsterNET.Manager.ManagerReader">
            <summary>
                Default implementation of the ManagerReader interface.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerReader.#ctor(AsterNET.Manager.ManagerConnection)">
            <summary>
                Creates a new ManagerReader.
            </summary>
            <param name="dispatcher">the dispatcher to use for dispatching events and responses.</param>
        </member>
        <member name="P:AsterNET.Manager.ManagerReader.Socket">
            <summary>
                Sets the socket to use for reading from the asterisk server.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ManagerReader.mrReaderCallbback(System.IAsyncResult)">
            <summary>
            Async Read callback
            </summary>
            <param name="ar">IAsyncResult</param>
        </member>
        <member name="M:AsterNET.Manager.ManagerReader.Run">
            <summary>
            Reads line by line from the asterisk server, sets the protocol identifier as soon as it is
            received and dispatches the received events and responses via the associated dispatcher.
            </summary>
            <seealso cref="M:AsterNET.Manager.ManagerConnection.DispatchEvent(AsterNET.Manager.Event.ManagerEvent)" />
            <seealso cref="M:AsterNET.Manager.ManagerConnection.DispatchResponse(AsterNET.Manager.Response.ManagerResponse)" />
            <seealso cref="!:ManagerConnection.setProtocolIdentifier(String)" />
        </member>
        <member name="P:AsterNET.Manager.Originate.Account">
            <summary>
                Get/Set the account code to use for the originated call.
                The account code is included in the call detail record generated for this
                call and will be used for billing.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.CallerId">
            <summary>
                Get/Set the caller id to set on the outgoing channel.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Channel">
            <summary>
                Get/Set the name of the channel to connect to the outgoing call.
                This property is required.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Context">
            <summary>
                Get/Set the name of the context of the extension to connect to.
                If you set the context you also have to set the exten and priority properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Exten">
            <summary>
                Get/Set the extension to connect to.
                If you set the extension you also have to set the context and priority properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Priority">
            <summary>
                Get/Set the priority of the extension to connect to. If you set the priority
                you also have to set the context and exten properties.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Application">
            <summary>
                Get/Set the name of the application to connect to.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Data">
            <summary>
                Get/Set the parameters to pass to the application.
            </summary>
        </member>
        <member name="P:AsterNET.Manager.Originate.Timeout">
            <summary>
                Get/Set the timeout for the origination (in seconds) for the origination.<br />
                The channel must be answered within this time, otherwise the origination
                is considered to have failed and an OriginateFailureEvent is generated.<br />
                If not set, a default value of 30 seconds.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Originate.GetVariables">
            <summary>
                Get the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Originate.SetVariables(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Set the variables dictionary to set on the originated call.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Originate.GetVariable(System.String)">
            <summary>
                Gets a variable on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.Originate.SetVariable(System.String,System.String)">
            <summary>
                Sets a variable dictionary on the originated call. Replaces any existing variable with the same name.
            </summary>
        </member>
        <member name="T:AsterNET.Manager.ResponseEventHandler">
            <summary>
                A combinded event and response handler that adds received events and the response to a ResponseEvents object.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ResponseEventHandler.#ctor(AsterNET.Manager.ManagerConnection,AsterNET.Manager.Action.ManagerActionEvent,System.Threading.AutoResetEvent)">
            <summary>
                Creates a new instance.
            </summary>
            <param name="events">the ResponseEvents to store the events in</param>
            <param name="actionCompleteEventClass">the type of event that indicates that all events have been received</param>
            <param name="thread">the thread to interrupt when the actionCompleteEventClass has been received</param>
        </member>
        <member name="T:AsterNET.Manager.ResponseEvents">
            <summary>
                Collection of ResponseEvent. Use in events generation actions.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ResponseEvents.#ctor">
            <summary> Creates a new instance.</summary>
        </member>
        <member name="P:AsterNET.Manager.ResponseEvents.Complete">
            <summary>
                Indicats if all events have been received.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ResponseEvents.AddEvent(AsterNET.Manager.Event.ResponseEvent)">
            <summary>
                Adds a ResponseEvent that has been received.
            </summary>
            <param name="e">the ResponseEvent that has been received.</param>
        </member>
        <member name="T:AsterNET.Manager.ResponseHandler">
            <summary>
                A simple response handler that stores the received response in a ResponseHandlerResult for further processing.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.ResponseHandler.#ctor(AsterNET.Manager.Action.ManagerAction,System.Threading.AutoResetEvent)">
            <summary>
                Creates a new instance.
            </summary>
            <param name="result">the result to store the response in</param>
            <param name="thread">the thread to interrupt when the response has been received</param>
        </member>
        <member name="T:AsterNET.Manager.IResponseHandler">
            <summary>
                An Interface to handle responses received from an asterisk server.
            </summary>
            <seealso cref="T:AsterNET.Manager.Response.ManagerResponse" />
        </member>
        <member name="M:AsterNET.Manager.IResponseHandler.HandleResponse(AsterNET.Manager.Response.ManagerResponse)">
            <summary>
                This method is called when a response is received.
            </summary>
            <param name="response">the response received</param>
        </member>
        <member name="T:AsterNET.Manager.TimeoutException">
            <summary>
            A TimeoutException is thrown if a ManagerResponse is not received within the expected time period.
            </summary>
        </member>
        <member name="M:AsterNET.Manager.TimeoutException.#ctor(System.String)">
            <summary>
            Creates a new TimeoutException with the given message.
            </summary>
            <param name="message">message with details about the timeout.</param>
        </member>
        <member name="T:AsterNET.Util.MD5Support">
            <summary>
                Encapsulates the functionality of message digest algorithms such as SHA-1 or MD5.
            </summary>
        </member>
        <member name="M:AsterNET.Util.MD5Support.#ctor(System.String)">
            <summary>
                Creates a message digest using the specified name to set Algorithm property.
            </summary>
            <param name="algorithm">The name of the algorithm to use</param>
        </member>
        <member name="P:AsterNET.Util.MD5Support.DigestData">
            <summary>
                Computes the hash value for the internal data digest.
            </summary>
            <returns>The array of signed bytes with the resulting hash value</returns>
        </member>
        <member name="M:AsterNET.Util.MD5Support.Update(System.Byte[])">
            <summary>
                Updates the digest data with the specified array of bytes by making an append
                operation in the internal array of data.
            </summary>
            <param name="newData">The array of bytes for the update operation</param>
        </member>
        <member name="M:AsterNET.Util.MD5Support.GetInstance(System.String)">
            <summary>
                Generates a new instance of the MessageDigestSupport class using the specified algorithm
            </summary>
            <param name="algorithm">The name of the algorithm to use</param>
            <returns>A new instance of the MessageDigestSupport class</returns>
        </member>
        <member name="M:AsterNET.Util.MD5Support.GetInstance">
            <summary>
                Generates a new instance of the MessageDigestSupport class using the specified algorithm
            </summary>
            <returns>A new instance of the MD5 algorithm class</returns>
        </member>
        <member name="T:AsterNET.Util.ThreadClass">
            <summary>
            Support class used to handle threads
            </summary>
        </member>
        <member name="F:AsterNET.Util.ThreadClass.thread">
            <summary>The instance of Threading.Thread</summary>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.#ctor">
            <summary>
            Initializes a new instance of the ThreadClass class
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Name">The name of the thread</param>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
            <param name="name">The name of the thread</param>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.Run">
            <summary>
            This method has no functionality unless the method is overridden
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.Start">
            <summary>
            Causes the operating system to change the state of the current thread instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadClass.Interrupt">
            <summary>
            Interrupts a thread that is in the WaitSleepJoin thread state
            </summary>
        </member>
        <member name="P:AsterNET.Util.ThreadClass.Name">
            <summary>
            Gets or sets the name of the thread
            </summary>
        </member>
        <member name="P:AsterNET.Util.ThreadClass.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread
            </summary>
        </member>
        <member name="P:AsterNET.Util.ThreadClass.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="T:AsterNET.Util.ThreadPool">
            <summary>
            A fixed sized thread pool.
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadPool.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ThreadPool of numThreads size. These Threads are waiting
            for jobs to be added via the addJob method.
            </summary>
            <param name="name">the name to use for the thread group and worker threads.</param>
            <param name="numThreads">the number of threads to create.</param>
        </member>
        <member name="M:AsterNET.Util.ThreadPool.obtainJob">
            <summary>
            Gets a job from the queue. If none is availble the calling thread is
            blocked until one is added.
            </summary>
            <returns>the next job to service, null if the worker thread should be shut down.</returns>
        </member>
        <member name="M:AsterNET.Util.ThreadPool.AddJob(AsterNET.FastAGI.AGIConnectionHandler)">
            <summary> Adds a new job to the queue. This will be picked up by the next available
            active thread.
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadPool.Shutdown">
            <summary> Turn off the pool. Every thread, when finished with its current work,
            will realize that the pool is no longer running, and will exit.
            </summary>
        </member>
        <member name="T:AsterNET.Util.ThreadTask">
            <summary>
            A TaskThread sits in a loop, asking the pool for a job, and servicing it.
            </summary>
        </member>
        <member name="M:AsterNET.Util.ThreadTask.Run">
            <summary>
            Get a job from the pool, run it, repeat. If the obtained job is null, we exit the loop and the thread.
            </summary>
        </member>
        <member name="F:AsterNET.Helper.hexChar">
            <summary> The hex digits used to build a hex string representation of a byte array.</summary>
        </member>
        <member name="M:AsterNET.Helper.ToHexString(System.SByte[])">
            <summary>
                Converts a byte array to a hex string representing it. The hex digits are lower case.
            </summary>
            <param name="b">the byte array to convert</param>
            <returns> the hex representation of b</returns>
        </member>
        <member name="M:AsterNET.Helper.IsTrue(System.String)">
            <summary>
                Checks if a String represents true or false according to Asterisk's logic.<br />
                The original implementation is util.c is as follows:
            </summary>
            <param name="s">the String to check for true.</param>
            <returns>
                true if s represents true,
                false otherwise.
            </returns>
        </member>
        <member name="M:AsterNET.Helper.URShift(System.Int32,System.Int32)">
            <summary>
                Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:AsterNET.Helper.URShift(System.Int32,System.Int64)">
            <summary>
                Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:AsterNET.Helper.URShift(System.Int64,System.Int32)">
            <summary>
                Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:AsterNET.Helper.URShift(System.Int64,System.Int64)">
            <summary>
                Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:AsterNET.Helper.ToArray(System.Collections.ICollection,System.Object[])">
            <summary>
                Obtains an array containing all the elements of the collection.
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <param name="c"></param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:AsterNET.Helper.ParseVariables(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Char[])">
            <summary>
                Parse variable(s) string to dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="variables">variable(a) string</param>
            <param name="delim">variable pairs delimiter</param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Helper.JoinVariables(System.Collections.IDictionary,System.Char[],System.String)">
            <summary>
                Join variables dictionary to string.
            </summary>
            <param name="dictionary"></param>
            <param name="delim"></param>
            <param name="delimKeyValue"></param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Helper.GetGetters(System.Type)">
            <summary>
                Returns a Map of getter methods of the given class.<br />
                The key of the map contains the name of the attribute that can be accessed by the getter, the
                value the getter itself . A method is considered a getter if its name starts with "get",
                it is declared internal and takes no arguments.
            </summary>
            <param name="clazz">the class to return the getters for</param>
            <returns> a Map of attributes and their accessor methods (getters)</returns>
        </member>
        <member name="M:AsterNET.Helper.GetSetters(System.Type)">
            <summary>
                Returns a Map of setter methods of the given class.<br />
                The key of the map contains the name of the attribute that can be accessed by the setter, the
                value the setter itself. A method is considered a setter if its name starts with "set",
                it is declared internal and takes no arguments.
            </summary>
            <param name="clazz">the class to return the setters for</param>
            <returns> a Map of attributes and their accessor methods (setters)</returns>
        </member>
        <member name="M:AsterNET.Helper.ToString(System.Object)">
            <summary>
                Convert object with all properties to string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AsterNET.Helper.stripIllegalCharacters(System.String)">
            <summary>
                Strips all illegal charaters from the given lower case string.
            </summary>
            <param name="s">the original string</param>
            <returns>the string with all illegal characters stripped</returns>
        </member>
        <member name="M:AsterNET.Helper.BuildResponse(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Constructs an instance of ManagerResponse based on a map of attributes.
            </summary>
            <param name="attributes">the attributes and their values. The keys of this map must be all lower case.</param>
            <returns>the response with the given attributes.</returns>
        </member>
        <member name="M:AsterNET.Helper.BuildEvent(System.Collections.Generic.IDictionary{System.Int32,System.Reflection.ConstructorInfo},AsterNET.Manager.ManagerConnection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Builds the event based on the given map of attributes and the registered event classes.
            </summary>
            <param name="source">source attribute for the event</param>
            <param name="list"></param>
            <param name="attributes">map containing event attributes</param>
            <returns>a concrete instance of ManagerEvent or null if no event class was registered for the event type.</returns>
        </member>
        <member name="M:AsterNET.Helper.RegisterBuiltinEventClasses(System.Collections.Generic.Dictionary{System.Int32,System.Reflection.ConstructorInfo})">
            <summary>
                Register buildin Event classes
            </summary>
            <param name="list"></param>
        </member>
    </members>
</doc>
